var AdminBro = (function (React, reactRedux, reactRouterDom, styled, redux, axios, reactDom, PropTypes$1, reactRouter) {
	'use strict';

	var React__default = 'default' in React ? React['default'] : React;
	var styled__default = 'default' in styled ? styled['default'] : styled;
	axios = axios && axios.hasOwnProperty('default') ? axios['default'] : axios;
	var reactDom__default = 'default' in reactDom ? reactDom['default'] : reactDom;
	PropTypes$1 = PropTypes$1 && PropTypes$1.hasOwnProperty('default') ? PropTypes$1['default'] : PropTypes$1;

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var runtime_1 = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[toStringTagSymbol] = "Generator";

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	var regenerator = runtime_1;

	let globalAny = {};

	try {
	  globalAny = window;
	} catch (error) {
	  if (error.message !== 'window is not defined') {
	    throw error;
	  }
	}
	/**
	 * Params for a record action
	 * @alias RecordActionParams
	 * @memberof ViewHelpers
	 */


	/**
	 * Collection of helper methods available in the views
	 */
	class ViewHelpers {
	  constructor({
	    options
	  } = {}) {
	    let opts = ViewHelpers.getPaths(options);
	    opts = opts || {
	      rootPath: '/admin'
	    }; // when ViewHelpers are used on the frontend, paths are taken from global Redux State

	    this.options = opts;
	  }

	  static getPaths(options) {
	    return options || globalAny.REDUX_STATE && globalAny.REDUX_STATE.paths;
	  }
	  /**
	   * To each related path adds rootPath passed by the user, as well as a query string
	   * @private
	   * @param  {Array<string>} paths   list of parts of the url
	   * @return {string}       path
	   */


	  urlBuilder(paths) {
	    const {
	      rootPath
	    } = this.options;
	    return `${rootPath}/${paths.join('/')}`;
	  }
	  /**
	   * Returns login URL
	   * @return {string}
	   */


	  loginUrl() {
	    return this.options.loginPath;
	  }
	  /**
	   * Returns logout URL
	   * @return {string}
	   */


	  logoutUrl() {
	    return this.options.logoutPath;
	  }

	  listUrl({
	    resourceId
	  }) {
	    console.warn(`
      Deprecation: this "ViewHelpers#listUrl" will be removed in the next versions.
      Please use "resourceActionUrl({ resourceId, actionName: 'list'})"
      instead`);
	    return this.resourceActionUrl({
	      resourceId,
	      actionName: 'list'
	    });
	  }
	  /**
	   * Returns URL for the dashboard
	   * @return {string}
	   */


	  dashboardUrl() {
	    return this.options.rootPath;
	  }
	  /**
	   * Returns URL for given page name
	   * @param {string} pageName       page name which is a unique key specified in
	   *                                {@link AdminBroOptions}
	   * @return {string}
	   */


	  pageUrl(pageName) {
	    return this.urlBuilder(['pages', pageName]);
	  }
	  /**
	   * Returns resourceAction url
	   *
	   * @param   {ResourceActionParams}  options
	   * @param   {string}  options.resourceId
	   * @param   {string}  options.actionName
	   *
	   * @return  {string}
	   */


	  resourceActionUrl({
	    resourceId,
	    actionName
	  }) {
	    return this.urlBuilder(['resources', resourceId, 'actions', actionName]);
	  }
	  /**
	   * Returns recordAction url
	   *
	   * @param   {RecordActionParams}  options
	   * @param   {string}  options.resourceId
	   * @param   {string}  options.recordId
	   * @param   {string}  options.actionName
	   *
	   * @return  {string}
	   */


	  recordActionUrl({
	    resourceId,
	    recordId,
	    actionName
	  }) {
	    return this.urlBuilder(['resources', resourceId, 'records', recordId, actionName]);
	  }
	  /**
	   * Returns bulkAction url
	   *
	   * @param   {BulkActionParams}  options
	   * @param   {string}  options.resourceId
	   * @param   {string}  [options.recordIds]
	   * @param   {string}  options.actionName
	   *
	   * @return  {string}
	   */


	  bulkActionUrl({
	    resourceId,
	    recordIds,
	    actionName
	  }) {
	    const url = this.urlBuilder(['resources', resourceId, 'bulk', actionName]);

	    if (recordIds && recordIds.length) {
	      const query = new URLSearchParams();
	      query.append('recordIds', recordIds.join(','));
	      return `${url}?${query.toString()}`;
	    }

	    return url;
	  }
	  /**
	   * Returns absolute path to a given asset.
	   * @private
	   *
	   * @param  {string} asset
	   * @return {string}
	   */


	  assetPath(asset) {
	    return this.urlBuilder(['frontend', 'assets', asset]);
	  }

	}

	const LogoLink = styled__default(reactRouterDom.Link).withConfig({
	  displayName: "sidebar-branding__LogoLink",
	  componentId: "sc-1ozeetj-0"
	})(["display:flex;align-items:center;color:", ";font-weight:bold;span{font-size:20px;}"], ({
	  theme
	}) => theme.colors.defaultText);
	const LogoImage = styled__default.img.withConfig({
	  displayName: "sidebar-branding__LogoImage",
	  componentId: "sc-1ozeetj-1"
	})(["margin-right:", ";height:35px;"], ({
	  theme
	}) => theme.sizes.padding);

	const SidebarBranding = props => {
	  const {
	    branding
	  } = props;
	  const {
	    logo,
	    companyName
	  } = branding;
	  const h = new ViewHelpers();
	  return React__default.createElement(LogoLink, {
	    to: h.dashboardUrl()
	  }, logo && React__default.createElement(LogoImage, {
	    src: logo,
	    alt: companyName,
	    height: "35px",
	    width: "35px"
	  }), React__default.createElement("span", null, companyName));
	};

	const SidebarLink = styled__default(reactRouterDom.NavLink).withConfig({
	  displayName: "sidebar-linkstyled__SidebarLink",
	  componentId: "sc-13hc6f5-0"
	})(["color:", ";padding:", ";display:block;&:hover{color:", ";}&.active{color:", ";}"], ({
	  theme
	}) => theme.colors.lightText, ({
	  theme
	}) => theme.sizes.paddingMin, ({
	  theme
	}) => theme.colors.primary, ({
	  theme
	}) => theme.colors.primary);

	const SidebarResource = props => {
	  const {
	    resource
	  } = props;

	  const isActive = (match, location) => !!location.pathname.match(`/resources/${resource.id}/`);

	  return React__default.createElement("li", null, React__default.createElement(SidebarLink, {
	    to: resource.href,
	    isActive: isActive,
	    "data-testid": "sidebar-resource-link"
	  }, resource.name));
	};

	var SidebarResource$1 = reactRouterDom.withRouter(SidebarResource);

	const SidebarGroupTitle = styled__default.span.withConfig({
	  displayName: "sidebar-group-titlestyled__SidebarGroupTitle",
	  componentId: "sc-1qrf31a-0"
	})(["background:", ";padding-left:", ";padding-right:", ";line-height:40px;border-radius:", ";display:flex;align-items:baseline;color:", ";position:relative;& > i,& > svg{margin-right:", ";color:", ";margin-right:", ";}"], ({
	  theme
	}) => theme.colors.lightBck, ({
	  theme
	}) => theme.sizes.padding, ({
	  theme
	}) => theme.sizes.padding, ({
	  theme
	}) => theme.sizes.paddingLayout, ({
	  theme
	}) => theme.colors.defaultText, ({
	  theme
	}) => theme.sizes.paddingMin, ({
	  theme
	}) => theme.colors.lightText, ({
	  theme
	}) => theme.sizes.padding);

	const ResourcesList = styled__default.ul.withConfig({
	  displayName: "sidebar-parent__ResourcesList",
	  componentId: "sc-1f3abux-0"
	})(["margin:", " 0;padding-left:40px;"], ({
	  theme
	}) => theme.sizes.padding);

	class SidebarParent extends React__default.PureComponent {
	  render() {
	    const {
	      parent
	    } = this.props;
	    const {
	      icon,
	      name,
	      resources
	    } = parent;
	    return React__default.createElement("li", null, React__default.createElement(SidebarGroupTitle, null, React__default.createElement("i", {
	      className: icon
	    }), name), React__default.createElement(ResourcesList, null, resources.map(resource => React__default.createElement(SidebarResource$1, {
	      resource: resource,
	      key: resource.id
	    }))));
	  }

	}

	const StyledFooter = styled__default.p.withConfig({
	  displayName: "sidebar-footer__StyledFooter",
	  componentId: "sc-1n82yn-0"
	})(["font-size:", ";text-align:center;color:", ";& svg,& a{color:", ";margin:0  ", ";}"], ({
	  theme
	}) => theme.fonts.min, ({
	  theme
	}) => theme.colors.lightText, ({
	  theme
	}) => theme.colors.love, ({
	  theme
	}) => theme.sizes.paddingMin);

	const SidebarFooter = props => {
	  const {
	    hidden
	  } = props;

	  if (hidden) {
	    return React__default.createElement(StyledFooter, null, React__default.createElement("a", {
	      href: "http://softwarebrothers.co",
	      target: "_blank",
	      rel: "noopener noreferrer"
	    }, React__default.createElement("i", {
	      className: "fas fa-heart fa-2x"
	    })));
	  }

	  return React__default.createElement(StyledFooter, null, React__default.createElement("span", null, "With", React__default.createElement("i", {
	    className: "fas fa-heart"
	  }), "by", React__default.createElement("a", {
	    href: "http://softwarebrothers.co",
	    target: "_blank",
	    rel: "noopener noreferrer"
	  }, "SoftwareBrothers")));
	};

	const SidebarLabel = styled__default.h2.withConfig({
	  displayName: "sidebar-labelstyled__SidebarLabel",
	  componentId: "j35xu0-0"
	})(["margin-top:", ";margin-left:", ";margin-bottom:", ";color:", ";font-size:", ";text-transform:uppercase;letter-spacing:.1em;"], ({
	  theme
	}) => theme.sizes.padding, ({
	  theme
	}) => theme.sizes.padding, ({
	  theme
	}) => theme.sizes.padding, ({
	  theme
	}) => theme.colors.lightText, ({
	  theme
	}) => theme.fonts.min);

	const SidebarSection = styled__default.section.withConfig({
	  displayName: "sidebar-sectionstyled__SidebarSection",
	  componentId: "sc-1hmyctm-0"
	})(["padding:", ";width:", ";transition:padding 0.5s;& > section{opacity:1;transition:opacity 0.5s;}"], ({
	  theme
	}) => `${theme.sizes.padding} ${theme.sizes.paddingLayout}`, ({
	  theme
	}) => theme.sizes.sidebarWidth);

	const PagesListWrapper = styled__default.div.withConfig({
	  displayName: "sidebar-pages__PagesListWrapper",
	  componentId: "szeyz1-0"
	})(["&&&{padding-left:10px;}"]);

	const SidebarPages = props => {
	  const {
	    pages
	  } = props;
	  const h = new ViewHelpers();

	  if (!pages || !pages.length) {
	    return React__default.createElement(React__default.Fragment, null);
	  }

	  const isActive = (page, location) => !!location.pathname.match(`/pages/${page.name}`);

	  return React__default.createElement(SidebarSection, null, React__default.createElement(SidebarLabel, null, "Pages"), React__default.createElement(PagesListWrapper, null, pages.map(page => React__default.createElement(SidebarLink, {
	    to: h.pageUrl(page.name),
	    key: page.name,
	    isActive: (match, location) => isActive(page, location),
	    "data-testid": "sidebar-page-link"
	  }, page.label))));
	};

	/* eslint-disable no-param-reassign */
	var groupResources = (resources => {
	  const visibleResources = resources.filter(res => res.resourceActions.find(a => a.name === 'list'));
	  const map = visibleResources.reduce((memo, resource) => {
	    if (memo[resource.parent.name]) {
	      memo[resource.parent.name].push(resource);
	    } else {
	      memo[resource.parent.name] = [resource];
	    }

	    memo[resource.parent.name].icon = resource.parent.icon;
	    return memo;
	  }, {});
	  return Object.keys(map).map(parentName => ({
	    name: parentName,
	    icon: map[parentName].icon,
	    resources: map[parentName]
	  }));
	});

	const StyledHamburger = styled__default.a.withConfig({
	  displayName: "hamburger__StyledHamburger",
	  componentId: "o1hcva-0"
	})(["cursor:pointer;display:block;float:left;width:48px;height:32px;padding:10px ", ";position:relative;z-index:10;& > div{width:100%;height:2px;background-color:", ";margin-bottom:3px;}"], ({
	  theme
	}) => theme.sizes.padding, ({
	  theme
	}) => theme.colors.defaultText);

	const Hamburger = props => React__default.createElement(StyledHamburger, props, React__default.createElement("div", null), React__default.createElement("div", null), React__default.createElement("div", null));

	const SidebarWrapper = styled__default.aside.withConfig({
	  displayName: "sidebar-wrapperstyled__SidebarWrapper",
	  componentId: "sc-1ohnoa0-0"
	})(["display:flex;flex-shrink:0;flex-direction:column;justify-content:space-between;height:100%;overflow-y:auto;overflow-x:hidden;background:", ";border-right:1px solid ", ";width:", ";transition:width 0.5s;&.hidden{width:50px;transition:width 0.5s;overflow:hidden;& > section{padding:", " 4px;transition:padding 0.5s;& > section{opacity:0;transition:opacity 0.5s;}}}"], ({
	  theme
	}) => theme.colors.bck, ({
	  theme
	}) => theme.colors.border, ({
	  theme
	}) => theme.sizes.sidebarWidth, ({
	  theme
	}) => theme.sizes.padding);

	const Sidebar = props => {
	  const {
	    branding,
	    resources,
	    pages
	  } = props;
	  const [hidden, setHidden] = React.useState(false);
	  return React__default.createElement(SidebarWrapper, {
	    className: hidden ? 'hidden' : 'active'
	  }, React__default.createElement(SidebarSection, null, React__default.createElement(Hamburger, {
	    onClick: () => setHidden(!hidden)
	  }), React__default.createElement(SidebarBranding, {
	    branding: branding
	  })), React__default.createElement(SidebarSection, {
	    style: {
	      flexGrow: 1
	    }
	  }, React__default.createElement(SidebarLabel, null, "Navigation"), React__default.createElement("ul", null, groupResources(resources).map(parent => React__default.createElement(SidebarParent, {
	    parent: parent,
	    key: parent.name
	  })))), React__default.createElement(SidebarPages, {
	    pages: pages
	  }), branding.softwareBrothers && React__default.createElement(SidebarFooter, {
	    hidden: hidden
	  }));
	};

	const mapStateToProps = state => ({
	  resources: state.resources,
	  branding: state.branding,
	  pages: state.pages
	});

	var Sidebar$1 = reactRedux.connect(mapStateToProps)(Sidebar);

	const UserBox = styled__default.div.attrs({
	  className: 'navbar-link'
	}).withConfig({
	  displayName: "logged-in__UserBox",
	  componentId: "sc-1i6tngo-0"
	})(["padding-right:", ";border-radius:50px;margin:10px 0;color:", ";img{border-radius:50%;margin-left:", ";&:after{display:none;}}"], ({
	  theme
	}) => theme.sizes.padding, ({
	  theme
	}) => theme.colors.lightText, ({
	  theme
	}) => theme.sizes.padding);
	const Dropdown = styled__default.div.attrs({
	  className: 'navbar-dropdown'
	}).withConfig({
	  displayName: "logged-in__Dropdown",
	  componentId: "sc-1i6tngo-1"
	})(["border-radius:0px;border:none;padding:0;top:95%;"]);
	const LoggedInBox = styled__default.div.attrs({
	  className: 'navbar-item has-dropdown is-hoverable navbar-user'
	}).withConfig({
	  displayName: "logged-in__LoggedInBox",
	  componentId: "sc-1i6tngo-2"
	})(["&&&:hover ", "{background-color:", ";color:", ";}&&&:hover ", "{background-color:", ";color:", ";}"], UserBox, ({
	  theme
	}) => theme.colors.superLightBack, ({
	  theme
	}) => theme.colors.lightText, Dropdown, ({
	  theme
	}) => theme.colors.superLightBack, ({
	  theme
	}) => theme.colors.lightText);
	const DropdownLink = styled__default.a.attrs({
	  className: 'navbar-item'
	}).withConfig({
	  displayName: "logged-in__DropdownLink",
	  componentId: "sc-1i6tngo-3"
	})(["&&&{padding:", ";color:", ";padding-left:40px;border:none;&:hover{border:4px ", ";padding-left:36px;border-style:none solid;color:", ";background-color:transparent;}i,svg{margin-right:", ";}}"], ({
	  theme
	}) => `${theme.sizes.padding} ${theme.sizes.paddingLayout}`, ({
	  theme
	}) => theme.colors.defaultText, ({
	  theme
	}) => theme.colors.primary, ({
	  theme
	}) => theme.colors.defaultText, ({
	  theme
	}) => theme.sizes.padding);

	const LoggedIn = props => {
	  const {
	    session,
	    paths
	  } = props;
	  return React__default.createElement(LoggedInBox, null, React__default.createElement(UserBox, null, session.email, React__default.createElement("img", {
	    src: "https://api.adorable.io/avatars/24/softwarebrothers.png",
	    alt: "user"
	  })), React__default.createElement(Dropdown, null, React__default.createElement(DropdownLink, {
	    href: paths.logoutPath
	  }, React__default.createElement("i", {
	    className: "fas fa-sign-out-alt"
	  }), "Sign out")));
	};

	/**
	 * @class
	 * Represents labels inside the application.
	 *
	 * @component
	 * @example
	 * return (
	 * <WrapperBox border>
	 *   <Label>Some Label:</Label>
	 *   <p>Text below the label</p>
	 * </WrapperBox>
	 * )
	 */

	const Label = styled__default.label.attrs({
	  className: 'label'
	}).withConfig({
	  displayName: "label__Label",
	  componentId: "odgp9z-0"
	})(["&&&{display:block;text-transform:uppercase;font-size:", ";color:", ";font-weight:normal;margin:0 0 8px 0;letter-spacing:0.1em;}"], ({
	  theme
	}) => theme.fonts.min, ({
	  theme
	}) => theme.colors.lightText);

	const VersionWrapper = styled__default.div.withConfig({
	  displayName: "version__VersionWrapper",
	  componentId: "rgspw3-0"
	})(["padding:10px 0;"]);
	const VersionBlock = styled__default.p.withConfig({
	  displayName: "version__VersionBlock",
	  componentId: "rgspw3-1"
	})(["&&&{& > label{display:inline;}}"]);

	const Version = props => {
	  const {
	    versions
	  } = props;
	  const {
	    admin,
	    app
	  } = versions;
	  return React__default.createElement(VersionWrapper, null, admin && React__default.createElement(VersionBlock, null, React__default.createElement(Label, null, "admin:"), admin), app && React__default.createElement(VersionBlock, null, React__default.createElement(Label, null, "app:"), app));
	};

	const Navbar = styled__default.nav.attrs({
	  className: 'navbar'
	}).withConfig({
	  displayName: "top-bar__Navbar",
	  componentId: "sc-1qk1nql-0"
	})(["height:", ";border-bottom:1px solid ", ";padding:0 ", ";flex-shrink:0;background:", ";"], ({
	  theme
	}) => theme.sizes.navbarHeight, ({
	  theme
	}) => theme.colors.border, ({
	  theme
	}) => theme.sizes.paddingLayout, ({
	  theme
	}) => theme.colors.bck);

	const TopBar = props => {
	  const {
	    session,
	    versions,
	    paths
	  } = props;
	  return React__default.createElement(Navbar, null, React__default.createElement("div", {
	    className: "navbar-menu"
	  }, React__default.createElement("div", {
	    className: "navbar-start"
	  }, React__default.createElement(Version, {
	    versions: versions
	  })), React__default.createElement("div", {
	    className: "navbar-end"
	  }, session && session.email ? React__default.createElement(LoggedIn, {
	    session: session,
	    paths: paths
	  }) : '')));
	};

	const mapStateToProps$1 = state => ({
	  session: state.session,
	  paths: {
	    logoutPath: state.paths.logoutPath
	  },
	  versions: state.versions
	});

	var TopBar$1 = reactRedux.connect(mapStateToProps$1)(TopBar);

	const StyledColumn = styled__default.section.attrs(({
	  width = 4,
	  offset = 0
	}) => ({
	  className: `column is-${width}-desktop is-offset-${offset}`
	})).withConfig({
	  displayName: "column__StyledColumn",
	  componentId: "d07l2a-0"
	})([""]);
	/**
	 * Colum representation in AdminBro grid. It uses [bulma](https://bulma.io/documentation/) grid.
	 *
	 * Example usage with {@link Column}
	 * ```JavaScript
	 * import { Column, Columns } from 'admin-bro'
	 * //...
	 * return (
	 *   <columns>
	 *      <column width={8}>
	 *        Some content on the left
	 *      </column>
	 *      <column width={4}>
	 *        Some content on the right
	 *      </column>
	 *   </columns>
	 *  )
	 * ```
	 *
	 * @see https://bulma.io/documentation/
	 * @see {@link Columns}
	 * @component
	 *
	 * @example <caption>Layout with text blocks by using column</caption>
	 * return (
	 *   <Columns>
	 *     <Column width={2} offset={2}>
	 *       <WrapperBox>Some wrapped text</WrapperBox>
	 *     </Column>
	 *     <Column width={3}>
	 *     <WrapperBox border>Inside Border</WrapperBox>
	 *     </Column>
	 *     <Column width={5} style={{background: '#ccc'}}>normal text</Column>
	 *   </Columns>
	 * )
	 */

	const Column = props => React__default.createElement(StyledColumn, props);

	const StyledColumns = styled__default.section.attrs({
	  className: 'columns is-multiline'
	}).withConfig({
	  displayName: "columns__StyledColumns",
	  componentId: "sc-1g5enwk-0"
	})([""]);
	/**
	 * Columns wrapper for the grid in AdminBro. It uses [bulma](https://bulma.io/documentation/) grid.
	 *
	 * Example usage with {@link Column}
	 * ```JavaScript
	 * import { Column, Columns } from 'admin-bro'
	 * //...
	 * return (
	 *   <columns>
	 *      <column width={8}>
	 *        Some content on the left
	 *      </column>
	 *      <column width={4}>
	 *        Some content on the right
	 *      </column>
	 *   </columns>
	 *  )
	 * ```
	 *
	 * @see https://bulma.io/documentation/
	 * @see Column
	 *
	 * @component
	 * @example
	 * return (
	 *   <Columns>
	 *      <Column width={8}>
	 *        Some content on the left
	 *      </Column>
	 *      <Column width={4}>
	 *        Some content on the right
	 *      </Column>
	 *   </Columns>
	 * )
	 */

	const Columns = props => React__default.createElement(StyledColumns, props);

	const Wrapper = styled__default.section.attrs({
	  className: 'content'
	}).withConfig({
	  displayName: "dashboard-header__Wrapper",
	  componentId: "sc-1rc8e45-0"
	})(["&&{padding:90px ", ";background:", ";color:#fff;margin-bottom:0;& > *{color:#fff;}p{color:#fff;}h1{color:#fff;font-size:53px;margin-bottom:4px;}}"], ({
	  theme
	}) => theme.sizes.paddingLayout, ({
	  theme
	}) => theme.colors.superDarkBck);
	/**
	 * Component which can be used as the outstanding header of the dashboard page.
	 *
	 * @component
	 * @example <caption>Empty Header with simple text</caption>
	 * return (
	 *  <DashboardHeader>
	 *    <h1>Some text inside a header</h1>
	 *    <p>Subtitle</p>
	 *  </DashboardHeader>
	 * )
	 *
	 * @example <caption>Header with overlay blocks</caption>
	 * return (
	 *   <div>
	 *     <DashboardHeader>
	 *       <h1>Overlaying text</h1>
	 *     </DashboardHeader>
	 *     <WrapperBox>
	 *       <Columns style={{marginTop: '-80px'}}>
	 *         <Column><ValueBlock  icon="fa fa-bomb" value="5">
	 *           Utils
	 *         </ValueBlock></Column>
	 *         <Column><ValueBlock  icon="fa fa-star" value="12">
	 *           Are
	 *         </ValueBlock></Column>
	 *         <Column><ValueBlock  icon="fa fa-cog" value="5" color="red">
	 *           Awesome
	 *         </ValueBlock></Column>
	 *       </Columns>
	 *     </WrapperBox>
	 *   </div>
	 * )
	 */

	const DashboardHeader = props => {
	  const {
	    children
	  } = props;
	  return React__default.createElement(Wrapper, null, children);
	};

	var _extends_1 = createCommonjsModule(function (module) {
	function _extends() {
	  module.exports = _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	module.exports = _extends;
	});

	const DropdownTrigger = styled__default.div.attrs({
	  className: 'dropdown-trigger'
	}).withConfig({
	  displayName: "dropdown__DropdownTrigger",
	  componentId: "sc-17060js-0"
	})(["padding:0px ", ";font-size:20px;line-height:20px;&:hover{background:", ";}"], ({
	  theme
	}) => theme.sizes.padding, ({
	  theme
	}) => theme.colors.bck);
	const DropdownMenu = styled__default.div.attrs({
	  className: 'dropdown-menu'
	}).withConfig({
	  displayName: "dropdown__DropdownMenu",
	  componentId: "sc-17060js-1"
	})(["& > .dropdown-content{border:0px none;border-radius:0px;box-shadow:0 6px 13px 0 rgba(69,70,85,0.13);background:", ";}"], ({
	  theme
	}) => theme.colors.bck);
	/**
	 * Representation of a dropdown with buttons.
	 *
	 * @component
	 * @example
	 * return (
	 * <WrapperBox border style={{height: 200, marginLeft: 200}}>
	 *   <Dropdown className="is-right is-hoverable">
	 *     <StyledButton className="is-white in-dropdown">Button 1</StyledButton>
	 *     <StyledButton className="is-white in-dropdown">Button 2</StyledButton>
	 *   </Dropdown>
	 * </WrapperBox>
	 * )
	 */

	const Dropdown$1 = props => {
	  const {
	    children
	  } = props;
	  let {
	    className = ''
	  } = props;
	  className += ' dropdown';
	  return React__default.createElement("div", _extends_1({}, props, {
	    className: className
	  }), React__default.createElement(DropdownTrigger, null, React__default.createElement("i", {
	    className: "icomoon-options"
	  })), React__default.createElement(DropdownMenu, null, React__default.createElement("div", {
	    className: "dropdown-content"
	  }, children)));
	};

	const StyledWrapperBox = styled__default.section.withConfig({
	  displayName: "wrapper-box__StyledWrapperBox",
	  componentId: "sc-9mf060-0"
	})(["padding:", ";color:", ";flex-grow:1;border:", ";background:", ";& > h1{font-size:22px;margin-top:", ";margin-bottom:", ";}"], ({
	  theme
	}) => theme.sizes.paddingLayout, ({
	  theme
	}) => theme.colors.defaultText, props => props.border ? `1px solid ${props.theme.colors.border}` : 'none', props => props.border ? props.theme.colors.bck : 'transparent', ({
	  theme
	}) => theme.sizes.padding, ({
	  theme
	}) => theme.sizes.padding);
	/**
	 * Basic layout element which controls padding.
	 *
	 * @component
	 * @example
	 * return (
	 *   <WrapperBox border>
	 *     <h1>Header</h1>
	 *     <p>Some inside content</p>
	 *   </WrapperBox>
	 * )
	 */

	const WrapperBox = props => React__default.createElement(StyledWrapperBox, props);

	const Spinner = styled__default.div.attrs({
	  className: 'lds-facebook'
	}).withConfig({
	  displayName: "loader__Spinner",
	  componentId: "sc-103tj8g-0"
	})(["&{display:inline-block;position:relative;width:64px;height:64px;}& div{display:inline-block;position:absolute;left:6px;width:13px;background:", ";animation:lds-facebook 1.2s cubic-bezier(0,0.5,0.5,1) infinite;}& div:nth-child(1){left:6px;animation-delay:-0.24s;}& div:nth-child(2){left:26px;animation-delay:-0.12s;}& div:nth-child(3){left:45px;animation-delay:0;}@keyframes lds-facebook{0%{top:6px;height:51px;}50%,100%{top:19px;height:26px;}}"], ({
	  theme
	}) => theme.colors.primary);
	/**
	 * Simple loader
	 *
	 * @component
	 * @example
	 * return (
	 *   <WrapperBox border><Loader/></WrapperBox>
	 * )
	 */

	const Loader = () => React__default.createElement(WrapperBox, {
	  style: {
	    textAlign: 'center'
	  }
	}, React__default.createElement(Spinner, null, React__default.createElement("div", null), React__default.createElement("div", null), React__default.createElement("div", null)));

	function paginate(totalItems, currentPage, pageSize, maxPages) {
	    if (currentPage === void 0) { currentPage = 1; }
	    if (pageSize === void 0) { pageSize = 10; }
	    if (maxPages === void 0) { maxPages = 10; }
	    // calculate total pages
	    var totalPages = Math.ceil(totalItems / pageSize);
	    // ensure current page isn't out of range
	    if (currentPage < 1) {
	        currentPage = 1;
	    }
	    else if (currentPage > totalPages) {
	        currentPage = totalPages;
	    }
	    var startPage, endPage;
	    if (totalPages <= maxPages) {
	        // total pages less than max so show all pages
	        startPage = 1;
	        endPage = totalPages;
	    }
	    else {
	        // total pages more than max so calculate start and end pages
	        var maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);
	        var maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;
	        if (currentPage <= maxPagesBeforeCurrentPage) {
	            // current page near the start
	            startPage = 1;
	            endPage = maxPages;
	        }
	        else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {
	            // current page near the end
	            startPage = totalPages - maxPages + 1;
	            endPage = totalPages;
	        }
	        else {
	            // current page somewhere in the middle
	            startPage = currentPage - maxPagesBeforeCurrentPage;
	            endPage = currentPage + maxPagesAfterCurrentPage;
	        }
	    }
	    // calculate start and end item indexes
	    var startIndex = (currentPage - 1) * pageSize;
	    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);
	    // create an array of pages to ng-repeat in the pager control
	    var pages = Array.from(Array((endPage + 1) - startPage).keys()).map(function (i) { return startPage + i; });
	    // return object with all pager properties required by the view
	    return {
	        totalItems: totalItems,
	        currentPage: currentPage,
	        pageSize: pageSize,
	        totalPages: totalPages,
	        startPage: startPage,
	        endPage: endPage,
	        startIndex: startIndex,
	        endIndex: endIndex,
	        pages: pages
	    };
	}
	var jwPaginate = paginate;

	const styles = styled.css(["&&&{font-size:", ";border-radius:0;border-color:", ";background:", ";height:34px;padding:", ";color:", ";& i,& svg{margin-right:5px;}&:hover{border-color:", ";}&.is-white{background-color:", ";border-color:transparent;color:", ";}&.is-primary{background-color:", ";color:#ffffff;&:hover{background-color:", ";}}&.is-text{background-color:transparent;color:", ";border:transparent;}&.in-dropdown{color:", ";font-size:", ";width:100%;text-align:start;justify-content:flex-start;height:40px;padding-left:40px;border:none;&:hover{border:4px ", ";padding-left:36px;border-style:none solid;}}}"], ({
	  theme
	}) => theme.fonts.medium, ({
	  theme
	}) => theme.colors.primary, ({
	  theme
	}) => theme.colors.bck, ({
	  theme
	}) => `${theme.sizes.paddingMin} ${theme.sizes.padding}`, ({
	  theme
	}) => theme.colors.primary, ({
	  theme
	}) => theme.colors.primaryHover, ({
	  theme
	}) => theme.colors.bck, ({
	  theme
	}) => theme.colors.defaultText, ({
	  theme
	}) => theme.colors.primary, ({
	  theme
	}) => theme.colors.primaryHover, ({
	  theme
	}) => theme.colors.primary, ({
	  theme
	}) => theme.colors.defaultText, ({
	  theme
	}) => theme.fonts.base, ({
	  theme
	}) => theme.colors.primary);
	/**
	 * Base button component
	 *
	 * @component
	 * @example <caption>Regular button</caption>
	 * return (
	  *   <WrapperBox border>
	  *     <StyledButton>I am button</StyledButton>
	  *   </WrapperBox>
	  * )
	  *
	  * @example <caption>Primary button</caption>
	  * return (
	  *   <WrapperBox border>
	  *     <StyledButton primary>I am primary button</StyledButton>
	  *   </WrapperBox>
	  * )
	  *
	  * @example <caption>With icon</caption>
	  * return (
	  *   <WrapperBox border>
	  *     <StyledButton><i class="fa fa-bomb" />I am button with icon</StyledButton>
	  *   </WrapperBox>
	  * )
	  */

	const StyledButton = styled__default('button').attrs(({
	  primary
	}) => ({
	  className: `button${primary ? ' is-primary' : ''}`
	})).withConfig({
	  displayName: "styled-button__StyledButton",
	  componentId: "sc-27o4jb-0"
	})(["", ""], styles);

	/**
	 * Component wrapping Link from React Router with styled. It looks exactly like {@link StyledButton}
	 *
	 * @see https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/api/Link.md
	 * @component
	*/
	const StyledLink = styled__default(reactRouterDom.Link).attrs(({
	  primary
	}) => ({
	  className: `button${primary ? ' is-primary' : ''}`
	})).withConfig({
	  displayName: "styled-link__StyledLink",
	  componentId: "sc-1csyv7l-0"
	})(["", ""], styles);

	const PaginationWrapper = styled__default.div.attrs({
	  className: 'level-item pagination-content'
	}).withConfig({
	  displayName: "paginate__PaginationWrapper",
	  componentId: "sc-9u8hbi-0"
	})(["& > .pagination{border:1px solid ", ";padding:4px;}"], ({
	  theme
	}) => theme.colors.border);
	/**
	 * Pagination component
	 *
	 * @component
	 * @example
	 * const location = { search: ''}
	 * return (
	 *   <WrapperBox>
	 *     <Paginate total={100} page={4} perPage={10} location={location} />
	 *   </WrapperBox>
	 * )
	 */

	class Paginate extends React__default.PureComponent {
	  linkToPage(page) {
	    const {
	      location
	    } = this.props;
	    const search = new URLSearchParams(location.search);
	    search.set('page', page.toString());
	    return search.toString();
	  }

	  render() {
	    const {
	      total,
	      page,
	      perPage
	    } = this.props;
	    const currentPage = page || 1;
	    const paginate = jwPaginate(total, currentPage, perPage);
	    const isFirstPage = currentPage === paginate.startPage;
	    const isLastPage = currentPage === paginate.endPage;
	    const prevPage = isFirstPage ? currentPage : currentPage - 1;
	    const nextPage = isLastPage ? currentPage : currentPage + 1;

	    if (paginate.totalPages === 1 || total === 0) {
	      return null;
	    }

	    return React__default.createElement(PaginationWrapper, null, React__default.createElement("div", {
	      className: "pagination"
	    }, React__default.createElement(StyledLink, {
	      to: {
	        search: this.linkToPage(prevPage)
	      },
	      className: `button is-white${isFirstPage ? ' disabled' : ''}`
	    }, React__default.createElement("i", {
	      className: "icomoon-pagination-left"
	    })), paginate.pages.map(p => React__default.createElement(StyledLink, {
	      key: p,
	      to: {
	        search: this.linkToPage(p)
	      },
	      className: `pages button is-white${p === currentPage ? ' is-primary' : ''}`
	    }, p)), React__default.createElement(StyledLink, {
	      to: {
	        search: this.linkToPage(nextPage)
	      },
	      className: `button is-white${isLastPage ? ' disabled' : ''}`
	    }, React__default.createElement("i", {
	      className: "icomoon-pagination-right"
	    }))));
	  }

	}
	/**
	 * @memberof Paginate
	 */


	var Paginate$1 = reactRouterDom.withRouter(Paginate);

	const StyledPlaceholder = styled__default.div.withConfig({
	  displayName: "placeholder__StyledPlaceholder",
	  componentId: "sc-1cbjegf-0"
	})(["@keyframes placeHolderShimmer{0%{background-position:-468px 0}100%{background-position:468px 0}}animation-duration:1s;animation-fill-mode:forwards;animation-iteration-count:infinite;animation-name:placeHolderShimmer;animation-timing-function:linear;background:#f6f7f8;background:linear-gradient(to right,#eeeeee 8%,#dddddd 18%,#eeeeee 33%);background-size:1000px 104px;height:338px;position:relative;overflow:hidden;"]);
	/**
	 * Renders placeholder
	 * @component
	 *
	 * @example <caption>Image placeholder</caption>
	 * return (
	 *   <WrapperBox border>
	 *     <Placeholder style={{ width: 100, height: 200 }} />
	 *   </WrapperBox>
	 * )
	 *
	 * @example <caption>Text placeholder</caption>
	 * return (
	 *   <WrapperBox border>
	 *     <Label>Some name</Label>
	 *     <Placeholder style={{ width: 400, height: 14 }} />
	 *   </WrapperBox>
	 * )
	 */

	const Placeholder = props => React__default.createElement(StyledPlaceholder, props);

	const Property = styled__default.div.withConfig({
	  displayName: "property-in-edit__Property",
	  componentId: "sc-1yqxq8u-0"
	})(["margin-bottom:", ";& input{border-radius:0;border-color:", ";box-shadow:none;&:focus{border-color:", ";}}& .control > input[type=text]{height:40px;}"], ({
	  theme
	}) => theme.sizes.paddingLayout, ({
	  theme
	}) => theme.colors.border, ({
	  theme
	}) => theme.colors.primary);
	/**
	 * Wraps input with label and optional error
	 *
	 * @component
	 * @example <caption>Standard property</caption>
	 * const property = {
	 *   label: 'My amazing property',
	 *   name: 'myAmazingProperty',
	 * }
	 * const error = { message: 'and there is an error' }
	 * return (
	 *   <WrapperBox>
	 *     <PropertyInEdit property={property} error={error}>
	 *       <input className="input" />
	 *     </PropertyInEdit>
	 *   </WrapperBox>
	 * )
	 *
	 * @example <caption>With an icon</caption>
	 * const property = {
	 *   label: 'My amazing property',
	 *   name: 'myAmazingProperty',
	 * }
	 * // It is based on the bulma classes
	 * return (
	 *   <WrapperBox>
	 *     <PropertyInEdit property={property}>
	 *       <div className="control has-icons-right">
	 *         <input className="input" />
	 *         <span className="icon is-small is-right">
	 *           <i className="fa fa-bomb" />
	 *         </span>
	 *       </div>
	 *     </PropertyInEdit>
	 *   </WrapperBox>
	 * )
	 */

	const PropertyInEdit = props => {
	  const {
	    children,
	    property,
	    error
	  } = props;
	  return React__default.createElement(Property, {
	    "data-testid": `PropertyInEdit-${property.name}`
	  }, React__default.createElement(Label, {
	    htmlFor: property.name
	  }, property.label), React__default.createElement("div", {
	    className: "control"
	  }, children), error && React__default.createElement("div", {
	    className: "help is-danger"
	  }, error.message));
	};

	const Property$1 = styled__default.div.withConfig({
	  displayName: "property-in-filter__Property",
	  componentId: "n7ppvc-0"
	})(["margin:", " 0;& input{border-radius:0;border-color:", ";box-shadow:none;background:transparent;color:", ";&:focus{border-color:", ";}}& .icon{opacity:0.25;}"], ({
	  theme
	}) => theme.sizes.paddingLayout, ({
	  theme
	}) => theme.colors.borderOnDark, ({
	  theme
	}) => theme.colors.lightText, ({
	  theme
	}) => theme.colors.primary);
	/**
	 * Wraps input with label in Filter
	 *
	 * @component
	 * @example
	 * const property = {
	 *   label: 'My amazing property',
	 *   name: 'myAmazingProperty',
	 * }
	 * return (
	 *   <WrapperBox style={{ background: '#303b62' }}>
	 *     <PropertyInFilter property={property}>
	 *       <input className="input" />
	 *     </PropertyInFilter>
	 *   </WrapperBox>
	 * )
	 */

	const PropertyInFilter = props => {
	  const {
	    property,
	    children
	  } = props;
	  return React__default.createElement(Property$1, {
	    "data-testid": `PropertyInFilter-${property.name}`
	  }, React__default.createElement(Label, null, property.label), children);
	};

	const Property$2 = styled__default.div.withConfig({
	  displayName: "property-in-show__Property",
	  componentId: "sc-4zsv3b-0"
	})(["margin-bottom:", ";"], ({
	  theme
	}) => theme.sizes.paddingLayout);
	/**
	 * Wraps input with label in Show
	 *
	 * @component
	 * @example
	 * const property = {
	  *   label: 'My amazing property',
	  *   name: 'myAmazingProperty',
	  * }
	  * return (
	  *   <WrapperBox border>
	  *     <PropertyInShow property={property}>
	  *       And here goes a property value.
	  *     </PropertyInShow>
	  *   </WrapperBox>
	  * )
	 */

	const PropertyInShow = props => {
	  const {
	    property,
	    children
	  } = props;
	  return React__default.createElement(Property$2, {
	    "data-testid": `PropertyInShow-${property.name}`
	  }, React__default.createElement(Label, null, property.label), children);
	};
	/**
	 * @memberof PropertyInShow
	 */


	PropertyInShow.defaultProps = {
	  children: null
	};

	/**
	 * Marks group of fields as a section
	 *
	 * @component
	 *
	 * @example
	 * const property = {
	 *   label: 'My amazing property',
	 *   name: 'myAmazingProperty',
	 * }
	 * return (
	 * <StyledSection>
	 *  <PropertyInEdit property={property}>
	 *    <input className="input" />
	 *  </PropertyInEdit>
	 *  <p>
	 *    <StyledButton>
	 *      Add new item in section
	 *    </StyledButton>
	 *  </p>
	 * </StyledSection>
	 * )
	 */

	const StyledSection = styled__default.section.withConfig({
	  displayName: "styled-section__StyledSection",
	  componentId: "sc-16m82m4-0"
	})(["border-left:", " solid ", ";padding-left:", ";"], ({
	  theme
	}) => theme.sizes.paddingMin, ({
	  theme
	}) => theme.colors.lightBck, ({
	  theme
	}) => theme.sizes.padding);

	/**
	 * Simple component for styling tables
	 *
	 * @component
	 * @example
	 * return (
	 * <WrapperBox border>
	 *   <h1>Table Information</h1>
	 *   <Table>
	 *     <thead>
	 *       <tr>
	 *         <th><Label>Label1</Label></th>
	 *         <th><Label>Label2</Label></th>
	 *       </tr>
	 *     </thead>
	 *     <tbody>
	 *       <tr>
	 *         <td>Value1</td>
	 *         <td>Value12</td>
	 *       </tr>
	 *       <tr>
	 *         <td>Value1</td>
	 *         <td>Value12</td>
	 *       </tr>
	 *     </tbody>
	 *   </Table>
	 * </WrapperBox>
	 * )
	 */

	const Table = styled__default.table.attrs({
	  className: 'table is-fullwidth'
	}).withConfig({
	  displayName: "table__Table",
	  componentId: "sc-8urxmk-0"
	})(["background:transparent;& > thead > tr > th{border:none;}& tr.is-selected{background:", ";}& tr:hover{background:", ";}td{color:", ";padding:", ";border-color:", ";}"], ({
	  theme
	}) => theme.colors.primary, ({
	  theme
	}) => theme.colors.superLightBack, ({
	  theme
	}) => theme.colors.defaultText, ({
	  theme
	}) => theme.sizes.padding, ({
	  theme
	}) => theme.colors.border);

	const OverlayLink = styled__default(reactRouterDom.Link).withConfig({
	  displayName: "value-block__OverlayLink",
	  componentId: "sc-19g8v9l-0"
	})(["position:absolute;top:0;left:0;width:100%;height:100%;display:block;transition:border-width 0.2s;&:hover{transition:border-width 0.2s;border-bottom:5px solid ", ";}"], ({
	  theme
	}) => theme.colors.primary);
	const Level = styled__default.div.attrs({
	  className: 'level'
	}).withConfig({
	  displayName: "value-block__Level",
	  componentId: "sc-19g8v9l-1"
	})(["color:", ";margin-top:8px;& .value{font-size:34px;}& .icon{font-size:34px;}"], props => props.color || props.theme.colors.primary);
	/**
	 * Simple Widget, which can be used in the dashboard
	 *
	 * @name ValueBlock
	 * @component
	 * @example
	 * return (
	 *   <WrapperBox><Columns>
	 *     <Column><ValueBlock  icon="fa fa-bomb" value="5">
	 *       Utils
	 *     </ValueBlock></Column>
	 *     <Column><ValueBlock  icon="fa fa-star" value="12" href="/api/resourceName">
	 *       Are
	 *     </ValueBlock></Column>
	 *     <Column><ValueBlock  icon="fa fa-cog" value="5" color="red">
	 *       Awesome
	 *     </ValueBlock></Column>
	 *   </Columns></WrapperBox>
	 * )
	 */

	const ValueBlock = props => {
	  const {
	    icon,
	    value,
	    children,
	    color,
	    href,
	    label
	  } = props;
	  return React__default.createElement(WrapperBox, {
	    border: true,
	    style: {
	      position: 'relative'
	    }
	  }, href ? React__default.createElement(OverlayLink, {
	    to: href
	  }) : '', label ? React__default.createElement(Label, null, label) : '', React__default.createElement(Level, {
	    color: color
	  }, React__default.createElement("div", {
	    className: "value"
	  }, value), React__default.createElement("div", {
	    className: "icon"
	  }, React__default.createElement("i", {
	    className: icon
	  }))), children);
	};

	const StyledInput = styled__default.input.attrs(props => ({
	  className: props.className || 'input'
	})).withConfig({
	  displayName: "styled-input__StyledInput",
	  componentId: "sc-18q3bd3-0"
	})(["background:", ";color:", ";height:auto;border-radius:0px;border-color:", ";box-shadow:none;&:hover{border-color:", ";}"], ({
	  theme
	}) => theme.colors.inputBck, ({
	  theme
	}) => theme.colors.defaultText, ({
	  theme
	}) => theme.colors.border, ({
	  theme
	}) => theme.colors.borderHover);

	/**
	 * @class
	 * Prints error message
	 *
	 * @component
	 * @example
	 * return (
	 * <ErrorMessageBox title={'Some error'}>
	 *   <p>Text below the title</p>
	 * </ErrorMessageBox>
	 * )
	 */
	const ErrorMessageBox = props => {
	  const {
	    children,
	    title,
	    testId
	  } = props;
	  return React__default.createElement(WrapperBox, null, React__default.createElement(WrapperBox, {
	    border: true,
	    "data-testid": testId
	  }, React__default.createElement("div", {
	    className: "content has-text-centered"
	  }, React__default.createElement("h3", null, title), React__default.createElement("div", null, children))));
	};

	const NoResourceError = props => {
	  const {
	    resourceId
	  } = props;
	  return React__default.createElement(ErrorMessageBox, {
	    title: "404 - PAGE NOT FOUND",
	    testId: "NoResourceError"
	  }, "Resource of given id:", React__default.createElement("b", null, ` ${resourceId} `), "cannot be found.");
	};

	const NoActionError = props => {
	  const {
	    resourceId,
	    actionName
	  } = props;
	  return React__default.createElement(ErrorMessageBox, {
	    title: "404 - PAGE NOT FOUND",
	    testId: "NoActionError"
	  }, "Resource:", React__default.createElement("b", null, ` ${resourceId} `), "does not have an action with name:", React__default.createElement("b", null, ` ${actionName} `));
	};

	const NoRecordError = props => {
	  const {
	    resourceId,
	    recordId
	  } = props;
	  return React__default.createElement(ErrorMessageBox, {
	    title: "404 - PAGE NOT FOUND",
	    testId: "NoRecordError"
	  }, "Resource:", React__default.createElement("b", null, ` ${resourceId} `), "does not have a record with id:", React__default.createElement("b", null, ` ${recordId} `));
	};



	var Components = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Column: Column,
		Columns: Columns,
		DashboardHeader: DashboardHeader,
		Dropdown: Dropdown$1,
		Label: Label,
		Loader: Loader,
		Paginate: Paginate$1,
		Placeholder: Placeholder,
		PropertyInEdit: PropertyInEdit,
		PropertyInFilter: PropertyInFilter,
		PropertyInShow: PropertyInShow,
		StyledButton: StyledButton,
		StyledLink: StyledLink,
		StyledSection: StyledSection,
		Table: Table,
		ValueBlock: ValueBlock,
		WrapperBox: WrapperBox,
		StyledInput: StyledInput,
		ErrorMessageBox: ErrorMessageBox
	});

	const DashboardWrapper = styled__default.section.withConfig({
	  displayName: "default-dashboard__DashboardWrapper",
	  componentId: "y6jxa9-0"
	})(["display:flex;flex-grow:1;align-items:center;justify-content:center;padding:", ";"], ({
	  theme
	}) => theme.sizes.padding);
	const InfoBox = styled__default.section.attrs({
	  className: 'content'
	}).withConfig({
	  displayName: "default-dashboard__InfoBox",
	  componentId: "y6jxa9-1"
	})(["width:540px;"]);
	const SoftwareBrothers = styled__default.div.withConfig({
	  displayName: "default-dashboard__SoftwareBrothers",
	  componentId: "y6jxa9-2"
	})(["padding:10px 0;border-top:1px solid ", ";img{float:left;padding:10px 15px 10px 0;width:140px;}a{color:", ";}"], ({
	  theme
	}) => theme.colors.love, ({
	  theme
	}) => theme.colors.love);

	const Dashboard = () => React__default.createElement(DashboardWrapper, null, React__default.createElement(InfoBox, null, React__default.createElement("h1", null, "Welcome on board!"), React__default.createElement("p", null, "Thank you for trying out", React__default.createElement("b", null, " AdminBro.")), React__default.createElement("p", null, "Next, you might want to check out the following tutorials:"), React__default.createElement(Columns, null, React__default.createElement(Column, {
	  width: 6
	}, React__default.createElement("ul", null, React__default.createElement("li", null, React__default.createElement("a", {
	  href: "https://softwarebrothers.github.io/admin-bro-dev/tutorial-03-passing-resources.html"
	}, "Adding Resources")), React__default.createElement("li", null, React__default.createElement("a", {
	  href: "https://softwarebrothers.github.io/admin-bro-dev/tutorial-04-customizing-resources.html"
	}, "Customizing resources")), React__default.createElement("li", null, React__default.createElement("a", {
	  href: "https://softwarebrothers.github.io/admin-bro-dev/tutorial-05-actions.html"
	}, "Customizing Actions")))), React__default.createElement(Column, {
	  width: 6
	}, React__default.createElement("ul", null, React__default.createElement("li", null, React__default.createElement("a", {
	  href: "https://softwarebrothers.github.io/admin-bro-dev/tutorial-06-writing-react-components.html"
	}, "Writing your own components")), React__default.createElement("li", null, React__default.createElement("a", {
	  href: "https://softwarebrothers.github.io/admin-bro-dev/tutorial-07-custom-dashboard.html"
	}, "Customizing Dashboard"))))), React__default.createElement("p", null, "In case you found any errors,", React__default.createElement("a", {
	  href: "https://github.com/SoftwareBrothers/admin-bro/issues"
	}, " raise an issue "), "on our GitHub account."), React__default.createElement("p", null, "For the latest information about AdminBro and more -", React__default.createElement("a", {
	  href: "https://softwarebrothers.co/blog/"
	}, " check out our blog.")), React__default.createElement(SoftwareBrothers, null, React__default.createElement("img", {
	  src: "https://softwarebrothers.co/assets/images/software-brothers-logo-full.svg",
	  alt: "SoftwareBrothers"
	}), React__default.createElement("p", null, "Want to add advanced fields like Google Maps, enrich interface with custom graphs or simply look for professional help? You can always", React__default.createElement("a", {
	  href: "https://softwarebrothers.co/services"
	}, " work with us!")))));

	class ErrorBoundary extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      error: null
	    };
	  }

	  componentDidCatch(error) {
	    this.setState({
	      error
	    });
	  }

	  render() {
	    const {
	      children
	    } = this.props;
	    const {
	      error
	    } = this.state;

	    if (error !== null) {
	      return React__default.createElement("div", {
	        className: "notification is-danger"
	      }, React__default.createElement("p", null, error.toString()), React__default.createElement("p", null, "See development console for more details..."));
	    }

	    return children || null;
	  }

	}

	const DOCS = 'https://softwarebrothers.github.io/admin-bro-dev';
	const DEFAULT_PATHS = {
	  rootPath: '/admin',
	  logoutPath: '/admin/logout',
	  loginPath: '/admin/login',
	};

	/* eslint-disable @typescript-eslint/explicit-function-return-type */
	const addNotice = (data = {
	  message: ''
	}) => ({
	  type: 'ADD_NOTICE',
	  data: {
	    message: data.message,
	    id: Math.random().toString(36).substr(2, 9),
	    type: data.type || 'success',
	    progress: 0
	  }
	});
	const setNoticeProgress = ({
	  noticeId,
	  progress
	}) => ({
	  type: 'SET_NOTICE_PROGRESS',
	  data: {
	    noticeId,
	    progress
	  }
	});
	const dropNotice = noticeId => ({
	  type: 'DROP_NOTICE',
	  data: {
	    noticeId
	  }
	});

	const resourcesReducer = (state = [], action) => {
	  switch (action.type) {
	    case 'RESOURCES_INITIALIZE':
	      return action.data;

	    default:
	      return state;
	  }
	};

	const pagesReducer = (state = [], action) => {
	  switch (action.type) {
	    case 'PAGES_INITIALIZE':
	      return action.data;

	    default:
	      return state;
	  }
	};

	const brandingReducer = (state = {}, action) => {
	  switch (action.type) {
	    case 'BRANDING_INITIALIZE':
	      return action.data;

	    default:
	      return state;
	  }
	};

	const pathsReducer = (state = DEFAULT_PATHS, action) => {
	  switch (action.type) {
	    case 'PATHS_INITIALIZE':
	      return action.data;

	    default:
	      return state;
	  }
	};

	const dashboardReducer = (state = {}, action) => {
	  switch (action.type) {
	    case 'DASHBOARD_INITIALIZE':
	      return action.data;

	    default:
	      return state;
	  }
	};

	const sessionReducer = (state = null, action) => {
	  switch (action.type) {
	    case 'SESSION_INITIALIZE':
	      return action.data;

	    default:
	      return state;
	  }
	};

	const versionsReducer = (state = {}, action) => {
	  switch (action.type) {
	    case 'VERSIONS_INITIALIZE':
	      return {
	        admin: action.data.admin,
	        app: action.data.app
	      };

	    default:
	      return state;
	  }
	};

	const noticesReducer = (state = [], action) => {
	  switch (action.type) {
	    case 'ADD_NOTICE':
	      {
	        const notices = [action.data];
	        return notices;
	      }

	    case 'DROP_NOTICE':
	      {
	        return state.filter(notice => notice.id !== action.data.noticeId);
	      }

	    case 'SET_NOTICE_PROGRESS':
	      {
	        return state.map(notice => ({ ...notice,
	          progress: notice.id === action.data.noticeId ? action.data.progress : notice.progress
	        }));
	      }

	    default:
	      return state;
	  }
	};

	const reducer = redux.combineReducers({
	  resources: resourcesReducer,
	  branding: brandingReducer,
	  paths: pathsReducer,
	  session: sessionReducer,
	  dashboard: dashboardReducer,
	  notices: noticesReducer,
	  versions: versionsReducer,
	  pages: pagesReducer
	});
	var createStore = ((initialState = {}) => redux.createStore(reducer, initialState));

	const TIME_TO_DISAPPEAR = 3;
	const NoticeWrapper = styled__default.div.attrs({
	  className: 'notification'
	}).withConfig({
	  displayName: "notice__NoticeWrapper",
	  componentId: "w4jhot-0"
	})(["max-width:100%;position:absolute;top:0;left:0;right:0;border-radius:0;border-style:none none solid none;border-width:1px;padding:13px ", ";&:not(:last-child){margin-bottom:0;}&.success{background-color:", ";border-color:", ";& .progressBar{background-color:", ";}}&.error{background-color:", ";border-color:", ";& .delete:before,& .delete:after{background-color:", ";}& .progressBar{background-color:", ";}}& .delete{background:transparent;right:", ";top:", ";&:before,&:after{background-color:", ";}&:after{height:80%;width:1px;}&:before{width:80%;height:1px;}}& .progressBar{position:absolute;bottom:0;left:0;height:4px;background:#fff;transition:width 1s linear;}"], ({
	  theme
	}) => theme.sizes.paddingLayout, ({
	  theme
	}) => theme.colors.lightSuccess, ({
	  theme
	}) => theme.colors.success, ({
	  theme
	}) => theme.colors.success, ({
	  theme
	}) => theme.colors.lightError, ({
	  theme
	}) => theme.colors.error, ({
	  theme
	}) => theme.colors.error, ({
	  theme
	}) => theme.colors.error, ({
	  theme
	}) => theme.sizes.paddingLayout, ({
	  theme
	}) => theme.sizes.padding, ({
	  theme
	}) => theme.colors.success);

	class NoticeElement extends React__default.Component {
	  constructor(props) {
	    super(props);
	    const {
	      notice
	    } = props;
	    this.timer = null;
	    this.state = {
	      progress: notice.progress || 0
	    };
	  }

	  componentDidMount() {
	    const {
	      drop,
	      notice,
	      notifyProgress
	    } = this.props;
	    this.timer = setInterval(() => {
	      this.setState(state => {
	        const progress = state.progress + 100 / TIME_TO_DISAPPEAR;
	        notifyProgress({
	          noticeId: notice.id,
	          progress
	        });
	        return {
	          progress
	        };
	      });
	    }, 1000);
	    setTimeout(() => {
	      if (this.timer) {
	        clearInterval(this.timer);
	      }

	      drop();
	    }, 1000 * (TIME_TO_DISAPPEAR + 1));
	  }

	  componentWillUnmount() {
	    if (this.timer) {
	      clearInterval(this.timer);
	    }
	  }

	  render() {
	    const {
	      notice,
	      drop
	    } = this.props;
	    const {
	      progress
	    } = this.state;
	    return React__default.createElement(NoticeWrapper, {
	      className: notice.type
	    }, React__default.createElement("button", {
	      className: "delete",
	      onClick: drop,
	      type: "button"
	    }), notice.message, React__default.createElement("div", {
	      className: "progressBar",
	      style: {
	        width: `${progress}%`
	      }
	    }));
	  }

	}

	const NoticeBox = props => {
	  const {
	    drop,
	    notices,
	    notifyProgress
	  } = props;
	  const notice = notices.length ? notices[notices.length - 1] : null;

	  if (notice) {
	    return React__default.createElement(NoticeElement, {
	      key: notice.id,
	      notice: notice,
	      drop: () => drop(notice.id),
	      notifyProgress: notifyProgress
	    });
	  }

	  return React__default.createElement("div", null);
	};

	const mapStateToProps$2 = state => ({
	  notices: state.notices
	});

	const mapDispatchToProps = dispatch => ({
	  drop: noticeId => dispatch(dropNotice(noticeId)),
	  notifyProgress: ({
	    noticeId,
	    progress
	  }) => dispatch(setNoticeProgress({
	    noticeId,
	    progress
	  }))
	});

	var Notice = reactRedux.connect(mapStateToProps$2, mapDispatchToProps)(NoticeBox);

	const NoticeWrapper$1 = styled__default.div.withConfig({
	  displayName: "notice-wrapperstyled__NoticeWrapper",
	  componentId: "vrx4k0-0"
	})(["width:100%;position:relative;"]);

	class Dashboard$1 extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      isClient: false
	    };
	  }

	  componentDidMount() {
	    this.setState({
	      isClient: true
	    });
	  }

	  render() {
	    const {
	      dashboard
	    } = this.props;
	    const {
	      isClient
	    } = this.state;
	    let Component;

	    if (dashboard && dashboard.component && isClient && AdminBro.UserComponents[dashboard.component]) {
	      Component = AdminBro.UserComponents[dashboard.component];
	    } else {
	      Component = Dashboard;
	    }

	    return React__default.createElement(React__default.Fragment, null, React__default.createElement(NoticeWrapper$1, null, React__default.createElement(Notice, null)), React__default.createElement(ErrorBoundary, null, React__default.createElement(Component, null)));
	  }

	}

	const mapStateToProps$3 = state => ({
	  dashboard: state.dashboard
	});

	var Dashboard$2 = reactRedux.connect(mapStateToProps$3)(Dashboard$1);

	const BreadcrumbsContainer = styled__default.nav.attrs({
	  className: 'breadcrumb'
	}).withConfig({
	  displayName: "breadcrumbs__BreadcrumbsContainer",
	  componentId: "yjyesi-0"
	})(["&&&{margin:", ";font-size:", ";}"], ({
	  theme
	}) => `-${theme.sizes.padding} 0 ${theme.sizes.padding} -10px`, ({
	  theme
	}) => theme.fonts.base);
	const BreadcrumbLink = styled__default(reactRouterDom.Link).withConfig({
	  displayName: "breadcrumbs__BreadcrumbLink",
	  componentId: "yjyesi-1"
	})(["&&&{color:", ";&:hover{color:", ";}}"], ({
	  theme
	}) => theme.colors.lightText, ({
	  theme
	}) => theme.colors.primary);
	/**
	 * @memberof Breadcrumbs
	 */

	/**
	 * @component
	 * @private
	 */
	class Breadcrumbs extends React__default.PureComponent {
	  renderResource() {
	    const {
	      resource,
	      record
	    } = this.props;
	    return React__default.createElement("li", null, React__default.createElement(BreadcrumbLink, {
	      to: resource.href,
	      className: record ? 'is-active' : ''
	    }, resource.name));
	  }

	  renderAction() {
	    const {
	      actionName,
	      resource,
	      record
	    } = this.props;
	    const action = resource.resourceActions.find(a => a.name === actionName) || record && record.recordActions.find(a => a.name === actionName);

	    if (action) {
	      return React__default.createElement("li", {
	        className: "is-active"
	      }, React__default.createElement(BreadcrumbLink, {
	        to: "#"
	      }, action.label));
	    }

	    return null;
	  }

	  render() {
	    return React__default.createElement(BreadcrumbsContainer, null, React__default.createElement("ul", null, this.renderResource(), this.renderAction()));
	  }

	}

	let globalAny$1 = {};

	try {
	  globalAny$1 = window;
	} catch (error) {
	  if (error.message !== 'window is not defined') {
	    throw error;
	  }
	}
	/**
	 * Type of an [axios request]{@link https://github.com/axios/axios/blob/master/index.d.ts#L43}
	 *
	 * @typedef {object} AxiosRequestConfig
	 * @alias AxiosRequestConfig
	 * @memberof ApiClient
	 * @see https://github.com/axios/axios/blob/master/index.d.ts#L43
	 */


	const checkResponse = response => {
	  const loginUrl = [window.location.origin, globalAny$1.REDUX_STATE.paths.loginPath].join(''); // if response has redirect to loginUrl

	  if (response.request.responseURL && response.request.responseURL.match(loginUrl)) {
	    // eslint-disable-next-line no-undef
	    alert('Your session expired. You will be redirected to login screen');
	    window.location.assign(loginUrl);
	  }
	};
	/**
	 * Extends {@link AxiosRequestConfig}
	 *
	 * @alias ResourceActionAPIParams
	 * @memberof ApiClient
	 * @property {any}   ...    any property supported by {@link AxiosRequestConfig}
	 */


	/**
	 * Client which access the admin API.
	 * Use it to fetch data from auto generated AdminBro API.
	 *
	 * In the backend it uses [axios](https://github.com/axios/axios) client
	 * library.
	 *
	 * Usage:
	 * ```javascript
	 * import { ApiClient } from 'admin-bro'
	 *
	 * const api = new ApiClient()
	 * api.getRecords({ resourceId: 'Comments' }).then(results => {...})
	 * ```
	 * @see https://github.com/axios/axios
	 */
	class ApiClient {
	  constructor() {
	    this.baseURL = ApiClient.getBaseUrl();
	    this.client = axios.create({
	      baseURL: this.baseURL
	    });
	  }

	  static getBaseUrl() {
	    return [window.location.origin, globalAny$1.REDUX_STATE.paths.rootPath].join('');
	  }
	  /**
	   * Search by query string for records in a given resource.
	   *
	   * @param   {Object}  options
	   * @param   {String}  options.resourceId  id of a {@link ResourceJSON}
	   * @param   {String}  options.query       query string
	   *
	   * @return  {Promise<SearchResponse>}
	   */


	  async searchRecords({
	    resourceId,
	    query
	  }) {
	    const q = encodeURIComponent(query);
	    const response = await this.client.get(`/api/resources/${resourceId}/search/${q}`);
	    checkResponse(response);
	    return response.data.records;
	  }
	  /**
	   * Invokes given resource {@link Action} on the backend.
	   *
	   * @param   {ResourceActionAPIParams}     options
	   * @return  {Promise<ActionResponse>}     response from an {@link Action}
	   */


	  async resourceAction(options) {
	    const {
	      resourceId,
	      actionName,
	      data,
	      ...axiosParams
	    } = options;
	    const response = await this.client.request({
	      url: `/api/resources/${resourceId}/actions/${actionName}`,
	      method: data ? 'POST' : 'GET',
	      ...axiosParams,
	      data
	    });
	    checkResponse(response);
	    return response;
	  }
	  /**
	   * Invokes given record {@link Action} on the backend.
	   *
	   * @param   {RecordActionAPIParams} options
	   * @return  {Promise<RecordActionResponse>}            response from an {@link Action}
	   */


	  async recordAction(options) {
	    const {
	      resourceId,
	      recordId,
	      actionName,
	      data,
	      ...axiosParams
	    } = options;
	    const response = await this.client.request({
	      url: `/api/resources/${resourceId}/records/${recordId}/${actionName}`,
	      method: data ? 'POST' : 'GET',
	      ...axiosParams,
	      data
	    });
	    checkResponse(response);
	    return response;
	  }
	  /**
	   * Invokes given bulk {@link Action} on the backend.
	   *
	   * @param   {BulkActionAPIParams} options
	   * @return  {Promise<BulkActionResponse>}            response from an {@link Action}
	   */


	  async bulkAction(options) {
	    const {
	      resourceId,
	      recordIds,
	      actionName,
	      data,
	      ...axiosParams
	    } = options;
	    const params = new URLSearchParams();
	    params.append('recordIds', recordIds.join(','));
	    const response = await this.client.request({
	      url: `/api/resources/${resourceId}/bulk/${actionName}`,
	      method: data ? 'POST' : 'GET',
	      ...axiosParams,
	      data,
	      params
	    });
	    checkResponse(response);
	    return response;
	  }
	  /**
	   * Invokes dashboard handler.
	   *
	   * @param   {AxiosRequestConfig}       options
	   * @return  {Promise<any>}             response from the handler function defined in
	   *                                     {@link AdminBroOptions#dashboard}
	   */


	  async getDashboard(options = {}) {
	    const response = await this.client.get('/api/dashboard', options);
	    checkResponse(response);
	    return response;
	  }
	  /**
	   * Invokes handler function of given page and returns its response.
	   *
	   * @param   {GetPageAPIParams}                options
	   * @return  {Promise<any>}                    response from the handler of given page
	   *                                            defined in {@link AdminBroOptions#pages}
	   */


	  async getPage(options) {
	    const {
	      pageName,
	      ...axiosParams
	    } = options;
	    const response = await this.client.request({
	      url: `/api/pages/${pageName}`,
	      ...axiosParams
	    });
	    checkResponse(response);
	    return response;
	  }

	}

	/**
	 * NoticeMessage which can be presented as a "Toast" message.
	 * @alias NoticeMessage
	 * @memberof withNotice
	 */

	const mapDispatchToProps$1 = dispatch => ({
	  addNotice: notice => dispatch(addNotice(notice))
	});
	/**
	 * High Order Component which allows you to post notice messages from your components
	 *
	 * It gives you the additional prop: `addNotice(noticeMessage)` taking {@link NoticeMessage}.
	 *
	 * ```javascript
	 * import { withNotice } from 'admin-bro'
	 *
	 * const MY_MESSAGE = {
	 *   message: 'I am toast message',
	 *   type: 'success',
	 * }
	 * const MyCustomComponent = ({ addNotice }) => {
	 *   return (
	 *     <a onClick={() => addNotice(MY_MESSAGE)}>Click Me</a>
	 *   )
	 * }
	 * export default withNotice(MyCustomComponent)
	 * ```
	 *
	 * @component
	 */


	const withNotice = Component => reactRedux.connect(null, mapDispatchToProps$1)(Component);

	/* eslint-disable no-undef */

	/**
	 * Renders Button for an action
	 *
	 * @private
	 * @component
	 */
	class ActionButton extends React__default.PureComponent {
	  constructor(props) {
	    super(props);
	    this.handleClick = this.handleClick.bind(this);
	  }

	  href() {
	    const {
	      action,
	      resourceId,
	      recordId,
	      recordIds
	    } = this.props;
	    const h = new ViewHelpers();
	    const {
	      name: actionName,
	      actionType
	    } = action;

	    switch (actionType) {
	      case 'record':
	        if (!recordId) {
	          throw new Error('You have to specify "recordId" for record action');
	        }

	        return h.recordActionUrl({
	          resourceId,
	          recordId,
	          actionName
	        });

	      case 'resource':
	        return h.resourceActionUrl({
	          resourceId,
	          actionName
	        });

	      case 'bulk':
	        return h.bulkActionUrl({
	          resourceId,
	          recordIds,
	          actionName
	        });

	      default:
	        throw new Error('"actionType" should be either record, resource or bulk');
	    }
	  }

	  callApi() {
	    const {
	      action,
	      resourceId,
	      recordId,
	      location,
	      history,
	      actionPerformed,
	      addNotice,
	      recordIds
	    } = this.props;
	    const api = new ApiClient();
	    let promise;

	    switch (action.actionType) {
	      case 'record':
	        if (!recordId) {
	          throw new Error('You have to specify "recordId" for record action');
	        }

	        promise = api.recordAction({
	          resourceId,
	          actionName: action.name,
	          recordId
	        });
	        break;

	      case 'resource':
	        promise = api.resourceAction({
	          resourceId,
	          actionName: action.name
	        });
	        break;

	      case 'bulk':
	        if (!recordIds) {
	          throw new Error('You have to specify "recordIds" for bulk action');
	        }

	        promise = api.bulkAction({
	          resourceId,
	          actionName: action.name,
	          recordIds
	        });
	        break;

	      default:
	        throw new Error('"actionType" should be either record, resource or bulk');
	    }

	    promise.then(response => {
	      const {
	        data
	      } = response;

	      if (data.notice) {
	        addNotice(data.notice);
	      }

	      if (data.redirectUrl && location.pathname !== data.redirectUrl) {
	        history.push(data.redirectUrl);
	      }

	      if (actionPerformed) {
	        actionPerformed(action.name);
	      }
	    }).catch(error => {
	      throw error;
	    });
	  }

	  handleClick(event) {
	    const {
	      action
	    } = this.props;

	    if (action.guard && !confirm(action.guard)) {
	      event.preventDefault();
	      return;
	    }

	    if (typeof action.component !== 'undefined' && action.component === false) {
	      event.preventDefault();
	      this.callApi();
	    }
	  }

	  render() {
	    const {
	      action,
	      className
	    } = this.props;
	    return React__default.createElement(StyledLink, {
	      to: this.href(),
	      className: className || '',
	      onClick: this.handleClick
	    }, React__default.createElement("span", {
	      className: "icon"
	    }, React__default.createElement("i", {
	      className: action.icon
	    })), React__default.createElement("span", {
	      className: "btn-text"
	    }, action.label));
	  }

	} // TODO - remove this hack


	var ActionButton$1 = reactRouterDom.withRouter(withNotice(ActionButton));

	const HeaderWrapper = styled__default.section.attrs({
	  className: 'level'
	}).withConfig({
	  displayName: "action-header__HeaderWrapper",
	  componentId: "sc-17u6jqx-0"
	})(["&&&{margin-bottom:", ";}"], ({
	  theme
	}) => theme.sizes.padding);
	const Tag = styled__default.span.attrs({
	  className: 'tag'
	}).withConfig({
	  displayName: "action-header__Tag",
	  componentId: "sc-17u6jqx-1"
	})(["&&&{background:", ";color:#fff;margin-left:", ";}"], ({
	  theme
	}) => theme.colors.primary, ({
	  theme
	}) => theme.sizes.padding);
	const BackBtn = styled__default(reactRouterDom.Link).withConfig({
	  displayName: "action-header__BackBtn",
	  componentId: "sc-17u6jqx-2"
	})(["&&&{border-radius:50%;width:", ";height:", ";color:", ";font-size:", ";padding:", ";background-color:", ";text-align:center;margin-right:", ";&:hover{background-color:", ";color:#fff;}}"], ({
	  theme
	}) => theme.sizes.paddingLayout, ({
	  theme
	}) => theme.sizes.paddingLayout, ({
	  theme
	}) => theme.colors.lightText, ({
	  theme
	}) => theme.fonts.base, ({
	  theme
	}) => theme.sizes.paddingMin, ({
	  theme
	}) => theme.colors.superLightBack, ({
	  theme
	}) => theme.sizes.padding, ({
	  theme
	}) => theme.colors.lightText);
	const HeaderTitle = styled__default.h1.attrs({
	  className: 'level-left'
	}).withConfig({
	  displayName: "action-header__HeaderTitle",
	  componentId: "sc-17u6jqx-3"
	})(["&&&{font-size:", ";font-weight:normal;}"], ({
	  theme
	}) => theme.fonts.header);
	const HeaderButtons = styled__default.div.attrs({
	  className: 'level-right'
	}).withConfig({
	  displayName: "action-header__HeaderButtons",
	  componentId: "sc-17u6jqx-4"
	})(["&&& a{margin-left:", ";}"], ({
	  theme
	}) => theme.sizes.padding);
	/**
	 * @memberof ActionHeader
	 * @private
	 */

	/**
	 * Header of an action
	 *
	 * @private
	 * @component
	 */
	const ActionHeader = props => {
	  const h = new ViewHelpers();
	  const {
	    resource,
	    toggleFilter,
	    actionPerformed,
	    record,
	    action,
	    tag,
	    recordId
	  } = props;
	  const resourceId = resource.id;
	  let actions = record ? record.recordActions : resource.resourceActions; // list action is not accessible via the ActionHeader buttons

	  actions = actions && actions.filter(ra => ![action && action.name, 'list'].includes(ra.name));
	  const title = action ? action.label : resource.name;
	  const isList = action && action.name === 'list';
	  return React__default.createElement(HeaderWrapper, null, React__default.createElement(HeaderTitle, null, !isList && React__default.createElement(BackBtn, {
	    to: h.resourceActionUrl({
	      resourceId,
	      actionName: 'list'
	    })
	  }, React__default.createElement("i", {
	    className: "icomoon-pagination-left"
	  })), title, tag ? React__default.createElement(Tag, null, tag) : ''), React__default.createElement(HeaderButtons, null, actions.map(headerAction => React__default.createElement(ActionButton$1, {
	    action: headerAction,
	    key: headerAction.name,
	    actionPerformed: actionPerformed,
	    className: "is-primary",
	    resourceId: resource.id,
	    recordId: recordId
	  })), toggleFilter && React__default.createElement(StyledButton, {
	    onClick: toggleFilter,
	    as: "a"
	  }, React__default.createElement("span", {
	    className: "icon"
	  }, React__default.createElement("i", {
	    className: "fas fa-sliders-h"
	  })), React__default.createElement("span", {
	    className: "btn-text"
	  }, "Filter"))));
	};

	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */

	var isBuffer = function isBuffer (obj) {
	  return obj != null && obj.constructor != null &&
	    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	};

	var flat = flatten;
	flatten.flatten = flatten;
	flatten.unflatten = unflatten;

	function flatten (target, opts) {
	  opts = opts || {};

	  var delimiter = opts.delimiter || '.';
	  var maxDepth = opts.maxDepth;
	  var output = {};

	  function step (object, prev, currentDepth) {
	    currentDepth = currentDepth || 1;
	    Object.keys(object).forEach(function (key) {
	      var value = object[key];
	      var isarray = opts.safe && Array.isArray(value);
	      var type = Object.prototype.toString.call(value);
	      var isbuffer = isBuffer(value);
	      var isobject = (
	        type === '[object Object]' ||
	        type === '[object Array]'
	      );

	      var newKey = prev
	        ? prev + delimiter + key
	        : key;

	      if (!isarray && !isbuffer && isobject && Object.keys(value).length &&
	        (!opts.maxDepth || currentDepth < maxDepth)) {
	        return step(value, newKey, currentDepth + 1)
	      }

	      output[newKey] = value;
	    });
	  }

	  step(target);

	  return output
	}

	function unflatten (target, opts) {
	  opts = opts || {};

	  var delimiter = opts.delimiter || '.';
	  var overwrite = opts.overwrite || false;
	  var result = {};

	  var isbuffer = isBuffer(target);
	  if (isbuffer || Object.prototype.toString.call(target) !== '[object Object]') {
	    return target
	  }

	  // safely ensure that the key is
	  // an integer.
	  function getkey (key) {
	    var parsedKey = Number(key);

	    return (
	      isNaN(parsedKey) ||
	      key.indexOf('.') !== -1 ||
	      opts.object
	    ) ? key
	      : parsedKey
	  }

	  var sortedKeys = Object.keys(target).sort(function (keyA, keyB) {
	    return keyA.length - keyB.length
	  });

	  sortedKeys.forEach(function (key) {
	    var split = key.split(delimiter);
	    var key1 = getkey(split.shift());
	    var key2 = getkey(split[0]);
	    var recipient = result;

	    while (key2 !== undefined) {
	      var type = Object.prototype.toString.call(recipient[key1]);
	      var isobject = (
	        type === '[object Object]' ||
	        type === '[object Array]'
	      );

	      // do not write over falsey, non-undefined values if overwrite is false
	      if (!overwrite && !isobject && typeof recipient[key1] !== 'undefined') {
	        return
	      }

	      if ((overwrite && !isobject) || (!overwrite && recipient[key1] == null)) {
	        recipient[key1] = (
	          typeof key2 === 'number' &&
	          !opts.object ? [] : {}
	        );
	      }

	      recipient = recipient[key1];
	      if (split.length > 0) {
	        key1 = getkey(split.shift());
	        key2 = getkey(split[0]);
	      }
	    }

	    // unflatten again for 'messy objects'
	    recipient[key1] = unflatten(target[key], opts);
	  });

	  return result
	}
	var flat_1 = flat.flatten;
	var flat_2 = flat.unflatten;

	/**
	 * Converts flatten params to array items when given property is an array.
	 *
	 * What problem it solves:
	 * so let say user has a record with record.property:
	 * ```
	 * Item.0.imageVariants.0.dateCreated: "2019-09-19T10:00:00.000Z"
	 * Item.0.imageVariants.0.imageURL: "url to help"
	 * Item.0.imageVariants.0.isApproved: true
	 * Item.0.imageVariants.0.isDeleted: false
	 * Item.0.imageVariants.1.dateCreated: "2019-09-19T19:10:34.919Z"
	 * Item.0.imageVariants.1.imageURL: "url 2"
	 * ```
	 *
	 * this function for property: `Item.0.imageVariants` should return array with 2 items. Where for
	 * property `Item` array with one element
	 *
	 * @param {PropertyJSON} property
	 * @param {RecordJSON} record
	 *
	 * @private
	 */
	const convertParamsToArrayItems = (property, record) => {
	  const tempName = 'arrayField';
	  const regex = new RegExp(`^${property.name}`);
	  /**
	   * in this step we filter keys which starts with regex the same as name. So let say
	   * property name is: Item.0.imageVariants and the record.params is:
	   * {
	   *  'anyOtherKey': 'value'
	   *  'Item.0.imageVariants.0.dateCreated': '2019-09-19T10:00:00.000Z',
	   *  'Item.0.imageVariants.0.imageURL': 'url to help'
	   * }
	   *
	   * so keys will be `Item.0.imageVariants.0.dateCreated` and `Item.0.imageVariants.0.imageURL`
	   */

	  const keys = Object.keys(record.params).filter(key => key.match(regex));
	  /**
	   * Next, we create new object with only those keys. But we have to rename the regex part
	   * because it could has dots (take a look at const tempName = 'arrayField' on the top).
	   * If we didn't do this - then unflatten function wouldn't work.
	   *
	   * so in our example obj is not: {
	   *  'Item.0.imageVariants.0.dateCreated': '2019-09-19T10:00:00.000Z',
	   *  'Item.0.imageVariants.0.imageURL': 'url to help'
	   * }
	   *
	   * but: {
	   *  'arrayField.0.dateCreated': '2019-09-19T10:00:00.000Z',
	   *  'arrayField.0.imageURL': 'url to help'
	   * }
	   */

	  const obj = keys.reduce((memo, key) => ({ ...memo,
	    [key.replace(regex, tempName)]: record.params[key]
	  }), {});
	  /**
	   * In the last step we unflatten the object and return 'tempName' property:
	   * {
	   *  'arrayField: [{
	   *     dateCreated': '2019-09-19T10:00:00.000Z',
	   *     'arrayField.0.imageURL': 'url to help',
	   *   }],
	   * }['arrayField']
	   */

	  const unflatten = flat_2(obj);
	  return unflatten[tempName] || [];
	};

	/**
	 * for given params:
	 *
	 * example:
	 * ```
	 * anotherItem: 'value'
	 * Item.0.imageVariants.0.dateCreated: "2019-09-19T10:00:00.000Z"
	 * Item.0.imageVariants.0.imageURL: "url to help"
	 * Item.0.imageVariants.0.isApproved: true
	 * Item.0.imageVariants.0.isDeleted: false
	 * Item.0.imageVariants.1.dateCreated: "2019-09-19T19:10:34.919Z"
	 * Item.0.imageVariants.1.imageURL: "url 2"
	 * ```
	 *
	 * and given propertyPath, example: `Item.0.imageVariants`
	 * and new array, example: [{
	 *   dateCreated: "2019-09-19T19:10:34.919Z"
	 *   imageURL: "url 2"
	 * }]
	 *
	 * returns:
	 * ```
	 * anotherItem: 'value'
	 * Item.0.imageVariants.1.dateCreated: "2019-09-19T19:10:34.919Z"
	 * Item.0.imageVariants.1.imageURL: "url 2"
	 * ```
	 *
	 * @private
	 */
	function updateParamsArray(params, propertyPath, array) {
	  const regex = new RegExp(`^${propertyPath}`);
	  const filteredParams = Object.entries(params).filter(([key]) => !key.match(regex)).reduce((memo, [key, value]) => ({ ...memo,
	    [key]: value
	  }), {});
	  return flat_1({ ...filteredParams,
	    [propertyPath]: array
	  });
	}

	const normalizeParams = params => flat_1(flat_2(params, {
	  overwrite: true
	}));

	class Edit extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.addNew = this.addNew.bind(this);
	  }

	  addNew(event) {
	    const {
	      property,
	      record,
	      onChange
	    } = this.props;
	    const items = convertParamsToArrayItems(property, record);
	    const newRecord = { ...record
	    };
	    newRecord.params = normalizeParams({ ...newRecord.params,
	      // otherwise yarn types is not working
	      [property.name]: [...items, property.subProperties.length ? {} : '']
	    });
	    onChange(newRecord);
	    event.preventDefault();
	    return false;
	  }

	  removeItem(i, event) {
	    const {
	      property,
	      record,
	      onChange
	    } = this.props;
	    const items = convertParamsToArrayItems(property, record);
	    const newItems = [...items];
	    newItems.splice(i, 1);
	    const newRecord = { ...record
	    };
	    newRecord.params = updateParamsArray(newRecord.params, property.name, newItems);
	    onChange(newRecord);
	    event.preventDefault();
	    return false;
	  }

	  renderItem(item, i) {
	    const {
	      ItemComponent,
	      property
	    } = this.props;
	    return React__default.createElement(Columns, {
	      key: i
	    }, React__default.createElement(Column, {
	      width: 10
	    }, React__default.createElement(ItemComponent, _extends_1({}, this.props, {
	      property: { ...property,
	        name: `${property.name}.${i}`,
	        label: `[${i + 1}]`,
	        isArray: false
	      }
	    }))), React__default.createElement(Column, {
	      width: 2
	    }, React__default.createElement(StyledButton, {
	      style: {
	        marginTop: 25
	      },
	      onClick: event => this.removeItem(i, event)
	    }, "Remove")));
	  }

	  renderInput() {
	    const {
	      property,
	      record
	    } = this.props;
	    const items = convertParamsToArrayItems(property, record);
	    return React__default.createElement(StyledSection, {
	      style: {
	        marginTop: 20
	      }
	    }, items.map((item, i) => this.renderItem(item, i)), React__default.createElement("p", null, React__default.createElement(StyledButton, {
	      onClick: this.addNew
	    }, "Add new item")));
	  }

	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    const error = record.errors && record.errors[property.name];
	    return React__default.createElement(PropertyInEdit, {
	      property: property,
	      error: error
	    }, this.renderInput());
	  }

	}

	class List extends React__default.PureComponent {
	  render() {
	    const {
	      property,
	      record,
	      resource
	    } = this.props;
	    const showAction = record.recordActions.find(a => a.name === 'show');
	    const unflatten = flat_2(record.params);
	    const values = unflatten[property.name] || [];

	    if (resource.titleProperty.name === property.name && showAction) {
	      const h = new ViewHelpers();
	      const href = h.recordActionUrl({
	        resourceId: resource.id,
	        recordId: record.id,
	        actionName: 'show'
	      });
	      return React__default.createElement(reactRouterDom.Link, {
	        to: href
	      }, `length: ${values.length}`);
	    }

	    return React__default.createElement("span", null, `length: ${values.length}`);
	  }

	}

	class Show extends React__default.PureComponent {
	  render() {
	    const {
	      property,
	      record,
	      ItemComponent
	    } = this.props;
	    const items = convertParamsToArrayItems(property, record);
	    return React__default.createElement(PropertyInShow, {
	      property: property
	    }, React__default.createElement(StyledSection, null, items.map((item, i) => React__default.createElement(ItemComponent, _extends_1({}, this.props, {
	      // eslint-disable-next-line react/no-array-index-key
	      key: i,
	      property: { ...property,
	        name: `${property.name}.${i}`,
	        label: `[${i + 1}]`,
	        isArray: false
	      }
	    })))));
	  }

	}

	// import Show from './show'

	var ArrayType = /*#__PURE__*/Object.freeze({
		__proto__: null,
		show: Show,
		edit: Edit,
		list: List
	});

	const Edit$1 = props => {
	  const {
	    property,
	    record,
	    ItemComponent
	  } = props;
	  const error = record.errors && record.errors[property.name];
	  return React__default.createElement(PropertyInEdit, {
	    property: property,
	    error: error
	  }, React__default.createElement(StyledSection, null, property.subProperties.map(subProperty => React__default.createElement(ItemComponent, _extends_1({}, props, {
	    key: subProperty.name,
	    property: { ...subProperty,
	      name: `${property.name}.${subProperty.name}`
	    }
	  })))));
	};

	const Show$1 = props => {
	  const {
	    property,
	    ItemComponent
	  } = props;
	  return React__default.createElement(PropertyInShow, {
	    property: property
	  }, React__default.createElement(StyledSection, null, property.subProperties.map(subProperty => React__default.createElement(ItemComponent, _extends_1({}, props, {
	    key: subProperty.name,
	    property: { ...subProperty,
	      name: `${property.name}.${subProperty.name}`
	    }
	  })))));
	};

	// TODO define ItemComponent interface
	class List$1 extends React__default.PureComponent {
	  renderItems() {
	    const {
	      property,
	      ItemComponent
	    } = this.props;
	    return React__default.createElement(React__default.Fragment, null, property.subProperties.map(subProperty => React__default.createElement("div", {
	      key: subProperty.name
	    }, React__default.createElement(Label, {
	      style: {
	        display: 'inline'
	      }
	    }, `${subProperty.label}: `), React__default.createElement(ItemComponent, _extends_1({}, this.props, {
	      key: subProperty.name,
	      property: { ...subProperty,
	        name: `${property.name}.${subProperty.name}`
	      }
	    })))));
	  }

	  render() {
	    const {
	      property,
	      record,
	      resource
	    } = this.props;
	    const showAction = record.recordActions.find(a => a.name === 'show');

	    if (resource.titleProperty.name === property.name && showAction) {
	      const h = new ViewHelpers();
	      const href = h.recordActionUrl({
	        resourceId: resource.id,
	        recordId: record.id,
	        actionName: 'show'
	      });
	      return React__default.createElement(reactRouterDom.Link, {
	        to: href
	      }, this.renderItems());
	    }

	    return this.renderItems();
	  }

	}

	// import Show from './show'

	var MixedType = /*#__PURE__*/Object.freeze({
		__proto__: null,
		show: Show$1,
		edit: Edit$1,
		list: List$1
	});

	class Show$2 extends React__default.PureComponent {
	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    const value = record.params[property.name];
	    const className = property.availableValues ? 'tag' : '';
	    return React__default.createElement(PropertyInShow, {
	      property: property
	    }, typeof value !== 'undefined' ? React__default.createElement("span", {
	      className: className
	    }, value) : '');
	  }

	}

	function areInputsEqual(newInputs, lastInputs) {
	    if (newInputs.length !== lastInputs.length) {
	        return false;
	    }
	    for (var i = 0; i < newInputs.length; i++) {
	        if (newInputs[i] !== lastInputs[i]) {
	            return false;
	        }
	    }
	    return true;
	}

	function memoizeOne(resultFn, isEqual) {
	    if (isEqual === void 0) { isEqual = areInputsEqual; }
	    var lastThis;
	    var lastArgs = [];
	    var lastResult;
	    var calledOnce = false;
	    function memoized() {
	        var newArgs = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            newArgs[_i] = arguments[_i];
	        }
	        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
	            return lastResult;
	        }
	        lastResult = resultFn.apply(this, newArgs);
	        calledOnce = true;
	        lastThis = this;
	        lastArgs = newArgs;
	        return lastResult;
	    }
	    return memoized;
	}

	function memoize(fn) {
	  var cache = {};
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	var unitlessKeys = {
	  animationIterationCount: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	/* eslint-disable */
	// murmurhash2 via https://github.com/garycourt/murmurhash-js/blob/master/murmurhash2_gc.js
	function murmurhash2_32_gc(str) {
	  var l = str.length,
	      h = l ^ l,
	      i = 0,
	      k;

	  while (l >= 4) {
	    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
	    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
	    k ^= k >>> 24;
	    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
	    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;
	    l -= 4;
	    ++i;
	  }

	  switch (l) {
	    case 3:
	      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

	    case 2:
	      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

	    case 1:
	      h ^= str.charCodeAt(i) & 0xff;
	      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
	  }

	  h ^= h >>> 13;
	  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
	  h ^= h >>> 15;
	  return (h >>> 0).toString(36);
	}

	function stylis_min (W) {
	  function M(d, c, e, h, a) {
	    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
	      g = e.charCodeAt(l);
	      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);

	      if (0 === b + n + v + m) {
	        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
	          switch (g) {
	            case 32:
	            case 9:
	            case 59:
	            case 13:
	            case 10:
	              break;

	            default:
	              f += e.charAt(l);
	          }

	          g = 59;
	        }

	        switch (g) {
	          case 123:
	            f = f.trim();
	            q = f.charCodeAt(0);
	            k = 1;

	            for (t = ++l; l < B;) {
	              switch (g = e.charCodeAt(l)) {
	                case 123:
	                  k++;
	                  break;

	                case 125:
	                  k--;
	                  break;

	                case 47:
	                  switch (g = e.charCodeAt(l + 1)) {
	                    case 42:
	                    case 47:
	                      a: {
	                        for (u = l + 1; u < J; ++u) {
	                          switch (e.charCodeAt(u)) {
	                            case 47:
	                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
	                                l = u + 1;
	                                break a;
	                              }

	                              break;

	                            case 10:
	                              if (47 === g) {
	                                l = u + 1;
	                                break a;
	                              }

	                          }
	                        }

	                        l = u;
	                      }

	                  }

	                  break;

	                case 91:
	                  g++;

	                case 40:
	                  g++;

	                case 34:
	                case 39:
	                  for (; l++ < J && e.charCodeAt(l) !== g;) {
	                  }

	              }

	              if (0 === k) break;
	              l++;
	            }

	            k = e.substring(t, l);
	            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));

	            switch (q) {
	              case 64:
	                0 < r && (f = f.replace(N, ''));
	                g = f.charCodeAt(1);

	                switch (g) {
	                  case 100:
	                  case 109:
	                  case 115:
	                  case 45:
	                    r = c;
	                    break;

	                  default:
	                    r = O;
	                }

	                k = M(c, r, k, g, a + 1);
	                t = k.length;
	                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
	                if (0 < t) switch (g) {
	                  case 115:
	                    f = f.replace(da, ea);

	                  case 100:
	                  case 109:
	                  case 45:
	                    k = f + '{' + k + '}';
	                    break;

	                  case 107:
	                    f = f.replace(fa, '$1 $2');
	                    k = f + '{' + k + '}';
	                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
	                    break;

	                  default:
	                    k = f + k, 112 === h && (k = (p += k, ''));
	                } else k = '';
	                break;

	              default:
	                k = M(c, X(c, f, I), k, h, a + 1);
	            }

	            F += k;
	            k = I = r = u = q = 0;
	            f = '';
	            g = e.charCodeAt(++l);
	            break;

	          case 125:
	          case 59:
	            f = (0 < r ? f.replace(N, '') : f).trim();
	            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
	              case 0:
	                break;

	              case 64:
	                if (105 === g || 99 === g) {
	                  G += f + e.charAt(l);
	                  break;
	                }

	              default:
	                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
	            }
	            I = r = u = q = 0;
	            f = '';
	            g = e.charCodeAt(++l);
	        }
	      }

	      switch (g) {
	        case 13:
	        case 10:
	          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
	          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
	          z = 1;
	          D++;
	          break;

	        case 59:
	        case 125:
	          if (0 === b + n + v + m) {
	            z++;
	            break;
	          }

	        default:
	          z++;
	          y = e.charAt(l);

	          switch (g) {
	            case 9:
	            case 32:
	              if (0 === n + m + b) switch (x) {
	                case 44:
	                case 58:
	                case 9:
	                case 32:
	                  y = '';
	                  break;

	                default:
	                  32 !== g && (y = ' ');
	              }
	              break;

	            case 0:
	              y = '\\0';
	              break;

	            case 12:
	              y = '\\f';
	              break;

	            case 11:
	              y = '\\v';
	              break;

	            case 38:
	              0 === n + b + m && (r = I = 1, y = '\f' + y);
	              break;

	            case 108:
	              if (0 === n + b + m + E && 0 < u) switch (l - u) {
	                case 2:
	                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);

	                case 8:
	                  111 === K && (E = K);
	              }
	              break;

	            case 58:
	              0 === n + b + m && (u = l);
	              break;

	            case 44:
	              0 === b + v + n + m && (r = 1, y += '\r');
	              break;

	            case 34:
	            case 39:
	              0 === b && (n = n === g ? 0 : 0 === n ? g : n);
	              break;

	            case 91:
	              0 === n + b + v && m++;
	              break;

	            case 93:
	              0 === n + b + v && m--;
	              break;

	            case 41:
	              0 === n + b + m && v--;
	              break;

	            case 40:
	              if (0 === n + b + m) {
	                if (0 === q) switch (2 * x + 3 * K) {
	                  case 533:
	                    break;

	                  default:
	                    q = 1;
	                }
	                v++;
	              }

	              break;

	            case 64:
	              0 === b + v + n + m + u + k && (k = 1);
	              break;

	            case 42:
	            case 47:
	              if (!(0 < n + m + v)) switch (b) {
	                case 0:
	                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {
	                    case 235:
	                      b = 47;
	                      break;

	                    case 220:
	                      t = l, b = 42;
	                  }

	                  break;

	                case 42:
	                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
	              }
	          }

	          0 === b && (f += y);
	      }

	      K = x;
	      x = g;
	      l++;
	    }

	    t = p.length;

	    if (0 < t) {
	      r = c;
	      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
	      p = r.join(',') + '{' + p + '}';

	      if (0 !== w * E) {
	        2 !== w || L(p, 2) || (E = 0);

	        switch (E) {
	          case 111:
	            p = p.replace(ha, ':-moz-$1') + p;
	            break;

	          case 112:
	            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
	        }

	        E = 0;
	      }
	    }

	    return G + p + F;
	  }

	  function X(d, c, e) {
	    var h = c.trim().split(ia);
	    c = h;
	    var a = h.length,
	        m = d.length;

	    switch (m) {
	      case 0:
	      case 1:
	        var b = 0;

	        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
	          c[b] = Z(d, c[b], e).trim();
	        }

	        break;

	      default:
	        var v = b = 0;

	        for (c = []; b < a; ++b) {
	          for (var n = 0; n < m; ++n) {
	            c[v++] = Z(d[n] + ' ', h[b], e).trim();
	          }
	        }

	    }

	    return c;
	  }

	  function Z(d, c, e) {
	    var h = c.charCodeAt(0);
	    33 > h && (h = (c = c.trim()).charCodeAt(0));

	    switch (h) {
	      case 38:
	        return c.replace(F, '$1' + d.trim());

	      case 58:
	        return d.trim() + c.replace(F, '$1' + d.trim());

	      default:
	        if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
	    }

	    return d + c;
	  }

	  function P(d, c, e, h) {
	    var a = d + ';',
	        m = 2 * c + 3 * e + 4 * h;

	    if (944 === m) {
	      d = a.indexOf(':', 9) + 1;
	      var b = a.substring(d, a.length - 1).trim();
	      b = a.substring(0, d).trim() + b + ';';
	      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
	    }

	    if (0 === w || 2 === w && !L(a, 1)) return a;

	    switch (m) {
	      case 1015:
	        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;

	      case 951:
	        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;

	      case 963:
	        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;

	      case 1009:
	        if (100 !== a.charCodeAt(4)) break;

	      case 969:
	      case 942:
	        return '-webkit-' + a + a;

	      case 978:
	        return '-webkit-' + a + '-moz-' + a + a;

	      case 1019:
	      case 983:
	        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;

	      case 883:
	        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
	        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
	        break;

	      case 932:
	        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
	          case 103:
	            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;

	          case 115:
	            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;

	          case 98:
	            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
	        }
	        return '-webkit-' + a + '-ms-' + a + a;

	      case 964:
	        return '-webkit-' + a + '-ms-flex-' + a + a;

	      case 1023:
	        if (99 !== a.charCodeAt(8)) break;
	        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
	        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;

	      case 1005:
	        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;

	      case 1e3:
	        b = a.substring(13).trim();
	        c = b.indexOf('-') + 1;

	        switch (b.charCodeAt(0) + b.charCodeAt(c)) {
	          case 226:
	            b = a.replace(G, 'tb');
	            break;

	          case 232:
	            b = a.replace(G, 'tb-rl');
	            break;

	          case 220:
	            b = a.replace(G, 'lr');
	            break;

	          default:
	            return a;
	        }

	        return '-webkit-' + a + '-ms-' + b + a;

	      case 1017:
	        if (-1 === a.indexOf('sticky', 9)) break;

	      case 975:
	        c = (a = d).length - 10;
	        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();

	        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
	          case 203:
	            if (111 > b.charCodeAt(8)) break;

	          case 115:
	            a = a.replace(b, '-webkit-' + b) + ';' + a;
	            break;

	          case 207:
	          case 102:
	            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
	        }

	        return a + ';';

	      case 938:
	        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
	          case 105:
	            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;

	          case 115:
	            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;

	          default:
	            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
	        }
	        break;

	      case 973:
	      case 989:
	        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;

	      case 931:
	      case 953:
	        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
	        break;

	      case 962:
	        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
	    }

	    return a;
	  }

	  function L(d, c) {
	    var e = d.indexOf(1 === c ? ':' : '{'),
	        h = d.substring(0, 3 !== c ? e : 10);
	    e = d.substring(e + 1, d.length - 1);
	    return R(2 !== c ? h : h.replace(na, '$1'), e, c);
	  }

	  function ea(d, c) {
	    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
	    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
	  }

	  function H(d, c, e, h, a, m, b, v, n, q) {
	    for (var g = 0, x = c, w; g < A; ++g) {
	      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
	        case void 0:
	        case !1:
	        case !0:
	        case null:
	          break;

	        default:
	          x = w;
	      }
	    }

	    if (x !== c) return x;
	  }

	  function T(d) {
	    switch (d) {
	      case void 0:
	      case null:
	        A = S.length = 0;
	        break;

	      default:
	        switch (d.constructor) {
	          case Array:
	            for (var c = 0, e = d.length; c < e; ++c) {
	              T(d[c]);
	            }

	            break;

	          case Function:
	            S[A++] = d;
	            break;

	          case Boolean:
	            Y = !!d | 0;
	        }

	    }

	    return T;
	  }

	  function U(d) {
	    d = d.prefix;
	    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
	    return U;
	  }

	  function B(d, c) {
	    var e = d;
	    33 > e.charCodeAt(0) && (e = e.trim());
	    V = e;
	    e = [V];

	    if (0 < A) {
	      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
	      void 0 !== h && 'string' === typeof h && (c = h);
	    }

	    var a = M(O, e, c, 0, 0);
	    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
	    V = '';
	    E = 0;
	    z = D = 1;
	    return a;
	  }

	  var ca = /^\0+/g,
	      N = /[\0\r\f]/g,
	      aa = /: */g,
	      ka = /zoo|gra/,
	      ma = /([,: ])(transform)/g,
	      ia = /,\r+?/g,
	      F = /([\t\r\n ])*\f?&/g,
	      fa = /@(k\w+)\s*(\S*)\s*/,
	      Q = /::(place)/g,
	      ha = /:(read-only)/g,
	      G = /[svh]\w+-[tblr]{2}/,
	      da = /\(\s*(.*)\s*\)/g,
	      oa = /([\s\S]*?);/g,
	      ba = /-self|flex-/g,
	      na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
	      la = /stretch|:\s*\w+\-(?:conte|avail)/,
	      ja = /([^-])(image-set\()/,
	      z = 1,
	      D = 1,
	      E = 0,
	      w = 1,
	      O = [],
	      S = [],
	      A = 0,
	      R = null,
	      Y = 0,
	      V = '';
	  B.use = T;
	  B.set = U;
	  void 0 !== W && U(W);
	  return B;
	}

	var stylisRuleSheet = createCommonjsModule(function (module, exports) {
	(function (factory) {
		 (module['exports'] = factory()) ;
	}(function () {

		return function (insertRule) {
			var delimiter = '/*|*/';
			var needle = delimiter+'}';

			function toSheet (block) {
				if (block)
					try {
						insertRule(block + '}');
					} catch (e) {}
			}

			return function ruleSheet (context, content, selectors, parents, line, column, length, ns, depth, at) {
				switch (context) {
					// property
					case 1:
						// @import
						if (depth === 0 && content.charCodeAt(0) === 64)
							return insertRule(content+';'), ''
						break
					// selector
					case 2:
						if (ns === 0)
							return content + delimiter
						break
					// at-rule
					case 3:
						switch (ns) {
							// @font-face, @page
							case 102:
							case 112:
								return insertRule(selectors[0]+content), ''
							default:
								return content + (at === 0 ? delimiter : '')
						}
					case -2:
						content.split(needle).forEach(toSheet);
				}
			}
		}
	}));
	});

	var hyphenateRegex = /[A-Z]|^ms/g;
	var processStyleName = memoize(function (styleName) {
	  return styleName.replace(hyphenateRegex, '-$&').toLowerCase();
	});
	var processStyleValue = function processStyleValue(key, value) {
	  if (value == null || typeof value === 'boolean') {
	    return '';
	  }

	  if (unitlessKeys[key] !== 1 && key.charCodeAt(1) !== 45 && // custom properties
	  !isNaN(value) && value !== 0) {
	    return value + 'px';
	  }

	  return value;
	};

	{
	  var contentValuePattern = /(attr|calc|counters?|url)\(/;
	  var contentValues = ['normal', 'none', 'counter', 'open-quote', 'close-quote', 'no-open-quote', 'no-close-quote', 'initial', 'inherit', 'unset'];
	  var oldProcessStyleValue = processStyleValue;

	  processStyleValue = function processStyleValue(key, value) {
	    if (key === 'content') {
	      if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
	        console.error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
	      }
	    }

	    return oldProcessStyleValue(key, value);
	  };
	}

	var classnames = function classnames(args) {
	  var len = args.length;
	  var i = 0;
	  var cls = '';

	  for (; i < len; i++) {
	    var arg = args[i];
	    if (arg == null) continue;
	    var toAdd = void 0;

	    switch (typeof arg) {
	      case 'boolean':
	        break;

	      case 'function':
	        {
	          console.error('Passing functions to cx is deprecated and will be removed in the next major version of Emotion.\n' + 'Please call the function before passing it to cx.');
	        }

	        toAdd = classnames([arg()]);
	        break;

	      case 'object':
	        {
	          if (Array.isArray(arg)) {
	            toAdd = classnames(arg);
	          } else {
	            toAdd = '';

	            for (var k in arg) {
	              if (arg[k] && k) {
	                toAdd && (toAdd += ' ');
	                toAdd += k;
	              }
	            }
	          }

	          break;
	        }

	      default:
	        {
	          toAdd = arg;
	        }
	    }

	    if (toAdd) {
	      cls && (cls += ' ');
	      cls += toAdd;
	    }
	  }

	  return cls;
	};
	var isBrowser = typeof document !== 'undefined';

	/*

	high performance StyleSheet for css-in-js systems

	- uses multiple style tags behind the scenes for millions of rules
	- uses `insertRule` for appending in production for *much* faster performance
	- 'polyfills' on server side

	// usage

	import StyleSheet from 'glamor/lib/sheet'
	let styleSheet = new StyleSheet()

	styleSheet.inject()
	- 'injects' the stylesheet into the page (or into memory if on server)

	styleSheet.insert('#box { border: 1px solid red; }')
	- appends a css rule into the stylesheet

	styleSheet.flush()
	- empties the stylesheet of all its contents

	*/
	// $FlowFixMe
	function sheetForTag(tag) {
	  if (tag.sheet) {
	    // $FlowFixMe
	    return tag.sheet;
	  } // this weirdness brought to you by firefox


	  for (var i = 0; i < document.styleSheets.length; i++) {
	    if (document.styleSheets[i].ownerNode === tag) {
	      // $FlowFixMe
	      return document.styleSheets[i];
	    }
	  }
	}

	function makeStyleTag(opts) {
	  var tag = document.createElement('style');
	  tag.setAttribute('data-emotion', opts.key || '');

	  if (opts.nonce !== undefined) {
	    tag.setAttribute('nonce', opts.nonce);
	  }

	  tag.appendChild(document.createTextNode('')) // $FlowFixMe
	  ;
	  (opts.container !== undefined ? opts.container : document.head).appendChild(tag);
	  return tag;
	}

	var StyleSheet =
	/*#__PURE__*/
	function () {
	  function StyleSheet(options) {
	    this.isSpeedy = "development" === 'production'; // the big drawback here is that the css won't be editable in devtools

	    this.tags = [];
	    this.ctr = 0;
	    this.opts = options;
	  }

	  var _proto = StyleSheet.prototype;

	  _proto.inject = function inject() {
	    if (this.injected) {
	      throw new Error('already injected!');
	    }

	    this.tags[0] = makeStyleTag(this.opts);
	    this.injected = true;
	  };

	  _proto.speedy = function speedy(bool) {
	    if (this.ctr !== 0) {
	      // cannot change speedy mode after inserting any rule to sheet. Either call speedy(${bool}) earlier in your app, or call flush() before speedy(${bool})
	      throw new Error("cannot change speedy now");
	    }

	    this.isSpeedy = !!bool;
	  };

	  _proto.insert = function insert(rule, sourceMap) {
	    // this is the ultrafast version, works across browsers
	    if (this.isSpeedy) {
	      var tag = this.tags[this.tags.length - 1];
	      var sheet = sheetForTag(tag);

	      try {
	        sheet.insertRule(rule, sheet.cssRules.length);
	      } catch (e) {
	        {
	          console.warn('illegal rule', rule); // eslint-disable-line no-console
	        }
	      }
	    } else {
	      var _tag = makeStyleTag(this.opts);

	      this.tags.push(_tag);

	      _tag.appendChild(document.createTextNode(rule + (sourceMap || '')));
	    }

	    this.ctr++;

	    if (this.ctr % 65000 === 0) {
	      this.tags.push(makeStyleTag(this.opts));
	    }
	  };

	  _proto.flush = function flush() {
	    // $FlowFixMe
	    this.tags.forEach(function (tag) {
	      return tag.parentNode.removeChild(tag);
	    });
	    this.tags = [];
	    this.ctr = 0; // todo - look for remnants in document.styleSheets

	    this.injected = false;
	  };

	  return StyleSheet;
	}();

	function createEmotion(context, options) {
	  if (context.__SECRET_EMOTION__ !== undefined) {
	    return context.__SECRET_EMOTION__;
	  }

	  if (options === undefined) options = {};
	  var key = options.key || 'css';

	  {
	    if (/[^a-z-]/.test(key)) {
	      throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
	    }
	  }

	  var current;

	  function insertRule(rule) {
	    current += rule;

	    if (isBrowser) {
	      sheet.insert(rule, currentSourceMap);
	    }
	  }

	  var insertionPlugin = stylisRuleSheet(insertRule);
	  var stylisOptions;

	  if (options.prefix !== undefined) {
	    stylisOptions = {
	      prefix: options.prefix
	    };
	  }

	  var caches = {
	    registered: {},
	    inserted: {},
	    nonce: options.nonce,
	    key: key
	  };
	  var sheet = new StyleSheet(options);

	  if (isBrowser) {
	    // 🚀
	    sheet.inject();
	  }

	  var stylis = new stylis_min(stylisOptions);
	  stylis.use(options.stylisPlugins)(insertionPlugin);
	  var currentSourceMap = '';

	  function handleInterpolation(interpolation, couldBeSelectorInterpolation) {
	    if (interpolation == null) {
	      return '';
	    }

	    switch (typeof interpolation) {
	      case 'boolean':
	        return '';

	      case 'function':
	        if (interpolation.__emotion_styles !== undefined) {
	          var selector = interpolation.toString();

	          if (selector === 'NO_COMPONENT_SELECTOR' && "development" !== 'production') {
	            throw new Error('Component selectors can only be used in conjunction with babel-plugin-emotion.');
	          }

	          return selector;
	        }

	        if (this === undefined && "development" !== 'production') {
	          console.error('Interpolating functions in css calls is deprecated and will be removed in the next major version of Emotion.\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\n' + 'It can be called directly with props or interpolated in a styled call like this\n' + "let SomeComponent = styled('div')`${dynamicStyle}`");
	        }

	        return handleInterpolation.call(this, this === undefined ? interpolation() : // $FlowFixMe
	        interpolation(this.mergedProps, this.context), couldBeSelectorInterpolation);

	      case 'object':
	        return createStringFromObject.call(this, interpolation);

	      default:
	        var cached = caches.registered[interpolation];
	        return couldBeSelectorInterpolation === false && cached !== undefined ? cached : interpolation;
	    }
	  }

	  var objectToStringCache = new WeakMap();

	  function createStringFromObject(obj) {
	    if (objectToStringCache.has(obj)) {
	      // $FlowFixMe
	      return objectToStringCache.get(obj);
	    }

	    var string = '';

	    if (Array.isArray(obj)) {
	      obj.forEach(function (interpolation) {
	        string += handleInterpolation.call(this, interpolation, false);
	      }, this);
	    } else {
	      Object.keys(obj).forEach(function (key) {
	        if (typeof obj[key] !== 'object') {
	          if (caches.registered[obj[key]] !== undefined) {
	            string += key + "{" + caches.registered[obj[key]] + "}";
	          } else {
	            string += processStyleName(key) + ":" + processStyleValue(key, obj[key]) + ";";
	          }
	        } else {
	          if (key === 'NO_COMPONENT_SELECTOR' && "development" !== 'production') {
	            throw new Error('Component selectors can only be used in conjunction with babel-plugin-emotion.');
	          }

	          if (Array.isArray(obj[key]) && typeof obj[key][0] === 'string' && caches.registered[obj[key][0]] === undefined) {
	            obj[key].forEach(function (value) {
	              string += processStyleName(key) + ":" + processStyleValue(key, value) + ";";
	            });
	          } else {
	            string += key + "{" + handleInterpolation.call(this, obj[key], false) + "}";
	          }
	        }
	      }, this);
	    }

	    objectToStringCache.set(obj, string);
	    return string;
	  }

	  var name;
	  var stylesWithLabel;
	  var labelPattern = /label:\s*([^\s;\n{]+)\s*;/g;

	  var createClassName = function createClassName(styles, identifierName) {
	    return murmurhash2_32_gc(styles + identifierName) + identifierName;
	  };

	  {
	    var oldCreateClassName = createClassName;
	    var sourceMappingUrlPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;

	    createClassName = function createClassName(styles, identifierName) {
	      return oldCreateClassName(styles.replace(sourceMappingUrlPattern, function (sourceMap) {
	        currentSourceMap = sourceMap;
	        return '';
	      }), identifierName);
	    };
	  }

	  var createStyles = function createStyles(strings) {
	    var stringMode = true;
	    var styles = '';
	    var identifierName = '';

	    if (strings == null || strings.raw === undefined) {
	      stringMode = false;
	      styles += handleInterpolation.call(this, strings, false);
	    } else {
	      styles += strings[0];
	    }

	    for (var _len = arguments.length, interpolations = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      interpolations[_key - 1] = arguments[_key];
	    }

	    interpolations.forEach(function (interpolation, i) {
	      styles += handleInterpolation.call(this, interpolation, styles.charCodeAt(styles.length - 1) === 46 // .
	      );

	      if (stringMode === true && strings[i + 1] !== undefined) {
	        styles += strings[i + 1];
	      }
	    }, this);
	    stylesWithLabel = styles;
	    styles = styles.replace(labelPattern, function (match, p1) {
	      identifierName += "-" + p1;
	      return '';
	    });
	    name = createClassName(styles, identifierName);
	    return styles;
	  };

	  {
	    var oldStylis = stylis;

	    stylis = function stylis(selector, styles) {
	      oldStylis(selector, styles);
	      currentSourceMap = '';
	    };
	  }

	  function insert(scope, styles) {
	    if (caches.inserted[name] === undefined) {
	      current = '';
	      stylis(scope, styles);
	      caches.inserted[name] = current;
	    }
	  }

	  var css = function css() {
	    var styles = createStyles.apply(this, arguments);
	    var selector = key + "-" + name;

	    if (caches.registered[selector] === undefined) {
	      caches.registered[selector] = stylesWithLabel;
	    }

	    insert("." + selector, styles);
	    return selector;
	  };

	  var keyframes = function keyframes() {
	    var styles = createStyles.apply(this, arguments);
	    var animation = "animation-" + name;
	    insert('', "@keyframes " + animation + "{" + styles + "}");
	    return animation;
	  };

	  var injectGlobal = function injectGlobal() {
	    var styles = createStyles.apply(this, arguments);
	    insert('', styles);
	  };

	  function getRegisteredStyles(registeredStyles, classNames) {
	    var rawClassName = '';
	    classNames.split(' ').forEach(function (className) {
	      if (caches.registered[className] !== undefined) {
	        registeredStyles.push(className);
	      } else {
	        rawClassName += className + " ";
	      }
	    });
	    return rawClassName;
	  }

	  function merge(className, sourceMap) {
	    var registeredStyles = [];
	    var rawClassName = getRegisteredStyles(registeredStyles, className);

	    if (registeredStyles.length < 2) {
	      return className;
	    }

	    return rawClassName + css(registeredStyles, sourceMap);
	  }

	  function cx() {
	    for (var _len2 = arguments.length, classNames = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      classNames[_key2] = arguments[_key2];
	    }

	    return merge(classnames(classNames));
	  }

	  function hydrateSingleId(id) {
	    caches.inserted[id] = true;
	  }

	  function hydrate(ids) {
	    ids.forEach(hydrateSingleId);
	  }

	  function flush() {
	    if (isBrowser) {
	      sheet.flush();
	      sheet.inject();
	    }

	    caches.inserted = {};
	    caches.registered = {};
	  }

	  if (isBrowser) {
	    var chunks = document.querySelectorAll("[data-emotion-" + key + "]");
	    Array.prototype.forEach.call(chunks, function (node) {
	      // $FlowFixMe
	      sheet.tags[0].parentNode.insertBefore(node, sheet.tags[0]); // $FlowFixMe

	      node.getAttribute("data-emotion-" + key).split(' ').forEach(hydrateSingleId);
	    });
	  }

	  var emotion = {
	    flush: flush,
	    hydrate: hydrate,
	    cx: cx,
	    merge: merge,
	    getRegisteredStyles: getRegisteredStyles,
	    injectGlobal: injectGlobal,
	    keyframes: keyframes,
	    css: css,
	    sheet: sheet,
	    caches: caches
	  };
	  context.__SECRET_EMOTION__ = emotion;
	  return emotion;
	}

	var context = typeof global !== 'undefined' ? global : {};

	var _createEmotion = createEmotion(context),
	    flush = _createEmotion.flush,
	    hydrate = _createEmotion.hydrate,
	    cx = _createEmotion.cx,
	    merge = _createEmotion.merge,
	    getRegisteredStyles = _createEmotion.getRegisteredStyles,
	    injectGlobal = _createEmotion.injectGlobal,
	    keyframes = _createEmotion.keyframes,
	    css = _createEmotion.css,
	    sheet = _createEmotion.sheet,
	    caches = _createEmotion.caches;

	var index_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		flush: flush,
		hydrate: hydrate,
		cx: cx,
		merge: merge,
		getRegisteredStyles: getRegisteredStyles,
		injectGlobal: injectGlobal,
		keyframes: keyframes,
		css: css,
		sheet: sheet,
		caches: caches
	});

	var performanceNow = createCommonjsModule(function (module) {
	// Generated by CoffeeScript 1.12.2
	(function() {
	  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - nodeLoadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    moduleLoadTime = getNanoSeconds();
	    upTime = process.uptime() * 1e9;
	    nodeLoadTime = moduleLoadTime - upTime;
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(commonjsGlobal);


	});

	var root = typeof window === 'undefined' ? commonjsGlobal : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf = root['request' + suffix]
	  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix];

	for(var i = 0; !raf && i < vendors.length; i++) {
	  raf = root[vendors[i] + 'Request' + suffix];
	  caf = root[vendors[i] + 'Cancel' + suffix]
	      || root[vendors[i] + 'CancelRequest' + suffix];
	}

	// Some versions of FF have rAF but not cAF
	if(!raf || !caf) {
	  var last = 0
	    , id = 0
	    , queue = []
	    , frameDuration = 1000 / 60;

	  raf = function(callback) {
	    if(queue.length === 0) {
	      var _now = performanceNow()
	        , next = Math.max(0, frameDuration - (_now - last));
	      last = next + _now;
	      setTimeout(function() {
	        var cp = queue.slice(0);
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue.length = 0;
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last);
	            } catch(e) {
	              setTimeout(function() { throw e }, 0);
	            }
	          }
	        }
	      }, Math.round(next));
	    }
	    queue.push({
	      handle: ++id,
	      callback: callback,
	      cancelled: false
	    });
	    return id
	  };

	  caf = function(handle) {
	    for(var i = 0; i < queue.length; i++) {
	      if(queue[i].handle === handle) {
	        queue[i].cancelled = true;
	      }
	    }
	  };
	}

	var raf_1 = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf.call(root, fn)
	};
	var cancel = function() {
	  caf.apply(root, arguments);
	};
	var polyfill = function(object) {
	  if (!object) {
	    object = root;
	  }
	  object.requestAnimationFrame = raf;
	  object.cancelAnimationFrame = caf;
	};
	raf_1.cancel = cancel;
	raf_1.polyfill = polyfill;

	var AutosizeInput_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(PropTypes$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var sizerStyle = {
		position: 'absolute',
		top: 0,
		left: 0,
		visibility: 'hidden',
		height: 0,
		overflow: 'scroll',
		whiteSpace: 'pre'
	};

	var INPUT_PROPS_BLACKLIST = ['extraWidth', 'injectStyles', 'inputClassName', 'inputRef', 'inputStyle', 'minWidth', 'onAutosize', 'placeholderIsMinWidth'];

	var cleanInputProps = function cleanInputProps(inputProps) {
		INPUT_PROPS_BLACKLIST.forEach(function (field) {
			return delete inputProps[field];
		});
		return inputProps;
	};

	var copyStyles = function copyStyles(styles, node) {
		node.style.fontSize = styles.fontSize;
		node.style.fontFamily = styles.fontFamily;
		node.style.fontWeight = styles.fontWeight;
		node.style.fontStyle = styles.fontStyle;
		node.style.letterSpacing = styles.letterSpacing;
		node.style.textTransform = styles.textTransform;
	};

	var isIE = typeof window !== 'undefined' && window.navigator ? /MSIE |Trident\/|Edge\//.test(window.navigator.userAgent) : false;

	var generateId = function generateId() {
		// we only need an auto-generated ID for stylesheet injection, which is only
		// used for IE. so if the browser is not IE, this should return undefined.
		return isIE ? '_' + Math.random().toString(36).substr(2, 12) : undefined;
	};

	var AutosizeInput = function (_Component) {
		_inherits(AutosizeInput, _Component);

		function AutosizeInput(props) {
			_classCallCheck(this, AutosizeInput);

			var _this = _possibleConstructorReturn(this, (AutosizeInput.__proto__ || Object.getPrototypeOf(AutosizeInput)).call(this, props));

			_this.inputRef = function (el) {
				_this.input = el;
				if (typeof _this.props.inputRef === 'function') {
					_this.props.inputRef(el);
				}
			};

			_this.placeHolderSizerRef = function (el) {
				_this.placeHolderSizer = el;
			};

			_this.sizerRef = function (el) {
				_this.sizer = el;
			};

			_this.state = {
				inputWidth: props.minWidth,
				inputId: props.id || generateId()
			};
			return _this;
		}

		_createClass(AutosizeInput, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				this.mounted = true;
				this.copyInputStyles();
				this.updateInputWidth();
			}
		}, {
			key: 'UNSAFE_componentWillReceiveProps',
			value: function UNSAFE_componentWillReceiveProps(nextProps) {
				var id = nextProps.id;

				if (id !== this.props.id) {
					this.setState({ inputId: id || generateId() });
				}
			}
		}, {
			key: 'componentDidUpdate',
			value: function componentDidUpdate(prevProps, prevState) {
				if (prevState.inputWidth !== this.state.inputWidth) {
					if (typeof this.props.onAutosize === 'function') {
						this.props.onAutosize(this.state.inputWidth);
					}
				}
				this.updateInputWidth();
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				this.mounted = false;
			}
		}, {
			key: 'copyInputStyles',
			value: function copyInputStyles() {
				if (!this.mounted || !window.getComputedStyle) {
					return;
				}
				var inputStyles = this.input && window.getComputedStyle(this.input);
				if (!inputStyles) {
					return;
				}
				copyStyles(inputStyles, this.sizer);
				if (this.placeHolderSizer) {
					copyStyles(inputStyles, this.placeHolderSizer);
				}
			}
		}, {
			key: 'updateInputWidth',
			value: function updateInputWidth() {
				if (!this.mounted || !this.sizer || typeof this.sizer.scrollWidth === 'undefined') {
					return;
				}
				var newInputWidth = void 0;
				if (this.props.placeholder && (!this.props.value || this.props.value && this.props.placeholderIsMinWidth)) {
					newInputWidth = Math.max(this.sizer.scrollWidth, this.placeHolderSizer.scrollWidth) + 2;
				} else {
					newInputWidth = this.sizer.scrollWidth + 2;
				}
				// add extraWidth to the detected width. for number types, this defaults to 16 to allow for the stepper UI
				var extraWidth = this.props.type === 'number' && this.props.extraWidth === undefined ? 16 : parseInt(this.props.extraWidth) || 0;
				newInputWidth += extraWidth;
				if (newInputWidth < this.props.minWidth) {
					newInputWidth = this.props.minWidth;
				}
				if (newInputWidth !== this.state.inputWidth) {
					this.setState({
						inputWidth: newInputWidth
					});
				}
			}
		}, {
			key: 'getInput',
			value: function getInput() {
				return this.input;
			}
		}, {
			key: 'focus',
			value: function focus() {
				this.input.focus();
			}
		}, {
			key: 'blur',
			value: function blur() {
				this.input.blur();
			}
		}, {
			key: 'select',
			value: function select() {
				this.input.select();
			}
		}, {
			key: 'renderStyles',
			value: function renderStyles() {
				// this method injects styles to hide IE's clear indicator, which messes
				// with input size detection. the stylesheet is only injected when the
				// browser is IE, and can also be disabled by the `injectStyles` prop.
				var injectStyles = this.props.injectStyles;

				return isIE && injectStyles ? _react2.default.createElement('style', { dangerouslySetInnerHTML: {
						__html: 'input#' + this.state.inputId + '::-ms-clear {display: none;}'
					} }) : null;
			}
		}, {
			key: 'render',
			value: function render() {
				var sizerValue = [this.props.defaultValue, this.props.value, ''].reduce(function (previousValue, currentValue) {
					if (previousValue !== null && previousValue !== undefined) {
						return previousValue;
					}
					return currentValue;
				});

				var wrapperStyle = _extends({}, this.props.style);
				if (!wrapperStyle.display) wrapperStyle.display = 'inline-block';

				var inputStyle = _extends({
					boxSizing: 'content-box',
					width: this.state.inputWidth + 'px'
				}, this.props.inputStyle);

				var inputProps = _objectWithoutProperties(this.props, []);

				cleanInputProps(inputProps);
				inputProps.className = this.props.inputClassName;
				inputProps.id = this.state.inputId;
				inputProps.style = inputStyle;

				return _react2.default.createElement(
					'div',
					{ className: this.props.className, style: wrapperStyle },
					this.renderStyles(),
					_react2.default.createElement('input', _extends({}, inputProps, { ref: this.inputRef })),
					_react2.default.createElement(
						'div',
						{ ref: this.sizerRef, style: sizerStyle },
						sizerValue
					),
					this.props.placeholder ? _react2.default.createElement(
						'div',
						{ ref: this.placeHolderSizerRef, style: sizerStyle },
						this.props.placeholder
					) : null
				);
			}
		}]);

		return AutosizeInput;
	}(React__default.Component);

	AutosizeInput.propTypes = {
		className: _propTypes2.default.string, // className for the outer element
		defaultValue: _propTypes2.default.any, // default field value
		extraWidth: _propTypes2.default.oneOfType([// additional width for input element
		_propTypes2.default.number, _propTypes2.default.string]),
		id: _propTypes2.default.string, // id to use for the input, can be set for consistent snapshots
		injectStyles: _propTypes2.default.bool, // inject the custom stylesheet to hide clear UI, defaults to true
		inputClassName: _propTypes2.default.string, // className for the input element
		inputRef: _propTypes2.default.func, // ref callback for the input element
		inputStyle: _propTypes2.default.object, // css styles for the input element
		minWidth: _propTypes2.default.oneOfType([// minimum width for input element
		_propTypes2.default.number, _propTypes2.default.string]),
		onAutosize: _propTypes2.default.func, // onAutosize handler: function(newWidth) {}
		onChange: _propTypes2.default.func, // onChange handler: function(event) {}
		placeholder: _propTypes2.default.string, // placeholder text
		placeholderIsMinWidth: _propTypes2.default.bool, // don't collapse size to less than the placeholder
		style: _propTypes2.default.object, // css styles for the outer element
		value: _propTypes2.default.any // field value
	};
	AutosizeInput.defaultProps = {
		minWidth: 1,
		injectStyles: true
	};

	exports.default = AutosizeInput;
	});

	var AutosizeInput = unwrapExports(AutosizeInput_1);

	var interopRequireDefault = createCommonjsModule(function (module) {
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}

	module.exports = _interopRequireDefault;
	});

	unwrapExports(interopRequireDefault);

	var hasClass_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = hasClass;

	function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);else return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
	}

	module.exports = exports["default"];
	});

	unwrapExports(hasClass_1);

	var addClass_1 = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = addClass;

	var _hasClass = interopRequireDefault(hasClass_1);

	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + ' ' + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);
	}

	module.exports = exports["default"];
	});

	unwrapExports(addClass_1);

	function replaceClassName(origClass, classToRemove) {
	  return origClass.replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	}

	var removeClass = function removeClass(element, className) {
	  if (element.classList) element.classList.remove(className);else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	function componentWillMount() {
	  // Call this.constructor.gDSFP to support sub-classes.
	  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
	  if (state !== null && state !== undefined) {
	    this.setState(state);
	  }
	}

	function componentWillReceiveProps(nextProps) {
	  // Call this.constructor.gDSFP to support sub-classes.
	  // Use the setState() updater to ensure state isn't stale in certain edge cases.
	  function updater(prevState) {
	    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
	    return state !== null && state !== undefined ? state : null;
	  }
	  // Binding "this" is important for shallow renderer support.
	  this.setState(updater.bind(this));
	}

	function componentWillUpdate(nextProps, nextState) {
	  try {
	    var prevProps = this.props;
	    var prevState = this.state;
	    this.props = nextProps;
	    this.state = nextState;
	    this.__reactInternalSnapshotFlag = true;
	    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
	      prevProps,
	      prevState
	    );
	  } finally {
	    this.props = prevProps;
	    this.state = prevState;
	  }
	}

	// React may warn about cWM/cWRP/cWU methods being deprecated.
	// Add a flag to suppress these warnings for this special case.
	componentWillMount.__suppressDeprecationWarning = true;
	componentWillReceiveProps.__suppressDeprecationWarning = true;
	componentWillUpdate.__suppressDeprecationWarning = true;

	function polyfill$1(Component) {
	  var prototype = Component.prototype;

	  if (!prototype || !prototype.isReactComponent) {
	    throw new Error('Can only polyfill class components');
	  }

	  if (
	    typeof Component.getDerivedStateFromProps !== 'function' &&
	    typeof prototype.getSnapshotBeforeUpdate !== 'function'
	  ) {
	    return Component;
	  }

	  // If new component APIs are defined, "unsafe" lifecycles won't be called.
	  // Error if any of these lifecycles are present,
	  // Because they would work differently between older and newer (16.3+) versions of React.
	  var foundWillMountName = null;
	  var foundWillReceivePropsName = null;
	  var foundWillUpdateName = null;
	  if (typeof prototype.componentWillMount === 'function') {
	    foundWillMountName = 'componentWillMount';
	  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
	    foundWillMountName = 'UNSAFE_componentWillMount';
	  }
	  if (typeof prototype.componentWillReceiveProps === 'function') {
	    foundWillReceivePropsName = 'componentWillReceiveProps';
	  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
	    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	  }
	  if (typeof prototype.componentWillUpdate === 'function') {
	    foundWillUpdateName = 'componentWillUpdate';
	  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
	    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	  }
	  if (
	    foundWillMountName !== null ||
	    foundWillReceivePropsName !== null ||
	    foundWillUpdateName !== null
	  ) {
	    var componentName = Component.displayName || Component.name;
	    var newApiName =
	      typeof Component.getDerivedStateFromProps === 'function'
	        ? 'getDerivedStateFromProps()'
	        : 'getSnapshotBeforeUpdate()';

	    throw Error(
	      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
	        componentName +
	        ' uses ' +
	        newApiName +
	        ' but also contains the following legacy lifecycles:' +
	        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
	        (foundWillReceivePropsName !== null
	          ? '\n  ' + foundWillReceivePropsName
	          : '') +
	        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
	        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
	        'https://fb.me/react-async-component-lifecycle-hooks'
	    );
	  }

	  // React <= 16.2 does not support static getDerivedStateFromProps.
	  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
	  // Newer versions of React will ignore these lifecycles if gDSFP exists.
	  if (typeof Component.getDerivedStateFromProps === 'function') {
	    prototype.componentWillMount = componentWillMount;
	    prototype.componentWillReceiveProps = componentWillReceiveProps;
	  }

	  // React <= 16.2 does not support getSnapshotBeforeUpdate.
	  // As a workaround, use cWU to invoke the new lifecycle.
	  // Newer versions of React will ignore that lifecycle if gSBU exists.
	  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
	    if (typeof prototype.componentDidUpdate !== 'function') {
	      throw new Error(
	        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
	      );
	    }

	    prototype.componentWillUpdate = componentWillUpdate;

	    var componentDidUpdate = prototype.componentDidUpdate;

	    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
	      prevProps,
	      prevState,
	      maybeSnapshot
	    ) {
	      // 16.3+ will not execute our will-update method;
	      // It will pass a snapshot value to did-update though.
	      // Older versions will require our polyfilled will-update value.
	      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
	      // Because for <= 15.x versions this might be a "prevContext" object.
	      // We also can't just check "__reactInternalSnapshot",
	      // Because get-snapshot might return a falsy value.
	      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
	      var snapshot = this.__reactInternalSnapshotFlag
	        ? this.__reactInternalSnapshot
	        : maybeSnapshot;

	      componentDidUpdate.call(this, prevProps, prevState, snapshot);
	    };
	  }

	  return Component;
	}

	var reactLifecyclesCompat_es = /*#__PURE__*/Object.freeze({
		__proto__: null,
		polyfill: polyfill$1
	});

	var PropTypes = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.classNamesShape = exports.timeoutsShape = void 0;

	var _propTypes = _interopRequireDefault(PropTypes$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var timeoutsShape =  _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
	  enter: _propTypes.default.number,
	  exit: _propTypes.default.number,
	  appear: _propTypes.default.number
	}).isRequired]) ;
	exports.timeoutsShape = timeoutsShape;
	var classNamesShape =  _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
	  enter: _propTypes.default.string,
	  exit: _propTypes.default.string,
	  active: _propTypes.default.string
	}), _propTypes.default.shape({
	  enter: _propTypes.default.string,
	  enterDone: _propTypes.default.string,
	  enterActive: _propTypes.default.string,
	  exit: _propTypes.default.string,
	  exitDone: _propTypes.default.string,
	  exitActive: _propTypes.default.string
	})]) ;
	exports.classNamesShape = classNamesShape;
	});

	unwrapExports(PropTypes);
	var PropTypes_1 = PropTypes.classNamesShape;
	var PropTypes_2 = PropTypes.timeoutsShape;

	var Transition_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;

	var PropTypes$2 = _interopRequireWildcard(PropTypes$1);

	var _react = _interopRequireDefault(React__default);

	var _reactDom = _interopRequireDefault(reactDom__default);





	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	var UNMOUNTED = 'unmounted';
	exports.UNMOUNTED = UNMOUNTED;
	var EXITED = 'exited';
	exports.EXITED = EXITED;
	var ENTERING = 'entering';
	exports.ENTERING = ENTERING;
	var ENTERED = 'entered';
	exports.ENTERED = ENTERED;
	var EXITING = 'exiting';
	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * ---
	 *
	 * **Note**: `Transition` is a platform-agnostic base component. If you're using
	 * transitions in CSS, you'll probably want to use
	 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
	 * instead. It inherits all the features of `Transition`, but contains
	 * additional features necessary to play nice with CSS transitions (hence the
	 * name of the component).
	 *
	 * ---
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the
	 * components. It's up to you to give meaning and effect to those states. For
	 * example we can add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import { Transition } from 'react-transition-group';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 0 },
	 *   entered:  { opacity: 1 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {state => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm a fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `'entering'`
	 *  - `'entered'`
	 *  - `'exiting'`
	 *  - `'exited'`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component
	 * begins the "Enter" stage. During this stage, the component will shift from
	 * its current transition state, to `'entering'` for the duration of the
	 * transition and then to the `'entered'` stage once it's complete. Let's take
	 * the following example (we'll use the
	 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <Transition in={inProp} timeout={500}>
	 *         {state => (
	 *           // ...
	 *         )}
	 *       </Transition>
	 *       <button onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state
	 * and stay there for 500ms (the value of `timeout`) before it finally switches
	 * to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from
	 * `'exiting'` to `'exited'`.
	 */

	exports.EXITING = EXITING;

	var Transition =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(Transition, _React$Component);

	  function Transition(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;
	    var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears

	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
	    var initialStatus;
	    _this.appearStatus = null;

	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED;
	        _this.appearStatus = ENTERING;
	      } else {
	        initialStatus = ENTERED;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED;
	      } else {
	        initialStatus = EXITED;
	      }
	    }

	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }

	  var _proto = Transition.prototype;

	  _proto.getChildContext = function getChildContext() {
	    return {
	      transitionGroup: null // allows for nested Transitions

	    };
	  };

	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref.in;

	    if (nextIn && prevState.status === UNMOUNTED) {
	      return {
	        status: EXITED
	      };
	    }

	    return null;
	  }; // getSnapshotBeforeUpdate(prevProps) {
	  //   let nextStatus = null
	  //   if (prevProps !== this.props) {
	  //     const { status } = this.state
	  //     if (this.props.in) {
	  //       if (status !== ENTERING && status !== ENTERED) {
	  //         nextStatus = ENTERING
	  //       }
	  //     } else {
	  //       if (status === ENTERING || status === ENTERED) {
	  //         nextStatus = EXITING
	  //       }
	  //     }
	  //   }
	  //   return { nextStatus }
	  // }


	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;

	    if (prevProps !== this.props) {
	      var status = this.state.status;

	      if (this.props.in) {
	        if (status !== ENTERING && status !== ENTERED) {
	          nextStatus = ENTERING;
	        }
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          nextStatus = EXITING;
	        }
	      }
	    }

	    this.updateStatus(false, nextStatus);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var exit, enter, appear;
	    exit = enter = appear = timeout;

	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter; // TODO: remove fallback for next major

	      appear = timeout.appear !== undefined ? timeout.appear : enter;
	    }

	    return {
	      exit: exit,
	      enter: enter,
	      appear: appear
	    };
	  };

	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }

	    if (nextStatus !== null) {
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();

	      var node = _reactDom.default.findDOMNode(this);

	      if (nextStatus === ENTERING) {
	        this.performEnter(node, mounting);
	      } else {
	        this.performExit(node);
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
	      this.setState({
	        status: UNMOUNTED
	      });
	    }
	  };

	  _proto.performEnter = function performEnter(node, mounting) {
	    var _this2 = this;

	    var enter = this.props.enter;
	    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
	    var timeouts = this.getTimeouts();
	    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set

	    if (!mounting && !enter) {
	      this.safeSetState({
	        status: ENTERED
	      }, function () {
	        _this2.props.onEntered(node);
	      });
	      return;
	    }

	    this.props.onEnter(node, appearing);
	    this.safeSetState({
	      status: ENTERING
	    }, function () {
	      _this2.props.onEntering(node, appearing);

	      _this2.onTransitionEnd(node, enterTimeout, function () {
	        _this2.safeSetState({
	          status: ENTERED
	        }, function () {
	          _this2.props.onEntered(node, appearing);
	        });
	      });
	    });
	  };

	  _proto.performExit = function performExit(node) {
	    var _this3 = this;

	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

	    if (!exit) {
	      this.safeSetState({
	        status: EXITED
	      }, function () {
	        _this3.props.onExited(node);
	      });
	      return;
	    }

	    this.props.onExit(node);
	    this.safeSetState({
	      status: EXITING
	    }, function () {
	      _this3.props.onExiting(node);

	      _this3.onTransitionEnd(node, timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED
	        }, function () {
	          _this3.props.onExited(node);
	        });
	      });
	    });
	  };

	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };

	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
	    this.setNextCallback(handler);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

	    if (!node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }

	    if (this.props.addEndListener) {
	      this.props.addEndListener(node, this.nextCallback);
	    }

	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };

	  _proto.render = function render() {
	    var status = this.state.status;

	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _this$props = this.props,
	        children = _this$props.children,
	        childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition


	    delete childProps.in;
	    delete childProps.mountOnEnter;
	    delete childProps.unmountOnExit;
	    delete childProps.appear;
	    delete childProps.enter;
	    delete childProps.exit;
	    delete childProps.timeout;
	    delete childProps.addEndListener;
	    delete childProps.onEnter;
	    delete childProps.onEntering;
	    delete childProps.onEntered;
	    delete childProps.onExit;
	    delete childProps.onExiting;
	    delete childProps.onExited;

	    if (typeof children === 'function') {
	      return children(status, childProps);
	    }

	    var child = _react.default.Children.only(children);

	    return _react.default.cloneElement(child, childProps);
	  };

	  return Transition;
	}(_react.default.Component);

	Transition.contextTypes = {
	  transitionGroup: PropTypes$2.object
	};
	Transition.childContextTypes = {
	  transitionGroup: function transitionGroup() {}
	};
	Transition.propTypes =  {
	  /**
	   * A `function` child can be used instead of a React element. This function is
	   * called with the current transition status (`'entering'`, `'entered'`,
	   * `'exiting'`, `'exited'`, `'unmounted'`), which can be used to apply context
	   * specific props to a component.
	   *
	   * ```jsx
	   * <Transition in={this.state.in} timeout={150}>
	   *   {state => (
	   *     <MyComponent className={`fade fade-${state}`} />
	   *   )}
	   * </Transition>
	   * ```
	   */
	  children: PropTypes$2.oneOfType([PropTypes$2.func.isRequired, PropTypes$2.element.isRequired]).isRequired,

	  /**
	   * Show the component; triggers the enter or exit states
	   */
	  in: PropTypes$2.bool,

	  /**
	   * By default the child component is mounted immediately along with
	   * the parent `Transition` component. If you want to "lazy mount" the component on the
	   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
	   * mounted, even on "exited", unless you also specify `unmountOnExit`.
	   */
	  mountOnEnter: PropTypes$2.bool,

	  /**
	   * By default the child component stays mounted after it reaches the `'exited'` state.
	   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
	   */
	  unmountOnExit: PropTypes$2.bool,

	  /**
	   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
	   * If you want to transition on the first mount set `appear` to `true`, and the
	   * component will transition in as soon as the `<Transition>` mounts.
	   *
	   * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
	   */
	  appear: PropTypes$2.bool,

	  /**
	   * Enable or disable enter transitions.
	   */
	  enter: PropTypes$2.bool,

	  /**
	   * Enable or disable exit transitions.
	   */
	  exit: PropTypes$2.bool,

	  /**
	   * The duration of the transition, in milliseconds.
	   * Required unless `addEndListener` is provided.
	   *
	   * You may specify a single timeout for all transitions:
	   *
	   * ```jsx
	   * timeout={500}
	   * ```
	   *
	   * or individually:
	   *
	   * ```jsx
	   * timeout={{
	   *  appear: 500,
	   *  enter: 300,
	   *  exit: 500,
	   * }}
	   * ```
	   *
	   * - `appear` defaults to the value of `enter`
	   * - `enter` defaults to `0`
	   * - `exit` defaults to `0`
	   *
	   * @type {number | { enter?: number, exit?: number, appear?: number }}
	   */
	  timeout: function timeout(props) {
	    var pt = PropTypes.timeoutsShape;
	    if (!props.addEndListener) pt = pt.isRequired;

	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    return pt.apply(void 0, [props].concat(args));
	  },

	  /**
	   * Add a custom transition end trigger. Called with the transitioning
	   * DOM node and a `done` callback. Allows for more fine grained transition end
	   * logic. **Note:** Timeouts are still used as a fallback if provided.
	   *
	   * ```jsx
	   * addEndListener={(node, done) => {
	   *   // use the css transitionend event to mark the finish of a transition
	   *   node.addEventListener('transitionend', done, false);
	   * }}
	   * ```
	   */
	  addEndListener: PropTypes$2.func,

	  /**
	   * Callback fired before the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEnter: PropTypes$2.func,

	  /**
	   * Callback fired after the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: PropTypes$2.func,

	  /**
	   * Callback fired after the "entered" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEntered: PropTypes$2.func,

	  /**
	   * Callback fired before the "exiting" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExit: PropTypes$2.func,

	  /**
	   * Callback fired after the "exiting" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExiting: PropTypes$2.func,

	  /**
	   * Callback fired after the "exited" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExited: PropTypes$2.func // Name the function so it is clearer in the documentation

	} ;

	function noop() {}

	Transition.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,
	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};
	Transition.UNMOUNTED = 0;
	Transition.EXITED = 1;
	Transition.ENTERING = 2;
	Transition.ENTERED = 3;
	Transition.EXITING = 4;

	var _default = (0, reactLifecyclesCompat_es.polyfill)(Transition);

	exports.default = _default;
	});

	unwrapExports(Transition_1);
	var Transition_2 = Transition_1.EXITING;
	var Transition_3 = Transition_1.ENTERED;
	var Transition_4 = Transition_1.ENTERING;
	var Transition_5 = Transition_1.EXITED;
	var Transition_6 = Transition_1.UNMOUNTED;

	var CSSTransition_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = void 0;

	var PropTypes$2 = _interopRequireWildcard(PropTypes$1);

	var _addClass = _interopRequireDefault(addClass_1);

	var _removeClass = _interopRequireDefault(removeClass);

	var _react = _interopRequireDefault(React__default);

	var _Transition = _interopRequireDefault(Transition_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	var addClass = function addClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return (0, _addClass.default)(node, c);
	  });
	};

	var removeClass$1 = function removeClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return (0, _removeClass.default)(node, c);
	  });
	};
	/**
	 * A transition component inspired by the excellent
	 * [ng-animate](http://www.nganimate.org/) library, you should use it if you're
	 * using CSS transitions or animations. It's built upon the
	 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
	 * component, so it inherits all of its props.
	 *
	 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
	 * and `exit` states of the transition. The first class is applied and then a
	 * second `*-active` class in order to activate the CSSS transition. After the
	 * transition, matching `*-done` class names are applied to persist the
	 * transition state.
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
	 *         <div>
	 *           {"I'll receive my-node-* classes"}
	 *         </div>
	 *       </CSSTransition>
	 *       <button type="button" onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the `in` prop is set to `true`, the child component will first receive
	 * the class `example-enter`, then the `example-enter-active` will be added in
	 * the next tick. `CSSTransition` [forces a
	 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
	 * between before adding the `example-enter-active`. This is an important trick
	 * because it allows us to transition between `example-enter` and
	 * `example-enter-active` even though they were added immediately one after
	 * another. Most notably, this is what makes it possible for us to animate
	 * _appearance_.
	 *
	 * ```css
	 * .my-node-enter {
	 *   opacity: 0;
	 * }
	 * .my-node-enter-active {
	 *   opacity: 1;
	 *   transition: opacity 200ms;
	 * }
	 * .my-node-exit {
	 *   opacity: 1;
	 * }
	 * .my-node-exit-active {
	 *   opacity: 0;
	 *   transition: opacity: 200ms;
	 * }
	 * ```
	 *
	 * `*-active` classes represent which styles you want to animate **to**.
	 */


	var CSSTransition =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(CSSTransition, _React$Component);

	  function CSSTransition() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

	    _this.onEnter = function (node, appearing) {
	      var _this$getClassNames = _this.getClassNames(appearing ? 'appear' : 'enter'),
	          className = _this$getClassNames.className;

	      _this.removeClasses(node, 'exit');

	      addClass(node, className);

	      if (_this.props.onEnter) {
	        _this.props.onEnter(node, appearing);
	      }
	    };

	    _this.onEntering = function (node, appearing) {
	      var _this$getClassNames2 = _this.getClassNames(appearing ? 'appear' : 'enter'),
	          activeClassName = _this$getClassNames2.activeClassName;

	      _this.reflowAndAddClass(node, activeClassName);

	      if (_this.props.onEntering) {
	        _this.props.onEntering(node, appearing);
	      }
	    };

	    _this.onEntered = function (node, appearing) {
	      var appearClassName = _this.getClassNames('appear').doneClassName;

	      var enterClassName = _this.getClassNames('enter').doneClassName;

	      var doneClassName = appearing ? appearClassName + " " + enterClassName : enterClassName;

	      _this.removeClasses(node, appearing ? 'appear' : 'enter');

	      addClass(node, doneClassName);

	      if (_this.props.onEntered) {
	        _this.props.onEntered(node, appearing);
	      }
	    };

	    _this.onExit = function (node) {
	      var _this$getClassNames3 = _this.getClassNames('exit'),
	          className = _this$getClassNames3.className;

	      _this.removeClasses(node, 'appear');

	      _this.removeClasses(node, 'enter');

	      addClass(node, className);

	      if (_this.props.onExit) {
	        _this.props.onExit(node);
	      }
	    };

	    _this.onExiting = function (node) {
	      var _this$getClassNames4 = _this.getClassNames('exit'),
	          activeClassName = _this$getClassNames4.activeClassName;

	      _this.reflowAndAddClass(node, activeClassName);

	      if (_this.props.onExiting) {
	        _this.props.onExiting(node);
	      }
	    };

	    _this.onExited = function (node) {
	      var _this$getClassNames5 = _this.getClassNames('exit'),
	          doneClassName = _this$getClassNames5.doneClassName;

	      _this.removeClasses(node, 'exit');

	      addClass(node, doneClassName);

	      if (_this.props.onExited) {
	        _this.props.onExited(node);
	      }
	    };

	    _this.getClassNames = function (type) {
	      var classNames = _this.props.classNames;
	      var isStringClassNames = typeof classNames === 'string';
	      var prefix = isStringClassNames && classNames ? classNames + '-' : '';
	      var className = isStringClassNames ? prefix + type : classNames[type];
	      var activeClassName = isStringClassNames ? className + '-active' : classNames[type + 'Active'];
	      var doneClassName = isStringClassNames ? className + '-done' : classNames[type + 'Done'];
	      return {
	        className: className,
	        activeClassName: activeClassName,
	        doneClassName: doneClassName
	      };
	    };

	    return _this;
	  }

	  var _proto = CSSTransition.prototype;

	  _proto.removeClasses = function removeClasses(node, type) {
	    var _this$getClassNames6 = this.getClassNames(type),
	        className = _this$getClassNames6.className,
	        activeClassName = _this$getClassNames6.activeClassName,
	        doneClassName = _this$getClassNames6.doneClassName;

	    className && removeClass$1(node, className);
	    activeClassName && removeClass$1(node, activeClassName);
	    doneClassName && removeClass$1(node, doneClassName);
	  };

	  _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {
	    // This is for to force a repaint,
	    // which is necessary in order to transition styles when adding a class name.
	    if (className) {
	      /* eslint-disable no-unused-expressions */
	      node && node.scrollTop;
	      /* eslint-enable no-unused-expressions */

	      addClass(node, className);
	    }
	  };

	  _proto.render = function render() {
	    var props = _extends({}, this.props);

	    delete props.classNames;
	    return _react.default.createElement(_Transition.default, _extends({}, props, {
	      onEnter: this.onEnter,
	      onEntered: this.onEntered,
	      onEntering: this.onEntering,
	      onExit: this.onExit,
	      onExiting: this.onExiting,
	      onExited: this.onExited
	    }));
	  };

	  return CSSTransition;
	}(_react.default.Component);

	CSSTransition.defaultProps = {
	  classNames: ''
	};
	CSSTransition.propTypes =  _extends({}, _Transition.default.propTypes, {
	  /**
	   * The animation classNames applied to the component as it enters, exits or
	   * has finished the transition. A single name can be provided and it will be
	   * suffixed for each stage: e.g.
	   *
	   * `classNames="fade"` applies `fade-enter`, `fade-enter-active`,
	   * `fade-enter-done`, `fade-exit`, `fade-exit-active`, `fade-exit-done`,
	   * `fade-appear`, `fade-appear-active`, and `fade-appear-done`.
	   *
	   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.
	   * This allows you to define different behavior for when appearing is done and
	   * when regular entering is done, using selectors like
	   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an
	   * epic entrance animation when element first appears in the DOM using
	   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
	   * simply use `fade-enter-done` for defining both cases.
	   *
	   * Each individual classNames can also be specified independently like:
	   *
	   * ```js
	   * classNames={{
	   *  appear: 'my-appear',
	   *  appearActive: 'my-active-appear',
	   *  appearDone: 'my-done-appear',
	   *  enter: 'my-enter',
	   *  enterActive: 'my-active-enter',
	   *  enterDone: 'my-done-enter',
	   *  exit: 'my-exit',
	   *  exitActive: 'my-active-exit',
	   *  exitDone: 'my-done-exit',
	   * }}
	   * ```
	   *
	   * If you want to set these classes using CSS Modules:
	   *
	   * ```js
	   * import styles from './styles.css';
	   * ```
	   *
	   * you might want to use camelCase in your CSS file, that way could simply
	   * spread them instead of listing them one by one:
	   *
	   * ```js
	   * classNames={{ ...styles }}
	   * ```
	   *
	   * @type {string | {
	   *  appear?: string,
	   *  appearActive?: string,
	   *  appearDone?: string,
	   *  enter?: string,
	   *  enterActive?: string,
	   *  enterDone?: string,
	   *  exit?: string,
	   *  exitActive?: string,
	   *  exitDone?: string,
	   * }}
	   */
	  classNames: PropTypes.classNamesShape,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
	   * applied.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEnter: PropTypes$2.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter-active' or
	   * 'appear-active' class is applied.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: PropTypes$2.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or
	   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntered: PropTypes$2.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' class is
	   * applied.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExit: PropTypes$2.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExiting: PropTypes$2.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' classes
	   * are **removed** and the `exit-done` class is added to the DOM node.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExited: PropTypes$2.func
	}) ;
	var _default = CSSTransition;
	exports.default = _default;
	module.exports = exports["default"];
	});

	unwrapExports(CSSTransition_1);

	var ChildMapping = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.getChildMapping = getChildMapping;
	exports.mergeChildMappings = mergeChildMappings;
	exports.getInitialChildMapping = getInitialChildMapping;
	exports.getNextChildMapping = getNextChildMapping;



	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */
	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && (0, React__default.isValidElement)(child) ? mapFn(child) : child;
	  };

	  var result = Object.create(null);
	  if (children) React__default.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */


	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list


	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];

	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i;
	  var childMapping = {};

	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }

	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`


	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

	function getProp(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}

	function getInitialChildMapping(props, onExited) {
	  return getChildMapping(props.children, function (child) {
	    return (0, React__default.cloneElement)(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp(child, 'appear', props),
	      enter: getProp(child, 'enter', props),
	      exit: getProp(child, 'exit', props)
	    });
	  });
	}

	function getNextChildMapping(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping(nextProps.children);
	  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (!(0, React__default.isValidElement)(child)) return;
	    var hasPrev = key in prevChildMapping;
	    var hasNext = key in nextChildMapping;
	    var prevChild = prevChildMapping[key];
	    var isLeaving = (0, React__default.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = (0, React__default.cloneElement)(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = (0, React__default.cloneElement)(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && (0, React__default.isValidElement)(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = (0, React__default.cloneElement)(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}
	});

	unwrapExports(ChildMapping);
	var ChildMapping_1 = ChildMapping.getChildMapping;
	var ChildMapping_2 = ChildMapping.mergeChildMappings;
	var ChildMapping_3 = ChildMapping.getInitialChildMapping;
	var ChildMapping_4 = ChildMapping.getNextChildMapping;

	var TransitionGroup_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = void 0;

	var _propTypes = _interopRequireDefault(PropTypes$1);

	var _react = _interopRequireDefault(React__default);





	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	var values = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};

	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	  /**
	   * The `<TransitionGroup>` component manages a set of transition components
	   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	   * components, `<TransitionGroup>` is a state machine for managing the mounting
	   * and unmounting of components over time.
	   *
	   * Consider the example below. As items are removed or added to the TodoList the
	   * `in` prop is toggled automatically by the `<TransitionGroup>`.
	   *
	   * Note that `<TransitionGroup>`  does not define any animation behavior!
	   * Exactly _how_ a list item animates is up to the individual transition
	   * component. This means you can mix and match animations across different list
	   * items.
	   */

	};

	var TransitionGroup =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;

	    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear


	    _this.state = {
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }

	  var _proto = TransitionGroup.prototype;

	  _proto.getChildContext = function getChildContext() {
	    return {
	      transitionGroup: {
	        isMounting: !this.appeared
	      }
	    };
	  };

	  _proto.componentDidMount = function componentDidMount() {
	    this.appeared = true;
	    this.mounted = true;
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	        handleExited = _ref.handleExited,
	        firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? (0, ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  };

	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = (0, ChildMapping.getChildMapping)(this.props.children);
	    if (child.key in currentChildMapping) return;

	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }

	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends({}, state.children);

	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        Component = _this$props.component,
	        childFactory = _this$props.childFactory,
	        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

	    var children = values(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;

	    if (Component === null) {
	      return children;
	    }

	    return _react.default.createElement(Component, props, children);
	  };

	  return TransitionGroup;
	}(_react.default.Component);

	TransitionGroup.childContextTypes = {
	  transitionGroup: _propTypes.default.object.isRequired
	};
	TransitionGroup.propTypes =  {
	  /**
	   * `<TransitionGroup>` renders a `<div>` by default. You can change this
	   * behavior by providing a `component` prop.
	   * If you use React v16+ and would like to avoid a wrapping `<div>` element
	   * you can pass in `component={null}`. This is useful if the wrapping div
	   * borks your css styles.
	   */
	  component: _propTypes.default.any,

	  /**
	   * A set of `<Transition>` components, that are toggled `in` and out as they
	   * leave. the `<TransitionGroup>` will inject specific transition props, so
	   * remember to spread them through if you are wrapping the `<Transition>` as
	   * with our `<Fade>` example.
	   *
	   * While this component is meant for multiple `Transition` or `CSSTransition`
	   * children, sometimes you may want to have a single transition child with
	   * content that you want to be transitioned out and in when you change it
	   * (e.g. routes, images etc.) In that case you can change the `key` prop of
	   * the transition child as you change its content, this will cause
	   * `TransitionGroup` to transition the child out and back in.
	   */
	  children: _propTypes.default.node,

	  /**
	   * A convenience prop that enables or disables appear animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  appear: _propTypes.default.bool,

	  /**
	   * A convenience prop that enables or disables enter animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  enter: _propTypes.default.bool,

	  /**
	   * A convenience prop that enables or disables exit animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  exit: _propTypes.default.bool,

	  /**
	   * You may need to apply reactive updates to a child as it is exiting.
	   * This is generally done by using `cloneElement` however in the case of an exiting
	   * child the element has already been removed and not accessible to the consumer.
	   *
	   * If you do need to update a child as it leaves you can provide a `childFactory`
	   * to wrap every child, even the ones that are leaving.
	   *
	   * @type Function(child: ReactElement) -> ReactElement
	   */
	  childFactory: _propTypes.default.func
	} ;
	TransitionGroup.defaultProps = defaultProps;

	var _default = (0, reactLifecyclesCompat_es.polyfill)(TransitionGroup);

	exports.default = _default;
	module.exports = exports["default"];
	});

	unwrapExports(TransitionGroup_1);

	var ReplaceTransition_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = void 0;

	var _propTypes = _interopRequireDefault(PropTypes$1);

	var _react = _interopRequireDefault(React__default);



	var _TransitionGroup = _interopRequireDefault(TransitionGroup_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	/**
	 * The `<ReplaceTransition>` component is a specialized `Transition` component
	 * that animates between two children.
	 *
	 * ```jsx
	 * <ReplaceTransition in>
	 *   <Fade><div>I appear first</div></Fade>
	 *   <Fade><div>I replace the above</div></Fade>
	 * </ReplaceTransition>
	 * ```
	 */
	var ReplaceTransition =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(ReplaceTransition, _React$Component);

	  function ReplaceTransition() {
	    var _this;

	    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
	      _args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

	    _this.handleEnter = function () {
	      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      return _this.handleLifecycle('onEnter', 0, args);
	    };

	    _this.handleEntering = function () {
	      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }

	      return _this.handleLifecycle('onEntering', 0, args);
	    };

	    _this.handleEntered = function () {
	      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	        args[_key4] = arguments[_key4];
	      }

	      return _this.handleLifecycle('onEntered', 0, args);
	    };

	    _this.handleExit = function () {
	      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	        args[_key5] = arguments[_key5];
	      }

	      return _this.handleLifecycle('onExit', 1, args);
	    };

	    _this.handleExiting = function () {
	      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	        args[_key6] = arguments[_key6];
	      }

	      return _this.handleLifecycle('onExiting', 1, args);
	    };

	    _this.handleExited = function () {
	      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	        args[_key7] = arguments[_key7];
	      }

	      return _this.handleLifecycle('onExited', 1, args);
	    };

	    return _this;
	  }

	  var _proto = ReplaceTransition.prototype;

	  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
	    var _child$props;

	    var children = this.props.children;

	    var child = _react.default.Children.toArray(children)[idx];

	    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
	    if (this.props[handler]) this.props[handler]((0, reactDom__default.findDOMNode)(this));
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        children = _this$props.children,
	        inProp = _this$props.in,
	        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);

	    var _React$Children$toArr = _react.default.Children.toArray(children),
	        first = _React$Children$toArr[0],
	        second = _React$Children$toArr[1];

	    delete props.onEnter;
	    delete props.onEntering;
	    delete props.onEntered;
	    delete props.onExit;
	    delete props.onExiting;
	    delete props.onExited;
	    return _react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
	      key: 'first',
	      onEnter: this.handleEnter,
	      onEntering: this.handleEntering,
	      onEntered: this.handleEntered
	    }) : _react.default.cloneElement(second, {
	      key: 'second',
	      onEnter: this.handleExit,
	      onEntering: this.handleExiting,
	      onEntered: this.handleExited
	    }));
	  };

	  return ReplaceTransition;
	}(_react.default.Component);

	ReplaceTransition.propTypes =  {
	  in: _propTypes.default.bool.isRequired,
	  children: function children(props, propName) {
	    if (_react.default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
	    return null;
	  }
	} ;
	var _default = ReplaceTransition;
	exports.default = _default;
	module.exports = exports["default"];
	});

	unwrapExports(ReplaceTransition_1);

	var reactTransitionGroup = createCommonjsModule(function (module) {

	var _CSSTransition = _interopRequireDefault(CSSTransition_1);

	var _ReplaceTransition = _interopRequireDefault(ReplaceTransition_1);

	var _TransitionGroup = _interopRequireDefault(TransitionGroup_1);

	var _Transition = _interopRequireDefault(Transition_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = {
	  Transition: _Transition.default,
	  TransitionGroup: _TransitionGroup.default,
	  ReplaceTransition: _ReplaceTransition.default,
	  CSSTransition: _CSSTransition.default
	};
	});

	unwrapExports(reactTransitionGroup);
	var reactTransitionGroup_1 = reactTransitionGroup.Transition;
	var reactTransitionGroup_2 = reactTransitionGroup.TransitionGroup;
	var reactTransitionGroup_3 = reactTransitionGroup.ReplaceTransition;
	var reactTransitionGroup_4 = reactTransitionGroup.CSSTransition;

	function _typeof(obj) {
	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function (obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function (obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};
	    var ownKeys = Object.keys(source);

	    if (typeof Object.getOwnPropertySymbols === 'function') {
	      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
	      }));
	    }

	    ownKeys.forEach(function (key) {
	      _defineProperty(target, key, source[key]);
	    });
	  }

	  return target;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _objectWithoutProperties(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (typeof call === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized(self);
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

	    return arr2;
	  }
	}

	function _iterableToArray(iter) {
	  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance");
	}

	// ==============================
	// NO OP
	// ==============================
	var noop = function noop() {};
	// Class Name Prefixer
	// ==============================

	/**
	 String representation of component state for styling with class names.

	 Expects an array of strings OR a string/object pair:
	 - className(['comp', 'comp-arg', 'comp-arg-2'])
	   @returns 'react-select__comp react-select__comp-arg react-select__comp-arg-2'
	 - className('comp', { some: true, state: false })
	   @returns 'react-select__comp react-select__comp--some'
	*/

	function applyPrefixToName(prefix, name) {
	  if (!name) {
	    return prefix;
	  } else if (name[0] === '-') {
	    return prefix + name;
	  } else {
	    return prefix + '__' + name;
	  }
	}

	function classNames(prefix, cssKey, state, className) {
	  var arr = [cssKey, className];

	  if (state && prefix) {
	    for (var key in state) {
	      if (state.hasOwnProperty(key) && state[key]) {
	        arr.push("".concat(applyPrefixToName(prefix, key)));
	      }
	    }
	  }

	  return arr.filter(function (i) {
	    return i;
	  }).map(function (i) {
	    return String(i).trim();
	  }).join(' ');
	} // ==============================
	// Clean Value
	// ==============================

	var cleanValue = function cleanValue(value) {
	  if (Array.isArray(value)) return value.filter(Boolean);
	  if (_typeof(value) === 'object' && value !== null) return [value];
	  return [];
	}; // ==============================
	// Handle Input Change
	// ==============================

	function handleInputChange(inputValue, actionMeta, onInputChange) {
	  if (onInputChange) {
	    var newValue = onInputChange(inputValue, actionMeta);
	    if (typeof newValue === 'string') return newValue;
	  }

	  return inputValue;
	} // ==============================
	// Scroll Helpers
	// ==============================

	function isDocumentElement(el) {
	  return [document.documentElement, document.body, window].indexOf(el) > -1;
	} // Normalized Scroll Top
	// ------------------------------

	function getScrollTop(el) {
	  if (isDocumentElement(el)) {
	    return window.pageYOffset;
	  }

	  return el.scrollTop;
	}
	function scrollTo(el, top) {
	  // with a scroll distance, we perform scroll on the element
	  if (isDocumentElement(el)) {
	    window.scrollTo(0, top);
	    return;
	  }

	  el.scrollTop = top;
	} // Get Scroll Parent
	// ------------------------------

	function getScrollParent(element) {
	  var style = getComputedStyle(element);
	  var excludeStaticParent = style.position === 'absolute';
	  var overflowRx = /(auto|scroll)/;
	  var docEl = document.documentElement; // suck it, flow...

	  if (style.position === 'fixed') return docEl;

	  for (var parent = element; parent = parent.parentElement;) {
	    style = getComputedStyle(parent);

	    if (excludeStaticParent && style.position === 'static') {
	      continue;
	    }

	    if (overflowRx.test(style.overflow + style.overflowY + style.overflowX)) {
	      return parent;
	    }
	  }

	  return docEl;
	} // Animated Scroll To
	// ------------------------------

	/**
	  @param t: time (elapsed)
	  @param b: initial value
	  @param c: amount of change
	  @param d: duration
	*/

	function easeOutCubic(t, b, c, d) {
	  return c * ((t = t / d - 1) * t * t + 1) + b;
	}

	function animatedScrollTo(element, to) {
	  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;
	  var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop;
	  var start = getScrollTop(element);
	  var change = to - start;
	  var increment = 10;
	  var currentTime = 0;

	  function animateScroll() {
	    currentTime += increment;
	    var val = easeOutCubic(currentTime, start, change, duration);
	    scrollTo(element, val);

	    if (currentTime < duration) {
	      raf_1(animateScroll);
	    } else {
	      callback(element);
	    }
	  }

	  animateScroll();
	} // Scroll Into View
	// ------------------------------

	function scrollIntoView(menuEl, focusedEl) {
	  var menuRect = menuEl.getBoundingClientRect();
	  var focusedRect = focusedEl.getBoundingClientRect();
	  var overScroll = focusedEl.offsetHeight / 3;

	  if (focusedRect.bottom + overScroll > menuRect.bottom) {
	    scrollTo(menuEl, Math.min(focusedEl.offsetTop + focusedEl.clientHeight - menuEl.offsetHeight + overScroll, menuEl.scrollHeight));
	  } else if (focusedRect.top - overScroll < menuRect.top) {
	    scrollTo(menuEl, Math.max(focusedEl.offsetTop - overScroll, 0));
	  }
	} // ==============================
	// Get bounding client object
	// ==============================
	// cannot get keys using array notation with DOMRect

	function getBoundingClientObj(element) {
	  var rect = element.getBoundingClientRect();
	  return {
	    bottom: rect.bottom,
	    height: rect.height,
	    left: rect.left,
	    right: rect.right,
	    top: rect.top,
	    width: rect.width
	  };
	}
	// Touch Capability Detector
	// ==============================

	function isTouchCapable() {
	  try {
	    document.createEvent('TouchEvent');
	    return true;
	  } catch (e) {
	    return false;
	  }
	} // ==============================
	// Mobile Device Detector
	// ==============================

	function isMobileDevice() {
	  try {
	    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
	  } catch (e) {
	    return false;
	  }
	}

	function getMenuPlacement(_ref) {
	  var maxHeight = _ref.maxHeight,
	      menuEl = _ref.menuEl,
	      minHeight = _ref.minHeight,
	      placement = _ref.placement,
	      shouldScroll = _ref.shouldScroll,
	      isFixedPosition = _ref.isFixedPosition,
	      theme = _ref.theme;
	  var spacing = theme.spacing;
	  var scrollParent = getScrollParent(menuEl);
	  var defaultState = {
	    placement: 'bottom',
	    maxHeight: maxHeight
	  }; // something went wrong, return default state

	  if (!menuEl || !menuEl.offsetParent) return defaultState; // we can't trust `scrollParent.scrollHeight` --> it may increase when
	  // the menu is rendered

	  var _scrollParent$getBoun = scrollParent.getBoundingClientRect(),
	      scrollHeight = _scrollParent$getBoun.height;

	  var _menuEl$getBoundingCl = menuEl.getBoundingClientRect(),
	      menuBottom = _menuEl$getBoundingCl.bottom,
	      menuHeight = _menuEl$getBoundingCl.height,
	      menuTop = _menuEl$getBoundingCl.top;

	  var _menuEl$offsetParent$ = menuEl.offsetParent.getBoundingClientRect(),
	      containerTop = _menuEl$offsetParent$.top;

	  var viewHeight = window.innerHeight;
	  var scrollTop = getScrollTop(scrollParent);
	  var marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10);
	  var marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10);
	  var viewSpaceAbove = containerTop - marginTop;
	  var viewSpaceBelow = viewHeight - menuTop;
	  var scrollSpaceAbove = viewSpaceAbove + scrollTop;
	  var scrollSpaceBelow = scrollHeight - scrollTop - menuTop;
	  var scrollDown = menuBottom - viewHeight + scrollTop + marginBottom;
	  var scrollUp = scrollTop + menuTop - marginTop;
	  var scrollDuration = 160;

	  switch (placement) {
	    case 'auto':
	    case 'bottom':
	      // 1: the menu will fit, do nothing
	      if (viewSpaceBelow >= menuHeight) {
	        return {
	          placement: 'bottom',
	          maxHeight: maxHeight
	        };
	      } // 2: the menu will fit, if scrolled


	      if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {
	        if (shouldScroll) {
	          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
	        }

	        return {
	          placement: 'bottom',
	          maxHeight: maxHeight
	        };
	      } // 3: the menu will fit, if constrained


	      if (!isFixedPosition && scrollSpaceBelow >= minHeight || isFixedPosition && viewSpaceBelow >= minHeight) {
	        if (shouldScroll) {
	          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
	        } // we want to provide as much of the menu as possible to the user,
	        // so give them whatever is available below rather than the minHeight.


	        var constrainedHeight = isFixedPosition ? viewSpaceBelow - marginBottom : scrollSpaceBelow - marginBottom;
	        return {
	          placement: 'bottom',
	          maxHeight: constrainedHeight
	        };
	      } // 4. Forked beviour when there isn't enough space below
	      // AUTO: flip the menu, render above


	      if (placement === 'auto' || isFixedPosition) {
	        // may need to be constrained after flipping
	        var _constrainedHeight = maxHeight;
	        var spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove;

	        if (spaceAbove >= minHeight) {
	          _constrainedHeight = Math.min(spaceAbove - marginBottom - spacing.controlHeight, maxHeight);
	        }

	        return {
	          placement: 'top',
	          maxHeight: _constrainedHeight
	        };
	      } // BOTTOM: allow browser to increase scrollable area and immediately set scroll


	      if (placement === 'bottom') {
	        scrollTo(scrollParent, scrollDown);
	        return {
	          placement: 'bottom',
	          maxHeight: maxHeight
	        };
	      }

	      break;

	    case 'top':
	      // 1: the menu will fit, do nothing
	      if (viewSpaceAbove >= menuHeight) {
	        return {
	          placement: 'top',
	          maxHeight: maxHeight
	        };
	      } // 2: the menu will fit, if scrolled


	      if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {
	        if (shouldScroll) {
	          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
	        }

	        return {
	          placement: 'top',
	          maxHeight: maxHeight
	        };
	      } // 3: the menu will fit, if constrained


	      if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
	        var _constrainedHeight2 = maxHeight; // we want to provide as much of the menu as possible to the user,
	        // so give them whatever is available below rather than the minHeight.

	        if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
	          _constrainedHeight2 = isFixedPosition ? viewSpaceAbove - marginTop : scrollSpaceAbove - marginTop;
	        }

	        if (shouldScroll) {
	          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
	        }

	        return {
	          placement: 'top',
	          maxHeight: _constrainedHeight2
	        };
	      } // 4. not enough space, the browser WILL NOT increase scrollable area when
	      // absolutely positioned element rendered above the viewport (only below).
	      // Flip the menu, render below


	      return {
	        placement: 'bottom',
	        maxHeight: maxHeight
	      };

	    default:
	      throw new Error("Invalid placement provided \"".concat(placement, "\"."));
	  } // fulfil contract with flow: implicit return value of undefined


	  return defaultState;
	} // Menu Component
	// ------------------------------

	function alignToControl(placement) {
	  var placementToCSSProp = {
	    bottom: 'top',
	    top: 'bottom'
	  };
	  return placement ? placementToCSSProp[placement] : 'bottom';
	}

	var coercePlacement = function coercePlacement(p) {
	  return p === 'auto' ? 'bottom' : p;
	};

	var menuCSS = function menuCSS(_ref2) {
	  var _ref3;

	  var placement = _ref2.placement,
	      _ref2$theme = _ref2.theme,
	      borderRadius = _ref2$theme.borderRadius,
	      spacing = _ref2$theme.spacing,
	      colors = _ref2$theme.colors;
	  return _ref3 = {
	    label: 'menu'
	  }, _defineProperty(_ref3, alignToControl(placement), '100%'), _defineProperty(_ref3, "backgroundColor", colors.neutral0), _defineProperty(_ref3, "borderRadius", borderRadius), _defineProperty(_ref3, "boxShadow", '0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)'), _defineProperty(_ref3, "marginBottom", spacing.menuGutter), _defineProperty(_ref3, "marginTop", spacing.menuGutter), _defineProperty(_ref3, "position", 'absolute'), _defineProperty(_ref3, "width", '100%'), _defineProperty(_ref3, "zIndex", 1), _ref3;
	}; // NOTE: internal only

	var MenuPlacer =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(MenuPlacer, _Component);

	  function MenuPlacer() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck(this, MenuPlacer);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MenuPlacer)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
	      maxHeight: _this.props.maxMenuHeight,
	      placement: null
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getPlacement", function (ref) {
	      var _this$props = _this.props,
	          minMenuHeight = _this$props.minMenuHeight,
	          maxMenuHeight = _this$props.maxMenuHeight,
	          menuPlacement = _this$props.menuPlacement,
	          menuPosition = _this$props.menuPosition,
	          menuShouldScrollIntoView = _this$props.menuShouldScrollIntoView,
	          theme = _this$props.theme;
	      var getPortalPlacement = _this.context.getPortalPlacement;
	      if (!ref) return; // DO NOT scroll if position is fixed

	      var isFixedPosition = menuPosition === 'fixed';
	      var shouldScroll = menuShouldScrollIntoView && !isFixedPosition;
	      var state = getMenuPlacement({
	        maxHeight: maxMenuHeight,
	        menuEl: ref,
	        minHeight: minMenuHeight,
	        placement: menuPlacement,
	        shouldScroll: shouldScroll,
	        isFixedPosition: isFixedPosition,
	        theme: theme
	      });
	      if (getPortalPlacement) getPortalPlacement(state);

	      _this.setState(state);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getUpdatedProps", function () {
	      var menuPlacement = _this.props.menuPlacement;
	      var placement = _this.state.placement || coercePlacement(menuPlacement);
	      return _objectSpread({}, _this.props, {
	        placement: placement,
	        maxHeight: _this.state.maxHeight
	      });
	    });

	    return _this;
	  }

	  _createClass(MenuPlacer, [{
	    key: "render",
	    value: function render() {
	      var children = this.props.children;
	      return children({
	        ref: this.getPlacement,
	        placerProps: this.getUpdatedProps()
	      });
	    }
	  }]);

	  return MenuPlacer;
	}(React.Component);

	_defineProperty(MenuPlacer, "contextTypes", {
	  getPortalPlacement: PropTypes$1.func
	});

	var Menu = function Menu(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerRef = props.innerRef,
	      innerProps = props.innerProps;
	  var cn = cx(
	  /*#__PURE__*/
	  css(getStyles('menu', props)), {
	    menu: true
	  }, className);
	  return React__default.createElement("div", _extends({
	    className: cn
	  }, innerProps, {
	    ref: innerRef
	  }), children);
	};
	// Menu List
	// ==============================

	var menuListCSS = function menuListCSS(_ref4) {
	  var maxHeight = _ref4.maxHeight,
	      baseUnit = _ref4.theme.spacing.baseUnit;
	  return {
	    maxHeight: maxHeight,
	    overflowY: 'auto',
	    paddingBottom: baseUnit,
	    paddingTop: baseUnit,
	    position: 'relative',
	    // required for offset[Height, Top] > keyboard scroll
	    WebkitOverflowScrolling: 'touch'
	  };
	};
	var MenuList = function MenuList(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      isMulti = props.isMulti,
	      innerRef = props.innerRef;
	  return React__default.createElement("div", {
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('menuList', props)), {
	      'menu-list': true,
	      'menu-list--is-multi': isMulti
	    }, className),
	    ref: innerRef
	  }, children);
	}; // ==============================
	// Menu Notices
	// ==============================

	var noticeCSS = function noticeCSS(_ref5) {
	  var _ref5$theme = _ref5.theme,
	      baseUnit = _ref5$theme.spacing.baseUnit,
	      colors = _ref5$theme.colors;
	  return {
	    color: colors.neutral40,
	    padding: "".concat(baseUnit * 2, "px ").concat(baseUnit * 3, "px"),
	    textAlign: 'center'
	  };
	};

	var noOptionsMessageCSS = noticeCSS;
	var loadingMessageCSS = noticeCSS;
	var NoOptionsMessage = function NoOptionsMessage(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps;
	  return React__default.createElement("div", _extends({
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('noOptionsMessage', props)), {
	      'menu-notice': true,
	      'menu-notice--no-options': true
	    }, className)
	  }, innerProps), children);
	};
	NoOptionsMessage.defaultProps = {
	  children: 'No options'
	};
	var LoadingMessage = function LoadingMessage(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps;
	  return React__default.createElement("div", _extends({
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('loadingMessage', props)), {
	      'menu-notice': true,
	      'menu-notice--loading': true
	    }, className)
	  }, innerProps), children);
	};
	LoadingMessage.defaultProps = {
	  children: 'Loading...'
	}; // ==============================
	// Menu Portal
	// ==============================

	var menuPortalCSS = function menuPortalCSS(_ref6) {
	  var rect = _ref6.rect,
	      offset = _ref6.offset,
	      position = _ref6.position;
	  return {
	    left: rect.left,
	    position: position,
	    top: offset,
	    width: rect.width,
	    zIndex: 1
	  };
	};
	var MenuPortal =
	/*#__PURE__*/
	function (_Component2) {
	  _inherits(MenuPortal, _Component2);

	  function MenuPortal() {
	    var _getPrototypeOf3;

	    var _this2;

	    _classCallCheck(this, MenuPortal);

	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    _this2 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(MenuPortal)).call.apply(_getPrototypeOf3, [this].concat(args)));

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "state", {
	      placement: null
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "getPortalPlacement", function (_ref7) {
	      var placement = _ref7.placement;
	      var initialPlacement = coercePlacement(_this2.props.menuPlacement); // avoid re-renders if the placement has not changed

	      if (placement !== initialPlacement) {
	        _this2.setState({
	          placement: placement
	        });
	      }
	    });

	    return _this2;
	  }

	  _createClass(MenuPortal, [{
	    key: "getChildContext",
	    value: function getChildContext() {
	      return {
	        getPortalPlacement: this.getPortalPlacement
	      };
	    } // callback for occassions where the menu must "flip"

	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          appendTo = _this$props2.appendTo,
	          children = _this$props2.children,
	          controlElement = _this$props2.controlElement,
	          menuPlacement = _this$props2.menuPlacement,
	          position = _this$props2.menuPosition,
	          getStyles = _this$props2.getStyles;
	      var isFixed = position === 'fixed'; // bail early if required elements aren't present

	      if (!appendTo && !isFixed || !controlElement) {
	        return null;
	      }

	      var placement = this.state.placement || coercePlacement(menuPlacement);
	      var rect = getBoundingClientObj(controlElement);
	      var scrollDistance = isFixed ? 0 : window.pageYOffset;
	      var offset = rect[placement] + scrollDistance;
	      var state = {
	        offset: offset,
	        position: position,
	        rect: rect
	      }; // same wrapper element whether fixed or portalled

	      var menuWrapper = React__default.createElement("div", {
	        className:
	        /*#__PURE__*/

	        /*#__PURE__*/
	        css(getStyles('menuPortal', state))
	      }, children);
	      return appendTo ? reactDom.createPortal(menuWrapper, appendTo) : menuWrapper;
	    }
	  }]);

	  return MenuPortal;
	}(React.Component);

	_defineProperty(MenuPortal, "childContextTypes", {
	  getPortalPlacement: PropTypes$1.func
	});

	var isArray = Array.isArray;
	var keyList = Object.keys;
	var hasProp = Object.prototype.hasOwnProperty;

	function equal(a, b) {
	  // fast-deep-equal index.js 2.0.1
	  if (a === b) return true;

	  if (a && b && _typeof(a) == 'object' && _typeof(b) == 'object') {
	    var arrA = isArray(a),
	        arrB = isArray(b),
	        i,
	        length,
	        key;

	    if (arrA && arrB) {
	      length = a.length;
	      if (length != b.length) return false;

	      for (i = length; i-- !== 0;) {
	        if (!equal(a[i], b[i])) return false;
	      }

	      return true;
	    }

	    if (arrA != arrB) return false;
	    var dateA = a instanceof Date,
	        dateB = b instanceof Date;
	    if (dateA != dateB) return false;
	    if (dateA && dateB) return a.getTime() == b.getTime();
	    var regexpA = a instanceof RegExp,
	        regexpB = b instanceof RegExp;
	    if (regexpA != regexpB) return false;
	    if (regexpA && regexpB) return a.toString() == b.toString();
	    var keys = keyList(a);
	    length = keys.length;

	    if (length !== keyList(b).length) {
	      return false;
	    }

	    for (i = length; i-- !== 0;) {
	      if (!hasProp.call(b, keys[i])) return false;
	    } // end fast-deep-equal
	    // Custom handling for React


	    for (i = length; i-- !== 0;) {
	      key = keys[i];

	      if (key === '_owner' && a.$$typeof) {
	        // React-specific: avoid traversing React elements' _owner.
	        //  _owner contains circular references
	        // and is not needed when comparing the actual elements (and not their owners)
	        // .$$typeof and ._store on just reasonable markers of a react element
	        continue;
	      } else {
	        // all other properties should be traversed as usual
	        if (!equal(a[key], b[key])) return false;
	      }
	    } // fast-deep-equal index.js 2.0.1


	    return true;
	  }

	  return a !== a && b !== b;
	} // end fast-deep-equal


	function exportedEqual(a, b) {
	  try {
	    return equal(a, b);
	  } catch (error) {
	    if (error.message && error.message.match(/stack|recursion/i)) {
	      // warn on circular references, don't crash
	      // browsers give this different errors name and messages:
	      // chrome/safari: "RangeError", "Maximum call stack size exceeded"
	      // firefox: "InternalError", too much recursion"
	      // edge: "Error", "Out of stack space"
	      console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);
	      return false;
	    } // some other error. we should definitely know about these


	    throw error;
	  }
	}

	var diacritics = [{
	  base: 'A',
	  letters: /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g
	}, {
	  base: 'AA',
	  letters: /[\uA732]/g
	}, {
	  base: 'AE',
	  letters: /[\u00C6\u01FC\u01E2]/g
	}, {
	  base: 'AO',
	  letters: /[\uA734]/g
	}, {
	  base: 'AU',
	  letters: /[\uA736]/g
	}, {
	  base: 'AV',
	  letters: /[\uA738\uA73A]/g
	}, {
	  base: 'AY',
	  letters: /[\uA73C]/g
	}, {
	  base: 'B',
	  letters: /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g
	}, {
	  base: 'C',
	  letters: /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g
	}, {
	  base: 'D',
	  letters: /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g
	}, {
	  base: 'DZ',
	  letters: /[\u01F1\u01C4]/g
	}, {
	  base: 'Dz',
	  letters: /[\u01F2\u01C5]/g
	}, {
	  base: 'E',
	  letters: /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g
	}, {
	  base: 'F',
	  letters: /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g
	}, {
	  base: 'G',
	  letters: /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g
	}, {
	  base: 'H',
	  letters: /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g
	}, {
	  base: 'I',
	  letters: /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g
	}, {
	  base: 'J',
	  letters: /[\u004A\u24BF\uFF2A\u0134\u0248]/g
	}, {
	  base: 'K',
	  letters: /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g
	}, {
	  base: 'L',
	  letters: /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g
	}, {
	  base: 'LJ',
	  letters: /[\u01C7]/g
	}, {
	  base: 'Lj',
	  letters: /[\u01C8]/g
	}, {
	  base: 'M',
	  letters: /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g
	}, {
	  base: 'N',
	  letters: /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g
	}, {
	  base: 'NJ',
	  letters: /[\u01CA]/g
	}, {
	  base: 'Nj',
	  letters: /[\u01CB]/g
	}, {
	  base: 'O',
	  letters: /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g
	}, {
	  base: 'OI',
	  letters: /[\u01A2]/g
	}, {
	  base: 'OO',
	  letters: /[\uA74E]/g
	}, {
	  base: 'OU',
	  letters: /[\u0222]/g
	}, {
	  base: 'P',
	  letters: /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g
	}, {
	  base: 'Q',
	  letters: /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g
	}, {
	  base: 'R',
	  letters: /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g
	}, {
	  base: 'S',
	  letters: /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g
	}, {
	  base: 'T',
	  letters: /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g
	}, {
	  base: 'TZ',
	  letters: /[\uA728]/g
	}, {
	  base: 'U',
	  letters: /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g
	}, {
	  base: 'V',
	  letters: /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g
	}, {
	  base: 'VY',
	  letters: /[\uA760]/g
	}, {
	  base: 'W',
	  letters: /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g
	}, {
	  base: 'X',
	  letters: /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g
	}, {
	  base: 'Y',
	  letters: /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g
	}, {
	  base: 'Z',
	  letters: /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g
	}, {
	  base: 'a',
	  letters: /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g
	}, {
	  base: 'aa',
	  letters: /[\uA733]/g
	}, {
	  base: 'ae',
	  letters: /[\u00E6\u01FD\u01E3]/g
	}, {
	  base: 'ao',
	  letters: /[\uA735]/g
	}, {
	  base: 'au',
	  letters: /[\uA737]/g
	}, {
	  base: 'av',
	  letters: /[\uA739\uA73B]/g
	}, {
	  base: 'ay',
	  letters: /[\uA73D]/g
	}, {
	  base: 'b',
	  letters: /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g
	}, {
	  base: 'c',
	  letters: /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g
	}, {
	  base: 'd',
	  letters: /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g
	}, {
	  base: 'dz',
	  letters: /[\u01F3\u01C6]/g
	}, {
	  base: 'e',
	  letters: /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g
	}, {
	  base: 'f',
	  letters: /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g
	}, {
	  base: 'g',
	  letters: /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g
	}, {
	  base: 'h',
	  letters: /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g
	}, {
	  base: 'hv',
	  letters: /[\u0195]/g
	}, {
	  base: 'i',
	  letters: /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g
	}, {
	  base: 'j',
	  letters: /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g
	}, {
	  base: 'k',
	  letters: /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g
	}, {
	  base: 'l',
	  letters: /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g
	}, {
	  base: 'lj',
	  letters: /[\u01C9]/g
	}, {
	  base: 'm',
	  letters: /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g
	}, {
	  base: 'n',
	  letters: /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g
	}, {
	  base: 'nj',
	  letters: /[\u01CC]/g
	}, {
	  base: 'o',
	  letters: /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g
	}, {
	  base: 'oi',
	  letters: /[\u01A3]/g
	}, {
	  base: 'ou',
	  letters: /[\u0223]/g
	}, {
	  base: 'oo',
	  letters: /[\uA74F]/g
	}, {
	  base: 'p',
	  letters: /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g
	}, {
	  base: 'q',
	  letters: /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g
	}, {
	  base: 'r',
	  letters: /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g
	}, {
	  base: 's',
	  letters: /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g
	}, {
	  base: 't',
	  letters: /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g
	}, {
	  base: 'tz',
	  letters: /[\uA729]/g
	}, {
	  base: 'u',
	  letters: /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g
	}, {
	  base: 'v',
	  letters: /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g
	}, {
	  base: 'vy',
	  letters: /[\uA761]/g
	}, {
	  base: 'w',
	  letters: /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g
	}, {
	  base: 'x',
	  letters: /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g
	}, {
	  base: 'y',
	  letters: /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g
	}, {
	  base: 'z',
	  letters: /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g
	}];
	var stripDiacritics = function stripDiacritics(str) {
	  for (var i = 0; i < diacritics.length; i++) {
	    str = str.replace(diacritics[i].letters, diacritics[i].base);
	  }

	  return str;
	};

	var trimString = function trimString(str) {
	  return str.replace(/^\s+|\s+$/g, '');
	};

	var defaultStringify = function defaultStringify(option) {
	  return "".concat(option.label, " ").concat(option.value);
	};

	var createFilter = function createFilter(config) {
	  return function (option, rawInput) {
	    var _ignoreCase$ignoreAcc = _objectSpread({
	      ignoreCase: true,
	      ignoreAccents: true,
	      stringify: defaultStringify,
	      trim: true,
	      matchFrom: 'any'
	    }, config),
	        ignoreCase = _ignoreCase$ignoreAcc.ignoreCase,
	        ignoreAccents = _ignoreCase$ignoreAcc.ignoreAccents,
	        stringify = _ignoreCase$ignoreAcc.stringify,
	        trim = _ignoreCase$ignoreAcc.trim,
	        matchFrom = _ignoreCase$ignoreAcc.matchFrom;

	    var input = trim ? trimString(rawInput) : rawInput;
	    var candidate = trim ? trimString(stringify(option)) : stringify(option);

	    if (ignoreCase) {
	      input = input.toLowerCase();
	      candidate = candidate.toLowerCase();
	    }

	    if (ignoreAccents) {
	      input = stripDiacritics(input);
	      candidate = stripDiacritics(candidate);
	    }

	    return matchFrom === 'start' ? candidate.substr(0, input.length) === input : candidate.indexOf(input) > -1;
	  };
	};

	var A11yText = function A11yText(props) {
	  return React__default.createElement("span", _extends({
	    className:
	    /*#__PURE__*/

	    /*#__PURE__*/
	    css({
	      label: 'a11yText',
	      zIndex: 9999,
	      border: 0,
	      clip: 'rect(1px, 1px, 1px, 1px)',
	      height: 1,
	      width: 1,
	      position: 'absolute',
	      overflow: 'hidden',
	      padding: 0,
	      whiteSpace: 'nowrap',
	      backgroundColor: 'red',
	      color: 'blue'
	    })
	  }, props));
	};

	var DummyInput =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(DummyInput, _Component);

	  function DummyInput() {
	    _classCallCheck(this, DummyInput);

	    return _possibleConstructorReturn(this, _getPrototypeOf(DummyInput).apply(this, arguments));
	  }

	  _createClass(DummyInput, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          inProp = _this$props.in,
	          out = _this$props.out,
	          onExited = _this$props.onExited,
	          appear = _this$props.appear,
	          enter = _this$props.enter,
	          exit = _this$props.exit,
	          innerRef = _this$props.innerRef,
	          emotion = _this$props.emotion,
	          props = _objectWithoutProperties(_this$props, ["in", "out", "onExited", "appear", "enter", "exit", "innerRef", "emotion"]);

	      return React__default.createElement("input", _extends({
	        ref: innerRef
	      }, props, {
	        className:
	        /*#__PURE__*/

	        /*#__PURE__*/
	        css({
	          label: 'dummyInput',
	          // get rid of any default styles
	          background: 0,
	          border: 0,
	          fontSize: 'inherit',
	          outline: 0,
	          padding: 0,
	          // important! without `width` browsers won't allow focus
	          width: 1,
	          // remove cursor on desktop
	          color: 'transparent',
	          // remove cursor on mobile whilst maintaining "scroll into view" behaviour
	          left: -100,
	          opacity: 0,
	          position: 'relative',
	          transform: 'scale(0)'
	        })
	      }));
	    }
	  }]);

	  return DummyInput;
	}(React.Component);

	var NodeResolver =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(NodeResolver, _Component);

	  function NodeResolver() {
	    _classCallCheck(this, NodeResolver);

	    return _possibleConstructorReturn(this, _getPrototypeOf(NodeResolver).apply(this, arguments));
	  }

	  _createClass(NodeResolver, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.props.innerRef(reactDom.findDOMNode(this));
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.props.innerRef(null);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return this.props.children;
	    }
	  }]);

	  return NodeResolver;
	}(React.Component);

	var STYLE_KEYS = ['boxSizing', 'height', 'overflow', 'paddingRight', 'position'];
	var LOCK_STYLES = {
	  boxSizing: 'border-box',
	  // account for possible declaration `width: 100%;` on body
	  overflow: 'hidden',
	  position: 'relative',
	  height: '100%'
	};

	function preventTouchMove(e) {
	  e.preventDefault();
	}
	function allowTouchMove(e) {
	  e.stopPropagation();
	}
	function preventInertiaScroll() {
	  var top = this.scrollTop;
	  var totalScroll = this.scrollHeight;
	  var currentScroll = top + this.offsetHeight;

	  if (top === 0) {
	    this.scrollTop = 1;
	  } else if (currentScroll === totalScroll) {
	    this.scrollTop = top - 1;
	  }
	} // `ontouchstart` check works on most browsers
	// `maxTouchPoints` works on IE10/11 and Surface

	function isTouchDevice() {
	  return 'ontouchstart' in window || navigator.maxTouchPoints;
	}

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	var activeScrollLocks = 0;

	var ScrollLock =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(ScrollLock, _Component);

	  function ScrollLock() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck(this, ScrollLock);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScrollLock)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "originalStyles", {});

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "listenerOptions", {
	      capture: false,
	      passive: false
	    });

	    return _this;
	  }

	  _createClass(ScrollLock, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var _this2 = this;

	      if (!canUseDOM) return;
	      var _this$props = this.props,
	          accountForScrollbars = _this$props.accountForScrollbars,
	          touchScrollTarget = _this$props.touchScrollTarget;
	      var target = document.body;
	      var targetStyle = target && target.style;

	      if (accountForScrollbars) {
	        // store any styles already applied to the body
	        STYLE_KEYS.forEach(function (key) {
	          var val = targetStyle && targetStyle[key];
	          _this2.originalStyles[key] = val;
	        });
	      } // apply the lock styles and padding if this is the first scroll lock


	      if (accountForScrollbars && activeScrollLocks < 1) {
	        var currentPadding = parseInt(this.originalStyles.paddingRight, 10) || 0;
	        var clientWidth = document.body ? document.body.clientWidth : 0;
	        var adjustedPadding = window.innerWidth - clientWidth + currentPadding || 0;
	        Object.keys(LOCK_STYLES).forEach(function (key) {
	          var val = LOCK_STYLES[key];

	          if (targetStyle) {
	            targetStyle[key] = val;
	          }
	        });

	        if (targetStyle) {
	          targetStyle.paddingRight = "".concat(adjustedPadding, "px");
	        }
	      } // account for touch devices


	      if (target && isTouchDevice()) {
	        // Mobile Safari ignores { overflow: hidden } declaration on the body.
	        target.addEventListener('touchmove', preventTouchMove, this.listenerOptions); // Allow scroll on provided target

	        if (touchScrollTarget) {
	          touchScrollTarget.addEventListener('touchstart', preventInertiaScroll, this.listenerOptions);
	          touchScrollTarget.addEventListener('touchmove', allowTouchMove, this.listenerOptions);
	        }
	      } // increment active scroll locks


	      activeScrollLocks += 1;
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      var _this3 = this;

	      if (!canUseDOM) return;
	      var _this$props2 = this.props,
	          accountForScrollbars = _this$props2.accountForScrollbars,
	          touchScrollTarget = _this$props2.touchScrollTarget;
	      var target = document.body;
	      var targetStyle = target && target.style; // safely decrement active scroll locks

	      activeScrollLocks = Math.max(activeScrollLocks - 1, 0); // reapply original body styles, if any

	      if (accountForScrollbars && activeScrollLocks < 1) {
	        STYLE_KEYS.forEach(function (key) {
	          var val = _this3.originalStyles[key];

	          if (targetStyle) {
	            targetStyle[key] = val;
	          }
	        });
	      } // remove touch listeners


	      if (target && isTouchDevice()) {
	        target.removeEventListener('touchmove', preventTouchMove, this.listenerOptions);

	        if (touchScrollTarget) {
	          touchScrollTarget.removeEventListener('touchstart', preventInertiaScroll, this.listenerOptions);
	          touchScrollTarget.removeEventListener('touchmove', allowTouchMove, this.listenerOptions);
	        }
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return null;
	    }
	  }]);

	  return ScrollLock;
	}(React.Component);

	_defineProperty(ScrollLock, "defaultProps", {
	  accountForScrollbars: true
	});

	// NOTE:
	// We shouldn't need this after updating to React v16.3.0, which introduces:
	// - createRef() https://reactjs.org/docs/react-api.html#reactcreateref
	// - forwardRef() https://reactjs.org/docs/react-api.html#reactforwardref
	var ScrollBlock =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits(ScrollBlock, _PureComponent);

	  function ScrollBlock() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck(this, ScrollBlock);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScrollBlock)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
	      touchScrollTarget: null
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getScrollTarget", function (ref) {
	      if (ref === _this.state.touchScrollTarget) return;

	      _this.setState({
	        touchScrollTarget: ref
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "blurSelectInput", function () {
	      if (document.activeElement) {
	        document.activeElement.blur();
	      }
	    });

	    return _this;
	  }

	  _createClass(ScrollBlock, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          children = _this$props.children,
	          isEnabled = _this$props.isEnabled;
	      var touchScrollTarget = this.state.touchScrollTarget; // bail early if not enabled

	      if (!isEnabled) return children;
	      /*
	       * Div
	       * ------------------------------
	       * blocks scrolling on non-body elements behind the menu
	        * NodeResolver
	       * ------------------------------
	       * we need a reference to the scrollable element to "unlock" scroll on
	       * mobile devices
	        * ScrollLock
	       * ------------------------------
	       * actually does the scroll locking
	       */

	      return React__default.createElement("div", null, React__default.createElement("div", {
	        onClick: this.blurSelectInput,
	        className:
	        /*#__PURE__*/

	        /*#__PURE__*/
	        css({
	          position: 'fixed',
	          left: 0,
	          bottom: 0,
	          right: 0,
	          top: 0
	        })
	      }), React__default.createElement(NodeResolver, {
	        innerRef: this.getScrollTarget
	      }, children), touchScrollTarget ? React__default.createElement(ScrollLock, {
	        touchScrollTarget: touchScrollTarget
	      }) : null);
	    }
	  }]);

	  return ScrollBlock;
	}(React.PureComponent);

	var ScrollCaptor =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(ScrollCaptor, _Component);

	  function ScrollCaptor() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck(this, ScrollCaptor);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScrollCaptor)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isBottom", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isTop", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "scrollTarget", void 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "touchStart", void 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "cancelScroll", function (event) {
	      event.preventDefault();
	      event.stopPropagation();
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleEventDelta", function (event, delta) {
	      var _this$props = _this.props,
	          onBottomArrive = _this$props.onBottomArrive,
	          onBottomLeave = _this$props.onBottomLeave,
	          onTopArrive = _this$props.onTopArrive,
	          onTopLeave = _this$props.onTopLeave;
	      var _this$scrollTarget = _this.scrollTarget,
	          scrollTop = _this$scrollTarget.scrollTop,
	          scrollHeight = _this$scrollTarget.scrollHeight,
	          clientHeight = _this$scrollTarget.clientHeight;
	      var target = _this.scrollTarget;
	      var isDeltaPositive = delta > 0;
	      var availableScroll = scrollHeight - clientHeight - scrollTop;
	      var shouldCancelScroll = false; // reset bottom/top flags

	      if (availableScroll > delta && _this.isBottom) {
	        if (onBottomLeave) onBottomLeave(event);
	        _this.isBottom = false;
	      }

	      if (isDeltaPositive && _this.isTop) {
	        if (onTopLeave) onTopLeave(event);
	        _this.isTop = false;
	      } // bottom limit


	      if (isDeltaPositive && delta > availableScroll) {
	        if (onBottomArrive && !_this.isBottom) {
	          onBottomArrive(event);
	        }

	        target.scrollTop = scrollHeight;
	        shouldCancelScroll = true;
	        _this.isBottom = true; // top limit
	      } else if (!isDeltaPositive && -delta > scrollTop) {
	        if (onTopArrive && !_this.isTop) {
	          onTopArrive(event);
	        }

	        target.scrollTop = 0;
	        shouldCancelScroll = true;
	        _this.isTop = true;
	      } // cancel scroll


	      if (shouldCancelScroll) {
	        _this.cancelScroll(event);
	      }
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onWheel", function (event) {
	      _this.handleEventDelta(event, event.deltaY);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTouchStart", function (event) {
	      // set touch start so we can calculate touchmove delta
	      _this.touchStart = event.changedTouches[0].clientY;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTouchMove", function (event) {
	      var deltaY = _this.touchStart - event.changedTouches[0].clientY;

	      _this.handleEventDelta(event, deltaY);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getScrollTarget", function (ref) {
	      _this.scrollTarget = ref;
	    });

	    return _this;
	  }

	  _createClass(ScrollCaptor, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.startListening(this.scrollTarget);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.stopListening(this.scrollTarget);
	    }
	  }, {
	    key: "startListening",
	    value: function startListening(el) {
	      // bail early if no scroll available
	      if (!el) return;
	      if (el.scrollHeight <= el.clientHeight) return; // all the if statements are to appease Flow 😢

	      if (typeof el.addEventListener === 'function') {
	        el.addEventListener('wheel', this.onWheel, false);
	      }

	      if (typeof el.addEventListener === 'function') {
	        el.addEventListener('touchstart', this.onTouchStart, false);
	      }

	      if (typeof el.addEventListener === 'function') {
	        el.addEventListener('touchmove', this.onTouchMove, false);
	      }
	    }
	  }, {
	    key: "stopListening",
	    value: function stopListening(el) {
	      // bail early if no scroll available
	      if (el.scrollHeight <= el.clientHeight) return; // all the if statements are to appease Flow 😢

	      if (typeof el.removeEventListener === 'function') {
	        el.removeEventListener('wheel', this.onWheel, false);
	      }

	      if (typeof el.removeEventListener === 'function') {
	        el.removeEventListener('touchstart', this.onTouchStart, false);
	      }

	      if (typeof el.removeEventListener === 'function') {
	        el.removeEventListener('touchmove', this.onTouchMove, false);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return React__default.createElement(NodeResolver, {
	        innerRef: this.getScrollTarget
	      }, this.props.children);
	    }
	  }]);

	  return ScrollCaptor;
	}(React.Component);

	var ScrollCaptorSwitch =
	/*#__PURE__*/
	function (_Component2) {
	  _inherits(ScrollCaptorSwitch, _Component2);

	  function ScrollCaptorSwitch() {
	    _classCallCheck(this, ScrollCaptorSwitch);

	    return _possibleConstructorReturn(this, _getPrototypeOf(ScrollCaptorSwitch).apply(this, arguments));
	  }

	  _createClass(ScrollCaptorSwitch, [{
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          isEnabled = _this$props2.isEnabled,
	          props = _objectWithoutProperties(_this$props2, ["isEnabled"]);

	      return isEnabled ? React__default.createElement(ScrollCaptor, props) : this.props.children;
	    }
	  }]);

	  return ScrollCaptorSwitch;
	}(React.Component);

	_defineProperty(ScrollCaptorSwitch, "defaultProps", {
	  isEnabled: true
	});

	var instructionsAriaMessage = function instructionsAriaMessage(event) {
	  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var isSearchable = context.isSearchable,
	      isMulti = context.isMulti,
	      label = context.label,
	      isDisabled = context.isDisabled;

	  switch (event) {
	    case 'menu':
	      return "Use Up and Down to choose options".concat(isDisabled ? '' : ', press Enter to select the currently focused option', ", press Escape to exit the menu, press Tab to select the option and exit the menu.");

	    case 'input':
	      return "".concat(label ? label : 'Select', " is focused ").concat(isSearchable ? ',type to refine list' : '', ", press Down to open the menu, ").concat(isMulti ? ' press left to focus selected values' : '');

	    case 'value':
	      return 'Use left and right to toggle between focused values, press Backspace to remove the currently focused value';
	  }
	};
	var valueEventAriaMessage = function valueEventAriaMessage(event, context) {
	  var value = context.value,
	      isDisabled = context.isDisabled;
	  if (!value) return;

	  switch (event) {
	    case 'deselect-option':
	    case 'pop-value':
	    case 'remove-value':
	      return "option ".concat(value, ", deselected.");

	    case 'select-option':
	      return isDisabled ? "option ".concat(value, " is disabled. Select another option.") : "option ".concat(value, ", selected.");
	  }
	};
	var valueFocusAriaMessage = function valueFocusAriaMessage(_ref) {
	  var focusedValue = _ref.focusedValue,
	      getOptionLabel = _ref.getOptionLabel,
	      selectValue = _ref.selectValue;
	  return "value ".concat(getOptionLabel(focusedValue), " focused, ").concat(selectValue.indexOf(focusedValue) + 1, " of ").concat(selectValue.length, ".");
	};
	var optionFocusAriaMessage = function optionFocusAriaMessage(_ref2) {
	  var focusedOption = _ref2.focusedOption,
	      getOptionLabel = _ref2.getOptionLabel,
	      options = _ref2.options;
	  return "option ".concat(getOptionLabel(focusedOption), " focused").concat(focusedOption.isDisabled ? ' disabled' : '', ", ").concat(options.indexOf(focusedOption) + 1, " of ").concat(options.length, ".");
	};
	var resultsAriaMessage = function resultsAriaMessage(_ref3) {
	  var inputValue = _ref3.inputValue,
	      screenReaderMessage = _ref3.screenReaderMessage;
	  return "".concat(screenReaderMessage).concat(inputValue ? ' for search term ' + inputValue : '', ".");
	};

	var formatGroupLabel = function formatGroupLabel(group) {
	  return group.label;
	};
	var getOptionLabel = function getOptionLabel(option) {
	  return option.label;
	};
	var getOptionValue = function getOptionValue(option) {
	  return option.value;
	};
	var isOptionDisabled = function isOptionDisabled(option) {
	  return !!option.isDisabled;
	};

	var containerCSS = function containerCSS(_ref) {
	  var isDisabled = _ref.isDisabled,
	      isRtl = _ref.isRtl;
	  return {
	    label: 'container',
	    direction: isRtl ? 'rtl' : null,
	    pointerEvents: isDisabled ? 'none' : null,
	    // cancel mouse events when disabled
	    position: 'relative'
	  };
	};
	var SelectContainer = function SelectContainer(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps,
	      isDisabled = props.isDisabled,
	      isRtl = props.isRtl;
	  return React__default.createElement("div", _extends({
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('container', props)), {
	      '--is-disabled': isDisabled,
	      '--is-rtl': isRtl
	    }, className)
	  }, innerProps), children);
	}; // ==============================
	// Value Container
	// ==============================

	var valueContainerCSS = function valueContainerCSS(_ref2) {
	  var spacing = _ref2.theme.spacing;
	  return {
	    alignItems: 'center',
	    display: 'flex',
	    flex: 1,
	    flexWrap: 'wrap',
	    padding: "".concat(spacing.baseUnit / 2, "px ").concat(spacing.baseUnit * 2, "px"),
	    WebkitOverflowScrolling: 'touch',
	    position: 'relative',
	    overflow: 'hidden'
	  };
	};
	var ValueContainer =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(ValueContainer, _Component);

	  function ValueContainer() {
	    _classCallCheck(this, ValueContainer);

	    return _possibleConstructorReturn(this, _getPrototypeOf(ValueContainer).apply(this, arguments));
	  }

	  _createClass(ValueContainer, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          children = _this$props.children,
	          className = _this$props.className,
	          cx = _this$props.cx,
	          isMulti = _this$props.isMulti,
	          getStyles = _this$props.getStyles,
	          hasValue = _this$props.hasValue;
	      return React__default.createElement("div", {
	        className: cx(
	        /*#__PURE__*/
	        css(getStyles('valueContainer', this.props)), {
	          'value-container': true,
	          'value-container--is-multi': isMulti,
	          'value-container--has-value': hasValue
	        }, className)
	      }, children);
	    }
	  }]);

	  return ValueContainer;
	}(React.Component); // ==============================
	// Indicator Container
	// ==============================

	var indicatorsContainerCSS = function indicatorsContainerCSS() {
	  return {
	    alignItems: 'center',
	    alignSelf: 'stretch',
	    display: 'flex',
	    flexShrink: 0
	  };
	};
	var IndicatorsContainer = function IndicatorsContainer(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles;
	  return React__default.createElement("div", {
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('indicatorsContainer', props)), {
	      'indicators': true
	    }, className)
	  }, children);
	};

	// ==============================
	// Dropdown & Clear Icons
	// ==============================
	var Svg = function Svg(_ref) {
	  var size = _ref.size,
	      props = _objectWithoutProperties(_ref, ["size"]);

	  return React__default.createElement("svg", _extends({
	    height: size,
	    width: size,
	    viewBox: "0 0 20 20",
	    "aria-hidden": "true",
	    focusable: "false",
	    className:
	    /*#__PURE__*/

	    /*#__PURE__*/
	    css({
	      display: 'inline-block',
	      fill: 'currentColor',
	      lineHeight: 1,
	      stroke: 'currentColor',
	      strokeWidth: 0
	    })
	  }, props));
	};

	var CrossIcon = function CrossIcon(props) {
	  return React__default.createElement(Svg, _extends({
	    size: 20
	  }, props), React__default.createElement("path", {
	    d: "M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"
	  }));
	};
	var DownChevron = function DownChevron(props) {
	  return React__default.createElement(Svg, _extends({
	    size: 20
	  }, props), React__default.createElement("path", {
	    d: "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
	  }));
	}; // ==============================
	// Dropdown & Clear Buttons
	// ==============================

	var baseCSS = function baseCSS(_ref2) {
	  var isFocused = _ref2.isFocused,
	      _ref2$theme = _ref2.theme,
	      baseUnit = _ref2$theme.spacing.baseUnit,
	      colors = _ref2$theme.colors;
	  return {
	    label: 'indicatorContainer',
	    color: isFocused ? colors.neutral60 : colors.neutral20,
	    display: 'flex',
	    padding: baseUnit * 2,
	    transition: 'color 150ms',
	    ':hover': {
	      color: isFocused ? colors.neutral80 : colors.neutral40
	    }
	  };
	};

	var dropdownIndicatorCSS = baseCSS;
	var DropdownIndicator = function DropdownIndicator(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps;
	  return React__default.createElement("div", _extends({}, innerProps, {
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('dropdownIndicator', props)), {
	      'indicator': true,
	      'dropdown-indicator': true
	    }, className)
	  }), children || React__default.createElement(DownChevron, null));
	};
	var clearIndicatorCSS = baseCSS;
	var ClearIndicator = function ClearIndicator(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps;
	  return React__default.createElement("div", _extends({}, innerProps, {
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('clearIndicator', props)), {
	      'indicator': true,
	      'clear-indicator': true
	    }, className)
	  }), children || React__default.createElement(CrossIcon, null));
	}; // ==============================
	// Separator
	// ==============================

	var indicatorSeparatorCSS = function indicatorSeparatorCSS(_ref3) {
	  var isDisabled = _ref3.isDisabled,
	      _ref3$theme = _ref3.theme,
	      baseUnit = _ref3$theme.spacing.baseUnit,
	      colors = _ref3$theme.colors;
	  return {
	    label: 'indicatorSeparator',
	    alignSelf: 'stretch',
	    backgroundColor: isDisabled ? colors.neutral10 : colors.neutral20,
	    marginBottom: baseUnit * 2,
	    marginTop: baseUnit * 2,
	    width: 1
	  };
	};
	var IndicatorSeparator = function IndicatorSeparator(props) {
	  var className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps;
	  return React__default.createElement("span", _extends({}, innerProps, {
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('indicatorSeparator', props)), {
	      'indicator-separator': true
	    }, className)
	  }));
	}; // ==============================
	// Loading
	// ==============================

	var keyframesName = 'react-select-loading-indicator';
	var keyframesInjected = false;
	var loadingIndicatorCSS = function loadingIndicatorCSS(_ref4) {
	  var isFocused = _ref4.isFocused,
	      size = _ref4.size,
	      _ref4$theme = _ref4.theme,
	      colors = _ref4$theme.colors,
	      baseUnit = _ref4$theme.spacing.baseUnit;
	  return {
	    label: 'loadingIndicator',
	    color: isFocused ? colors.neutral60 : colors.neutral20,
	    display: 'flex',
	    padding: baseUnit * 2,
	    transition: 'color 150ms',
	    alignSelf: 'center',
	    fontSize: size,
	    lineHeight: 1,
	    marginRight: size,
	    textAlign: 'center',
	    verticalAlign: 'middle'
	  };
	};

	var LoadingDot = function LoadingDot(_ref5) {
	  var color = _ref5.color,
	      delay = _ref5.delay,
	      offset = _ref5.offset;
	  return React__default.createElement("span", {
	    className:
	    /*#__PURE__*/

	    /*#__PURE__*/
	    css({
	      animationDuration: '1s',
	      animationDelay: "".concat(delay, "ms"),
	      animationIterationCount: 'infinite',
	      animationName: keyframesName,
	      animationTimingFunction: 'ease-in-out',
	      backgroundColor: color,
	      borderRadius: '1em',
	      display: 'inline-block',
	      marginLeft: offset ? '1em' : null,
	      height: '1em',
	      verticalAlign: 'top',
	      width: '1em'
	    })
	  });
	};

	var LoadingIndicator = function LoadingIndicator(props) {
	  var className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps,
	      isFocused = props.isFocused,
	      isRtl = props.isRtl,
	      colors = props.theme.colors;
	  var color = isFocused ? colors.neutral80 : colors.neutral20;

	  if (!keyframesInjected) {
	    // eslint-disable-next-line no-unused-expressions
	    injectGlobal("@keyframes ", keyframesName, "{0%,80%,100%{opacity:0;}40%{opacity:1;}};");
	    keyframesInjected = true;
	  }

	  return React__default.createElement("div", _extends({}, innerProps, {
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('loadingIndicator', props)), {
	      'indicator': true,
	      'loading-indicator': true
	    }, className)
	  }), React__default.createElement(LoadingDot, {
	    color: color,
	    delay: 0,
	    offset: isRtl
	  }), React__default.createElement(LoadingDot, {
	    color: color,
	    delay: 160,
	    offset: true
	  }), React__default.createElement(LoadingDot, {
	    color: color,
	    delay: 320,
	    offset: !isRtl
	  }));
	};
	LoadingIndicator.defaultProps = {
	  size: 4
	};

	var css$1 = function css$$1(_ref) {
	  var isDisabled = _ref.isDisabled,
	      isFocused = _ref.isFocused,
	      _ref$theme = _ref.theme,
	      colors = _ref$theme.colors,
	      borderRadius = _ref$theme.borderRadius,
	      spacing = _ref$theme.spacing;
	  return {
	    label: 'control',
	    alignItems: 'center',
	    backgroundColor: isDisabled ? colors.neutral5 : colors.neutral0,
	    borderColor: isDisabled ? colors.neutral10 : isFocused ? colors.primary : colors.neutral20,
	    borderRadius: borderRadius,
	    borderStyle: 'solid',
	    borderWidth: 1,
	    boxShadow: isFocused ? "0 0 0 1px ".concat(colors.primary) : null,
	    cursor: 'default',
	    display: 'flex',
	    flexWrap: 'wrap',
	    justifyContent: 'space-between',
	    minHeight: spacing.controlHeight,
	    outline: '0 !important',
	    position: 'relative',
	    transition: 'all 100ms',
	    '&:hover': {
	      borderColor: isFocused ? colors.primary : colors.neutral30
	    }
	  };
	};

	var Control = function Control(props) {
	  var children = props.children,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      className = props.className,
	      isDisabled = props.isDisabled,
	      isFocused = props.isFocused,
	      innerRef = props.innerRef,
	      innerProps = props.innerProps,
	      menuIsOpen = props.menuIsOpen;
	  return React__default.createElement("div", _extends({
	    ref: innerRef,
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('control', props)), {
	      'control': true,
	      'control--is-disabled': isDisabled,
	      'control--is-focused': isFocused,
	      'control--menu-is-open': menuIsOpen
	    }, className)
	  }, innerProps), children);
	};

	var groupCSS = function groupCSS(_ref) {
	  var spacing = _ref.theme.spacing;
	  return {
	    paddingBottom: spacing.baseUnit * 2,
	    paddingTop: spacing.baseUnit * 2
	  };
	};

	var Group = function Group(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      Heading = props.Heading,
	      headingProps = props.headingProps,
	      label = props.label,
	      theme = props.theme,
	      selectProps = props.selectProps;
	  return React__default.createElement("div", {
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('group', props)), {
	      'group': true
	    }, className)
	  }, React__default.createElement(Heading, _extends({}, headingProps, {
	    selectProps: selectProps,
	    theme: theme,
	    getStyles: getStyles,
	    cx: cx
	  }), label), React__default.createElement("div", null, children));
	};

	var groupHeadingCSS = function groupHeadingCSS(_ref2) {
	  var spacing = _ref2.theme.spacing;
	  return {
	    label: 'group',
	    color: '#999',
	    cursor: 'default',
	    display: 'block',
	    fontSize: '75%',
	    fontWeight: '500',
	    marginBottom: '0.25em',
	    paddingLeft: spacing.baseUnit * 3,
	    paddingRight: spacing.baseUnit * 3,
	    textTransform: 'uppercase'
	  };
	};
	var GroupHeading = function GroupHeading(props) {
	  var className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      theme = props.theme,
	      selectProps = props.selectProps,
	      cleanProps = _objectWithoutProperties(props, ["className", "cx", "getStyles", "theme", "selectProps"]);

	  return React__default.createElement("div", _extends({
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('groupHeading', _objectSpread({
	      theme: theme
	    }, cleanProps))), {
	      'group-heading': true
	    }, className)
	  }, cleanProps));
	};

	var inputCSS = function inputCSS(_ref) {
	  var isDisabled = _ref.isDisabled,
	      _ref$theme = _ref.theme,
	      spacing = _ref$theme.spacing,
	      colors = _ref$theme.colors;
	  return {
	    margin: spacing.baseUnit / 2,
	    paddingBottom: spacing.baseUnit / 2,
	    paddingTop: spacing.baseUnit / 2,
	    visibility: isDisabled ? 'hidden' : 'visible',
	    color: colors.neutral80
	  };
	};

	var inputStyle = function inputStyle(isHidden) {
	  return {
	    label: 'input',
	    background: 0,
	    border: 0,
	    fontSize: 'inherit',
	    opacity: isHidden ? 0 : 1,
	    outline: 0,
	    padding: 0,
	    color: 'inherit'
	  };
	};

	var Input = function Input(_ref2) {
	  var className = _ref2.className,
	      cx = _ref2.cx,
	      getStyles = _ref2.getStyles,
	      innerRef = _ref2.innerRef,
	      isHidden = _ref2.isHidden,
	      isDisabled = _ref2.isDisabled,
	      theme = _ref2.theme,
	      selectProps = _ref2.selectProps,
	      props = _objectWithoutProperties(_ref2, ["className", "cx", "getStyles", "innerRef", "isHidden", "isDisabled", "theme", "selectProps"]);

	  return React__default.createElement("div", {
	    className:
	    /*#__PURE__*/

	    /*#__PURE__*/
	    css(getStyles('input', _objectSpread({
	      theme: theme
	    }, props)))
	  }, React__default.createElement(AutosizeInput, _extends({
	    className: cx(null, {
	      'input': true
	    }, className),
	    inputRef: innerRef,
	    inputStyle: inputStyle(isHidden),
	    disabled: isDisabled
	  }, props)));
	};

	var multiValueCSS = function multiValueCSS(_ref) {
	  var _ref$theme = _ref.theme,
	      spacing = _ref$theme.spacing,
	      borderRadius = _ref$theme.borderRadius,
	      colors = _ref$theme.colors;
	  return {
	    label: 'multiValue',
	    backgroundColor: colors.neutral10,
	    borderRadius: borderRadius / 2,
	    display: 'flex',
	    margin: spacing.baseUnit / 2,
	    minWidth: 0 // resolves flex/text-overflow bug

	  };
	};
	var multiValueLabelCSS = function multiValueLabelCSS(_ref2) {
	  var _ref2$theme = _ref2.theme,
	      borderRadius = _ref2$theme.borderRadius,
	      colors = _ref2$theme.colors,
	      cropWithEllipsis = _ref2.cropWithEllipsis;
	  return {
	    borderRadius: borderRadius / 2,
	    color: colors.neutral80,
	    fontSize: '85%',
	    overflow: 'hidden',
	    padding: 3,
	    paddingLeft: 6,
	    textOverflow: cropWithEllipsis ? 'ellipsis' : null,
	    whiteSpace: 'nowrap'
	  };
	};
	var multiValueRemoveCSS = function multiValueRemoveCSS(_ref3) {
	  var _ref3$theme = _ref3.theme,
	      spacing = _ref3$theme.spacing,
	      borderRadius = _ref3$theme.borderRadius,
	      colors = _ref3$theme.colors,
	      isFocused = _ref3.isFocused;
	  return {
	    alignItems: 'center',
	    borderRadius: borderRadius / 2,
	    backgroundColor: isFocused && colors.dangerLight,
	    display: 'flex',
	    paddingLeft: spacing.baseUnit,
	    paddingRight: spacing.baseUnit,
	    ':hover': {
	      backgroundColor: colors.dangerLight,
	      color: colors.danger
	    }
	  };
	};
	var MultiValueGeneric = function MultiValueGeneric(_ref4) {
	  var children = _ref4.children,
	      innerProps = _ref4.innerProps;
	  return React__default.createElement("div", innerProps, children);
	};
	var MultiValueContainer = MultiValueGeneric;
	var MultiValueLabel = MultiValueGeneric;
	var MultiValueRemove =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(MultiValueRemove, _Component);

	  function MultiValueRemove() {
	    _classCallCheck(this, MultiValueRemove);

	    return _possibleConstructorReturn(this, _getPrototypeOf(MultiValueRemove).apply(this, arguments));
	  }

	  _createClass(MultiValueRemove, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          children = _this$props.children,
	          innerProps = _this$props.innerProps;
	      return React__default.createElement("div", innerProps, children || React__default.createElement(CrossIcon, {
	        size: 14
	      }));
	    }
	  }]);

	  return MultiValueRemove;
	}(React.Component);

	var MultiValue =
	/*#__PURE__*/
	function (_Component2) {
	  _inherits(MultiValue, _Component2);

	  function MultiValue() {
	    _classCallCheck(this, MultiValue);

	    return _possibleConstructorReturn(this, _getPrototypeOf(MultiValue).apply(this, arguments));
	  }

	  _createClass(MultiValue, [{
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          children = _this$props2.children,
	          className = _this$props2.className,
	          components = _this$props2.components,
	          cx = _this$props2.cx,
	          data = _this$props2.data,
	          getStyles = _this$props2.getStyles,
	          innerProps = _this$props2.innerProps,
	          isDisabled = _this$props2.isDisabled,
	          removeProps = _this$props2.removeProps,
	          selectProps = _this$props2.selectProps;
	      var Container = components.Container,
	          Label = components.Label,
	          Remove = components.Remove;

	      var containerInnerProps = _objectSpread({
	        className: cx(
	        /*#__PURE__*/
	        css(getStyles('multiValue', this.props)), {
	          'multi-value': true,
	          'multi-value--is-disabled': isDisabled
	        }, className)
	      }, innerProps);

	      var labelInnerProps = {
	        className: cx(
	        /*#__PURE__*/
	        css(getStyles('multiValueLabel', this.props)), {
	          'multi-value__label': true
	        }, className)
	      };

	      var removeInnerProps = _objectSpread({
	        className: cx(
	        /*#__PURE__*/
	        css(getStyles('multiValueRemove', this.props)), {
	          'multi-value__remove': true
	        }, className)
	      }, removeProps);

	      return React__default.createElement(Container, {
	        data: data,
	        innerProps: containerInnerProps,
	        selectProps: selectProps
	      }, React__default.createElement(Label, {
	        data: data,
	        innerProps: labelInnerProps,
	        selectProps: selectProps
	      }, children), React__default.createElement(Remove, {
	        data: data,
	        innerProps: removeInnerProps,
	        selectProps: selectProps
	      }));
	    }
	  }]);

	  return MultiValue;
	}(React.Component);

	_defineProperty(MultiValue, "defaultProps", {
	  cropWithEllipsis: true
	});

	var optionCSS = function optionCSS(_ref) {
	  var isDisabled = _ref.isDisabled,
	      isFocused = _ref.isFocused,
	      isSelected = _ref.isSelected,
	      _ref$theme = _ref.theme,
	      spacing = _ref$theme.spacing,
	      colors = _ref$theme.colors;
	  return {
	    label: 'option',
	    backgroundColor: isSelected ? colors.primary : isFocused ? colors.primary25 : 'transparent',
	    color: isDisabled ? colors.neutral20 : isSelected ? colors.neutral0 : 'inherit',
	    cursor: 'default',
	    display: 'block',
	    fontSize: 'inherit',
	    padding: "".concat(spacing.baseUnit * 2, "px ").concat(spacing.baseUnit * 3, "px"),
	    width: '100%',
	    userSelect: 'none',
	    WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',
	    // provide some affordance on touch devices
	    ':active': {
	      backgroundColor: !isDisabled && (isSelected ? colors.primary : colors.primary50)
	    }
	  };
	};

	var Option = function Option(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      isDisabled = props.isDisabled,
	      isFocused = props.isFocused,
	      isSelected = props.isSelected,
	      innerRef = props.innerRef,
	      innerProps = props.innerProps;
	  return React__default.createElement("div", _extends({
	    ref: innerRef,
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('option', props)), {
	      'option': true,
	      'option--is-disabled': isDisabled,
	      'option--is-focused': isFocused,
	      'option--is-selected': isSelected
	    }, className)
	  }, innerProps), children);
	};

	var placeholderCSS = function placeholderCSS(_ref) {
	  var _ref$theme = _ref.theme,
	      spacing = _ref$theme.spacing,
	      colors = _ref$theme.colors;
	  return {
	    label: 'placeholder',
	    color: colors.neutral50,
	    marginLeft: spacing.baseUnit / 2,
	    marginRight: spacing.baseUnit / 2,
	    position: 'absolute',
	    top: '50%',
	    transform: 'translateY(-50%)'
	  };
	};

	var Placeholder$1 = function Placeholder(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps;
	  return React__default.createElement("div", _extends({
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('placeholder', props)), {
	      'placeholder': true
	    }, className)
	  }, innerProps), children);
	};

	var css$2 = function css$$1(_ref) {
	  var isDisabled = _ref.isDisabled,
	      _ref$theme = _ref.theme,
	      spacing = _ref$theme.spacing,
	      colors = _ref$theme.colors;
	  return {
	    label: 'singleValue',
	    color: isDisabled ? colors.neutral40 : colors.neutral80,
	    marginLeft: spacing.baseUnit / 2,
	    marginRight: spacing.baseUnit / 2,
	    maxWidth: "calc(100% - ".concat(spacing.baseUnit * 2, "px)"),
	    overflow: 'hidden',
	    position: 'absolute',
	    textOverflow: 'ellipsis',
	    whiteSpace: 'nowrap',
	    top: '50%',
	    transform: 'translateY(-50%)'
	  };
	};

	var SingleValue = function SingleValue(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      isDisabled = props.isDisabled,
	      innerProps = props.innerProps;
	  return React__default.createElement("div", _extends({
	    className: cx(
	    /*#__PURE__*/
	    css(getStyles('singleValue', props)), {
	      'single-value': true,
	      'single-value--is-disabled': isDisabled
	    }, className)
	  }, innerProps), children);
	};

	var components = {
	  ClearIndicator: ClearIndicator,
	  Control: Control,
	  DropdownIndicator: DropdownIndicator,
	  DownChevron: DownChevron,
	  CrossIcon: CrossIcon,
	  Group: Group,
	  GroupHeading: GroupHeading,
	  IndicatorsContainer: IndicatorsContainer,
	  IndicatorSeparator: IndicatorSeparator,
	  Input: Input,
	  LoadingIndicator: LoadingIndicator,
	  Menu: Menu,
	  MenuList: MenuList,
	  MenuPortal: MenuPortal,
	  LoadingMessage: LoadingMessage,
	  NoOptionsMessage: NoOptionsMessage,
	  MultiValue: MultiValue,
	  MultiValueContainer: MultiValueContainer,
	  MultiValueLabel: MultiValueLabel,
	  MultiValueRemove: MultiValueRemove,
	  Option: Option,
	  Placeholder: Placeholder$1,
	  SelectContainer: SelectContainer,
	  SingleValue: SingleValue,
	  ValueContainer: ValueContainer
	};
	var defaultComponents = function defaultComponents(props) {
	  return _objectSpread({}, components, props.components);
	};

	var defaultStyles = {
	  clearIndicator: clearIndicatorCSS,
	  container: containerCSS,
	  control: css$1,
	  dropdownIndicator: dropdownIndicatorCSS,
	  group: groupCSS,
	  groupHeading: groupHeadingCSS,
	  indicatorsContainer: indicatorsContainerCSS,
	  indicatorSeparator: indicatorSeparatorCSS,
	  input: inputCSS,
	  loadingIndicator: loadingIndicatorCSS,
	  loadingMessage: loadingMessageCSS,
	  menu: menuCSS,
	  menuList: menuListCSS,
	  menuPortal: menuPortalCSS,
	  multiValue: multiValueCSS,
	  multiValueLabel: multiValueLabelCSS,
	  multiValueRemove: multiValueRemoveCSS,
	  noOptionsMessage: noOptionsMessageCSS,
	  option: optionCSS,
	  placeholder: placeholderCSS,
	  singleValue: css$2,
	  valueContainer: valueContainerCSS
	}; // Merge Utility

	var colors = {
	  primary: '#2684FF',
	  primary75: '#4C9AFF',
	  primary50: '#B2D4FF',
	  primary25: '#DEEBFF',
	  danger: '#DE350B',
	  dangerLight: '#FFBDAD',
	  neutral0: 'hsl(0, 0%, 100%)',
	  neutral5: 'hsl(0, 0%, 95%)',
	  neutral10: 'hsl(0, 0%, 90%)',
	  neutral20: 'hsl(0, 0%, 80%)',
	  neutral30: 'hsl(0, 0%, 70%)',
	  neutral40: 'hsl(0, 0%, 60%)',
	  neutral50: 'hsl(0, 0%, 50%)',
	  neutral60: 'hsl(0, 0%, 40%)',
	  neutral70: 'hsl(0, 0%, 30%)',
	  neutral80: 'hsl(0, 0%, 20%)',
	  neutral90: 'hsl(0, 0%, 10%)'
	};
	var borderRadius = 4;
	var baseUnit = 4;
	/* Used to calculate consistent margin/padding on elements */

	var controlHeight = 38;
	/* The minimum height of the control */

	var menuGutter = baseUnit * 2;
	/* The amount of space between the control and menu */

	var spacing = {
	  baseUnit: baseUnit,
	  controlHeight: controlHeight,
	  menuGutter: menuGutter
	};
	var defaultTheme = {
	  borderRadius: borderRadius,
	  colors: colors,
	  spacing: spacing
	};

	var defaultProps = {
	  backspaceRemovesValue: true,
	  blurInputOnSelect: isTouchCapable(),
	  captureMenuScroll: !isTouchCapable(),
	  closeMenuOnSelect: true,
	  closeMenuOnScroll: false,
	  components: {},
	  controlShouldRenderValue: true,
	  escapeClearsValue: false,
	  filterOption: createFilter(),
	  formatGroupLabel: formatGroupLabel,
	  getOptionLabel: getOptionLabel,
	  getOptionValue: getOptionValue,
	  isDisabled: false,
	  isLoading: false,
	  isMulti: false,
	  isRtl: false,
	  isSearchable: true,
	  isOptionDisabled: isOptionDisabled,
	  loadingMessage: function loadingMessage() {
	    return 'Loading...';
	  },
	  maxMenuHeight: 300,
	  minMenuHeight: 140,
	  menuIsOpen: false,
	  menuPlacement: 'bottom',
	  menuPosition: 'absolute',
	  menuShouldBlockScroll: false,
	  menuShouldScrollIntoView: !isMobileDevice(),
	  noOptionsMessage: function noOptionsMessage() {
	    return 'No options';
	  },
	  openMenuOnFocus: false,
	  openMenuOnClick: true,
	  options: [],
	  pageSize: 5,
	  placeholder: 'Select...',
	  screenReaderStatus: function screenReaderStatus(_ref) {
	    var count = _ref.count;
	    return "".concat(count, " result").concat(count !== 1 ? 's' : '', " available");
	  },
	  styles: {},
	  tabIndex: '0',
	  tabSelectsValue: true
	};
	var instanceId = 1;

	var Select =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Select, _Component);

	  // Misc. Instance Properties
	  // ------------------------------
	  // TODO
	  // Refs
	  // ------------------------------
	  // Lifecycle
	  // ------------------------------
	  function Select(_props) {
	    var _this;

	    _classCallCheck(this, Select);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, _props));

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
	      ariaLiveSelection: '',
	      ariaLiveContext: '',
	      focusedOption: null,
	      focusedValue: null,
	      inputIsHidden: false,
	      isFocused: false,
	      menuOptions: {
	        render: [],
	        focusable: []
	      },
	      selectValue: []
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "blockOptionHover", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isComposing", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "clearFocusValueOnUpdate", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "commonProps", void 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "components", void 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "hasGroups", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "initialTouchX", 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "initialTouchY", 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "inputIsHiddenAfterUpdate", void 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "instancePrefix", '');

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "openAfterFocus", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "scrollToFocusedOptionOnUpdate", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "userIsDragging", void 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "controlRef", null);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getControlRef", function (ref) {
	      _this.controlRef = ref;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "focusedOptionRef", null);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getFocusedOptionRef", function (ref) {
	      _this.focusedOptionRef = ref;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "menuListRef", null);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getMenuListRef", function (ref) {
	      _this.menuListRef = ref;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "inputRef", null);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getInputRef", function (ref) {
	      _this.inputRef = ref;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "cacheComponents", function (components$$1) {
	      _this.components = defaultComponents({
	        components: components$$1
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "focus", _this.focusInput);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "blur", _this.blurInput);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onChange", function (newValue, actionMeta) {
	      var _this$props = _this.props,
	          onChange = _this$props.onChange,
	          name = _this$props.name;
	      onChange(newValue, _objectSpread({}, actionMeta, {
	        name: name
	      }));
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setValue", function (newValue) {
	      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'set-value';
	      var option = arguments.length > 2 ? arguments[2] : undefined;
	      var _this$props2 = _this.props,
	          closeMenuOnSelect = _this$props2.closeMenuOnSelect,
	          isMulti = _this$props2.isMulti;

	      _this.onInputChange('', {
	        action: 'set-value'
	      });

	      if (closeMenuOnSelect) {
	        _this.inputIsHiddenAfterUpdate = !isMulti;

	        _this.onMenuClose();
	      } // when the select value should change, we should reset focusedValue


	      _this.clearFocusValueOnUpdate = true;

	      _this.onChange(newValue, {
	        action: action,
	        option: option
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "selectOption", function (newValue) {
	      var _this$props3 = _this.props,
	          blurInputOnSelect = _this$props3.blurInputOnSelect,
	          isMulti = _this$props3.isMulti;
	      var selectValue = _this.state.selectValue;

	      if (isMulti) {
	        if (_this.isOptionSelected(newValue, selectValue)) {
	          var candidate = _this.getOptionValue(newValue);

	          _this.setValue(selectValue.filter(function (i) {
	            return _this.getOptionValue(i) !== candidate;
	          }), 'deselect-option', newValue);

	          _this.announceAriaLiveSelection({
	            event: 'deselect-option',
	            context: {
	              value: _this.getOptionLabel(newValue)
	            }
	          });
	        } else {
	          if (!_this.isOptionDisabled(newValue, selectValue)) {
	            _this.setValue([].concat(_toConsumableArray(selectValue), [newValue]), 'select-option', newValue);

	            _this.announceAriaLiveSelection({
	              event: 'select-option',
	              context: {
	                value: _this.getOptionLabel(newValue)
	              }
	            });
	          } else {
	            // announce that option is disabled
	            _this.announceAriaLiveSelection({
	              event: 'select-option',
	              context: {
	                value: _this.getOptionLabel(newValue),
	                isDisabled: true
	              }
	            });
	          }
	        }
	      } else {
	        if (!_this.isOptionDisabled(newValue, selectValue)) {
	          _this.setValue(newValue, 'select-option');

	          _this.announceAriaLiveSelection({
	            event: 'select-option',
	            context: {
	              value: _this.getOptionLabel(newValue)
	            }
	          });
	        } else {
	          // announce that option is disabled
	          _this.announceAriaLiveSelection({
	            event: 'select-option',
	            context: {
	              value: _this.getOptionLabel(newValue),
	              isDisabled: true
	            }
	          });
	        }
	      }

	      if (blurInputOnSelect) {
	        _this.blurInput();
	      }
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "removeValue", function (removedValue) {
	      var selectValue = _this.state.selectValue;

	      var candidate = _this.getOptionValue(removedValue);

	      _this.onChange(selectValue.filter(function (i) {
	        return _this.getOptionValue(i) !== candidate;
	      }), {
	        action: 'remove-value',
	        removedValue: removedValue
	      });

	      _this.announceAriaLiveSelection({
	        event: 'remove-value',
	        context: {
	          value: removedValue ? _this.getOptionLabel(removedValue) : ''
	        }
	      });

	      _this.focusInput();
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "clearValue", function () {
	      var isMulti = _this.props.isMulti;

	      _this.onChange(isMulti ? [] : null, {
	        action: 'clear'
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "popValue", function () {
	      var selectValue = _this.state.selectValue;
	      var lastSelectedValue = selectValue[selectValue.length - 1];

	      _this.announceAriaLiveSelection({
	        event: 'pop-value',
	        context: {
	          value: lastSelectedValue ? _this.getOptionLabel(lastSelectedValue) : ''
	        }
	      });

	      _this.onChange(selectValue.slice(0, selectValue.length - 1), {
	        action: 'pop-value',
	        removedValue: lastSelectedValue
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getOptionLabel", function (data) {
	      return _this.props.getOptionLabel(data);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getOptionValue", function (data) {
	      return _this.props.getOptionValue(data);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getStyles", function (key, props) {
	      var base = defaultStyles[key](props);
	      base.boxSizing = 'border-box';
	      var custom = _this.props.styles[key];
	      return custom ? custom(base, props) : base;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getElementId", function (element) {
	      return "".concat(_this.instancePrefix, "-").concat(element);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getActiveDescendentId", function () {
	      var menuIsOpen = _this.props.menuIsOpen;
	      var _this$state = _this.state,
	          menuOptions = _this$state.menuOptions,
	          focusedOption = _this$state.focusedOption;
	      if (!focusedOption || !menuIsOpen) return undefined;
	      var index = menuOptions.focusable.indexOf(focusedOption);
	      var option = menuOptions.render[index];
	      return option && option.key;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "announceAriaLiveSelection", function (_ref2) {
	      var event = _ref2.event,
	          context = _ref2.context;

	      _this.setState({
	        ariaLiveSelection: valueEventAriaMessage(event, context)
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "announceAriaLiveContext", function (_ref3) {
	      var event = _ref3.event,
	          context = _ref3.context;

	      _this.setState({
	        ariaLiveContext: instructionsAriaMessage(event, _objectSpread({}, context, {
	          label: _this.props['aria-label']
	        }))
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMenuMouseDown", function (event) {
	      if (event.button !== 0) {
	        return;
	      }

	      event.stopPropagation();
	      event.preventDefault();

	      _this.focusInput();
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMenuMouseMove", function (event) {
	      _this.blockOptionHover = false;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onControlMouseDown", function (event) {
	      var openMenuOnClick = _this.props.openMenuOnClick;

	      if (!_this.state.isFocused) {
	        if (openMenuOnClick) {
	          _this.openAfterFocus = true;
	        }

	        _this.focusInput();
	      } else if (!_this.props.menuIsOpen) {
	        if (openMenuOnClick) {
	          _this.openMenu('first');
	        }
	      } else {
	        //$FlowFixMe
	        if (event.target.tagName !== 'INPUT') {
	          _this.onMenuClose();
	        }
	      } //$FlowFixMe


	      if (event.target.tagName !== 'INPUT') {
	        event.preventDefault();
	      }
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onDropdownIndicatorMouseDown", function (event) {
	      // ignore mouse events that weren't triggered by the primary button
	      if (event && event.type === 'mousedown' && event.button !== 0) {
	        return;
	      }

	      if (_this.props.isDisabled) return;
	      var _this$props4 = _this.props,
	          isMulti = _this$props4.isMulti,
	          menuIsOpen = _this$props4.menuIsOpen;

	      _this.focusInput();

	      if (menuIsOpen) {
	        _this.inputIsHiddenAfterUpdate = !isMulti;

	        _this.onMenuClose();
	      } else {
	        _this.openMenu('first');
	      }

	      event.preventDefault();
	      event.stopPropagation();
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onClearIndicatorMouseDown", function (event) {
	      // ignore mouse events that weren't triggered by the primary button
	      if (event && event.type === 'mousedown' && event.button !== 0) {
	        return;
	      }

	      _this.clearValue();

	      event.stopPropagation();
	      _this.openAfterFocus = false;
	      setTimeout(function () {
	        return _this.focusInput();
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onScroll", function (event) {
	      if (typeof _this.props.closeMenuOnScroll === 'boolean') {
	        if (event.target instanceof HTMLElement && isDocumentElement(event.target)) {
	          _this.props.onMenuClose();
	        }
	      } else if (typeof _this.props.closeMenuOnScroll === 'function') {
	        if (_this.props.closeMenuOnScroll(event)) {
	          _this.props.onMenuClose();
	        }
	      }
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onCompositionStart", function () {
	      _this.isComposing = true;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onCompositionEnd", function () {
	      _this.isComposing = false;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTouchStart", function (_ref4) {
	      var touches = _ref4.touches;
	      var touch = touches.item(0);

	      if (!touch) {
	        return;
	      }

	      _this.initialTouchX = touch.clientX;
	      _this.initialTouchY = touch.clientY;
	      _this.userIsDragging = false;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTouchMove", function (_ref5) {
	      var touches = _ref5.touches;
	      var touch = touches.item(0);

	      if (!touch) {
	        return;
	      }

	      var deltaX = Math.abs(touch.clientX - _this.initialTouchX);
	      var deltaY = Math.abs(touch.clientY - _this.initialTouchY);
	      var moveThreshold = 5;
	      _this.userIsDragging = deltaX > moveThreshold || deltaY > moveThreshold;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTouchEnd", function (event) {
	      if (_this.userIsDragging) return; // close the menu if the user taps outside
	      // we're checking on event.target here instead of event.currentTarget, because we want to assert information
	      // on events on child elements, not the document (which we've attached this handler to).

	      if (_this.controlRef && !_this.controlRef.contains(event.target) && _this.menuListRef && !_this.menuListRef.contains(event.target)) {
	        _this.blurInput();
	      } // reset move vars


	      _this.initialTouchX = 0;
	      _this.initialTouchY = 0;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onControlTouchEnd", function (event) {
	      if (_this.userIsDragging) return;

	      _this.onControlMouseDown(event);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onClearIndicatorTouchEnd", function (event) {
	      if (_this.userIsDragging) return;

	      _this.onClearIndicatorMouseDown(event);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onDropdownIndicatorTouchEnd", function (event) {
	      if (_this.userIsDragging) return;

	      _this.onDropdownIndicatorMouseDown(event);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleInputChange", function (event) {
	      var inputValue = event.currentTarget.value;
	      _this.inputIsHiddenAfterUpdate = false;

	      _this.onInputChange(inputValue, {
	        action: 'input-change'
	      });

	      _this.onMenuOpen();
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onInputFocus", function (event) {
	      var _this$props5 = _this.props,
	          isSearchable = _this$props5.isSearchable,
	          isMulti = _this$props5.isMulti;

	      if (_this.props.onFocus) {
	        _this.props.onFocus(event);
	      }

	      _this.inputIsHiddenAfterUpdate = false;

	      _this.announceAriaLiveContext({
	        event: 'input',
	        context: {
	          isSearchable: isSearchable,
	          isMulti: isMulti
	        }
	      });

	      _this.setState({
	        isFocused: true
	      });

	      if (_this.openAfterFocus || _this.props.openMenuOnFocus) {
	        _this.openMenu('first');
	      }

	      _this.openAfterFocus = false;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onInputBlur", function (event) {
	      if (_this.menuListRef && _this.menuListRef.contains(document.activeElement)) {
	        _this.inputRef.focus();

	        return;
	      }

	      if (_this.props.onBlur) {
	        _this.props.onBlur(event);
	      }

	      _this.onInputChange('', {
	        action: 'input-blur'
	      });

	      _this.onMenuClose();

	      _this.setState({
	        focusedValue: null,
	        isFocused: false
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onOptionHover", function (focusedOption) {
	      if (_this.blockOptionHover || _this.state.focusedOption === focusedOption) {
	        return;
	      }

	      _this.setState({
	        focusedOption: focusedOption
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "shouldHideSelectedOptions", function () {
	      var _this$props6 = _this.props,
	          hideSelectedOptions = _this$props6.hideSelectedOptions,
	          isMulti = _this$props6.isMulti;
	      if (hideSelectedOptions === undefined) return isMulti;
	      return hideSelectedOptions;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onKeyDown", function (event) {
	      var _this$props7 = _this.props,
	          isMulti = _this$props7.isMulti,
	          backspaceRemovesValue = _this$props7.backspaceRemovesValue,
	          escapeClearsValue = _this$props7.escapeClearsValue,
	          inputValue = _this$props7.inputValue,
	          isClearable = _this$props7.isClearable,
	          isDisabled = _this$props7.isDisabled,
	          menuIsOpen = _this$props7.menuIsOpen,
	          onKeyDown = _this$props7.onKeyDown,
	          tabSelectsValue = _this$props7.tabSelectsValue,
	          openMenuOnFocus = _this$props7.openMenuOnFocus;
	      var _this$state2 = _this.state,
	          focusedOption = _this$state2.focusedOption,
	          focusedValue = _this$state2.focusedValue,
	          selectValue = _this$state2.selectValue;
	      if (isDisabled) return;

	      if (typeof onKeyDown === 'function') {
	        onKeyDown(event);

	        if (event.defaultPrevented) {
	          return;
	        }
	      } // Block option hover events when the user has just pressed a key


	      _this.blockOptionHover = true;

	      switch (event.key) {
	        case 'ArrowLeft':
	          if (!isMulti || inputValue) return;

	          _this.focusValue('previous');

	          break;

	        case 'ArrowRight':
	          if (!isMulti || inputValue) return;

	          _this.focusValue('next');

	          break;

	        case 'Delete':
	        case 'Backspace':
	          if (inputValue) return;

	          if (focusedValue) {
	            _this.removeValue(focusedValue);
	          } else {
	            if (!backspaceRemovesValue) return;

	            if (isMulti) {
	              _this.popValue();
	            } else if (isClearable) {
	              _this.clearValue();
	            }
	          }

	          break;

	        case 'Tab':
	          if (_this.isComposing) return;

	          if (event.shiftKey || !menuIsOpen || !tabSelectsValue || !focusedOption || // don't capture the event if the menu opens on focus and the focused
	          // option is already selected; it breaks the flow of navigation
	          openMenuOnFocus && _this.isOptionSelected(focusedOption, selectValue)) {
	            return;
	          }

	          _this.selectOption(focusedOption);

	          break;

	        case 'Enter':
	          if (event.keyCode === 229) {
	            // ignore the keydown event from an Input Method Editor(IME)
	            // ref. https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode
	            break;
	          }

	          if (menuIsOpen) {
	            if (!focusedOption) return;
	            if (_this.isComposing) return;

	            _this.selectOption(focusedOption);

	            break;
	          }

	          return;

	        case 'Escape':
	          if (menuIsOpen) {
	            _this.inputIsHiddenAfterUpdate = false;

	            _this.onInputChange('', {
	              action: 'menu-close'
	            });

	            _this.onMenuClose();
	          } else if (isClearable && escapeClearsValue) {
	            _this.clearValue();
	          }

	          break;

	        case ' ':
	          // space
	          if (inputValue) {
	            return;
	          }

	          if (!menuIsOpen) {
	            _this.openMenu('first');

	            break;
	          }

	          if (!focusedOption) return;

	          _this.selectOption(focusedOption);

	          break;

	        case 'ArrowUp':
	          if (menuIsOpen) {
	            _this.focusOption('up');
	          } else {
	            _this.openMenu('last');
	          }

	          break;

	        case 'ArrowDown':
	          if (menuIsOpen) {
	            _this.focusOption('down');
	          } else {
	            _this.openMenu('first');
	          }

	          break;

	        case 'PageUp':
	          if (!menuIsOpen) return;

	          _this.focusOption('pageup');

	          break;

	        case 'PageDown':
	          if (!menuIsOpen) return;

	          _this.focusOption('pagedown');

	          break;

	        case 'Home':
	          if (!menuIsOpen) return;

	          _this.focusOption('first');

	          break;

	        case 'End':
	          if (!menuIsOpen) return;

	          _this.focusOption('last');

	          break;

	        default:
	          return;
	      }

	      event.preventDefault();
	    });

	    var value = _props.value;
	    _this.cacheComponents = memoizeOne(_this.cacheComponents, exportedEqual).bind(_assertThisInitialized(_assertThisInitialized(_this)));

	    _this.cacheComponents(_props.components);

	    _this.instancePrefix = 'react-select-' + (_this.props.instanceId || ++instanceId);

	    var _selectValue = cleanValue(value);

	    var _menuOptions = _this.buildMenuOptions(_props, _selectValue);

	    _this.state.menuOptions = _menuOptions;
	    _this.state.selectValue = _selectValue;
	    return _this;
	  }

	  _createClass(Select, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.startListeningComposition();
	      this.startListeningToTouch();

	      if (this.props.closeMenuOnScroll && document && document.addEventListener) {
	        // Listen to all scroll events, and filter them out inside of 'onScroll'
	        document.addEventListener('scroll', this.onScroll, true);
	      }

	      if (this.props.autoFocus) {
	        this.focusInput();
	      }
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$props8 = this.props,
	          options = _this$props8.options,
	          value = _this$props8.value,
	          inputValue = _this$props8.inputValue; // re-cache custom components

	      this.cacheComponents(nextProps.components); // rebuild the menu options

	      if (nextProps.value !== value || nextProps.options !== options || nextProps.inputValue !== inputValue) {
	        var selectValue = cleanValue(nextProps.value);
	        var menuOptions = this.buildMenuOptions(nextProps, selectValue);
	        var focusedValue = this.getNextFocusedValue(selectValue);
	        var focusedOption = this.getNextFocusedOption(menuOptions.focusable);
	        this.setState({
	          menuOptions: menuOptions,
	          selectValue: selectValue,
	          focusedOption: focusedOption,
	          focusedValue: focusedValue
	        });
	      } // some updates should toggle the state of the input visibility


	      if (this.inputIsHiddenAfterUpdate != null) {
	        this.setState({
	          inputIsHidden: this.inputIsHiddenAfterUpdate
	        });
	        delete this.inputIsHiddenAfterUpdate;
	      }
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var _this$props9 = this.props,
	          isDisabled = _this$props9.isDisabled,
	          menuIsOpen = _this$props9.menuIsOpen;
	      var isFocused = this.state.isFocused;

	      if ( // ensure focus is restored correctly when the control becomes enabled
	      isFocused && !isDisabled && prevProps.isDisabled || // ensure focus is on the Input when the menu opens
	      isFocused && menuIsOpen && !prevProps.menuIsOpen) {
	        this.focusInput();
	      } // scroll the focused option into view if necessary


	      if (this.menuListRef && this.focusedOptionRef && this.scrollToFocusedOptionOnUpdate) {
	        scrollIntoView(this.menuListRef, this.focusedOptionRef);
	      }

	      this.scrollToFocusedOptionOnUpdate = false;
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.stopListeningComposition();
	      this.stopListeningToTouch();
	      document.removeEventListener('scroll', this.onScroll, true);
	    }
	  }, {
	    key: "onMenuOpen",
	    // ==============================
	    // Consumer Handlers
	    // ==============================
	    value: function onMenuOpen() {
	      this.props.onMenuOpen();
	    }
	  }, {
	    key: "onMenuClose",
	    value: function onMenuClose() {
	      var _this$props10 = this.props,
	          isSearchable = _this$props10.isSearchable,
	          isMulti = _this$props10.isMulti;
	      this.announceAriaLiveContext({
	        event: 'input',
	        context: {
	          isSearchable: isSearchable,
	          isMulti: isMulti
	        }
	      });
	      this.onInputChange('', {
	        action: 'menu-close'
	      });
	      this.props.onMenuClose();
	    }
	  }, {
	    key: "onInputChange",
	    value: function onInputChange(newValue, actionMeta) {
	      this.props.onInputChange(newValue, actionMeta);
	    } // ==============================
	    // Methods
	    // ==============================

	  }, {
	    key: "focusInput",
	    value: function focusInput() {
	      if (!this.inputRef) return;
	      this.inputRef.focus();
	    }
	  }, {
	    key: "blurInput",
	    value: function blurInput() {
	      if (!this.inputRef) return;
	      this.inputRef.blur();
	    } // aliased for consumers

	  }, {
	    key: "openMenu",
	    value: function openMenu(focusOption) {
	      var _this$state3 = this.state,
	          menuOptions = _this$state3.menuOptions,
	          selectValue = _this$state3.selectValue,
	          isFocused = _this$state3.isFocused;
	      var isMulti = this.props.isMulti;
	      var openAtIndex = focusOption === 'first' ? 0 : menuOptions.focusable.length - 1;

	      if (!isMulti) {
	        var selectedIndex = menuOptions.focusable.indexOf(selectValue[0]);

	        if (selectedIndex > -1) {
	          openAtIndex = selectedIndex;
	        }
	      } // only scroll if the menu isn't already open


	      this.scrollToFocusedOptionOnUpdate = !(isFocused && this.menuListRef);
	      this.inputIsHiddenAfterUpdate = false;
	      this.onMenuOpen();
	      this.setState({
	        focusedValue: null,
	        focusedOption: menuOptions.focusable[openAtIndex]
	      });
	      this.announceAriaLiveContext({
	        event: 'menu'
	      });
	    }
	  }, {
	    key: "focusValue",
	    value: function focusValue(direction) {
	      var _this$props11 = this.props,
	          isMulti = _this$props11.isMulti,
	          isSearchable = _this$props11.isSearchable;
	      var _this$state4 = this.state,
	          selectValue = _this$state4.selectValue,
	          focusedValue = _this$state4.focusedValue; // Only multiselects support value focusing

	      if (!isMulti) return;
	      this.setState({
	        focusedOption: null
	      });
	      var focusedIndex = selectValue.indexOf(focusedValue);

	      if (!focusedValue) {
	        focusedIndex = -1;
	        this.announceAriaLiveContext({
	          event: 'value'
	        });
	      }

	      var lastIndex = selectValue.length - 1;
	      var nextFocus = -1;
	      if (!selectValue.length) return;

	      switch (direction) {
	        case 'previous':
	          if (focusedIndex === 0) {
	            // don't cycle from the start to the end
	            nextFocus = 0;
	          } else if (focusedIndex === -1) {
	            // if nothing is focused, focus the last value first
	            nextFocus = lastIndex;
	          } else {
	            nextFocus = focusedIndex - 1;
	          }

	          break;

	        case 'next':
	          if (focusedIndex > -1 && focusedIndex < lastIndex) {
	            nextFocus = focusedIndex + 1;
	          }

	          break;
	      }

	      if (nextFocus === -1) {
	        this.announceAriaLiveContext({
	          event: 'input',
	          context: {
	            isSearchable: isSearchable,
	            isMulti: isMulti
	          }
	        });
	      }

	      this.setState({
	        inputIsHidden: nextFocus === -1 ? false : true,
	        focusedValue: selectValue[nextFocus]
	      });
	    }
	  }, {
	    key: "focusOption",
	    value: function focusOption() {
	      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'first';
	      var pageSize = this.props.pageSize;
	      var _this$state5 = this.state,
	          focusedOption = _this$state5.focusedOption,
	          menuOptions = _this$state5.menuOptions;
	      var options = menuOptions.focusable;
	      if (!options.length) return;
	      var nextFocus = 0; // handles 'first'

	      var focusedIndex = options.indexOf(focusedOption);

	      if (!focusedOption) {
	        focusedIndex = -1;
	        this.announceAriaLiveContext({
	          event: 'menu'
	        });
	      }

	      if (direction === 'up') {
	        nextFocus = focusedIndex > 0 ? focusedIndex - 1 : options.length - 1;
	      } else if (direction === 'down') {
	        nextFocus = (focusedIndex + 1) % options.length;
	      } else if (direction === 'pageup') {
	        nextFocus = focusedIndex - pageSize;
	        if (nextFocus < 0) nextFocus = 0;
	      } else if (direction === 'pagedown') {
	        nextFocus = focusedIndex + pageSize;
	        if (nextFocus > options.length - 1) nextFocus = options.length - 1;
	      } else if (direction === 'last') {
	        nextFocus = options.length - 1;
	      }

	      this.scrollToFocusedOptionOnUpdate = true;
	      this.setState({
	        focusedOption: options[nextFocus],
	        focusedValue: null
	      });
	      this.announceAriaLiveContext({
	        event: 'menu',
	        context: {
	          isDisabled: isOptionDisabled(options[nextFocus])
	        }
	      });
	    }
	  }, {
	    key: "getTheme",
	    // ==============================
	    // Getters
	    // ==============================
	    value: function getTheme() {
	      // Use the default theme if there are no customizations.
	      if (!this.props.theme) {
	        return defaultTheme;
	      } // If the theme prop is a function, assume the function
	      // knows how to merge the passed-in default theme with
	      // its own modifications.


	      if (typeof this.props.theme === 'function') {
	        return this.props.theme(defaultTheme);
	      } // Otherwise, if a plain theme object was passed in,
	      // overlay it with the default theme.


	      return _objectSpread({}, defaultTheme, this.props.theme);
	    }
	  }, {
	    key: "getCommonProps",
	    value: function getCommonProps() {
	      var clearValue = this.clearValue,
	          getStyles = this.getStyles,
	          setValue = this.setValue,
	          selectOption = this.selectOption,
	          props = this.props;
	      var classNamePrefix = props.classNamePrefix,
	          isMulti = props.isMulti,
	          isRtl = props.isRtl,
	          options = props.options;
	      var selectValue = this.state.selectValue;
	      var hasValue = this.hasValue();

	      var getValue = function getValue() {
	        return selectValue;
	      };

	      var cx = classNames.bind(null, classNamePrefix);
	      return {
	        cx: cx,
	        clearValue: clearValue,
	        getStyles: getStyles,
	        getValue: getValue,
	        hasValue: hasValue,
	        isMulti: isMulti,
	        isRtl: isRtl,
	        options: options,
	        selectOption: selectOption,
	        setValue: setValue,
	        selectProps: props,
	        theme: this.getTheme()
	      };
	    }
	  }, {
	    key: "getNextFocusedValue",
	    value: function getNextFocusedValue(nextSelectValue) {
	      if (this.clearFocusValueOnUpdate) {
	        this.clearFocusValueOnUpdate = false;
	        return null;
	      }

	      var _this$state6 = this.state,
	          focusedValue = _this$state6.focusedValue,
	          lastSelectValue = _this$state6.selectValue;
	      var lastFocusedIndex = lastSelectValue.indexOf(focusedValue);

	      if (lastFocusedIndex > -1) {
	        var nextFocusedIndex = nextSelectValue.indexOf(focusedValue);

	        if (nextFocusedIndex > -1) {
	          // the focused value is still in the selectValue, return it
	          return focusedValue;
	        } else if (lastFocusedIndex < nextSelectValue.length) {
	          // the focusedValue is not present in the next selectValue array by
	          // reference, so return the new value at the same index
	          return nextSelectValue[lastFocusedIndex];
	        }
	      }

	      return null;
	    }
	  }, {
	    key: "getNextFocusedOption",
	    value: function getNextFocusedOption(options) {
	      var lastFocusedOption = this.state.focusedOption;
	      return lastFocusedOption && options.indexOf(lastFocusedOption) > -1 ? lastFocusedOption : options[0];
	    }
	  }, {
	    key: "hasValue",
	    value: function hasValue() {
	      var selectValue = this.state.selectValue;
	      return selectValue.length > 0;
	    }
	  }, {
	    key: "hasOptions",
	    value: function hasOptions() {
	      return !!this.state.menuOptions.render.length;
	    }
	  }, {
	    key: "countOptions",
	    value: function countOptions() {
	      return this.state.menuOptions.focusable.length;
	    }
	  }, {
	    key: "isClearable",
	    value: function isClearable() {
	      var _this$props12 = this.props,
	          isClearable = _this$props12.isClearable,
	          isMulti = _this$props12.isMulti; // single select, by default, IS NOT clearable
	      // multi select, by default, IS clearable

	      if (isClearable === undefined) return isMulti;
	      return isClearable;
	    }
	  }, {
	    key: "isOptionDisabled",
	    value: function isOptionDisabled$$1(option, selectValue) {
	      return typeof this.props.isOptionDisabled === 'function' ? this.props.isOptionDisabled(option, selectValue) : false;
	    }
	  }, {
	    key: "isOptionSelected",
	    value: function isOptionSelected(option, selectValue) {
	      var _this2 = this;

	      if (selectValue.indexOf(option) > -1) return true;

	      if (typeof this.props.isOptionSelected === 'function') {
	        return this.props.isOptionSelected(option, selectValue);
	      }

	      var candidate = this.getOptionValue(option);
	      return selectValue.some(function (i) {
	        return _this2.getOptionValue(i) === candidate;
	      });
	    }
	  }, {
	    key: "filterOption",
	    value: function filterOption(option, inputValue) {
	      return this.props.filterOption ? this.props.filterOption(option, inputValue) : true;
	    }
	  }, {
	    key: "formatOptionLabel",
	    value: function formatOptionLabel(data, context) {
	      if (typeof this.props.formatOptionLabel === 'function') {
	        var inputValue = this.props.inputValue;
	        var selectValue = this.state.selectValue;
	        return this.props.formatOptionLabel(data, {
	          context: context,
	          inputValue: inputValue,
	          selectValue: selectValue
	        });
	      } else {
	        return this.getOptionLabel(data);
	      }
	    }
	  }, {
	    key: "formatGroupLabel",
	    value: function formatGroupLabel$$1(data) {
	      return this.props.formatGroupLabel(data);
	    } // ==============================
	    // Mouse Handlers
	    // ==============================

	  }, {
	    key: "startListeningComposition",
	    // ==============================
	    // Composition Handlers
	    // ==============================
	    value: function startListeningComposition() {
	      if (document && document.addEventListener) {
	        document.addEventListener('compositionstart', this.onCompositionStart, false);
	        document.addEventListener('compositionend', this.onCompositionEnd, false);
	      }
	    }
	  }, {
	    key: "stopListeningComposition",
	    value: function stopListeningComposition() {
	      if (document && document.removeEventListener) {
	        document.removeEventListener('compositionstart', this.onCompositionStart);
	        document.removeEventListener('compositionend', this.onCompositionEnd);
	      }
	    }
	  }, {
	    key: "startListeningToTouch",
	    // ==============================
	    // Touch Handlers
	    // ==============================
	    value: function startListeningToTouch() {
	      if (document && document.addEventListener) {
	        document.addEventListener('touchstart', this.onTouchStart, false);
	        document.addEventListener('touchmove', this.onTouchMove, false);
	        document.addEventListener('touchend', this.onTouchEnd, false);
	      }
	    }
	  }, {
	    key: "stopListeningToTouch",
	    value: function stopListeningToTouch() {
	      if (document && document.removeEventListener) {
	        document.removeEventListener('touchstart', this.onTouchStart);
	        document.removeEventListener('touchmove', this.onTouchMove);
	        document.removeEventListener('touchend', this.onTouchEnd);
	      }
	    }
	  }, {
	    key: "buildMenuOptions",
	    // ==============================
	    // Menu Options
	    // ==============================
	    value: function buildMenuOptions(props, selectValue) {
	      var _this3 = this;

	      var _props$inputValue = props.inputValue,
	          inputValue = _props$inputValue === void 0 ? '' : _props$inputValue,
	          options = props.options;

	      var toOption = function toOption(option, id) {
	        var isDisabled = _this3.isOptionDisabled(option, selectValue);

	        var isSelected = _this3.isOptionSelected(option, selectValue);

	        var label = _this3.getOptionLabel(option);

	        var value = _this3.getOptionValue(option);

	        if (_this3.shouldHideSelectedOptions() && isSelected || !_this3.filterOption({
	          label: label,
	          value: value,
	          data: option
	        }, inputValue)) {
	          return;
	        }

	        var onHover = isDisabled ? undefined : function () {
	          return _this3.onOptionHover(option);
	        };
	        var onSelect = isDisabled ? undefined : function () {
	          return _this3.selectOption(option);
	        };
	        var optionId = "".concat(_this3.getElementId('option'), "-").concat(id);
	        return {
	          innerProps: {
	            id: optionId,
	            onClick: onSelect,
	            onMouseMove: onHover,
	            onMouseOver: onHover,
	            tabIndex: -1
	          },
	          data: option,
	          isDisabled: isDisabled,
	          isSelected: isSelected,
	          key: optionId,
	          label: label,
	          type: 'option',
	          value: value
	        };
	      };

	      return options.reduce(function (acc, item, itemIndex) {
	        if (item.options) {
	          // TODO needs a tidier implementation
	          if (!_this3.hasGroups) _this3.hasGroups = true;
	          var items = item.options;
	          var children = items.map(function (child, i) {
	            var option = toOption(child, "".concat(itemIndex, "-").concat(i));
	            if (option) acc.focusable.push(child);
	            return option;
	          }).filter(Boolean);

	          if (children.length) {
	            var groupId = "".concat(_this3.getElementId('group'), "-").concat(itemIndex);
	            acc.render.push({
	              type: 'group',
	              key: groupId,
	              data: item,
	              options: children
	            });
	          }
	        } else {
	          var option = toOption(item, "".concat(itemIndex));

	          if (option) {
	            acc.render.push(option);
	            acc.focusable.push(item);
	          }
	        }

	        return acc;
	      }, {
	        render: [],
	        focusable: []
	      });
	    } // ==============================
	    // Renderers
	    // ==============================

	  }, {
	    key: "constructAriaLiveMessage",
	    value: function constructAriaLiveMessage() {
	      var _this$state7 = this.state,
	          ariaLiveContext = _this$state7.ariaLiveContext,
	          selectValue = _this$state7.selectValue,
	          focusedValue = _this$state7.focusedValue,
	          focusedOption = _this$state7.focusedOption;
	      var _this$props13 = this.props,
	          options = _this$props13.options,
	          menuIsOpen = _this$props13.menuIsOpen,
	          inputValue = _this$props13.inputValue,
	          screenReaderStatus = _this$props13.screenReaderStatus; // An aria live message representing the currently focused value in the select.

	      var focusedValueMsg = focusedValue ? valueFocusAriaMessage({
	        focusedValue: focusedValue,
	        getOptionLabel: this.getOptionLabel,
	        selectValue: selectValue
	      }) : ''; // An aria live message representing the currently focused option in the select.

	      var focusedOptionMsg = focusedOption && menuIsOpen ? optionFocusAriaMessage({
	        focusedOption: focusedOption,
	        getOptionLabel: this.getOptionLabel,
	        options: options
	      }) : ''; // An aria live message representing the set of focusable results and current searchterm/inputvalue.

	      var resultsMsg = resultsAriaMessage({
	        inputValue: inputValue,
	        screenReaderMessage: screenReaderStatus({
	          count: this.countOptions()
	        })
	      });
	      return "".concat(focusedValueMsg, " ").concat(focusedOptionMsg, " ").concat(resultsMsg, " ").concat(ariaLiveContext);
	    }
	  }, {
	    key: "renderInput",
	    value: function renderInput() {
	      var _this$props14 = this.props,
	          isDisabled = _this$props14.isDisabled,
	          isSearchable = _this$props14.isSearchable,
	          inputId = _this$props14.inputId,
	          inputValue = _this$props14.inputValue,
	          tabIndex = _this$props14.tabIndex;
	      var Input = this.components.Input;
	      var inputIsHidden = this.state.inputIsHidden;
	      var id = inputId || this.getElementId('input');

	      if (!isSearchable) {
	        // use a dummy input to maintain focus/blur functionality
	        return React__default.createElement(DummyInput, {
	          id: id,
	          innerRef: this.getInputRef,
	          onBlur: this.onInputBlur,
	          onChange: noop,
	          onFocus: this.onInputFocus,
	          readOnly: true,
	          disabled: isDisabled,
	          tabIndex: tabIndex,
	          value: ""
	        });
	      } // aria attributes makes the JSX "noisy", separated for clarity


	      var ariaAttributes = {
	        'aria-autocomplete': 'list',
	        'aria-label': this.props['aria-label'],
	        'aria-labelledby': this.props['aria-labelledby']
	      };
	      var _this$commonProps = this.commonProps,
	          cx = _this$commonProps.cx,
	          theme = _this$commonProps.theme,
	          selectProps = _this$commonProps.selectProps;
	      return React__default.createElement(Input, _extends({
	        autoCapitalize: "none",
	        autoComplete: "off",
	        autoCorrect: "off",
	        cx: cx,
	        getStyles: this.getStyles,
	        id: id,
	        innerRef: this.getInputRef,
	        isDisabled: isDisabled,
	        isHidden: inputIsHidden,
	        onBlur: this.onInputBlur,
	        onChange: this.handleInputChange,
	        onFocus: this.onInputFocus,
	        selectProps: selectProps,
	        spellCheck: "false",
	        tabIndex: tabIndex,
	        theme: theme,
	        type: "text",
	        value: inputValue
	      }, ariaAttributes));
	    }
	  }, {
	    key: "renderPlaceholderOrValue",
	    value: function renderPlaceholderOrValue() {
	      var _this4 = this;

	      var _this$components = this.components,
	          MultiValue = _this$components.MultiValue,
	          MultiValueContainer = _this$components.MultiValueContainer,
	          MultiValueLabel = _this$components.MultiValueLabel,
	          MultiValueRemove = _this$components.MultiValueRemove,
	          SingleValue = _this$components.SingleValue,
	          Placeholder = _this$components.Placeholder;
	      var commonProps = this.commonProps;
	      var _this$props15 = this.props,
	          controlShouldRenderValue = _this$props15.controlShouldRenderValue,
	          isDisabled = _this$props15.isDisabled,
	          isMulti = _this$props15.isMulti,
	          inputValue = _this$props15.inputValue,
	          placeholder = _this$props15.placeholder;
	      var _this$state8 = this.state,
	          selectValue = _this$state8.selectValue,
	          focusedValue = _this$state8.focusedValue,
	          isFocused = _this$state8.isFocused;

	      if (!this.hasValue() || !controlShouldRenderValue) {
	        return inputValue ? null : React__default.createElement(Placeholder, _extends({}, commonProps, {
	          key: "placeholder",
	          isDisabled: isDisabled,
	          isFocused: isFocused
	        }), placeholder);
	      }

	      if (isMulti) {
	        var selectValues = selectValue.map(function (opt) {
	          var isOptionFocused = opt === focusedValue;
	          return React__default.createElement(MultiValue, _extends({}, commonProps, {
	            components: {
	              Container: MultiValueContainer,
	              Label: MultiValueLabel,
	              Remove: MultiValueRemove
	            },
	            isFocused: isOptionFocused,
	            isDisabled: isDisabled,
	            key: _this4.getOptionValue(opt),
	            removeProps: {
	              onClick: function onClick() {
	                return _this4.removeValue(opt);
	              },
	              onTouchEnd: function onTouchEnd() {
	                return _this4.removeValue(opt);
	              },
	              onMouseDown: function onMouseDown(e) {
	                e.preventDefault();
	                e.stopPropagation();
	              }
	            },
	            data: opt
	          }), _this4.formatOptionLabel(opt, 'value'));
	        });
	        return selectValues;
	      }

	      if (inputValue) {
	        return null;
	      }

	      var singleValue = selectValue[0];
	      return React__default.createElement(SingleValue, _extends({}, commonProps, {
	        data: singleValue,
	        isDisabled: isDisabled
	      }), this.formatOptionLabel(singleValue, 'value'));
	    }
	  }, {
	    key: "renderClearIndicator",
	    value: function renderClearIndicator() {
	      var ClearIndicator = this.components.ClearIndicator;
	      var commonProps = this.commonProps;
	      var _this$props16 = this.props,
	          isDisabled = _this$props16.isDisabled,
	          isLoading = _this$props16.isLoading;
	      var isFocused = this.state.isFocused;

	      if (!this.isClearable() || !ClearIndicator || isDisabled || !this.hasValue() || isLoading) {
	        return null;
	      }

	      var innerProps = {
	        onMouseDown: this.onClearIndicatorMouseDown,
	        onTouchEnd: this.onClearIndicatorTouchEnd,
	        'aria-hidden': 'true'
	      };
	      return React__default.createElement(ClearIndicator, _extends({}, commonProps, {
	        innerProps: innerProps,
	        isFocused: isFocused
	      }));
	    }
	  }, {
	    key: "renderLoadingIndicator",
	    value: function renderLoadingIndicator() {
	      var LoadingIndicator = this.components.LoadingIndicator;
	      var commonProps = this.commonProps;
	      var _this$props17 = this.props,
	          isDisabled = _this$props17.isDisabled,
	          isLoading = _this$props17.isLoading;
	      var isFocused = this.state.isFocused;
	      if (!LoadingIndicator || !isLoading) return null;
	      var innerProps = {
	        'aria-hidden': 'true'
	      };
	      return React__default.createElement(LoadingIndicator, _extends({}, commonProps, {
	        innerProps: innerProps,
	        isDisabled: isDisabled,
	        isFocused: isFocused
	      }));
	    }
	  }, {
	    key: "renderIndicatorSeparator",
	    value: function renderIndicatorSeparator() {
	      var _this$components2 = this.components,
	          DropdownIndicator = _this$components2.DropdownIndicator,
	          IndicatorSeparator = _this$components2.IndicatorSeparator; // separator doesn't make sense without the dropdown indicator

	      if (!DropdownIndicator || !IndicatorSeparator) return null;
	      var commonProps = this.commonProps;
	      var isDisabled = this.props.isDisabled;
	      var isFocused = this.state.isFocused;
	      return React__default.createElement(IndicatorSeparator, _extends({}, commonProps, {
	        isDisabled: isDisabled,
	        isFocused: isFocused
	      }));
	    }
	  }, {
	    key: "renderDropdownIndicator",
	    value: function renderDropdownIndicator() {
	      var DropdownIndicator = this.components.DropdownIndicator;
	      if (!DropdownIndicator) return null;
	      var commonProps = this.commonProps;
	      var isDisabled = this.props.isDisabled;
	      var isFocused = this.state.isFocused;
	      var innerProps = {
	        onMouseDown: this.onDropdownIndicatorMouseDown,
	        onTouchEnd: this.onDropdownIndicatorTouchEnd,
	        'aria-hidden': 'true'
	      };
	      return React__default.createElement(DropdownIndicator, _extends({}, commonProps, {
	        innerProps: innerProps,
	        isDisabled: isDisabled,
	        isFocused: isFocused
	      }));
	    }
	  }, {
	    key: "renderMenu",
	    value: function renderMenu() {
	      var _this5 = this;

	      var _this$components3 = this.components,
	          Group = _this$components3.Group,
	          GroupHeading = _this$components3.GroupHeading,
	          Menu$$1 = _this$components3.Menu,
	          MenuList$$1 = _this$components3.MenuList,
	          MenuPortal$$1 = _this$components3.MenuPortal,
	          LoadingMessage$$1 = _this$components3.LoadingMessage,
	          NoOptionsMessage$$1 = _this$components3.NoOptionsMessage,
	          Option = _this$components3.Option;
	      var commonProps = this.commonProps;
	      var _this$state9 = this.state,
	          focusedOption = _this$state9.focusedOption,
	          menuOptions = _this$state9.menuOptions;
	      var _this$props18 = this.props,
	          captureMenuScroll = _this$props18.captureMenuScroll,
	          inputValue = _this$props18.inputValue,
	          isLoading = _this$props18.isLoading,
	          loadingMessage = _this$props18.loadingMessage,
	          minMenuHeight = _this$props18.minMenuHeight,
	          maxMenuHeight = _this$props18.maxMenuHeight,
	          menuIsOpen = _this$props18.menuIsOpen,
	          menuPlacement = _this$props18.menuPlacement,
	          menuPosition = _this$props18.menuPosition,
	          menuPortalTarget = _this$props18.menuPortalTarget,
	          menuShouldBlockScroll = _this$props18.menuShouldBlockScroll,
	          menuShouldScrollIntoView = _this$props18.menuShouldScrollIntoView,
	          noOptionsMessage = _this$props18.noOptionsMessage,
	          onMenuScrollToTop = _this$props18.onMenuScrollToTop,
	          onMenuScrollToBottom = _this$props18.onMenuScrollToBottom;
	      if (!menuIsOpen) return null; // TODO: Internal Option Type here

	      var render = function render(props) {
	        // for performance, the menu options in state aren't changed when the
	        // focused option changes so we calculate additional props based on that
	        var isFocused = focusedOption === props.data;
	        props.innerRef = isFocused ? _this5.getFocusedOptionRef : undefined;
	        return React__default.createElement(Option, _extends({}, commonProps, props, {
	          isFocused: isFocused
	        }), _this5.formatOptionLabel(props.data, 'menu'));
	      };

	      var menuUI;

	      if (this.hasOptions()) {
	        menuUI = menuOptions.render.map(function (item) {
	          if (item.type === 'group') {
	            var type = item.type,
	                group = _objectWithoutProperties(item, ["type"]);

	            var headingId = "".concat(item.key, "-heading");
	            return React__default.createElement(Group, _extends({}, commonProps, group, {
	              Heading: GroupHeading,
	              headingProps: {
	                id: headingId
	              },
	              label: _this5.formatGroupLabel(item.data)
	            }), item.options.map(function (option) {
	              return render(option);
	            }));
	          } else if (item.type === 'option') {
	            return render(item);
	          }
	        });
	      } else if (isLoading) {
	        var message = loadingMessage({
	          inputValue: inputValue
	        });
	        if (message === null) return null;
	        menuUI = React__default.createElement(LoadingMessage$$1, commonProps, message);
	      } else {
	        var _message = noOptionsMessage({
	          inputValue: inputValue
	        });

	        if (_message === null) return null;
	        menuUI = React__default.createElement(NoOptionsMessage$$1, commonProps, _message);
	      }

	      var menuPlacementProps = {
	        minMenuHeight: minMenuHeight,
	        maxMenuHeight: maxMenuHeight,
	        menuPlacement: menuPlacement,
	        menuPosition: menuPosition,
	        menuShouldScrollIntoView: menuShouldScrollIntoView
	      };
	      var menuElement = React__default.createElement(MenuPlacer, _extends({}, commonProps, menuPlacementProps), function (_ref6) {
	        var ref = _ref6.ref,
	            _ref6$placerProps = _ref6.placerProps,
	            placement = _ref6$placerProps.placement,
	            maxHeight = _ref6$placerProps.maxHeight;
	        return React__default.createElement(Menu$$1, _extends({}, commonProps, menuPlacementProps, {
	          innerRef: ref,
	          innerProps: {
	            onMouseDown: _this5.onMenuMouseDown,
	            onMouseMove: _this5.onMenuMouseMove
	          },
	          isLoading: isLoading,
	          placement: placement
	        }), React__default.createElement(ScrollCaptorSwitch, {
	          isEnabled: captureMenuScroll,
	          onTopArrive: onMenuScrollToTop,
	          onBottomArrive: onMenuScrollToBottom
	        }, React__default.createElement(ScrollBlock, {
	          isEnabled: menuShouldBlockScroll
	        }, React__default.createElement(MenuList$$1, _extends({}, commonProps, {
	          innerRef: _this5.getMenuListRef,
	          isLoading: isLoading,
	          maxHeight: maxHeight
	        }), menuUI))));
	      }); // positioning behaviour is almost identical for portalled and fixed,
	      // so we use the same component. the actual portalling logic is forked
	      // within the component based on `menuPosition`

	      return menuPortalTarget || menuPosition === 'fixed' ? React__default.createElement(MenuPortal$$1, _extends({}, commonProps, {
	        appendTo: menuPortalTarget,
	        controlElement: this.controlRef,
	        menuPlacement: menuPlacement,
	        menuPosition: menuPosition
	      }), menuElement) : menuElement;
	    }
	  }, {
	    key: "renderFormField",
	    value: function renderFormField() {
	      var _this6 = this;

	      var _this$props19 = this.props,
	          delimiter = _this$props19.delimiter,
	          isDisabled = _this$props19.isDisabled,
	          isMulti = _this$props19.isMulti,
	          name = _this$props19.name;
	      var selectValue = this.state.selectValue;
	      if (!name || isDisabled) return;

	      if (isMulti) {
	        if (delimiter) {
	          var value = selectValue.map(function (opt) {
	            return _this6.getOptionValue(opt);
	          }).join(delimiter);
	          return React__default.createElement("input", {
	            name: name,
	            type: "hidden",
	            value: value
	          });
	        } else {
	          var input = selectValue.length > 0 ? selectValue.map(function (opt, i) {
	            return React__default.createElement("input", {
	              key: "i-".concat(i),
	              name: name,
	              type: "hidden",
	              value: _this6.getOptionValue(opt)
	            });
	          }) : React__default.createElement("input", {
	            name: name,
	            type: "hidden"
	          });
	          return React__default.createElement("div", null, input);
	        }
	      } else {
	        var _value = selectValue[0] ? this.getOptionValue(selectValue[0]) : '';

	        return React__default.createElement("input", {
	          name: name,
	          type: "hidden",
	          value: _value
	        });
	      }
	    }
	  }, {
	    key: "renderLiveRegion",
	    value: function renderLiveRegion() {
	      if (!this.state.isFocused) return null;
	      return React__default.createElement(A11yText, {
	        "aria-live": "assertive"
	      }, React__default.createElement("p", {
	        id: "aria-selection-event"
	      }, "\xA0", this.state.ariaLiveSelection), React__default.createElement("p", {
	        id: "aria-context"
	      }, "\xA0", this.constructAriaLiveMessage()));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$components4 = this.components,
	          Control = _this$components4.Control,
	          IndicatorsContainer = _this$components4.IndicatorsContainer,
	          SelectContainer = _this$components4.SelectContainer,
	          ValueContainer = _this$components4.ValueContainer;
	      var _this$props20 = this.props,
	          className = _this$props20.className,
	          id = _this$props20.id,
	          isDisabled = _this$props20.isDisabled,
	          menuIsOpen = _this$props20.menuIsOpen;
	      var isFocused = this.state.isFocused;
	      var commonProps = this.commonProps = this.getCommonProps();
	      return React__default.createElement(SelectContainer, _extends({}, commonProps, {
	        className: className,
	        innerProps: {
	          id: id,
	          onKeyDown: this.onKeyDown
	        },
	        isDisabled: isDisabled,
	        isFocused: isFocused
	      }), this.renderLiveRegion(), React__default.createElement(Control, _extends({}, commonProps, {
	        innerRef: this.getControlRef,
	        innerProps: {
	          onMouseDown: this.onControlMouseDown,
	          onTouchEnd: this.onControlTouchEnd
	        },
	        isDisabled: isDisabled,
	        isFocused: isFocused,
	        menuIsOpen: menuIsOpen
	      }), React__default.createElement(ValueContainer, _extends({}, commonProps, {
	        isDisabled: isDisabled
	      }), this.renderPlaceholderOrValue(), this.renderInput()), React__default.createElement(IndicatorsContainer, _extends({}, commonProps, {
	        isDisabled: isDisabled
	      }), this.renderClearIndicator(), this.renderLoadingIndicator(), this.renderIndicatorSeparator(), this.renderDropdownIndicator())), this.renderMenu(), this.renderFormField());
	    }
	  }]);

	  return Select;
	}(React.Component);

	_defineProperty(Select, "defaultProps", defaultProps);

	var defaultProps$1 = {
	  defaultInputValue: '',
	  defaultMenuIsOpen: false,
	  defaultValue: null
	};

	var manageState = function manageState(SelectComponent) {
	  var _class, _temp;

	  return _temp = _class =
	  /*#__PURE__*/
	  function (_Component) {
	    _inherits(StateManager, _Component);

	    function StateManager() {
	      var _getPrototypeOf2;

	      var _this;

	      _classCallCheck(this, StateManager);

	      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StateManager)).call.apply(_getPrototypeOf2, [this].concat(args)));

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "select", void 0);

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
	        inputValue: _this.props.inputValue !== undefined ? _this.props.inputValue : _this.props.defaultInputValue,
	        menuIsOpen: _this.props.menuIsOpen !== undefined ? _this.props.menuIsOpen : _this.props.defaultMenuIsOpen,
	        value: _this.props.value !== undefined ? _this.props.value : _this.props.defaultValue
	      });

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onChange", function (value, actionMeta) {
	        _this.callProp('onChange', value, actionMeta);

	        _this.setState({
	          value: value
	        });
	      });

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onInputChange", function (value, actionMeta) {
	        // TODO: for backwards compatibility, we allow the prop to return a new
	        // value, but now inputValue is a controllable prop we probably shouldn't
	        var newValue = _this.callProp('onInputChange', value, actionMeta);

	        _this.setState({
	          inputValue: newValue !== undefined ? newValue : value
	        });
	      });

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMenuOpen", function () {
	        _this.callProp('onMenuOpen');

	        _this.setState({
	          menuIsOpen: true
	        });
	      });

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMenuClose", function () {
	        _this.callProp('onMenuClose');

	        _this.setState({
	          menuIsOpen: false
	        });
	      });

	      return _this;
	    }

	    _createClass(StateManager, [{
	      key: "focus",
	      value: function focus() {
	        this.select.focus();
	      }
	    }, {
	      key: "blur",
	      value: function blur() {
	        this.select.blur();
	      } // FIXME: untyped flow code, return any

	    }, {
	      key: "getProp",
	      value: function getProp(key) {
	        return this.props[key] !== undefined ? this.props[key] : this.state[key];
	      } // FIXME: untyped flow code, return any

	    }, {
	      key: "callProp",
	      value: function callProp(name) {
	        if (typeof this.props[name] === 'function') {
	          var _this$props;

	          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	            args[_key2 - 1] = arguments[_key2];
	          }

	          return (_this$props = this.props)[name].apply(_this$props, args);
	        }
	      }
	    }, {
	      key: "render",
	      value: function render() {
	        var _this2 = this;

	        var _this$props2 = this.props,
	            defaultInputValue = _this$props2.defaultInputValue,
	            defaultMenuIsOpen = _this$props2.defaultMenuIsOpen,
	            defaultValue = _this$props2.defaultValue,
	            props = _objectWithoutProperties(_this$props2, ["defaultInputValue", "defaultMenuIsOpen", "defaultValue"]);

	        return React__default.createElement(SelectComponent, _extends({}, props, {
	          ref: function ref(_ref) {
	            _this2.select = _ref;
	          },
	          inputValue: this.getProp('inputValue'),
	          menuIsOpen: this.getProp('menuIsOpen'),
	          onChange: this.onChange,
	          onInputChange: this.onInputChange,
	          onMenuClose: this.onMenuClose,
	          onMenuOpen: this.onMenuOpen,
	          value: this.getProp('value')
	        }));
	      }
	    }]);

	    return StateManager;
	  }(React.Component), _defineProperty(_class, "defaultProps", defaultProps$1), _temp;
	};

	var defaultProps$2 = {
	  cacheOptions: false,
	  defaultOptions: false,
	  filterOption: null
	};
	var makeAsyncSelect = function makeAsyncSelect(SelectComponent) {
	  var _class, _temp;

	  return _temp = _class =
	  /*#__PURE__*/
	  function (_Component) {
	    _inherits(Async, _Component);

	    function Async(props) {
	      var _this;

	      _classCallCheck(this, Async);

	      _this = _possibleConstructorReturn(this, _getPrototypeOf(Async).call(this));

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "select", void 0);

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "lastRequest", void 0);

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "mounted", false);

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "optionsCache", {});

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleInputChange", function (newValue, actionMeta) {
	        var _this$props = _this.props,
	            cacheOptions = _this$props.cacheOptions,
	            onInputChange = _this$props.onInputChange; // TODO

	        var inputValue = handleInputChange(newValue, actionMeta, onInputChange);

	        if (!inputValue) {
	          delete _this.lastRequest;

	          _this.setState({
	            inputValue: '',
	            loadedInputValue: '',
	            loadedOptions: [],
	            isLoading: false,
	            passEmptyOptions: false
	          });

	          return;
	        }

	        if (cacheOptions && _this.optionsCache[inputValue]) {
	          _this.setState({
	            inputValue: inputValue,
	            loadedInputValue: inputValue,
	            loadedOptions: _this.optionsCache[inputValue],
	            isLoading: false,
	            passEmptyOptions: false
	          });
	        } else {
	          var request = _this.lastRequest = {};

	          _this.setState({
	            inputValue: inputValue,
	            isLoading: true,
	            passEmptyOptions: !_this.state.loadedInputValue
	          }, function () {
	            _this.loadOptions(inputValue, function (options) {
	              if (!_this.mounted) return;

	              if (options) {
	                _this.optionsCache[inputValue] = options;
	              }

	              if (request !== _this.lastRequest) return;
	              delete _this.lastRequest;

	              _this.setState({
	                isLoading: false,
	                loadedInputValue: inputValue,
	                loadedOptions: options || [],
	                passEmptyOptions: false
	              });
	            });
	          });
	        }

	        return inputValue;
	      });

	      _this.state = {
	        defaultOptions: Array.isArray(props.defaultOptions) ? props.defaultOptions : undefined,
	        inputValue: typeof props.inputValue !== 'undefined' ? props.inputValue : '',
	        isLoading: props.defaultOptions === true ? true : false,
	        loadedOptions: [],
	        passEmptyOptions: false
	      };
	      return _this;
	    }

	    _createClass(Async, [{
	      key: "componentDidMount",
	      value: function componentDidMount() {
	        var _this2 = this;

	        this.mounted = true;
	        var defaultOptions = this.props.defaultOptions;
	        var inputValue = this.state.inputValue;

	        if (defaultOptions === true) {
	          this.loadOptions(inputValue, function (options) {
	            if (!_this2.mounted) return;
	            var isLoading = !!_this2.lastRequest;

	            _this2.setState({
	              defaultOptions: options || [],
	              isLoading: isLoading
	            });
	          });
	        }
	      }
	    }, {
	      key: "componentWillReceiveProps",
	      value: function componentWillReceiveProps(nextProps) {
	        // if the cacheOptions prop changes, clear the cache
	        if (nextProps.cacheOptions !== this.props.cacheOptions) {
	          this.optionsCache = {};
	        }

	        if (nextProps.defaultOptions !== this.props.defaultOptions) {
	          this.setState({
	            defaultOptions: Array.isArray(nextProps.defaultOptions) ? nextProps.defaultOptions : undefined
	          });
	        }
	      }
	    }, {
	      key: "componentWillUnmount",
	      value: function componentWillUnmount() {
	        this.mounted = false;
	      }
	    }, {
	      key: "focus",
	      value: function focus() {
	        this.select.focus();
	      }
	    }, {
	      key: "blur",
	      value: function blur() {
	        this.select.blur();
	      }
	    }, {
	      key: "loadOptions",
	      value: function loadOptions(inputValue, callback) {
	        var loadOptions = this.props.loadOptions;
	        if (!loadOptions) return callback();
	        var loader = loadOptions(inputValue, callback);

	        if (loader && typeof loader.then === 'function') {
	          loader.then(callback, function () {
	            return callback();
	          });
	        }
	      }
	    }, {
	      key: "render",
	      value: function render() {
	        var _this3 = this;

	        var _this$props2 = this.props,
	            loadOptions = _this$props2.loadOptions,
	            props = _objectWithoutProperties(_this$props2, ["loadOptions"]);

	        var _this$state = this.state,
	            defaultOptions = _this$state.defaultOptions,
	            inputValue = _this$state.inputValue,
	            isLoading = _this$state.isLoading,
	            loadedInputValue = _this$state.loadedInputValue,
	            loadedOptions = _this$state.loadedOptions,
	            passEmptyOptions = _this$state.passEmptyOptions;
	        var options = passEmptyOptions ? [] : inputValue && loadedInputValue ? loadedOptions : defaultOptions || [];
	        return React__default.createElement(SelectComponent, _extends({}, props, {
	          ref: function ref(_ref) {
	            _this3.select = _ref;
	          },
	          options: options,
	          isLoading: isLoading,
	          onInputChange: this.handleInputChange
	        }));
	      }
	    }]);

	    return Async;
	  }(React.Component), _defineProperty(_class, "defaultProps", defaultProps$2), _temp;
	};
	var SelectState = manageState(Select);
	var Async = makeAsyncSelect(SelectState);

	var compareOption = function compareOption() {
	  var inputValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	  var option = arguments.length > 1 ? arguments[1] : undefined;
	  var candidate = String(inputValue).toLowerCase();
	  var optionValue = String(option.value).toLowerCase();
	  var optionLabel = String(option.label).toLowerCase();
	  return optionValue === candidate || optionLabel === candidate;
	};

	var builtins = {
	  formatCreateLabel: function formatCreateLabel(inputValue) {
	    return "Create \"".concat(inputValue, "\"");
	  },
	  isValidNewOption: function isValidNewOption(inputValue, selectValue, selectOptions) {
	    return !(!inputValue || selectValue.some(function (option) {
	      return compareOption(inputValue, option);
	    }) || selectOptions.some(function (option) {
	      return compareOption(inputValue, option);
	    }));
	  },
	  getNewOptionData: function getNewOptionData(inputValue, optionLabel) {
	    return {
	      label: optionLabel,
	      value: inputValue,
	      __isNew__: true
	    };
	  }
	};
	var defaultProps$3 = _objectSpread({
	  allowCreateWhileLoading: false,
	  createOptionPosition: 'last'
	}, builtins);
	var makeCreatableSelect = function makeCreatableSelect(SelectComponent) {
	  var _class, _temp;

	  return _temp = _class =
	  /*#__PURE__*/
	  function (_Component) {
	    _inherits(Creatable, _Component);

	    function Creatable(props) {
	      var _this;

	      _classCallCheck(this, Creatable);

	      _this = _possibleConstructorReturn(this, _getPrototypeOf(Creatable).call(this, props));

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "select", void 0);

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onChange", function (newValue, actionMeta) {
	        var _this$props = _this.props,
	            getNewOptionData = _this$props.getNewOptionData,
	            inputValue = _this$props.inputValue,
	            isMulti = _this$props.isMulti,
	            onChange = _this$props.onChange,
	            onCreateOption = _this$props.onCreateOption,
	            value = _this$props.value;

	        if (actionMeta.action !== 'select-option') {
	          return onChange(newValue, actionMeta);
	        }

	        var newOption = _this.state.newOption;
	        var valueArray = Array.isArray(newValue) ? newValue : [newValue];

	        if (valueArray[valueArray.length - 1] === newOption) {
	          if (onCreateOption) onCreateOption(inputValue);else {
	            var newOptionData = getNewOptionData(inputValue, inputValue);
	            var newActionMeta = {
	              action: 'create-option'
	            };

	            if (isMulti) {
	              onChange([].concat(_toConsumableArray(cleanValue(value)), [newOptionData]), newActionMeta);
	            } else {
	              onChange(newOptionData, newActionMeta);
	            }
	          }
	          return;
	        }

	        onChange(newValue, actionMeta);
	      });

	      var options = props.options || [];
	      _this.state = {
	        newOption: undefined,
	        options: options
	      };
	      return _this;
	    }

	    _createClass(Creatable, [{
	      key: "componentWillReceiveProps",
	      value: function componentWillReceiveProps(nextProps) {
	        var allowCreateWhileLoading = nextProps.allowCreateWhileLoading,
	            createOptionPosition = nextProps.createOptionPosition,
	            formatCreateLabel = nextProps.formatCreateLabel,
	            getNewOptionData = nextProps.getNewOptionData,
	            inputValue = nextProps.inputValue,
	            isLoading = nextProps.isLoading,
	            isValidNewOption = nextProps.isValidNewOption,
	            value = nextProps.value;
	        var options = nextProps.options || [];
	        var newOption = this.state.newOption;

	        if (isValidNewOption(inputValue, cleanValue(value), options)) {
	          newOption = getNewOptionData(inputValue, formatCreateLabel(inputValue));
	        } else {
	          newOption = undefined;
	        }

	        this.setState({
	          newOption: newOption,
	          options: (allowCreateWhileLoading || !isLoading) && newOption ? createOptionPosition === 'first' ? [newOption].concat(_toConsumableArray(options)) : [].concat(_toConsumableArray(options), [newOption]) : options
	        });
	      }
	    }, {
	      key: "focus",
	      value: function focus() {
	        this.select.focus();
	      }
	    }, {
	      key: "blur",
	      value: function blur() {
	        this.select.blur();
	      }
	    }, {
	      key: "render",
	      value: function render() {
	        var _this2 = this;

	        var props = _extends({}, this.props);

	        var options = this.state.options;
	        return React__default.createElement(SelectComponent, _extends({}, props, {
	          ref: function ref(_ref) {
	            _this2.select = _ref;
	          },
	          options: options,
	          onChange: this.onChange
	        }));
	      }
	    }]);

	    return Creatable;
	  }(React.Component), _defineProperty(_class, "defaultProps", defaultProps$3), _temp;
	}; // TODO: do this in package entrypoint

	var SelectCreatable = makeCreatableSelect(Select);
	var Creatable = manageState(SelectCreatable);

	var SelectCreatable$1 = makeCreatableSelect(Select);
	var SelectCreatableState = manageState(SelectCreatable$1);
	var AsyncCreatable = makeAsyncSelect(SelectCreatableState);

	// strip transition props off before spreading onto select component
	// note we need to be explicit about innerRef for flow
	var AnimatedInput = function AnimatedInput(WrappedComponent) {
	  return function (_ref) {
	    var inProp = _ref.in,
	        onExited = _ref.onExited,
	        appear = _ref.appear,
	        enter = _ref.enter,
	        exit = _ref.exit,
	        props = _objectWithoutProperties(_ref, ["in", "onExited", "appear", "enter", "exit"]);

	    return React__default.createElement(WrappedComponent, props);
	  };
	};

	var Fade = function Fade(_ref) {
	  var Tag = _ref.component,
	      _ref$duration = _ref.duration,
	      duration = _ref$duration === void 0 ? 1 : _ref$duration,
	      inProp = _ref.in,
	      onExited = _ref.onExited,
	      props = _objectWithoutProperties(_ref, ["component", "duration", "in", "onExited"]);

	  var transition = {
	    entering: {
	      opacity: 0
	    },
	    entered: {
	      opacity: 1,
	      transition: "opacity ".concat(duration, "ms")
	    },
	    exiting: {
	      opacity: 0
	    },
	    exited: {
	      opacity: 0
	    }
	  };
	  return React__default.createElement(reactTransitionGroup_1, {
	    mountOnEnter: true,
	    unmountOnExit: true,
	    in: inProp,
	    timeout: duration
	  }, function (state) {
	    var innerProps = {
	      style: _objectSpread({}, transition[state])
	    };
	    return React__default.createElement(Tag, _extends({
	      innerProps: innerProps
	    }, props));
	  });
	}; // ==============================
	// Collapse Transition
	// ==============================

	var collapseDuration = 260;
	// wrap each MultiValue with a collapse transition; decreases width until
	// finally removing from DOM
	var Collapse =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Collapse, _Component);

	  function Collapse() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck(this, Collapse);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Collapse)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "duration", collapseDuration);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "rafID", void 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
	      width: 'auto'
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "transition", {
	      exiting: {
	        width: 0,
	        transition: "width ".concat(_this.duration, "ms ease-out")
	      },
	      exited: {
	        width: 0
	      }
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getWidth", function (ref) {
	      if (ref && isNaN(_this.state.width)) {
	        /*
	          Here we're invoking requestAnimationFrame with a callback invoking our
	          call to getBoundingClientRect and setState in order to resolve an edge case
	          around portalling. Certain portalling solutions briefly remove children from the DOM
	          before appending them to the target node. This is to avoid us trying to call getBoundingClientrect
	          while the Select component is in this state.
	        */
	        // cannot use `offsetWidth` because it is rounded
	        _this.rafID = window.requestAnimationFrame(function () {
	          var _ref$getBoundingClien = ref.getBoundingClientRect(),
	              width = _ref$getBoundingClien.width;

	          _this.setState({
	            width: width
	          });
	        });
	      }
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getStyle", function (width) {
	      return {
	        overflow: 'hidden',
	        whiteSpace: 'nowrap',
	        width: width
	      };
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getTransition", function (state) {
	      return _this.transition[state];
	    });

	    return _this;
	  }

	  _createClass(Collapse, [{
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      if (this.rafID) {
	        window.cancelAnimationFrame(this.rafID);
	      }
	    } // width must be calculated; cannot transition from `undefined` to `number`

	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props = this.props,
	          children = _this$props.children,
	          inProp = _this$props.in;
	      var width = this.state.width;
	      return React__default.createElement(reactTransitionGroup_1, {
	        enter: false,
	        mountOnEnter: true,
	        unmountOnExit: true,
	        in: inProp,
	        timeout: this.duration
	      }, function (state) {
	        var style = _objectSpread({}, _this2.getStyle(width), _this2.getTransition(state));

	        return React__default.createElement("div", {
	          ref: _this2.getWidth,
	          style: style
	        }, children);
	      });
	    }
	  }]);

	  return Collapse;
	}(React.Component);

	var AnimatedMultiValue = function AnimatedMultiValue(WrappedComponent) {
	  return function (_ref) {
	    var inProp = _ref.in,
	        onExited = _ref.onExited,
	        props = _objectWithoutProperties(_ref, ["in", "onExited"]);

	    return React__default.createElement(Collapse, {
	      in: inProp,
	      onExited: onExited
	    }, React__default.createElement(WrappedComponent, _extends({
	      cropWithEllipsis: inProp
	    }, props)));
	  };
	};

	var AnimatedPlaceholder = function AnimatedPlaceholder(WrappedComponent) {
	  return function (props) {
	    return React__default.createElement(Fade, _extends({
	      component: WrappedComponent,
	      duration: props.isMulti ? collapseDuration : 1
	    }, props));
	  };
	};

	var AnimatedSingleValue = function AnimatedSingleValue(WrappedComponent) {
	  return function (props) {
	    return React__default.createElement(Fade, _extends({
	      component: WrappedComponent
	    }, props));
	  };
	};

	// make ValueContainer a transition group
	var AnimatedValueContainer = function AnimatedValueContainer(WrappedComponent) {
	  return function (props) {
	    return React__default.createElement(reactTransitionGroup_2, _extends({
	      component: WrappedComponent
	    }, props));
	  };
	};

	var makeAnimated = function makeAnimated() {
	  var externalComponents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var components$$1 = defaultComponents({
	    components: externalComponents
	  });

	  var Input = components$$1.Input,
	      MultiValue = components$$1.MultiValue,
	      Placeholder = components$$1.Placeholder,
	      SingleValue = components$$1.SingleValue,
	      ValueContainer = components$$1.ValueContainer,
	      rest = _objectWithoutProperties(components$$1, ["Input", "MultiValue", "Placeholder", "SingleValue", "ValueContainer"]);

	  return _objectSpread({
	    Input: AnimatedInput(Input),
	    MultiValue: AnimatedMultiValue(MultiValue),
	    Placeholder: AnimatedPlaceholder(Placeholder),
	    SingleValue: AnimatedSingleValue(SingleValue),
	    ValueContainer: AnimatedValueContainer(ValueContainer)
	  }, rest);
	};

	var AnimatedComponents = makeAnimated();
	var Input$1 = AnimatedComponents.Input;
	var MultiValue$1 = AnimatedComponents.MultiValue;
	var Placeholder$1$1 = AnimatedComponents.Placeholder;
	var SingleValue$1 = AnimatedComponents.SingleValue;
	var ValueContainer$1 = AnimatedComponents.ValueContainer;
	var index = memoizeOne(makeAnimated, exportedEqual);

	var index$1 = manageState(Select);

	/* eslint-disable @typescript-eslint/explicit-function-return-type */
	const selectStyles = theme => ({
	  control: (provided, state) => ({ ...provided,
	    border: state.isFocused ? `1px solid ${theme.colors.primary}` : `1px solid ${theme.colors.border}`,
	    borderRadius: '0px',
	    background: theme.colors.inputBck,
	    color: theme.colors.defaultText
	  }),
	  menu: provided => ({ ...provided,
	    borderRadius: '0px',
	    borderColor: theme.colors.border,
	    background: theme.colors.bck
	  }),
	  input: () => ({
	    color: theme.colors.defaultText,
	    background: theme.colors.inputBck
	  }),
	  singleValue: () => ({
	    color: theme.colors.defaultText
	  }),
	  option: (provided, state) => {
	    let color = state.isSelected ? theme.colors.defaultText : theme.colors.lightText;

	    if (state.isFocused) {
	      color = theme.colors.inputBck;
	    }

	    return { ...provided,
	      color,
	      background: state.isFocused ? theme.colors.primary : 'transparent'
	    };
	  }
	});

	const filterStyles = theme => ({
	  control: (provided, state) => ({ ...provided,
	    border: state.isFocused ? `1px solid ${theme.colors.primary}` : `1px solid ${theme.colors.borderOnDark}`,
	    borderRadius: '0px',
	    background: 'transparent',
	    color: theme.colors.filterDefaultText
	  }),
	  input: () => ({
	    color: theme.colors.filterDefaultText
	  }),
	  singleValue: () => ({
	    color: theme.colors.filterDefaultText
	  }),
	  option: (provided, state) => ({ ...provided,
	    color: state.isSelected ? theme.colors.filterDefaultText : theme.colors.filterLightText,
	    background: state.isFocused ? 'rgba(32,39,62,0.25)' : 'transparent'
	  }),
	  menu: provided => ({ ...provided,
	    borderRadius: '0px',
	    borderColor: theme.colors.border,
	    background: theme.colors.darkBck,
	    zIndex: 5
	  })
	});

	class Edit$2 extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.handleInputChange = this.handleInputChange.bind(this);
	    this.handleSelectChange = this.handleSelectChange.bind(this);
	  }

	  handleInputChange(event) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    onChange(property.name, event.target.value);
	  }

	  handleSelectChange(selected) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    const value = selected ? selected.value : '';
	    onChange(property.name, value);
	  }

	  renderInput() {
	    const {
	      property,
	      record,
	      theme
	    } = this.props;
	    const value = record.params && typeof record.params[property.name] !== 'undefined' ? record.params[property.name] : '';

	    if (property.availableValues) {
	      const styles = selectStyles(theme);
	      const selected = property.availableValues.find(av => av.value === value);
	      return React__default.createElement(index$1, {
	        isClearable: true,
	        styles: styles,
	        value: selected,
	        options: property.availableValues,
	        onChange: this.handleSelectChange,
	        isDisabled: property.isDisabled
	      });
	    }

	    return React__default.createElement(StyledInput, {
	      type: "text",
	      className: "input",
	      id: property.name,
	      name: property.name,
	      onChange: this.handleInputChange,
	      value: value,
	      disabled: property.isDisabled
	    });
	  }

	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    const error = record.errors && record.errors[property.name];
	    return React__default.createElement(PropertyInEdit, {
	      property: property,
	      error: error
	    }, this.renderInput());
	  }

	}

	var edit = styled.withTheme(Edit$2);

	class Filter extends React__default.PureComponent {
	  constructor(props) {
	    super(props);
	    this.handleInputChange = this.handleInputChange.bind(this);
	    this.handleSelectChange = this.handleSelectChange.bind(this);
	  }

	  handleInputChange(event) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    onChange(property.name, event.target.value);
	  }

	  handleSelectChange(selected) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    const value = selected ? selected.value : '';
	    onChange(property.name, value);
	  }

	  renderInput() {
	    const {
	      property,
	      filter,
	      theme
	    } = this.props;
	    const filterKey = `filter-${property.name}`;
	    const value = filter[property.name] || '';

	    if (property.availableValues) {
	      const selected = property.availableValues.find(av => av.value === value);
	      return React__default.createElement(index$1, {
	        value: typeof selected === 'undefined' ? '' : selected,
	        isClearable: true,
	        options: property.availableValues,
	        styles: filterStyles(theme),
	        onChange: this.handleSelectChange
	      });
	    }

	    return React__default.createElement(React__default.Fragment, null, React__default.createElement("span", {
	      className: "icon is-small is-right"
	    }, React__default.createElement("i", {
	      className: "fas fa-search"
	    })), React__default.createElement(StyledInput, {
	      type: "text",
	      className: "input filter",
	      name: filterKey,
	      onChange: this.handleInputChange,
	      value: value
	    }));
	  }

	  render() {
	    const {
	      property
	    } = this.props;
	    return React__default.createElement(PropertyInFilter, {
	      property: property
	    }, React__default.createElement("div", {
	      className: "control has-icons-left"
	    }, this.renderInput()));
	  }

	}

	var filter = styled.withTheme(Filter);

	class List$2 extends React__default.PureComponent {
	  render() {
	    const {
	      property,
	      record,
	      resource
	    } = this.props;
	    const showAction = record.recordActions.find(a => a.name === 'show');
	    const value = record.params[property.name];

	    if (resource.titleProperty.name === property.name && showAction) {
	      const h = new ViewHelpers();
	      const href = h.recordActionUrl({
	        resourceId: resource.id,
	        recordId: record.id,
	        actionName: 'show'
	      });
	      return React__default.createElement(reactRouterDom.Link, {
	        to: href
	      }, value);
	    }

	    const className = property.availableValues ? 'tag' : '';
	    return typeof value !== 'undefined' ? React__default.createElement("span", {
	      className: className
	    }, value) : '';
	  }

	}



	var defaultType = /*#__PURE__*/Object.freeze({
		__proto__: null,
		show: Show$2,
		edit: edit,
		filter: filter,
		list: List$2
	});

	class Edit$3 extends React__default.PureComponent {
	  handleChange(event) {
	    const {
	      property,
	      onChange
	    } = this.props;
	    const {
	      checked
	    } = event.target;
	    onChange(property.name, checked);
	  }

	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    const value = record.params && record.params[property.name] || '';
	    const error = record.errors && record.errors[property.name];
	    return React__default.createElement(PropertyInEdit, {
	      property: property,
	      error: error
	    }, React__default.createElement("input", {
	      type: "checkbox",
	      className: "checkbox",
	      id: property.name,
	      name: property.name,
	      onChange: this.handleChange.bind(this),
	      checked: value
	    }));
	  }

	}

	var mapValue = (value => value ? 'Yes' : 'No');

	class Show$3 extends React__default.PureComponent {
	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    const value = mapValue(record.params[property.name]);
	    return React__default.createElement(PropertyInShow, {
	      property: property
	    }, value);
	  }

	}

	class List$3 extends React__default.PureComponent {
	  render() {
	    const {
	      property,
	      record,
	      resource
	    } = this.props;
	    const showAction = record.recordActions.find(a => a.name === 'show');
	    const value = mapValue(record.params[property.name]);

	    if (resource.titleProperty.name === property.name && showAction) {
	      const h = new ViewHelpers();
	      const href = h.recordActionUrl({
	        resourceId: resource.id,
	        recordId: record.id,
	        actionName: 'show'
	      });
	      return React__default.createElement(reactRouterDom.Link, {
	        to: href
	      }, value);
	    }

	    return React__default.createElement("span", null, value);
	  }

	}

	class Filter$1 extends React__default.PureComponent {
	  constructor(props) {
	    super(props);
	    this.handleChange = this.handleChange.bind(this);
	  }

	  handleChange(selected) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    const value = selected ? selected.value : '';
	    onChange(property.name, value);
	  }

	  render() {
	    const {
	      property,
	      filter = {},
	      theme
	    } = this.props;
	    const value = typeof filter[property.name] === 'undefined' ? '' : filter[property.name];
	    const options = [{
	      value: true,
	      label: mapValue(true)
	    }, {
	      value: false,
	      label: mapValue(false)
	    }];
	    const selected = options.find(o => o.value === value);
	    return React__default.createElement(PropertyInFilter, {
	      property: property
	    }, React__default.createElement(index$1, {
	      value: typeof selected === 'undefined' ? '' : selected,
	      isClearable: true,
	      options: options,
	      styles: filterStyles(theme),
	      onChange: this.handleChange
	    }));
	  }

	}

	var filter$1 = styled.withTheme(Filter$1);



	var boolean = /*#__PURE__*/Object.freeze({
		__proto__: null,
		edit: Edit$3,
		show: Show$3,
		list: List$3,
		filter: filter$1
	});

	class Edit$4 extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.datepickerRef = React__default.createRef();
	  }

	  componentDidMount() {
	    this.setupDatePicker();
	  }

	  shouldComponentUpdate(nextProps) {
	    const {
	      record,
	      property
	    } = this.props;
	    const nextRecord = nextProps.record;
	    const value = record.params && record.params[property.name] || '';
	    const nextValue = nextRecord.params && nextRecord.params[property.name] || '';

	    if (nextValue !== value) {
	      if (nextValue) {
	        this.datepickerRef.current._flatpickr.jumpToDate(nextValue);
	      } else {
	        this.datepickerRef.current._flatpickr.input.value = '';
	      }
	    }

	    const prevError = record.errors && record.errors[property.name];
	    const newError = nextRecord.errors && nextRecord.errors[property.name];
	    return prevError !== newError;
	  }

	  setupDatePicker() {
	    const {
	      record,
	      property
	    } = this.props;
	    const defaultDate = record.params && record.params[property.name] || null;
	    let options = {
	      format: 'Y-m-d',
	      enableTime: false,
	      // eslint-disable-next-line @typescript-eslint/camelcase
	      time_24hr: false
	    };

	    if (property.type === 'datetime') {
	      options = {
	        format: 'Y-m-d H:i',
	        enableTime: true,
	        // eslint-disable-next-line @typescript-eslint/camelcase
	        time_24hr: true
	      };
	    }

	    if (!property.isDisabled) {
	      const inst = flatpickr(this.datepickerRef.current, {
	        defaultDate,
	        ...options
	      });
	      inst.config.onChange.push((dates, text) => {
	        this.handleChange(text);
	      });
	    }
	  }

	  handleChange(value) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    onChange(property.name, value);
	  }

	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    const error = record.errors && record.errors[property.name];
	    return React__default.createElement(PropertyInEdit, {
	      property: property,
	      error: error
	    }, React__default.createElement("div", {
	      className: "control has-icons-right"
	    }, React__default.createElement(StyledInput, {
	      type: "text"
	      /* cspell:disable-next-line */
	      ,
	      className: "input pickadate",
	      id: property.name,
	      ref: this.datepickerRef,
	      name: property.name,
	      disabled: property.isDisabled
	    }), React__default.createElement("span", {
	      className: "icon is-small is-right"
	    }, React__default.createElement("i", {
	      className: "icomoon-calendar"
	    }))));
	  }

	}

	var mapValue$1 = (value => {
	  if (!value) {
	    return '';
	  }

	  const date = new Date(value);
	  return date.toLocaleString();
	});

	class Show$4 extends React__default.PureComponent {
	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    const value = mapValue$1(record.params[property.name]);
	    return React__default.createElement(PropertyInShow, {
	      property: property
	    }, value);
	  }

	}

	class List$4 extends React__default.PureComponent {
	  render() {
	    const {
	      property,
	      record,
	      resource
	    } = this.props;
	    const showAction = record.recordActions.find(a => a.name === 'show');
	    const value = mapValue$1(record.params[property.name]);

	    if (resource.titleProperty.name === property.name && showAction) {
	      const h = new ViewHelpers();
	      const href = h.recordActionUrl({
	        resourceId: resource.id,
	        recordId: record.id,
	        actionName: 'show'
	      });
	      return React__default.createElement(reactRouterDom.Link, {
	        to: href
	      }, value);
	    }

	    return React__default.createElement("span", null, value);
	  }

	}

	const PARAM_SEPARATOR = '~~';

	/**
	 * Filter object wrapping up selected filters.
	 * @private
	 */
	class Filter$2 {
	  /**
	   * Changes raw nested filters to form Object<path, value>.
	   *
	   * @example
	   * const filters = {
	   *  nested: {field: 'ala'},
	   *  'dataField~~from': '2019-08-14'
	   * }
	   *
	   * const normalized = Filter.normalizeFilters(filters)
	   * // {
	   * //   'nested.filter': 'ala',
	   * //   'dataField': {from: '2019-08-14'}
	   * // }
	   *
	   *
	   * @param   {Object}  filters
	   *
	   * @return  {Object}
	   */
	  static normalizeKeys(filters) {
	    return flat_2(flat_1(filters), {
	      delimiter: PARAM_SEPARATOR
	    });
	  }
	  /**
	   * @param   {Object<String,Object | String>}  filters   selected filters
	   * @param   {BaseResource}                    resource    resource which is filtered
	   */


	  constructor(filters = {}, resource) {
	    this.resource = resource;
	    const normalized = Filter$2.normalizeKeys(filters);
	    this.filters = Object.keys(normalized).reduce((memo, path) => ({
	      [path]: {
	        path,
	        property: this.resource.property(path),
	        value: normalized[path]
	      },
	      ...memo
	    }), {});
	  }
	  /**
	   * Returns filter for a given property key
	   *
	   * @param {String} key      property key
	   * @returns {Filter.Property | undefined}
	   */


	  get(key) {
	    return this.filters[key];
	  }
	  /**
	   * Populates all filtered properties which refers to other resources
	   */


	  async populate() {
	    const keys = Object.keys(this.filters);

	    for (let index = 0; index < keys.length; index += 1) {
	      const key = keys[index];
	      const referenceResource = this.resource.decorate().getPropertyByKey(key).reference();

	      if (referenceResource) {
	        this.filters[key].populated = await referenceResource.findOne(this.filters[key].value);
	      }
	    }

	    return this;
	  }

	  reduce(callback, initial) {
	    return Object.values(this.filters).reduce(callback, initial || {});
	  }

	  isVisible() {
	    return !!Object.keys(this.filters).length;
	  }

	}

	var BackendFilter = /*#__PURE__*/Object.freeze({
		__proto__: null,
		PARAM_SEPARATOR: PARAM_SEPARATOR,
		'default': Filter$2
	});

	const {
	  PARAM_SEPARATOR: PARAM_SEPARATOR$1
	} = BackendFilter;
	class Filter$3 extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.pickerRef = {
	      from: React__default.createRef(),
	      to: React__default.createRef()
	    };
	  }

	  componentDidMount() {
	    this.setupDatePicker('from');
	    this.setupDatePicker('to');
	  }

	  shouldComponentUpdate(nextProps) {
	    const {
	      property
	    } = this.props;
	    const fromKey = `${property.name}${PARAM_SEPARATOR$1}from`;
	    const toKey = `${property.name}${PARAM_SEPARATOR$1}to`;
	    const nextFilter = nextProps.filter || {};

	    if (nextFilter[fromKey]) {
	      this.pickerRef.from.current._flatpickr.jumpToDate(nextFilter[fromKey]);
	    } else {
	      this.pickerRef.from.current._flatpickr.input.value = '';
	    }

	    if (nextFilter[toKey]) {
	      this.pickerRef.to.current._flatpickr.jumpToDate(nextFilter[toKey]);
	    } else {
	      this.pickerRef.to.current._flatpickr.input.value = '';
	    }

	    return false;
	  }

	  setupDatePicker(key) {
	    const {
	      property,
	      filter
	    } = this.props;
	    const fieldKey = `${property.name}.${key}`;
	    const defaultDate = filter[fieldKey] && new Date(filter[fieldKey]) || '';
	    let options = {
	      format: 'Y-m-d',
	      enableTime: false,
	      // eslint-disable-next-line @typescript-eslint/camelcase
	      time_24hr: false
	    };

	    if (property.type === 'datetime') {
	      options = {
	        format: 'Y-m-d H:i',
	        enableTime: true,
	        // eslint-disable-next-line @typescript-eslint/camelcase
	        time_24hr: true
	      };
	    }

	    const inst = flatpickr(this.pickerRef[key].current, {
	      format: 'Y-m-d H:i',
	      defaultDate,
	      ...options
	    });
	    inst.config.onChange.push((dates, text) => {
	      this.handleChange(key, new Date(text));
	    });
	  }

	  handleChange(key, value) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    const date = value !== '' ? new Date(value).toISOString() : '';
	    onChange(`${property.name}${PARAM_SEPARATOR$1}${key}`, date);
	  }

	  renderFilter(where) {
	    const key = where.toLowerCase();
	    const {
	      property
	    } = this.props;
	    const filterKey = `filter-${property.name}`;
	    return React__default.createElement("div", null, React__default.createElement(Label, null, "-", where, ":"), React__default.createElement("div", {
	      className: "control has-icons-right"
	    }, React__default.createElement("input", {
	      type: "text",
	      ref: this.pickerRef[key],
	      className: "input filter",
	      name: `${filterKey}${PARAM_SEPARATOR$1}${key}`
	    }), React__default.createElement("span", {
	      className: "icon is-small is-right"
	    }, React__default.createElement("i", {
	      className: "icomoon-calendar"
	    }))));
	  }

	  render() {
	    const {
	      property
	    } = this.props;
	    return React__default.createElement(PropertyInFilter, {
	      property: property
	    }, React__default.createElement("div", {
	      className: "date-range"
	    }, this.renderFilter('From'), this.renderFilter('To')));
	  }

	}



	var datetime = /*#__PURE__*/Object.freeze({
		__proto__: null,
		edit: Edit$4,
		show: Show$4,
		list: List$4,
		filter: Filter$3
	});

	/* eslint-disable jsx-a11y/label-has-for */
	const toolbarOptions = [[{
	  header: [1, 2, 3, 4, 5, 6, false]
	}], ['bold', 'italic', 'underline', 'strike'], // toggled buttons
	['blockquote', 'code-block'], [{
	  list: 'ordered'
	}, {
	  list: 'bullet'
	}], [{
	  script: 'sub'
	}, {
	  script: 'super'
	}], // superscript/subscript
	[{
	  indent: '-1'
	}, {
	  indent: '+1'
	}], // indent
	[{
	  direction: 'rtl'
	}], // text direction
	[{
	  size: ['small', false, 'large', 'huge']
	}], // custom dropdown
	[{
	  color: []
	}, {
	  background: []
	}], // dropdown with defaults from theme
	[{
	  font: []
	}], [{
	  align: []
	}], ['clean'] // remove formatting button
	];
	const Wrapper$1 = styled__default.div.attrs({
	  className: 'control has-icons-right'
	}).withConfig({
	  displayName: "edit__Wrapper",
	  componentId: "sc-1ilg3d7-0"
	})([".ql-toolbar{border-color:", ";.ql-picker{color:", ";}}.ql-container{border-color:", ";background:", ";}"], ({
	  theme
	}) => theme.colors.border, ({
	  theme
	}) => theme.colors.lightText, ({
	  theme
	}) => theme.colors.border, ({
	  theme
	}) => theme.colors.inputBck);
	class Edit$5 extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.wysiwigRef = React__default.createRef();
	  }

	  componentDidMount() {
	    this.setupWysiwig();
	  }

	  shouldComponentUpdate(nextProps) {
	    const {
	      record,
	      property
	    } = this.props;

	    if (!nextProps) {
	      return false;
	    }

	    const oldError = record.errors && record.errors[property.name] && record.errors[property.name].message;
	    const newError = nextProps.record.errors && nextProps.record.errors[property.name] && nextProps.record.errors[property.name].message;
	    return oldError !== newError;
	  }

	  componentDidUpdate() {
	    this.setupWysiwig();
	  }

	  setupWysiwig() {
	    const {
	      property,
	      record
	    } = this.props;
	    const value = record.params && record.params[property.name] || '';
	    this.wysiwigRef.current.innerHTML = value;

	    if (this.quill) {
	      delete this.quill; // eslint-disable-next-line react/no-find-dom-node

	      const thisNode = reactDom.findDOMNode(this);
	      const toolbars = thisNode.getElementsByClassName('ql-toolbar');

	      for (let index = 0; index < toolbars.length; index += 1) {
	        toolbars[index].remove();
	      }
	    }

	    this.quill = new Quill(this.wysiwigRef.current, {
	      modules: {
	        toolbar: toolbarOptions
	      },
	      theme: 'snow'
	    });
	    this.quill.on('text-change', () => {
	      this.handleChange(this.wysiwigRef.current.children[0].innerHTML);
	    });
	  }

	  handleChange(value) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    onChange(property.name, value);
	  }

	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    const error = record.errors && record.errors[property.name];
	    return React__default.createElement("div", {
	      className: "field"
	    }, React__default.createElement(Label, {
	      htmlFor: property.name
	    }, property.label), React__default.createElement(Wrapper$1, null, React__default.createElement("div", {
	      className: "quill-editor",
	      ref: this.wysiwigRef,
	      style: {
	        height: '400px'
	      }
	    })), error && React__default.createElement("div", {
	      className: "help is-danger"
	    }, error.message));
	  }

	}

	class Show$5 extends React__default.PureComponent {
	  constructor(props) {
	    super(props);
	    this.contentRef = React__default.createRef();
	  }

	  componentDidMount() {
	    const {
	      property,
	      record
	    } = this.props;
	    const value = record.params[property.name];
	    this.contentRef.current.innerHTML = value;
	  }

	  render() {
	    const {
	      property
	    } = this.props;
	    return React__default.createElement(PropertyInShow, {
	      property: property
	    }, React__default.createElement("div", {
	      className: "rich-text-value content",
	      ref: this.contentRef
	    }));
	  }

	}

	class List$5 extends React__default.PureComponent {
	  render() {
	    const {
	      property,
	      record,
	      resource
	    } = this.props;
	    const showAction = record.recordActions.find(a => a.name === 'show');
	    const original = record.params[property.name] || '';
	    const value = original.substring(0, 15) + (original.length > 15 ? '...' : '');

	    if (resource.titleProperty.name === property.name && showAction) {
	      const h = new ViewHelpers();
	      const href = h.recordActionUrl({
	        resourceId: resource.id,
	        recordId: record.id,
	        actionName: 'show'
	      });
	      return React__default.createElement(reactRouterDom.Link, {
	        to: href
	      }, value);
	    }

	    return React__default.createElement("span", null, value);
	  }

	}



	var richtext = /*#__PURE__*/Object.freeze({
		__proto__: null,
		edit: Edit$5,
		show: Show$5,
		list: List$5
	});

	var utils = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.classNames = classNames;
	exports.handleInputChange = handleInputChange;
	exports.isDocumentElement = isDocumentElement;
	exports.normalizedHeight = normalizedHeight;
	exports.getScrollTop = getScrollTop;
	exports.scrollTo = scrollTo;
	exports.getScrollParent = getScrollParent;
	exports.animatedScrollTo = animatedScrollTo;
	exports.scrollIntoView = scrollIntoView;
	exports.getBoundingClientObj = getBoundingClientObj;
	exports.toKey = toKey;
	exports.isTouchCapable = isTouchCapable;
	exports.isMobileDevice = isMobileDevice;
	exports.cleanValue = exports.emptyString = exports.noop = void 0;

	var _raf = _interopRequireDefault(raf_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	// ==============================
	// NO OP
	// ==============================
	var noop = function noop() {};

	exports.noop = noop;

	var emptyString = function emptyString() {
	  return '';
	}; // ==============================
	// Class Name Prefixer
	// ==============================

	/**
	 String representation of component state for styling with class names.

	 Expects an array of strings OR a string/object pair:
	 - className(['comp', 'comp-arg', 'comp-arg-2'])
	   @returns 'react-select__comp react-select__comp-arg react-select__comp-arg-2'
	 - className('comp', { some: true, state: false })
	   @returns 'react-select__comp react-select__comp--some'
	*/


	exports.emptyString = emptyString;

	function applyPrefixToName(prefix, name) {
	  if (!name) {
	    return prefix;
	  } else if (name[0] === '-') {
	    return prefix + name;
	  } else {
	    return prefix + '__' + name;
	  }
	}

	function classNames(prefix, cssKey, state, className) {
	  var arr = [cssKey, className];

	  if (state && prefix) {
	    for (var key in state) {
	      if (state.hasOwnProperty(key) && state[key]) {
	        arr.push("".concat(applyPrefixToName(prefix, key)));
	      }
	    }
	  }

	  return arr.filter(function (i) {
	    return i;
	  }).map(function (i) {
	    return String(i).trim();
	  }).join(' ');
	} // ==============================
	// Clean Value
	// ==============================


	var cleanValue = function cleanValue(value) {
	  if (Array.isArray(value)) return value.filter(Boolean);
	  if (_typeof(value) === 'object' && value !== null) return [value];
	  return [];
	}; // ==============================
	// Handle Input Change
	// ==============================


	exports.cleanValue = cleanValue;

	function handleInputChange(inputValue, actionMeta, onInputChange) {
	  if (onInputChange) {
	    var newValue = onInputChange(inputValue, actionMeta);
	    if (typeof newValue === 'string') return newValue;
	  }

	  return inputValue;
	} // ==============================
	// Scroll Helpers
	// ==============================


	function isDocumentElement(el) {
	  return [document.documentElement, document.body, window].indexOf(el) > -1;
	} // Normalized Scroll Top
	// ------------------------------


	function normalizedHeight(el) {
	  if (isDocumentElement(el)) {
	    return window.innerHeight;
	  }

	  return el.clientHeight;
	} // Normalized scrollTo & scrollTop
	// ------------------------------


	function getScrollTop(el) {
	  if (isDocumentElement(el)) {
	    return window.pageYOffset;
	  }

	  return el.scrollTop;
	}

	function scrollTo(el, top) {
	  // with a scroll distance, we perform scroll on the element
	  if (isDocumentElement(el)) {
	    window.scrollTo(0, top);
	    return;
	  }

	  el.scrollTop = top;
	} // Get Scroll Parent
	// ------------------------------


	function getScrollParent(element) {
	  var style = getComputedStyle(element);
	  var excludeStaticParent = style.position === 'absolute';
	  var overflowRx = /(auto|scroll)/;
	  var docEl = document.documentElement; // suck it, flow...

	  if (style.position === 'fixed') return docEl;

	  for (var parent = element; parent = parent.parentElement;) {
	    style = getComputedStyle(parent);

	    if (excludeStaticParent && style.position === 'static') {
	      continue;
	    }

	    if (overflowRx.test(style.overflow + style.overflowY + style.overflowX)) {
	      return parent;
	    }
	  }

	  return docEl;
	} // Animated Scroll To
	// ------------------------------

	/**
	  @param t: time (elapsed)
	  @param b: initial value
	  @param c: amount of change
	  @param d: duration
	*/


	function easeOutCubic(t, b, c, d) {
	  return c * ((t = t / d - 1) * t * t + 1) + b;
	}

	function animatedScrollTo(element, to) {
	  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;
	  var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop;
	  var start = getScrollTop(element);
	  var change = to - start;
	  var increment = 10;
	  var currentTime = 0;

	  function animateScroll() {
	    currentTime += increment;
	    var val = easeOutCubic(currentTime, start, change, duration);
	    scrollTo(element, val);

	    if (currentTime < duration) {
	      (0, _raf.default)(animateScroll);
	    } else {
	      callback(element);
	    }
	  }

	  animateScroll();
	} // Scroll Into View
	// ------------------------------


	function scrollIntoView(menuEl, focusedEl) {
	  var menuRect = menuEl.getBoundingClientRect();
	  var focusedRect = focusedEl.getBoundingClientRect();
	  var overScroll = focusedEl.offsetHeight / 3;

	  if (focusedRect.bottom + overScroll > menuRect.bottom) {
	    scrollTo(menuEl, Math.min(focusedEl.offsetTop + focusedEl.clientHeight - menuEl.offsetHeight + overScroll, menuEl.scrollHeight));
	  } else if (focusedRect.top - overScroll < menuRect.top) {
	    scrollTo(menuEl, Math.max(focusedEl.offsetTop - overScroll, 0));
	  }
	} // ==============================
	// Get bounding client object
	// ==============================
	// cannot get keys using array notation with DOMRect


	function getBoundingClientObj(element) {
	  var rect = element.getBoundingClientRect();
	  return {
	    bottom: rect.bottom,
	    height: rect.height,
	    left: rect.left,
	    right: rect.right,
	    top: rect.top,
	    width: rect.width
	  };
	}

	// ==============================
	// String to Key (kebabify)
	// ==============================
	function toKey(str) {
	  return str.replace(/\W/g, '-');
	} // ==============================
	// Touch Capability Detector
	// ==============================


	function isTouchCapable() {
	  try {
	    document.createEvent('TouchEvent');
	    return true;
	  } catch (e) {
	    return false;
	  }
	} // ==============================
	// Mobile Device Detector
	// ==============================


	function isMobileDevice() {
	  try {
	    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
	  } catch (e) {
	    return false;
	  }
	}
	});

	unwrapExports(utils);
	var utils_1 = utils.classNames;
	var utils_2 = utils.handleInputChange;
	var utils_3 = utils.isDocumentElement;
	var utils_4 = utils.normalizedHeight;
	var utils_5 = utils.getScrollTop;
	var utils_6 = utils.scrollTo;
	var utils_7 = utils.getScrollParent;
	var utils_8 = utils.animatedScrollTo;
	var utils_9 = utils.scrollIntoView;
	var utils_10 = utils.getBoundingClientObj;
	var utils_11 = utils.toKey;
	var utils_12 = utils.isTouchCapable;
	var utils_13 = utils.isMobileDevice;
	var utils_14 = utils.cleanValue;
	var utils_15 = utils.emptyString;
	var utils_16 = utils.noop;

	var Menu_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getMenuPlacement = getMenuPlacement;
	exports.MenuPortal = exports.menuPortalCSS = exports.LoadingMessage = exports.NoOptionsMessage = exports.loadingMessageCSS = exports.noOptionsMessageCSS = exports.MenuList = exports.menuListCSS = exports.default = exports.MenuPlacer = exports.menuCSS = void 0;

	var _react = _interopRequireWildcard(React__default);





	var _propTypes = _interopRequireDefault(PropTypes$1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function getMenuPlacement(_ref) {
	  var maxHeight = _ref.maxHeight,
	      menuEl = _ref.menuEl,
	      minHeight = _ref.minHeight,
	      placement = _ref.placement,
	      shouldScroll = _ref.shouldScroll,
	      isFixedPosition = _ref.isFixedPosition,
	      theme = _ref.theme;
	  var spacing = theme.spacing;
	  var scrollParent = (0, utils.getScrollParent)(menuEl);
	  var defaultState = {
	    placement: 'bottom',
	    maxHeight: maxHeight
	  }; // something went wrong, return default state

	  if (!menuEl || !menuEl.offsetParent) return defaultState; // we can't trust `scrollParent.scrollHeight` --> it may increase when
	  // the menu is rendered

	  var _scrollParent$getBoun = scrollParent.getBoundingClientRect(),
	      scrollHeight = _scrollParent$getBoun.height;

	  var _menuEl$getBoundingCl = menuEl.getBoundingClientRect(),
	      menuBottom = _menuEl$getBoundingCl.bottom,
	      menuHeight = _menuEl$getBoundingCl.height,
	      menuTop = _menuEl$getBoundingCl.top;

	  var _menuEl$offsetParent$ = menuEl.offsetParent.getBoundingClientRect(),
	      containerTop = _menuEl$offsetParent$.top;

	  var viewHeight = window.innerHeight;
	  var scrollTop = (0, utils.getScrollTop)(scrollParent);
	  var marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10);
	  var marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10);
	  var viewSpaceAbove = containerTop - marginTop;
	  var viewSpaceBelow = viewHeight - menuTop;
	  var scrollSpaceAbove = viewSpaceAbove + scrollTop;
	  var scrollSpaceBelow = scrollHeight - scrollTop - menuTop;
	  var scrollDown = menuBottom - viewHeight + scrollTop + marginBottom;
	  var scrollUp = scrollTop + menuTop - marginTop;
	  var scrollDuration = 160;

	  switch (placement) {
	    case 'auto':
	    case 'bottom':
	      // 1: the menu will fit, do nothing
	      if (viewSpaceBelow >= menuHeight) {
	        return {
	          placement: 'bottom',
	          maxHeight: maxHeight
	        };
	      } // 2: the menu will fit, if scrolled


	      if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {
	        if (shouldScroll) {
	          (0, utils.animatedScrollTo)(scrollParent, scrollDown, scrollDuration);
	        }

	        return {
	          placement: 'bottom',
	          maxHeight: maxHeight
	        };
	      } // 3: the menu will fit, if constrained


	      if (!isFixedPosition && scrollSpaceBelow >= minHeight || isFixedPosition && viewSpaceBelow >= minHeight) {
	        if (shouldScroll) {
	          (0, utils.animatedScrollTo)(scrollParent, scrollDown, scrollDuration);
	        } // we want to provide as much of the menu as possible to the user,
	        // so give them whatever is available below rather than the minHeight.


	        var constrainedHeight = isFixedPosition ? viewSpaceBelow - marginBottom : scrollSpaceBelow - marginBottom;
	        return {
	          placement: 'bottom',
	          maxHeight: constrainedHeight
	        };
	      } // 4. Forked beviour when there isn't enough space below
	      // AUTO: flip the menu, render above


	      if (placement === 'auto' || isFixedPosition) {
	        // may need to be constrained after flipping
	        var _constrainedHeight = maxHeight;
	        var spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove;

	        if (spaceAbove >= minHeight) {
	          _constrainedHeight = Math.min(spaceAbove - marginBottom - spacing.controlHeight, maxHeight);
	        }

	        return {
	          placement: 'top',
	          maxHeight: _constrainedHeight
	        };
	      } // BOTTOM: allow browser to increase scrollable area and immediately set scroll


	      if (placement === 'bottom') {
	        (0, utils.scrollTo)(scrollParent, scrollDown);
	        return {
	          placement: 'bottom',
	          maxHeight: maxHeight
	        };
	      }

	      break;

	    case 'top':
	      // 1: the menu will fit, do nothing
	      if (viewSpaceAbove >= menuHeight) {
	        return {
	          placement: 'top',
	          maxHeight: maxHeight
	        };
	      } // 2: the menu will fit, if scrolled


	      if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {
	        if (shouldScroll) {
	          (0, utils.animatedScrollTo)(scrollParent, scrollUp, scrollDuration);
	        }

	        return {
	          placement: 'top',
	          maxHeight: maxHeight
	        };
	      } // 3: the menu will fit, if constrained


	      if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
	        var _constrainedHeight2 = maxHeight; // we want to provide as much of the menu as possible to the user,
	        // so give them whatever is available below rather than the minHeight.

	        if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
	          _constrainedHeight2 = isFixedPosition ? viewSpaceAbove - marginTop : scrollSpaceAbove - marginTop;
	        }

	        if (shouldScroll) {
	          (0, utils.animatedScrollTo)(scrollParent, scrollUp, scrollDuration);
	        }

	        return {
	          placement: 'top',
	          maxHeight: _constrainedHeight2
	        };
	      } // 4. not enough space, the browser WILL NOT increase scrollable area when
	      // absolutely positioned element rendered above the viewport (only below).
	      // Flip the menu, render below


	      return {
	        placement: 'bottom',
	        maxHeight: maxHeight
	      };

	    default:
	      throw new Error("Invalid placement provided \"".concat(placement, "\"."));
	  } // fulfil contract with flow: implicit return value of undefined


	  return defaultState;
	} // Menu Component
	// ------------------------------


	function alignToControl(placement) {
	  var placementToCSSProp = {
	    bottom: 'top',
	    top: 'bottom'
	  };
	  return placement ? placementToCSSProp[placement] : 'bottom';
	}

	var coercePlacement = function coercePlacement(p) {
	  return p === 'auto' ? 'bottom' : p;
	};

	var menuCSS = function menuCSS(_ref2) {
	  var _ref3;

	  var placement = _ref2.placement,
	      _ref2$theme = _ref2.theme,
	      borderRadius = _ref2$theme.borderRadius,
	      spacing = _ref2$theme.spacing,
	      colors = _ref2$theme.colors;
	  return _ref3 = {
	    label: 'menu'
	  }, _defineProperty(_ref3, alignToControl(placement), '100%'), _defineProperty(_ref3, "backgroundColor", colors.neutral0), _defineProperty(_ref3, "borderRadius", borderRadius), _defineProperty(_ref3, "boxShadow", '0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)'), _defineProperty(_ref3, "marginBottom", spacing.menuGutter), _defineProperty(_ref3, "marginTop", spacing.menuGutter), _defineProperty(_ref3, "position", 'absolute'), _defineProperty(_ref3, "width", '100%'), _defineProperty(_ref3, "zIndex", 1), _ref3;
	}; // NOTE: internal only


	exports.menuCSS = menuCSS;

	var MenuPlacer =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(MenuPlacer, _Component);

	  function MenuPlacer() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck(this, MenuPlacer);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MenuPlacer)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
	      maxHeight: _this.props.maxMenuHeight,
	      placement: null
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getPlacement", function (ref) {
	      var _this$props = _this.props,
	          minMenuHeight = _this$props.minMenuHeight,
	          maxMenuHeight = _this$props.maxMenuHeight,
	          menuPlacement = _this$props.menuPlacement,
	          menuPosition = _this$props.menuPosition,
	          menuShouldScrollIntoView = _this$props.menuShouldScrollIntoView,
	          theme = _this$props.theme;
	      var getPortalPlacement = _this.context.getPortalPlacement;
	      if (!ref) return; // DO NOT scroll if position is fixed

	      var isFixedPosition = menuPosition === 'fixed';
	      var shouldScroll = menuShouldScrollIntoView && !isFixedPosition;
	      var state = getMenuPlacement({
	        maxHeight: maxMenuHeight,
	        menuEl: ref,
	        minHeight: minMenuHeight,
	        placement: menuPlacement,
	        shouldScroll: shouldScroll,
	        isFixedPosition: isFixedPosition,
	        theme: theme
	      });
	      if (getPortalPlacement) getPortalPlacement(state);

	      _this.setState(state);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getUpdatedProps", function () {
	      var menuPlacement = _this.props.menuPlacement;
	      var placement = _this.state.placement || coercePlacement(menuPlacement);
	      return _objectSpread({}, _this.props, {
	        placement: placement,
	        maxHeight: _this.state.maxHeight
	      });
	    });

	    return _this;
	  }

	  _createClass(MenuPlacer, [{
	    key: "render",
	    value: function render() {
	      var children = this.props.children;
	      return children({
	        ref: this.getPlacement,
	        placerProps: this.getUpdatedProps()
	      });
	    }
	  }]);

	  return MenuPlacer;
	}(_react.Component);

	exports.MenuPlacer = MenuPlacer;

	_defineProperty(MenuPlacer, "contextTypes", {
	  getPortalPlacement: _propTypes.default.func
	});

	var Menu = function Menu(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerRef = props.innerRef,
	      innerProps = props.innerProps;
	  var cn = cx(
	  /*#__PURE__*/
	  (0, index_esm.css)(getStyles('menu', props)), {
	    menu: true
	  }, className);
	  return _react.default.createElement("div", _extends({
	    className: cn
	  }, innerProps, {
	    ref: innerRef
	  }), children);
	};

	var _default = Menu; // ==============================
	// Menu List
	// ==============================

	exports.default = _default;

	var menuListCSS = function menuListCSS(_ref4) {
	  var maxHeight = _ref4.maxHeight,
	      baseUnit = _ref4.theme.spacing.baseUnit;
	  return {
	    maxHeight: maxHeight,
	    overflowY: 'auto',
	    paddingBottom: baseUnit,
	    paddingTop: baseUnit,
	    position: 'relative',
	    // required for offset[Height, Top] > keyboard scroll
	    WebkitOverflowScrolling: 'touch'
	  };
	};

	exports.menuListCSS = menuListCSS;

	var MenuList = function MenuList(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      isMulti = props.isMulti,
	      innerRef = props.innerRef;
	  return _react.default.createElement("div", {
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('menuList', props)), {
	      'menu-list': true,
	      'menu-list--is-multi': isMulti
	    }, className),
	    ref: innerRef
	  }, children);
	}; // ==============================
	// Menu Notices
	// ==============================


	exports.MenuList = MenuList;

	var noticeCSS = function noticeCSS(_ref5) {
	  var _ref5$theme = _ref5.theme,
	      baseUnit = _ref5$theme.spacing.baseUnit,
	      colors = _ref5$theme.colors;
	  return {
	    color: colors.neutral40,
	    padding: "".concat(baseUnit * 2, "px ").concat(baseUnit * 3, "px"),
	    textAlign: 'center'
	  };
	};

	var noOptionsMessageCSS = noticeCSS;
	exports.noOptionsMessageCSS = noOptionsMessageCSS;
	var loadingMessageCSS = noticeCSS;
	exports.loadingMessageCSS = loadingMessageCSS;

	var NoOptionsMessage = function NoOptionsMessage(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps;
	  return _react.default.createElement("div", _extends({
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('noOptionsMessage', props)), {
	      'menu-notice': true,
	      'menu-notice--no-options': true
	    }, className)
	  }, innerProps), children);
	};

	exports.NoOptionsMessage = NoOptionsMessage;
	NoOptionsMessage.defaultProps = {
	  children: 'No options'
	};

	var LoadingMessage = function LoadingMessage(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps;
	  return _react.default.createElement("div", _extends({
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('loadingMessage', props)), {
	      'menu-notice': true,
	      'menu-notice--loading': true
	    }, className)
	  }, innerProps), children);
	};

	exports.LoadingMessage = LoadingMessage;
	LoadingMessage.defaultProps = {
	  children: 'Loading...'
	}; // ==============================
	// Menu Portal
	// ==============================

	var menuPortalCSS = function menuPortalCSS(_ref6) {
	  var rect = _ref6.rect,
	      offset = _ref6.offset,
	      position = _ref6.position;
	  return {
	    left: rect.left,
	    position: position,
	    top: offset,
	    width: rect.width,
	    zIndex: 1
	  };
	};

	exports.menuPortalCSS = menuPortalCSS;

	var MenuPortal =
	/*#__PURE__*/
	function (_Component2) {
	  _inherits(MenuPortal, _Component2);

	  function MenuPortal() {
	    var _getPrototypeOf3;

	    var _this2;

	    _classCallCheck(this, MenuPortal);

	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    _this2 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(MenuPortal)).call.apply(_getPrototypeOf3, [this].concat(args)));

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "state", {
	      placement: null
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "getPortalPlacement", function (_ref7) {
	      var placement = _ref7.placement;
	      var initialPlacement = coercePlacement(_this2.props.menuPlacement); // avoid re-renders if the placement has not changed

	      if (placement !== initialPlacement) {
	        _this2.setState({
	          placement: placement
	        });
	      }
	    });

	    return _this2;
	  }

	  _createClass(MenuPortal, [{
	    key: "getChildContext",
	    value: function getChildContext() {
	      return {
	        getPortalPlacement: this.getPortalPlacement
	      };
	    } // callback for occassions where the menu must "flip"

	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          appendTo = _this$props2.appendTo,
	          children = _this$props2.children,
	          controlElement = _this$props2.controlElement,
	          menuPlacement = _this$props2.menuPlacement,
	          position = _this$props2.menuPosition,
	          getStyles = _this$props2.getStyles;
	      var isFixed = position === 'fixed'; // bail early if required elements aren't present

	      if (!appendTo && !isFixed || !controlElement) {
	        return null;
	      }

	      var placement = this.state.placement || coercePlacement(menuPlacement);
	      var rect = (0, utils.getBoundingClientObj)(controlElement);
	      var scrollDistance = isFixed ? 0 : window.pageYOffset;
	      var offset = rect[placement] + scrollDistance;
	      var state = {
	        offset: offset,
	        position: position,
	        rect: rect
	      }; // same wrapper element whether fixed or portalled

	      var menuWrapper = _react.default.createElement("div", {
	        className:
	        /*#__PURE__*/

	        /*#__PURE__*/
	        (0, index_esm.css)(getStyles('menuPortal', state))
	      }, children);

	      return appendTo ? (0, reactDom__default.createPortal)(menuWrapper, appendTo) : menuWrapper;
	    }
	  }]);

	  return MenuPortal;
	}(_react.Component);

	exports.MenuPortal = MenuPortal;

	_defineProperty(MenuPortal, "childContextTypes", {
	  getPortalPlacement: _propTypes.default.func
	});
	});

	unwrapExports(Menu_1);
	var Menu_2 = Menu_1.getMenuPlacement;
	var Menu_3 = Menu_1.MenuPortal;
	var Menu_4 = Menu_1.menuPortalCSS;
	var Menu_5 = Menu_1.LoadingMessage;
	var Menu_6 = Menu_1.NoOptionsMessage;
	var Menu_7 = Menu_1.loadingMessageCSS;
	var Menu_8 = Menu_1.noOptionsMessageCSS;
	var Menu_9 = Menu_1.MenuList;
	var Menu_10 = Menu_1.menuListCSS;
	var Menu_11 = Menu_1.MenuPlacer;
	var Menu_12 = Menu_1.menuCSS;

	var reactFastCompare = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exportedEqual;

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	var isArray = Array.isArray;
	var keyList = Object.keys;
	var hasProp = Object.prototype.hasOwnProperty;

	function equal(a, b) {
	  // fast-deep-equal index.js 2.0.1
	  if (a === b) return true;

	  if (a && b && _typeof(a) == 'object' && _typeof(b) == 'object') {
	    var arrA = isArray(a),
	        arrB = isArray(b),
	        i,
	        length,
	        key;

	    if (arrA && arrB) {
	      length = a.length;
	      if (length != b.length) return false;

	      for (i = length; i-- !== 0;) {
	        if (!equal(a[i], b[i])) return false;
	      }

	      return true;
	    }

	    if (arrA != arrB) return false;
	    var dateA = a instanceof Date,
	        dateB = b instanceof Date;
	    if (dateA != dateB) return false;
	    if (dateA && dateB) return a.getTime() == b.getTime();
	    var regexpA = a instanceof RegExp,
	        regexpB = b instanceof RegExp;
	    if (regexpA != regexpB) return false;
	    if (regexpA && regexpB) return a.toString() == b.toString();
	    var keys = keyList(a);
	    length = keys.length;

	    if (length !== keyList(b).length) {
	      return false;
	    }

	    for (i = length; i-- !== 0;) {
	      if (!hasProp.call(b, keys[i])) return false;
	    } // end fast-deep-equal
	    // Custom handling for React


	    for (i = length; i-- !== 0;) {
	      key = keys[i];

	      if (key === '_owner' && a.$$typeof) {
	        // React-specific: avoid traversing React elements' _owner.
	        //  _owner contains circular references
	        // and is not needed when comparing the actual elements (and not their owners)
	        // .$$typeof and ._store on just reasonable markers of a react element
	        continue;
	      } else {
	        // all other properties should be traversed as usual
	        if (!equal(a[key], b[key])) return false;
	      }
	    } // fast-deep-equal index.js 2.0.1


	    return true;
	  }

	  return a !== a && b !== b;
	} // end fast-deep-equal


	function exportedEqual(a, b) {
	  try {
	    return equal(a, b);
	  } catch (error) {
	    if (error.message && error.message.match(/stack|recursion/i)) {
	      // warn on circular references, don't crash
	      // browsers give this different errors name and messages:
	      // chrome/safari: "RangeError", "Maximum call stack size exceeded"
	      // firefox: "InternalError", too much recursion"
	      // edge: "Error", "Out of stack space"
	      console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);
	      return false;
	    } // some other error. we should definitely know about these


	    throw error;
	  }
	}
	});

	unwrapExports(reactFastCompare);

	var diacritics_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.stripDiacritics = void 0;
	var diacritics = [{
	  base: 'A',
	  letters: /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g
	}, {
	  base: 'AA',
	  letters: /[\uA732]/g
	}, {
	  base: 'AE',
	  letters: /[\u00C6\u01FC\u01E2]/g
	}, {
	  base: 'AO',
	  letters: /[\uA734]/g
	}, {
	  base: 'AU',
	  letters: /[\uA736]/g
	}, {
	  base: 'AV',
	  letters: /[\uA738\uA73A]/g
	}, {
	  base: 'AY',
	  letters: /[\uA73C]/g
	}, {
	  base: 'B',
	  letters: /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g
	}, {
	  base: 'C',
	  letters: /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g
	}, {
	  base: 'D',
	  letters: /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g
	}, {
	  base: 'DZ',
	  letters: /[\u01F1\u01C4]/g
	}, {
	  base: 'Dz',
	  letters: /[\u01F2\u01C5]/g
	}, {
	  base: 'E',
	  letters: /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g
	}, {
	  base: 'F',
	  letters: /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g
	}, {
	  base: 'G',
	  letters: /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g
	}, {
	  base: 'H',
	  letters: /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g
	}, {
	  base: 'I',
	  letters: /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g
	}, {
	  base: 'J',
	  letters: /[\u004A\u24BF\uFF2A\u0134\u0248]/g
	}, {
	  base: 'K',
	  letters: /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g
	}, {
	  base: 'L',
	  letters: /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g
	}, {
	  base: 'LJ',
	  letters: /[\u01C7]/g
	}, {
	  base: 'Lj',
	  letters: /[\u01C8]/g
	}, {
	  base: 'M',
	  letters: /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g
	}, {
	  base: 'N',
	  letters: /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g
	}, {
	  base: 'NJ',
	  letters: /[\u01CA]/g
	}, {
	  base: 'Nj',
	  letters: /[\u01CB]/g
	}, {
	  base: 'O',
	  letters: /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g
	}, {
	  base: 'OI',
	  letters: /[\u01A2]/g
	}, {
	  base: 'OO',
	  letters: /[\uA74E]/g
	}, {
	  base: 'OU',
	  letters: /[\u0222]/g
	}, {
	  base: 'P',
	  letters: /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g
	}, {
	  base: 'Q',
	  letters: /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g
	}, {
	  base: 'R',
	  letters: /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g
	}, {
	  base: 'S',
	  letters: /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g
	}, {
	  base: 'T',
	  letters: /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g
	}, {
	  base: 'TZ',
	  letters: /[\uA728]/g
	}, {
	  base: 'U',
	  letters: /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g
	}, {
	  base: 'V',
	  letters: /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g
	}, {
	  base: 'VY',
	  letters: /[\uA760]/g
	}, {
	  base: 'W',
	  letters: /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g
	}, {
	  base: 'X',
	  letters: /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g
	}, {
	  base: 'Y',
	  letters: /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g
	}, {
	  base: 'Z',
	  letters: /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g
	}, {
	  base: 'a',
	  letters: /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g
	}, {
	  base: 'aa',
	  letters: /[\uA733]/g
	}, {
	  base: 'ae',
	  letters: /[\u00E6\u01FD\u01E3]/g
	}, {
	  base: 'ao',
	  letters: /[\uA735]/g
	}, {
	  base: 'au',
	  letters: /[\uA737]/g
	}, {
	  base: 'av',
	  letters: /[\uA739\uA73B]/g
	}, {
	  base: 'ay',
	  letters: /[\uA73D]/g
	}, {
	  base: 'b',
	  letters: /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g
	}, {
	  base: 'c',
	  letters: /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g
	}, {
	  base: 'd',
	  letters: /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g
	}, {
	  base: 'dz',
	  letters: /[\u01F3\u01C6]/g
	}, {
	  base: 'e',
	  letters: /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g
	}, {
	  base: 'f',
	  letters: /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g
	}, {
	  base: 'g',
	  letters: /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g
	}, {
	  base: 'h',
	  letters: /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g
	}, {
	  base: 'hv',
	  letters: /[\u0195]/g
	}, {
	  base: 'i',
	  letters: /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g
	}, {
	  base: 'j',
	  letters: /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g
	}, {
	  base: 'k',
	  letters: /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g
	}, {
	  base: 'l',
	  letters: /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g
	}, {
	  base: 'lj',
	  letters: /[\u01C9]/g
	}, {
	  base: 'm',
	  letters: /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g
	}, {
	  base: 'n',
	  letters: /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g
	}, {
	  base: 'nj',
	  letters: /[\u01CC]/g
	}, {
	  base: 'o',
	  letters: /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g
	}, {
	  base: 'oi',
	  letters: /[\u01A3]/g
	}, {
	  base: 'ou',
	  letters: /[\u0223]/g
	}, {
	  base: 'oo',
	  letters: /[\uA74F]/g
	}, {
	  base: 'p',
	  letters: /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g
	}, {
	  base: 'q',
	  letters: /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g
	}, {
	  base: 'r',
	  letters: /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g
	}, {
	  base: 's',
	  letters: /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g
	}, {
	  base: 't',
	  letters: /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g
	}, {
	  base: 'tz',
	  letters: /[\uA729]/g
	}, {
	  base: 'u',
	  letters: /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g
	}, {
	  base: 'v',
	  letters: /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g
	}, {
	  base: 'vy',
	  letters: /[\uA761]/g
	}, {
	  base: 'w',
	  letters: /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g
	}, {
	  base: 'x',
	  letters: /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g
	}, {
	  base: 'y',
	  letters: /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g
	}, {
	  base: 'z',
	  letters: /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g
	}];

	var stripDiacritics = function stripDiacritics(str) {
	  for (var i = 0; i < diacritics.length; i++) {
	    str = str.replace(diacritics[i].letters, diacritics[i].base);
	  }

	  return str;
	};

	exports.stripDiacritics = stripDiacritics;
	});

	unwrapExports(diacritics_1);
	var diacritics_2 = diacritics_1.stripDiacritics;

	var filters = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.createFilter = void 0;



	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var trimString = function trimString(str) {
	  return str.replace(/^\s+|\s+$/g, '');
	};

	var defaultStringify = function defaultStringify(option) {
	  return "".concat(option.label, " ").concat(option.value);
	};

	var createFilter = function createFilter(config) {
	  return function (option, rawInput) {
	    var _ignoreCase$ignoreAcc = _objectSpread({
	      ignoreCase: true,
	      ignoreAccents: true,
	      stringify: defaultStringify,
	      trim: true,
	      matchFrom: 'any'
	    }, config),
	        ignoreCase = _ignoreCase$ignoreAcc.ignoreCase,
	        ignoreAccents = _ignoreCase$ignoreAcc.ignoreAccents,
	        stringify = _ignoreCase$ignoreAcc.stringify,
	        trim = _ignoreCase$ignoreAcc.trim,
	        matchFrom = _ignoreCase$ignoreAcc.matchFrom;

	    var input = trim ? trimString(rawInput) : rawInput;
	    var candidate = trim ? trimString(stringify(option)) : stringify(option);

	    if (ignoreCase) {
	      input = input.toLowerCase();
	      candidate = candidate.toLowerCase();
	    }

	    if (ignoreAccents) {
	      input = (0, diacritics_1.stripDiacritics)(input);
	      candidate = (0, diacritics_1.stripDiacritics)(candidate);
	    }

	    return matchFrom === 'start' ? candidate.substr(0, input.length) === input : candidate.indexOf(input) > -1;
	  };
	};

	exports.createFilter = createFilter;
	});

	unwrapExports(filters);
	var filters_1 = filters.createFilter;

	var A11yText_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _react = _interopRequireDefault(React__default);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	// Assistive text to describe visual elements. Hidden for sighted users.
	var A11yText = function A11yText(props) {
	  return _react.default.createElement("span", _extends({
	    className:
	    /*#__PURE__*/

	    /*#__PURE__*/
	    (0, index_esm.css)({
	      label: 'a11yText',
	      zIndex: 9999,
	      border: 0,
	      clip: 'rect(1px, 1px, 1px, 1px)',
	      height: 1,
	      width: 1,
	      position: 'absolute',
	      overflow: 'hidden',
	      padding: 0,
	      whiteSpace: 'nowrap',
	      backgroundColor: 'red',
	      color: 'blue'
	    })
	  }, props));
	};

	var _default = A11yText;
	exports.default = _default;
	});

	unwrapExports(A11yText_1);

	var DummyInput_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _react = _interopRequireWildcard(React__default);



	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var DummyInput =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(DummyInput, _Component);

	  function DummyInput() {
	    _classCallCheck(this, DummyInput);

	    return _possibleConstructorReturn(this, _getPrototypeOf(DummyInput).apply(this, arguments));
	  }

	  _createClass(DummyInput, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          inProp = _this$props.in,
	          out = _this$props.out,
	          onExited = _this$props.onExited,
	          appear = _this$props.appear,
	          enter = _this$props.enter,
	          exit = _this$props.exit,
	          innerRef = _this$props.innerRef,
	          emotion = _this$props.emotion,
	          props = _objectWithoutProperties(_this$props, ["in", "out", "onExited", "appear", "enter", "exit", "innerRef", "emotion"]);

	      return _react.default.createElement("input", _extends({
	        ref: innerRef
	      }, props, {
	        className:
	        /*#__PURE__*/

	        /*#__PURE__*/
	        (0, index_esm.css)({
	          label: 'dummyInput',
	          // get rid of any default styles
	          background: 0,
	          border: 0,
	          fontSize: 'inherit',
	          outline: 0,
	          padding: 0,
	          // important! without `width` browsers won't allow focus
	          width: 1,
	          // remove cursor on desktop
	          color: 'transparent',
	          // remove cursor on mobile whilst maintaining "scroll into view" behaviour
	          left: -100,
	          opacity: 0,
	          position: 'relative',
	          transform: 'scale(0)'
	        })
	      }));
	    }
	  }]);

	  return DummyInput;
	}(_react.Component);

	exports.default = DummyInput;
	});

	unwrapExports(DummyInput_1);

	var NodeResolver_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;





	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var NodeResolver =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(NodeResolver, _Component);

	  function NodeResolver() {
	    _classCallCheck(this, NodeResolver);

	    return _possibleConstructorReturn(this, _getPrototypeOf(NodeResolver).apply(this, arguments));
	  }

	  _createClass(NodeResolver, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.props.innerRef((0, reactDom__default.findDOMNode)(this));
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.props.innerRef(null);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return this.props.children;
	    }
	  }]);

	  return NodeResolver;
	}(React__default.Component);

	exports.default = NodeResolver;
	});

	unwrapExports(NodeResolver_1);

	var constants = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.LOCK_STYLES = exports.STYLE_KEYS = void 0;
	var STYLE_KEYS = ['boxSizing', 'height', 'overflow', 'paddingRight', 'position'];
	exports.STYLE_KEYS = STYLE_KEYS;
	var LOCK_STYLES = {
	  boxSizing: 'border-box',
	  // account for possible declaration `width: 100%;` on body
	  overflow: 'hidden',
	  position: 'relative',
	  height: '100%'
	};
	exports.LOCK_STYLES = LOCK_STYLES;
	});

	unwrapExports(constants);
	var constants_1 = constants.LOCK_STYLES;
	var constants_2 = constants.STYLE_KEYS;

	var utils$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.preventTouchMove = preventTouchMove;
	exports.allowTouchMove = allowTouchMove;
	exports.preventInertiaScroll = preventInertiaScroll;
	exports.isTouchDevice = isTouchDevice;

	function preventTouchMove(e) {
	  e.preventDefault();
	}

	function allowTouchMove(e) {
	  e.stopPropagation();
	}

	function preventInertiaScroll() {
	  var top = this.scrollTop;
	  var totalScroll = this.scrollHeight;
	  var currentScroll = top + this.offsetHeight;

	  if (top === 0) {
	    this.scrollTop = 1;
	  } else if (currentScroll === totalScroll) {
	    this.scrollTop = top - 1;
	  }
	} // `ontouchstart` check works on most browsers
	// `maxTouchPoints` works on IE10/11 and Surface


	function isTouchDevice() {
	  return 'ontouchstart' in window || navigator.maxTouchPoints;
	}
	});

	unwrapExports(utils$1);
	var utils_1$1 = utils$1.preventTouchMove;
	var utils_2$1 = utils$1.allowTouchMove;
	var utils_3$1 = utils$1.preventInertiaScroll;
	var utils_4$1 = utils$1.isTouchDevice;

	var ScrollLock_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;







	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	var activeScrollLocks = 0;

	var ScrollLock =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(ScrollLock, _Component);

	  function ScrollLock() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck(this, ScrollLock);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScrollLock)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "originalStyles", {});

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "listenerOptions", {
	      capture: false,
	      passive: false
	    });

	    return _this;
	  }

	  _createClass(ScrollLock, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var _this2 = this;

	      if (!canUseDOM) return;
	      var _this$props = this.props,
	          accountForScrollbars = _this$props.accountForScrollbars,
	          touchScrollTarget = _this$props.touchScrollTarget;
	      var target = document.body;
	      var targetStyle = target && target.style;

	      if (accountForScrollbars) {
	        // store any styles already applied to the body
	        constants.STYLE_KEYS.forEach(function (key) {
	          var val = targetStyle && targetStyle[key];
	          _this2.originalStyles[key] = val;
	        });
	      } // apply the lock styles and padding if this is the first scroll lock


	      if (accountForScrollbars && activeScrollLocks < 1) {
	        var currentPadding = parseInt(this.originalStyles.paddingRight, 10) || 0;
	        var clientWidth = document.body ? document.body.clientWidth : 0;
	        var adjustedPadding = window.innerWidth - clientWidth + currentPadding || 0;
	        Object.keys(constants.LOCK_STYLES).forEach(function (key) {
	          var val = constants.LOCK_STYLES[key];

	          if (targetStyle) {
	            targetStyle[key] = val;
	          }
	        });

	        if (targetStyle) {
	          targetStyle.paddingRight = "".concat(adjustedPadding, "px");
	        }
	      } // account for touch devices


	      if (target && (0, utils$1.isTouchDevice)()) {
	        // Mobile Safari ignores { overflow: hidden } declaration on the body.
	        target.addEventListener('touchmove', utils$1.preventTouchMove, this.listenerOptions); // Allow scroll on provided target

	        if (touchScrollTarget) {
	          touchScrollTarget.addEventListener('touchstart', utils$1.preventInertiaScroll, this.listenerOptions);
	          touchScrollTarget.addEventListener('touchmove', utils$1.allowTouchMove, this.listenerOptions);
	        }
	      } // increment active scroll locks


	      activeScrollLocks += 1;
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      var _this3 = this;

	      if (!canUseDOM) return;
	      var _this$props2 = this.props,
	          accountForScrollbars = _this$props2.accountForScrollbars,
	          touchScrollTarget = _this$props2.touchScrollTarget;
	      var target = document.body;
	      var targetStyle = target && target.style; // safely decrement active scroll locks

	      activeScrollLocks = Math.max(activeScrollLocks - 1, 0); // reapply original body styles, if any

	      if (accountForScrollbars && activeScrollLocks < 1) {
	        constants.STYLE_KEYS.forEach(function (key) {
	          var val = _this3.originalStyles[key];

	          if (targetStyle) {
	            targetStyle[key] = val;
	          }
	        });
	      } // remove touch listeners


	      if (target && (0, utils$1.isTouchDevice)()) {
	        target.removeEventListener('touchmove', utils$1.preventTouchMove, this.listenerOptions);

	        if (touchScrollTarget) {
	          touchScrollTarget.removeEventListener('touchstart', utils$1.preventInertiaScroll, this.listenerOptions);
	          touchScrollTarget.removeEventListener('touchmove', utils$1.allowTouchMove, this.listenerOptions);
	        }
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return null;
	    }
	  }]);

	  return ScrollLock;
	}(React__default.Component);

	exports.default = ScrollLock;

	_defineProperty(ScrollLock, "defaultProps", {
	  accountForScrollbars: true
	});
	});

	unwrapExports(ScrollLock_1);

	var ScrollBlock_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _react = _interopRequireWildcard(React__default);



	var _NodeResolver = _interopRequireDefault(NodeResolver_1);

	var _index = _interopRequireDefault(ScrollLock_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	// NOTE:
	// We shouldn't need this after updating to React v16.3.0, which introduces:
	// - createRef() https://reactjs.org/docs/react-api.html#reactcreateref
	// - forwardRef() https://reactjs.org/docs/react-api.html#reactforwardref
	var ScrollBlock =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits(ScrollBlock, _PureComponent);

	  function ScrollBlock() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck(this, ScrollBlock);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScrollBlock)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
	      touchScrollTarget: null
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getScrollTarget", function (ref) {
	      if (ref === _this.state.touchScrollTarget) return;

	      _this.setState({
	        touchScrollTarget: ref
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "blurSelectInput", function () {
	      if (document.activeElement) {
	        document.activeElement.blur();
	      }
	    });

	    return _this;
	  }

	  _createClass(ScrollBlock, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          children = _this$props.children,
	          isEnabled = _this$props.isEnabled;
	      var touchScrollTarget = this.state.touchScrollTarget; // bail early if not enabled

	      if (!isEnabled) return children;
	      /*
	       * Div
	       * ------------------------------
	       * blocks scrolling on non-body elements behind the menu
	        * NodeResolver
	       * ------------------------------
	       * we need a reference to the scrollable element to "unlock" scroll on
	       * mobile devices
	        * ScrollLock
	       * ------------------------------
	       * actually does the scroll locking
	       */

	      return _react.default.createElement("div", null, _react.default.createElement("div", {
	        onClick: this.blurSelectInput,
	        className:
	        /*#__PURE__*/

	        /*#__PURE__*/
	        (0, index_esm.css)({
	          position: 'fixed',
	          left: 0,
	          bottom: 0,
	          right: 0,
	          top: 0
	        })
	      }), _react.default.createElement(_NodeResolver.default, {
	        innerRef: this.getScrollTarget
	      }, children), touchScrollTarget ? _react.default.createElement(_index.default, {
	        touchScrollTarget: touchScrollTarget
	      }) : null);
	    }
	  }]);

	  return ScrollBlock;
	}(_react.PureComponent);

	exports.default = ScrollBlock;
	});

	unwrapExports(ScrollBlock_1);

	var ScrollCaptor_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _react = _interopRequireWildcard(React__default);

	var _NodeResolver = _interopRequireDefault(NodeResolver_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var ScrollCaptor =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(ScrollCaptor, _Component);

	  function ScrollCaptor() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck(this, ScrollCaptor);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScrollCaptor)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isBottom", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isTop", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "scrollTarget", void 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "touchStart", void 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "cancelScroll", function (event) {
	      event.preventDefault();
	      event.stopPropagation();
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleEventDelta", function (event, delta) {
	      var _this$props = _this.props,
	          onBottomArrive = _this$props.onBottomArrive,
	          onBottomLeave = _this$props.onBottomLeave,
	          onTopArrive = _this$props.onTopArrive,
	          onTopLeave = _this$props.onTopLeave;
	      var _this$scrollTarget = _this.scrollTarget,
	          scrollTop = _this$scrollTarget.scrollTop,
	          scrollHeight = _this$scrollTarget.scrollHeight,
	          clientHeight = _this$scrollTarget.clientHeight;
	      var target = _this.scrollTarget;
	      var isDeltaPositive = delta > 0;
	      var availableScroll = scrollHeight - clientHeight - scrollTop;
	      var shouldCancelScroll = false; // reset bottom/top flags

	      if (availableScroll > delta && _this.isBottom) {
	        if (onBottomLeave) onBottomLeave(event);
	        _this.isBottom = false;
	      }

	      if (isDeltaPositive && _this.isTop) {
	        if (onTopLeave) onTopLeave(event);
	        _this.isTop = false;
	      } // bottom limit


	      if (isDeltaPositive && delta > availableScroll) {
	        if (onBottomArrive && !_this.isBottom) {
	          onBottomArrive(event);
	        }

	        target.scrollTop = scrollHeight;
	        shouldCancelScroll = true;
	        _this.isBottom = true; // top limit
	      } else if (!isDeltaPositive && -delta > scrollTop) {
	        if (onTopArrive && !_this.isTop) {
	          onTopArrive(event);
	        }

	        target.scrollTop = 0;
	        shouldCancelScroll = true;
	        _this.isTop = true;
	      } // cancel scroll


	      if (shouldCancelScroll) {
	        _this.cancelScroll(event);
	      }
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onWheel", function (event) {
	      _this.handleEventDelta(event, event.deltaY);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTouchStart", function (event) {
	      // set touch start so we can calculate touchmove delta
	      _this.touchStart = event.changedTouches[0].clientY;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTouchMove", function (event) {
	      var deltaY = _this.touchStart - event.changedTouches[0].clientY;

	      _this.handleEventDelta(event, deltaY);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getScrollTarget", function (ref) {
	      _this.scrollTarget = ref;
	    });

	    return _this;
	  }

	  _createClass(ScrollCaptor, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.startListening(this.scrollTarget);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.stopListening(this.scrollTarget);
	    }
	  }, {
	    key: "startListening",
	    value: function startListening(el) {
	      // bail early if no scroll available
	      if (!el) return;
	      if (el.scrollHeight <= el.clientHeight) return; // all the if statements are to appease Flow 😢

	      if (typeof el.addEventListener === 'function') {
	        el.addEventListener('wheel', this.onWheel, false);
	      }

	      if (typeof el.addEventListener === 'function') {
	        el.addEventListener('touchstart', this.onTouchStart, false);
	      }

	      if (typeof el.addEventListener === 'function') {
	        el.addEventListener('touchmove', this.onTouchMove, false);
	      }
	    }
	  }, {
	    key: "stopListening",
	    value: function stopListening(el) {
	      // bail early if no scroll available
	      if (el.scrollHeight <= el.clientHeight) return; // all the if statements are to appease Flow 😢

	      if (typeof el.removeEventListener === 'function') {
	        el.removeEventListener('wheel', this.onWheel, false);
	      }

	      if (typeof el.removeEventListener === 'function') {
	        el.removeEventListener('touchstart', this.onTouchStart, false);
	      }

	      if (typeof el.removeEventListener === 'function') {
	        el.removeEventListener('touchmove', this.onTouchMove, false);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react.default.createElement(_NodeResolver.default, {
	        innerRef: this.getScrollTarget
	      }, this.props.children);
	    }
	  }]);

	  return ScrollCaptor;
	}(_react.Component);

	var ScrollCaptorSwitch =
	/*#__PURE__*/
	function (_Component2) {
	  _inherits(ScrollCaptorSwitch, _Component2);

	  function ScrollCaptorSwitch() {
	    _classCallCheck(this, ScrollCaptorSwitch);

	    return _possibleConstructorReturn(this, _getPrototypeOf(ScrollCaptorSwitch).apply(this, arguments));
	  }

	  _createClass(ScrollCaptorSwitch, [{
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          isEnabled = _this$props2.isEnabled,
	          props = _objectWithoutProperties(_this$props2, ["isEnabled"]);

	      return isEnabled ? _react.default.createElement(ScrollCaptor, props) : this.props.children;
	    }
	  }]);

	  return ScrollCaptorSwitch;
	}(_react.Component);

	exports.default = ScrollCaptorSwitch;

	_defineProperty(ScrollCaptorSwitch, "defaultProps", {
	  isEnabled: true
	});
	});

	unwrapExports(ScrollCaptor_1);

	var internal = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "A11yText", {
	  enumerable: true,
	  get: function get() {
	    return _A11yText.default;
	  }
	});
	Object.defineProperty(exports, "DummyInput", {
	  enumerable: true,
	  get: function get() {
	    return _DummyInput.default;
	  }
	});
	Object.defineProperty(exports, "NodeResolver", {
	  enumerable: true,
	  get: function get() {
	    return _NodeResolver.default;
	  }
	});
	Object.defineProperty(exports, "ScrollBlock", {
	  enumerable: true,
	  get: function get() {
	    return _ScrollBlock.default;
	  }
	});
	Object.defineProperty(exports, "ScrollCaptor", {
	  enumerable: true,
	  get: function get() {
	    return _ScrollCaptor.default;
	  }
	});

	var _A11yText = _interopRequireDefault(A11yText_1);

	var _DummyInput = _interopRequireDefault(DummyInput_1);

	var _NodeResolver = _interopRequireDefault(NodeResolver_1);

	var _ScrollBlock = _interopRequireDefault(ScrollBlock_1);

	var _ScrollCaptor = _interopRequireDefault(ScrollCaptor_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	unwrapExports(internal);

	var accessibility = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.resultsAriaMessage = exports.optionFocusAriaMessage = exports.valueFocusAriaMessage = exports.valueEventAriaMessage = exports.instructionsAriaMessage = void 0;

	var instructionsAriaMessage = function instructionsAriaMessage(event) {
	  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var isSearchable = context.isSearchable,
	      isMulti = context.isMulti,
	      label = context.label,
	      isDisabled = context.isDisabled;

	  switch (event) {
	    case 'menu':
	      return "Use Up and Down to choose options".concat(isDisabled ? '' : ', press Enter to select the currently focused option', ", press Escape to exit the menu, press Tab to select the option and exit the menu.");

	    case 'input':
	      return "".concat(label ? label : 'Select', " is focused ").concat(isSearchable ? ',type to refine list' : '', ", press Down to open the menu, ").concat(isMulti ? ' press left to focus selected values' : '');

	    case 'value':
	      return 'Use left and right to toggle between focused values, press Backspace to remove the currently focused value';
	  }
	};

	exports.instructionsAriaMessage = instructionsAriaMessage;

	var valueEventAriaMessage = function valueEventAriaMessage(event, context) {
	  var value = context.value,
	      isDisabled = context.isDisabled;
	  if (!value) return;

	  switch (event) {
	    case 'deselect-option':
	    case 'pop-value':
	    case 'remove-value':
	      return "option ".concat(value, ", deselected.");

	    case 'select-option':
	      return isDisabled ? "option ".concat(value, " is disabled. Select another option.") : "option ".concat(value, ", selected.");
	  }
	};

	exports.valueEventAriaMessage = valueEventAriaMessage;

	var valueFocusAriaMessage = function valueFocusAriaMessage(_ref) {
	  var focusedValue = _ref.focusedValue,
	      getOptionLabel = _ref.getOptionLabel,
	      selectValue = _ref.selectValue;
	  return "value ".concat(getOptionLabel(focusedValue), " focused, ").concat(selectValue.indexOf(focusedValue) + 1, " of ").concat(selectValue.length, ".");
	};

	exports.valueFocusAriaMessage = valueFocusAriaMessage;

	var optionFocusAriaMessage = function optionFocusAriaMessage(_ref2) {
	  var focusedOption = _ref2.focusedOption,
	      getOptionLabel = _ref2.getOptionLabel,
	      options = _ref2.options;
	  return "option ".concat(getOptionLabel(focusedOption), " focused").concat(focusedOption.isDisabled ? ' disabled' : '', ", ").concat(options.indexOf(focusedOption) + 1, " of ").concat(options.length, ".");
	};

	exports.optionFocusAriaMessage = optionFocusAriaMessage;

	var resultsAriaMessage = function resultsAriaMessage(_ref3) {
	  var inputValue = _ref3.inputValue,
	      screenReaderMessage = _ref3.screenReaderMessage;
	  return "".concat(screenReaderMessage).concat(inputValue ? ' for search term ' + inputValue : '', ".");
	};

	exports.resultsAriaMessage = resultsAriaMessage;
	});

	unwrapExports(accessibility);
	var accessibility_1 = accessibility.resultsAriaMessage;
	var accessibility_2 = accessibility.optionFocusAriaMessage;
	var accessibility_3 = accessibility.valueFocusAriaMessage;
	var accessibility_4 = accessibility.valueEventAriaMessage;
	var accessibility_5 = accessibility.instructionsAriaMessage;

	var builtins$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isOptionDisabled = exports.getOptionValue = exports.getOptionLabel = exports.formatGroupLabel = void 0;

	var formatGroupLabel = function formatGroupLabel(group) {
	  return group.label;
	};

	exports.formatGroupLabel = formatGroupLabel;

	var getOptionLabel = function getOptionLabel(option) {
	  return option.label;
	};

	exports.getOptionLabel = getOptionLabel;

	var getOptionValue = function getOptionValue(option) {
	  return option.value;
	};

	exports.getOptionValue = getOptionValue;

	var isOptionDisabled = function isOptionDisabled(option) {
	  return !!option.isDisabled;
	};

	exports.isOptionDisabled = isOptionDisabled;
	});

	unwrapExports(builtins$1);
	var builtins_1 = builtins$1.isOptionDisabled;
	var builtins_2 = builtins$1.getOptionValue;
	var builtins_3 = builtins$1.getOptionLabel;
	var builtins_4 = builtins$1.formatGroupLabel;

	var containers = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.IndicatorsContainer = exports.indicatorsContainerCSS = exports.ValueContainer = exports.valueContainerCSS = exports.SelectContainer = exports.containerCSS = void 0;

	var _react = _interopRequireWildcard(React__default);



	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	var containerCSS = function containerCSS(_ref) {
	  var isDisabled = _ref.isDisabled,
	      isRtl = _ref.isRtl;
	  return {
	    label: 'container',
	    direction: isRtl ? 'rtl' : null,
	    pointerEvents: isDisabled ? 'none' : null,
	    // cancel mouse events when disabled
	    position: 'relative'
	  };
	};

	exports.containerCSS = containerCSS;

	var SelectContainer = function SelectContainer(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps,
	      isDisabled = props.isDisabled,
	      isRtl = props.isRtl;
	  return _react.default.createElement("div", _extends({
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('container', props)), {
	      '--is-disabled': isDisabled,
	      '--is-rtl': isRtl
	    }, className)
	  }, innerProps), children);
	}; // ==============================
	// Value Container
	// ==============================


	exports.SelectContainer = SelectContainer;

	var valueContainerCSS = function valueContainerCSS(_ref2) {
	  var spacing = _ref2.theme.spacing;
	  return {
	    alignItems: 'center',
	    display: 'flex',
	    flex: 1,
	    flexWrap: 'wrap',
	    padding: "".concat(spacing.baseUnit / 2, "px ").concat(spacing.baseUnit * 2, "px"),
	    WebkitOverflowScrolling: 'touch',
	    position: 'relative',
	    overflow: 'hidden'
	  };
	};

	exports.valueContainerCSS = valueContainerCSS;

	var ValueContainer =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(ValueContainer, _Component);

	  function ValueContainer() {
	    _classCallCheck(this, ValueContainer);

	    return _possibleConstructorReturn(this, _getPrototypeOf(ValueContainer).apply(this, arguments));
	  }

	  _createClass(ValueContainer, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          children = _this$props.children,
	          className = _this$props.className,
	          cx = _this$props.cx,
	          isMulti = _this$props.isMulti,
	          getStyles = _this$props.getStyles,
	          hasValue = _this$props.hasValue;
	      return _react.default.createElement("div", {
	        className: cx(
	        /*#__PURE__*/
	        (0, index_esm.css)(getStyles('valueContainer', this.props)), {
	          'value-container': true,
	          'value-container--is-multi': isMulti,
	          'value-container--has-value': hasValue
	        }, className)
	      }, children);
	    }
	  }]);

	  return ValueContainer;
	}(_react.Component); // ==============================
	// Indicator Container
	// ==============================


	exports.ValueContainer = ValueContainer;

	var indicatorsContainerCSS = function indicatorsContainerCSS() {
	  return {
	    alignItems: 'center',
	    alignSelf: 'stretch',
	    display: 'flex',
	    flexShrink: 0
	  };
	};

	exports.indicatorsContainerCSS = indicatorsContainerCSS;

	var IndicatorsContainer = function IndicatorsContainer(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles;
	  return _react.default.createElement("div", {
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('indicatorsContainer', props)), {
	      'indicators': true
	    }, className)
	  }, children);
	};

	exports.IndicatorsContainer = IndicatorsContainer;
	});

	unwrapExports(containers);
	var containers_1 = containers.IndicatorsContainer;
	var containers_2 = containers.indicatorsContainerCSS;
	var containers_3 = containers.ValueContainer;
	var containers_4 = containers.valueContainerCSS;
	var containers_5 = containers.SelectContainer;
	var containers_6 = containers.containerCSS;

	var indicators = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.LoadingIndicator = exports.loadingIndicatorCSS = exports.IndicatorSeparator = exports.indicatorSeparatorCSS = exports.ClearIndicator = exports.clearIndicatorCSS = exports.DropdownIndicator = exports.dropdownIndicatorCSS = exports.DownChevron = exports.CrossIcon = void 0;

	var _react = _interopRequireDefault(React__default);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	// ==============================
	// Dropdown & Clear Icons
	// ==============================
	var Svg = function Svg(_ref) {
	  var size = _ref.size,
	      props = _objectWithoutProperties(_ref, ["size"]);

	  return _react.default.createElement("svg", _extends({
	    height: size,
	    width: size,
	    viewBox: "0 0 20 20",
	    "aria-hidden": "true",
	    focusable: "false",
	    className:
	    /*#__PURE__*/

	    /*#__PURE__*/
	    (0, index_esm.css)({
	      display: 'inline-block',
	      fill: 'currentColor',
	      lineHeight: 1,
	      stroke: 'currentColor',
	      strokeWidth: 0
	    })
	  }, props));
	};

	var CrossIcon = function CrossIcon(props) {
	  return _react.default.createElement(Svg, _extends({
	    size: 20
	  }, props), _react.default.createElement("path", {
	    d: "M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"
	  }));
	};

	exports.CrossIcon = CrossIcon;

	var DownChevron = function DownChevron(props) {
	  return _react.default.createElement(Svg, _extends({
	    size: 20
	  }, props), _react.default.createElement("path", {
	    d: "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
	  }));
	}; // ==============================
	// Dropdown & Clear Buttons
	// ==============================


	exports.DownChevron = DownChevron;

	var baseCSS = function baseCSS(_ref2) {
	  var isFocused = _ref2.isFocused,
	      _ref2$theme = _ref2.theme,
	      baseUnit = _ref2$theme.spacing.baseUnit,
	      colors = _ref2$theme.colors;
	  return {
	    label: 'indicatorContainer',
	    color: isFocused ? colors.neutral60 : colors.neutral20,
	    display: 'flex',
	    padding: baseUnit * 2,
	    transition: 'color 150ms',
	    ':hover': {
	      color: isFocused ? colors.neutral80 : colors.neutral40
	    }
	  };
	};

	var dropdownIndicatorCSS = baseCSS;
	exports.dropdownIndicatorCSS = dropdownIndicatorCSS;

	var DropdownIndicator = function DropdownIndicator(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps;
	  return _react.default.createElement("div", _extends({}, innerProps, {
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('dropdownIndicator', props)), {
	      'indicator': true,
	      'dropdown-indicator': true
	    }, className)
	  }), children || _react.default.createElement(DownChevron, null));
	};

	exports.DropdownIndicator = DropdownIndicator;
	var clearIndicatorCSS = baseCSS;
	exports.clearIndicatorCSS = clearIndicatorCSS;

	var ClearIndicator = function ClearIndicator(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps;
	  return _react.default.createElement("div", _extends({}, innerProps, {
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('clearIndicator', props)), {
	      'indicator': true,
	      'clear-indicator': true
	    }, className)
	  }), children || _react.default.createElement(CrossIcon, null));
	}; // ==============================
	// Separator
	// ==============================


	exports.ClearIndicator = ClearIndicator;

	var indicatorSeparatorCSS = function indicatorSeparatorCSS(_ref3) {
	  var isDisabled = _ref3.isDisabled,
	      _ref3$theme = _ref3.theme,
	      baseUnit = _ref3$theme.spacing.baseUnit,
	      colors = _ref3$theme.colors;
	  return {
	    label: 'indicatorSeparator',
	    alignSelf: 'stretch',
	    backgroundColor: isDisabled ? colors.neutral10 : colors.neutral20,
	    marginBottom: baseUnit * 2,
	    marginTop: baseUnit * 2,
	    width: 1
	  };
	};

	exports.indicatorSeparatorCSS = indicatorSeparatorCSS;

	var IndicatorSeparator = function IndicatorSeparator(props) {
	  var className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps;
	  return _react.default.createElement("span", _extends({}, innerProps, {
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('indicatorSeparator', props)), {
	      'indicator-separator': true
	    }, className)
	  }));
	}; // ==============================
	// Loading
	// ==============================


	exports.IndicatorSeparator = IndicatorSeparator;
	var keyframesName = 'react-select-loading-indicator';
	var keyframesInjected = false;

	var loadingIndicatorCSS = function loadingIndicatorCSS(_ref4) {
	  var isFocused = _ref4.isFocused,
	      size = _ref4.size,
	      _ref4$theme = _ref4.theme,
	      colors = _ref4$theme.colors,
	      baseUnit = _ref4$theme.spacing.baseUnit;
	  return {
	    label: 'loadingIndicator',
	    color: isFocused ? colors.neutral60 : colors.neutral20,
	    display: 'flex',
	    padding: baseUnit * 2,
	    transition: 'color 150ms',
	    alignSelf: 'center',
	    fontSize: size,
	    lineHeight: 1,
	    marginRight: size,
	    textAlign: 'center',
	    verticalAlign: 'middle'
	  };
	};

	exports.loadingIndicatorCSS = loadingIndicatorCSS;

	var LoadingDot = function LoadingDot(_ref5) {
	  var color = _ref5.color,
	      delay = _ref5.delay,
	      offset = _ref5.offset;
	  return _react.default.createElement("span", {
	    className:
	    /*#__PURE__*/

	    /*#__PURE__*/
	    (0, index_esm.css)({
	      animationDuration: '1s',
	      animationDelay: "".concat(delay, "ms"),
	      animationIterationCount: 'infinite',
	      animationName: keyframesName,
	      animationTimingFunction: 'ease-in-out',
	      backgroundColor: color,
	      borderRadius: '1em',
	      display: 'inline-block',
	      marginLeft: offset ? '1em' : null,
	      height: '1em',
	      verticalAlign: 'top',
	      width: '1em'
	    })
	  });
	};

	var LoadingIndicator = function LoadingIndicator(props) {
	  var className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps,
	      isFocused = props.isFocused,
	      isRtl = props.isRtl,
	      colors = props.theme.colors;
	  var color = isFocused ? colors.neutral80 : colors.neutral20;

	  if (!keyframesInjected) {
	    // eslint-disable-next-line no-unused-expressions
	    (0, index_esm.injectGlobal)("@keyframes ", keyframesName, "{0%,80%,100%{opacity:0;}40%{opacity:1;}};");
	    keyframesInjected = true;
	  }

	  return _react.default.createElement("div", _extends({}, innerProps, {
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('loadingIndicator', props)), {
	      'indicator': true,
	      'loading-indicator': true
	    }, className)
	  }), _react.default.createElement(LoadingDot, {
	    color: color,
	    delay: 0,
	    offset: isRtl
	  }), _react.default.createElement(LoadingDot, {
	    color: color,
	    delay: 160,
	    offset: true
	  }), _react.default.createElement(LoadingDot, {
	    color: color,
	    delay: 320,
	    offset: !isRtl
	  }));
	};

	exports.LoadingIndicator = LoadingIndicator;
	LoadingIndicator.defaultProps = {
	  size: 4
	};
	});

	unwrapExports(indicators);
	var indicators_1 = indicators.LoadingIndicator;
	var indicators_2 = indicators.loadingIndicatorCSS;
	var indicators_3 = indicators.IndicatorSeparator;
	var indicators_4 = indicators.indicatorSeparatorCSS;
	var indicators_5 = indicators.ClearIndicator;
	var indicators_6 = indicators.clearIndicatorCSS;
	var indicators_7 = indicators.DropdownIndicator;
	var indicators_8 = indicators.dropdownIndicatorCSS;
	var indicators_9 = indicators.DownChevron;
	var indicators_10 = indicators.CrossIcon;

	var Control_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.css = void 0;

	var _react = _interopRequireDefault(React__default);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	var css = function css(_ref) {
	  var isDisabled = _ref.isDisabled,
	      isFocused = _ref.isFocused,
	      _ref$theme = _ref.theme,
	      colors = _ref$theme.colors,
	      borderRadius = _ref$theme.borderRadius,
	      spacing = _ref$theme.spacing;
	  return {
	    label: 'control',
	    alignItems: 'center',
	    backgroundColor: isDisabled ? colors.neutral5 : colors.neutral0,
	    borderColor: isDisabled ? colors.neutral10 : isFocused ? colors.primary : colors.neutral20,
	    borderRadius: borderRadius,
	    borderStyle: 'solid',
	    borderWidth: 1,
	    boxShadow: isFocused ? "0 0 0 1px ".concat(colors.primary) : null,
	    cursor: 'default',
	    display: 'flex',
	    flexWrap: 'wrap',
	    justifyContent: 'space-between',
	    minHeight: spacing.controlHeight,
	    outline: '0 !important',
	    position: 'relative',
	    transition: 'all 100ms',
	    '&:hover': {
	      borderColor: isFocused ? colors.primary : colors.neutral30
	    }
	  };
	};

	exports.css = css;

	var Control = function Control(props) {
	  var children = props.children,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      className = props.className,
	      isDisabled = props.isDisabled,
	      isFocused = props.isFocused,
	      innerRef = props.innerRef,
	      innerProps = props.innerProps,
	      menuIsOpen = props.menuIsOpen;
	  return _react.default.createElement("div", _extends({
	    ref: innerRef,
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('control', props)), {
	      'control': true,
	      'control--is-disabled': isDisabled,
	      'control--is-focused': isFocused,
	      'control--menu-is-open': menuIsOpen
	    }, className)
	  }, innerProps), children);
	};

	var _default = Control;
	exports.default = _default;
	});

	unwrapExports(Control_1);
	var Control_2 = Control_1.css;

	var Group_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.GroupHeading = exports.groupHeadingCSS = exports.groupCSS = void 0;

	var _react = _interopRequireDefault(React__default);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	var groupCSS = function groupCSS(_ref) {
	  var spacing = _ref.theme.spacing;
	  return {
	    paddingBottom: spacing.baseUnit * 2,
	    paddingTop: spacing.baseUnit * 2
	  };
	};

	exports.groupCSS = groupCSS;

	var Group = function Group(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      Heading = props.Heading,
	      headingProps = props.headingProps,
	      label = props.label,
	      theme = props.theme,
	      selectProps = props.selectProps;
	  return _react.default.createElement("div", {
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('group', props)), {
	      'group': true
	    }, className)
	  }, _react.default.createElement(Heading, _extends({}, headingProps, {
	    selectProps: selectProps,
	    theme: theme,
	    getStyles: getStyles,
	    cx: cx
	  }), label), _react.default.createElement("div", null, children));
	};

	var groupHeadingCSS = function groupHeadingCSS(_ref2) {
	  var spacing = _ref2.theme.spacing;
	  return {
	    label: 'group',
	    color: '#999',
	    cursor: 'default',
	    display: 'block',
	    fontSize: '75%',
	    fontWeight: '500',
	    marginBottom: '0.25em',
	    paddingLeft: spacing.baseUnit * 3,
	    paddingRight: spacing.baseUnit * 3,
	    textTransform: 'uppercase'
	  };
	};

	exports.groupHeadingCSS = groupHeadingCSS;

	var GroupHeading = function GroupHeading(props) {
	  var className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      theme = props.theme,
	      selectProps = props.selectProps,
	      cleanProps = _objectWithoutProperties(props, ["className", "cx", "getStyles", "theme", "selectProps"]);

	  return _react.default.createElement("div", _extends({
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('groupHeading', _objectSpread({
	      theme: theme
	    }, cleanProps))), {
	      'group-heading': true
	    }, className)
	  }, cleanProps));
	};

	exports.GroupHeading = GroupHeading;
	var _default = Group;
	exports.default = _default;
	});

	unwrapExports(Group_1);
	var Group_2 = Group_1.GroupHeading;
	var Group_3 = Group_1.groupHeadingCSS;
	var Group_4 = Group_1.groupCSS;

	var Input_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.inputCSS = void 0;

	var _react = _interopRequireDefault(React__default);



	var _reactInputAutosize = _interopRequireDefault(AutosizeInput_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	var inputCSS = function inputCSS(_ref) {
	  var isDisabled = _ref.isDisabled,
	      _ref$theme = _ref.theme,
	      spacing = _ref$theme.spacing,
	      colors = _ref$theme.colors;
	  return {
	    margin: spacing.baseUnit / 2,
	    paddingBottom: spacing.baseUnit / 2,
	    paddingTop: spacing.baseUnit / 2,
	    visibility: isDisabled ? 'hidden' : 'visible',
	    color: colors.neutral80
	  };
	};

	exports.inputCSS = inputCSS;

	var inputStyle = function inputStyle(isHidden) {
	  return {
	    label: 'input',
	    background: 0,
	    border: 0,
	    fontSize: 'inherit',
	    opacity: isHidden ? 0 : 1,
	    outline: 0,
	    padding: 0,
	    color: 'inherit'
	  };
	};

	var Input = function Input(_ref2) {
	  var className = _ref2.className,
	      cx = _ref2.cx,
	      getStyles = _ref2.getStyles,
	      innerRef = _ref2.innerRef,
	      isHidden = _ref2.isHidden,
	      isDisabled = _ref2.isDisabled,
	      theme = _ref2.theme,
	      selectProps = _ref2.selectProps,
	      props = _objectWithoutProperties(_ref2, ["className", "cx", "getStyles", "innerRef", "isHidden", "isDisabled", "theme", "selectProps"]);

	  return _react.default.createElement("div", {
	    className:
	    /*#__PURE__*/

	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('input', _objectSpread({
	      theme: theme
	    }, props)))
	  }, _react.default.createElement(_reactInputAutosize.default, _extends({
	    className: cx(null, {
	      'input': true
	    }, className),
	    inputRef: innerRef,
	    inputStyle: inputStyle(isHidden),
	    disabled: isDisabled
	  }, props)));
	};

	var _default = Input;
	exports.default = _default;
	});

	unwrapExports(Input_1);
	var Input_2 = Input_1.inputCSS;

	var MultiValue_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.MultiValueRemove = exports.MultiValueLabel = exports.MultiValueContainer = exports.MultiValueGeneric = exports.multiValueRemoveCSS = exports.multiValueLabelCSS = exports.multiValueCSS = void 0;

	var _react = _interopRequireWildcard(React__default);





	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var multiValueCSS = function multiValueCSS(_ref) {
	  var _ref$theme = _ref.theme,
	      spacing = _ref$theme.spacing,
	      borderRadius = _ref$theme.borderRadius,
	      colors = _ref$theme.colors;
	  return {
	    label: 'multiValue',
	    backgroundColor: colors.neutral10,
	    borderRadius: borderRadius / 2,
	    display: 'flex',
	    margin: spacing.baseUnit / 2,
	    minWidth: 0 // resolves flex/text-overflow bug

	  };
	};

	exports.multiValueCSS = multiValueCSS;

	var multiValueLabelCSS = function multiValueLabelCSS(_ref2) {
	  var _ref2$theme = _ref2.theme,
	      borderRadius = _ref2$theme.borderRadius,
	      colors = _ref2$theme.colors,
	      cropWithEllipsis = _ref2.cropWithEllipsis;
	  return {
	    borderRadius: borderRadius / 2,
	    color: colors.neutral80,
	    fontSize: '85%',
	    overflow: 'hidden',
	    padding: 3,
	    paddingLeft: 6,
	    textOverflow: cropWithEllipsis ? 'ellipsis' : null,
	    whiteSpace: 'nowrap'
	  };
	};

	exports.multiValueLabelCSS = multiValueLabelCSS;

	var multiValueRemoveCSS = function multiValueRemoveCSS(_ref3) {
	  var _ref3$theme = _ref3.theme,
	      spacing = _ref3$theme.spacing,
	      borderRadius = _ref3$theme.borderRadius,
	      colors = _ref3$theme.colors,
	      isFocused = _ref3.isFocused;
	  return {
	    alignItems: 'center',
	    borderRadius: borderRadius / 2,
	    backgroundColor: isFocused && colors.dangerLight,
	    display: 'flex',
	    paddingLeft: spacing.baseUnit,
	    paddingRight: spacing.baseUnit,
	    ':hover': {
	      backgroundColor: colors.dangerLight,
	      color: colors.danger
	    }
	  };
	};

	exports.multiValueRemoveCSS = multiValueRemoveCSS;

	var MultiValueGeneric = function MultiValueGeneric(_ref4) {
	  var children = _ref4.children,
	      innerProps = _ref4.innerProps;
	  return _react.default.createElement("div", innerProps, children);
	};

	exports.MultiValueGeneric = MultiValueGeneric;
	var MultiValueContainer = MultiValueGeneric;
	exports.MultiValueContainer = MultiValueContainer;
	var MultiValueLabel = MultiValueGeneric;
	exports.MultiValueLabel = MultiValueLabel;

	var MultiValueRemove =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(MultiValueRemove, _Component);

	  function MultiValueRemove() {
	    _classCallCheck(this, MultiValueRemove);

	    return _possibleConstructorReturn(this, _getPrototypeOf(MultiValueRemove).apply(this, arguments));
	  }

	  _createClass(MultiValueRemove, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          children = _this$props.children,
	          innerProps = _this$props.innerProps;
	      return _react.default.createElement("div", innerProps, children || _react.default.createElement(indicators.CrossIcon, {
	        size: 14
	      }));
	    }
	  }]);

	  return MultiValueRemove;
	}(_react.Component);

	exports.MultiValueRemove = MultiValueRemove;

	var MultiValue =
	/*#__PURE__*/
	function (_Component2) {
	  _inherits(MultiValue, _Component2);

	  function MultiValue() {
	    _classCallCheck(this, MultiValue);

	    return _possibleConstructorReturn(this, _getPrototypeOf(MultiValue).apply(this, arguments));
	  }

	  _createClass(MultiValue, [{
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          children = _this$props2.children,
	          className = _this$props2.className,
	          components = _this$props2.components,
	          cx = _this$props2.cx,
	          data = _this$props2.data,
	          getStyles = _this$props2.getStyles,
	          innerProps = _this$props2.innerProps,
	          isDisabled = _this$props2.isDisabled,
	          removeProps = _this$props2.removeProps,
	          selectProps = _this$props2.selectProps;
	      var Container = components.Container,
	          Label = components.Label,
	          Remove = components.Remove;

	      var containerInnerProps = _objectSpread({
	        className: cx(
	        /*#__PURE__*/
	        (0, index_esm.css)(getStyles('multiValue', this.props)), {
	          'multi-value': true,
	          'multi-value--is-disabled': isDisabled
	        }, className)
	      }, innerProps);

	      var labelInnerProps = {
	        className: cx(
	        /*#__PURE__*/
	        (0, index_esm.css)(getStyles('multiValueLabel', this.props)), {
	          'multi-value__label': true
	        }, className)
	      };

	      var removeInnerProps = _objectSpread({
	        className: cx(
	        /*#__PURE__*/
	        (0, index_esm.css)(getStyles('multiValueRemove', this.props)), {
	          'multi-value__remove': true
	        }, className)
	      }, removeProps);

	      return _react.default.createElement(Container, {
	        data: data,
	        innerProps: containerInnerProps,
	        selectProps: selectProps
	      }, _react.default.createElement(Label, {
	        data: data,
	        innerProps: labelInnerProps,
	        selectProps: selectProps
	      }, children), _react.default.createElement(Remove, {
	        data: data,
	        innerProps: removeInnerProps,
	        selectProps: selectProps
	      }));
	    }
	  }]);

	  return MultiValue;
	}(_react.Component);

	_defineProperty(MultiValue, "defaultProps", {
	  cropWithEllipsis: true
	});

	var _default = MultiValue;
	exports.default = _default;
	});

	unwrapExports(MultiValue_1);
	var MultiValue_2 = MultiValue_1.MultiValueRemove;
	var MultiValue_3 = MultiValue_1.MultiValueLabel;
	var MultiValue_4 = MultiValue_1.MultiValueContainer;
	var MultiValue_5 = MultiValue_1.MultiValueGeneric;
	var MultiValue_6 = MultiValue_1.multiValueRemoveCSS;
	var MultiValue_7 = MultiValue_1.multiValueLabelCSS;
	var MultiValue_8 = MultiValue_1.multiValueCSS;

	var Option_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.optionCSS = void 0;

	var _react = _interopRequireDefault(React__default);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	var optionCSS = function optionCSS(_ref) {
	  var isDisabled = _ref.isDisabled,
	      isFocused = _ref.isFocused,
	      isSelected = _ref.isSelected,
	      _ref$theme = _ref.theme,
	      spacing = _ref$theme.spacing,
	      colors = _ref$theme.colors;
	  return {
	    label: 'option',
	    backgroundColor: isSelected ? colors.primary : isFocused ? colors.primary25 : 'transparent',
	    color: isDisabled ? colors.neutral20 : isSelected ? colors.neutral0 : 'inherit',
	    cursor: 'default',
	    display: 'block',
	    fontSize: 'inherit',
	    padding: "".concat(spacing.baseUnit * 2, "px ").concat(spacing.baseUnit * 3, "px"),
	    width: '100%',
	    userSelect: 'none',
	    WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',
	    // provide some affordance on touch devices
	    ':active': {
	      backgroundColor: !isDisabled && (isSelected ? colors.primary : colors.primary50)
	    }
	  };
	};

	exports.optionCSS = optionCSS;

	var Option = function Option(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      isDisabled = props.isDisabled,
	      isFocused = props.isFocused,
	      isSelected = props.isSelected,
	      innerRef = props.innerRef,
	      innerProps = props.innerProps;
	  return _react.default.createElement("div", _extends({
	    ref: innerRef,
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('option', props)), {
	      'option': true,
	      'option--is-disabled': isDisabled,
	      'option--is-focused': isFocused,
	      'option--is-selected': isSelected
	    }, className)
	  }, innerProps), children);
	};

	var _default = Option;
	exports.default = _default;
	});

	unwrapExports(Option_1);
	var Option_2 = Option_1.optionCSS;

	var Placeholder_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.placeholderCSS = void 0;

	var _react = _interopRequireDefault(React__default);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	var placeholderCSS = function placeholderCSS(_ref) {
	  var _ref$theme = _ref.theme,
	      spacing = _ref$theme.spacing,
	      colors = _ref$theme.colors;
	  return {
	    label: 'placeholder',
	    color: colors.neutral50,
	    marginLeft: spacing.baseUnit / 2,
	    marginRight: spacing.baseUnit / 2,
	    position: 'absolute',
	    top: '50%',
	    transform: 'translateY(-50%)'
	  };
	};

	exports.placeholderCSS = placeholderCSS;

	var Placeholder = function Placeholder(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      innerProps = props.innerProps;
	  return _react.default.createElement("div", _extends({
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('placeholder', props)), {
	      'placeholder': true
	    }, className)
	  }, innerProps), children);
	};

	var _default = Placeholder;
	exports.default = _default;
	});

	unwrapExports(Placeholder_1);
	var Placeholder_2 = Placeholder_1.placeholderCSS;

	var SingleValue_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.css = void 0;

	var _react = _interopRequireDefault(React__default);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	var css = function css(_ref) {
	  var isDisabled = _ref.isDisabled,
	      _ref$theme = _ref.theme,
	      spacing = _ref$theme.spacing,
	      colors = _ref$theme.colors;
	  return {
	    label: 'singleValue',
	    color: isDisabled ? colors.neutral40 : colors.neutral80,
	    marginLeft: spacing.baseUnit / 2,
	    marginRight: spacing.baseUnit / 2,
	    maxWidth: "calc(100% - ".concat(spacing.baseUnit * 2, "px)"),
	    overflow: 'hidden',
	    position: 'absolute',
	    textOverflow: 'ellipsis',
	    whiteSpace: 'nowrap',
	    top: '50%',
	    transform: 'translateY(-50%)'
	  };
	};

	exports.css = css;

	var SingleValue = function SingleValue(props) {
	  var children = props.children,
	      className = props.className,
	      cx = props.cx,
	      getStyles = props.getStyles,
	      isDisabled = props.isDisabled,
	      innerProps = props.innerProps;
	  return _react.default.createElement("div", _extends({
	    className: cx(
	    /*#__PURE__*/
	    (0, index_esm.css)(getStyles('singleValue', props)), {
	      'single-value': true,
	      'single-value--is-disabled': isDisabled
	    }, className)
	  }, innerProps), children);
	};

	var _default = SingleValue;
	exports.default = _default;
	});

	unwrapExports(SingleValue_1);
	var SingleValue_2 = SingleValue_1.css;

	var components_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.defaultComponents = exports.components = void 0;





	var _Control = _interopRequireDefault(Control_1);

	var _Group = _interopRequireWildcard(Group_1);

	var _Input = _interopRequireDefault(Input_1);

	var _Menu = _interopRequireWildcard(Menu_1);

	var _MultiValue = _interopRequireWildcard(MultiValue_1);

	var _Option = _interopRequireDefault(Option_1);

	var _Placeholder = _interopRequireDefault(Placeholder_1);

	var _SingleValue = _interopRequireDefault(SingleValue_1);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var components = {
	  ClearIndicator: indicators.ClearIndicator,
	  Control: _Control.default,
	  DropdownIndicator: indicators.DropdownIndicator,
	  DownChevron: indicators.DownChevron,
	  CrossIcon: indicators.CrossIcon,
	  Group: _Group.default,
	  GroupHeading: _Group.GroupHeading,
	  IndicatorsContainer: containers.IndicatorsContainer,
	  IndicatorSeparator: indicators.IndicatorSeparator,
	  Input: _Input.default,
	  LoadingIndicator: indicators.LoadingIndicator,
	  Menu: _Menu.default,
	  MenuList: _Menu.MenuList,
	  MenuPortal: _Menu.MenuPortal,
	  LoadingMessage: _Menu.LoadingMessage,
	  NoOptionsMessage: _Menu.NoOptionsMessage,
	  MultiValue: _MultiValue.default,
	  MultiValueContainer: _MultiValue.MultiValueContainer,
	  MultiValueLabel: _MultiValue.MultiValueLabel,
	  MultiValueRemove: _MultiValue.MultiValueRemove,
	  Option: _Option.default,
	  Placeholder: _Placeholder.default,
	  SelectContainer: containers.SelectContainer,
	  SingleValue: _SingleValue.default,
	  ValueContainer: containers.ValueContainer
	};
	exports.components = components;

	var defaultComponents = function defaultComponents(props) {
	  return _objectSpread({}, components, props.components);
	};

	exports.defaultComponents = defaultComponents;
	});

	unwrapExports(components_1);
	var components_2 = components_1.defaultComponents;
	var components_3 = components_1.components;

	var styles$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.mergeStyles = mergeStyles;
	exports.defaultStyles = void 0;





















	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var defaultStyles = {
	  clearIndicator: indicators.clearIndicatorCSS,
	  container: containers.containerCSS,
	  control: Control_1.css,
	  dropdownIndicator: indicators.dropdownIndicatorCSS,
	  group: Group_1.groupCSS,
	  groupHeading: Group_1.groupHeadingCSS,
	  indicatorsContainer: containers.indicatorsContainerCSS,
	  indicatorSeparator: indicators.indicatorSeparatorCSS,
	  input: Input_1.inputCSS,
	  loadingIndicator: indicators.loadingIndicatorCSS,
	  loadingMessage: Menu_1.loadingMessageCSS,
	  menu: Menu_1.menuCSS,
	  menuList: Menu_1.menuListCSS,
	  menuPortal: Menu_1.menuPortalCSS,
	  multiValue: MultiValue_1.multiValueCSS,
	  multiValueLabel: MultiValue_1.multiValueLabelCSS,
	  multiValueRemove: MultiValue_1.multiValueRemoveCSS,
	  noOptionsMessage: Menu_1.noOptionsMessageCSS,
	  option: Option_1.optionCSS,
	  placeholder: Placeholder_1.placeholderCSS,
	  singleValue: SingleValue_1.css,
	  valueContainer: containers.valueContainerCSS
	}; // Merge Utility
	// Allows consumers to extend a base Select with additional styles

	exports.defaultStyles = defaultStyles;

	function mergeStyles(source) {
	  var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  // initialize with source styles
	  var styles = _objectSpread({}, source); // massage in target styles


	  Object.keys(target).forEach(function (key) {
	    if (source[key]) {
	      styles[key] = function (rsCss, props) {
	        return target[key](source[key](rsCss, props), props);
	      };
	    } else {
	      styles[key] = target[key];
	    }
	  });
	  return styles;
	}
	});

	unwrapExports(styles$1);
	var styles_1 = styles$1.mergeStyles;
	var styles_2 = styles$1.defaultStyles;

	var theme = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.defaultTheme = exports.spacing = exports.colors = void 0;
	var colors = {
	  primary: '#2684FF',
	  primary75: '#4C9AFF',
	  primary50: '#B2D4FF',
	  primary25: '#DEEBFF',
	  danger: '#DE350B',
	  dangerLight: '#FFBDAD',
	  neutral0: 'hsl(0, 0%, 100%)',
	  neutral5: 'hsl(0, 0%, 95%)',
	  neutral10: 'hsl(0, 0%, 90%)',
	  neutral20: 'hsl(0, 0%, 80%)',
	  neutral30: 'hsl(0, 0%, 70%)',
	  neutral40: 'hsl(0, 0%, 60%)',
	  neutral50: 'hsl(0, 0%, 50%)',
	  neutral60: 'hsl(0, 0%, 40%)',
	  neutral70: 'hsl(0, 0%, 30%)',
	  neutral80: 'hsl(0, 0%, 20%)',
	  neutral90: 'hsl(0, 0%, 10%)'
	};
	exports.colors = colors;
	var borderRadius = 4;
	var baseUnit = 4;
	/* Used to calculate consistent margin/padding on elements */

	var controlHeight = 38;
	/* The minimum height of the control */

	var menuGutter = baseUnit * 2;
	/* The amount of space between the control and menu */

	var spacing = {
	  baseUnit: baseUnit,
	  controlHeight: controlHeight,
	  menuGutter: menuGutter
	};
	exports.spacing = spacing;
	var defaultTheme = {
	  borderRadius: borderRadius,
	  colors: colors,
	  spacing: spacing
	};
	exports.defaultTheme = defaultTheme;
	});

	unwrapExports(theme);
	var theme_1 = theme.defaultTheme;
	var theme_2 = theme.spacing;
	var theme_3 = theme.colors;

	var Select_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.defaultProps = void 0;

	var _react = _interopRequireWildcard(React__default);

	var _memoizeOne = _interopRequireDefault(memoizeOne);



	var _reactFastCompare = _interopRequireDefault(reactFastCompare);

















	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

	function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var defaultProps = {
	  backspaceRemovesValue: true,
	  blurInputOnSelect: (0, utils.isTouchCapable)(),
	  captureMenuScroll: !(0, utils.isTouchCapable)(),
	  closeMenuOnSelect: true,
	  closeMenuOnScroll: false,
	  components: {},
	  controlShouldRenderValue: true,
	  escapeClearsValue: false,
	  filterOption: (0, filters.createFilter)(),
	  formatGroupLabel: builtins$1.formatGroupLabel,
	  getOptionLabel: builtins$1.getOptionLabel,
	  getOptionValue: builtins$1.getOptionValue,
	  isDisabled: false,
	  isLoading: false,
	  isMulti: false,
	  isRtl: false,
	  isSearchable: true,
	  isOptionDisabled: builtins$1.isOptionDisabled,
	  loadingMessage: function loadingMessage() {
	    return 'Loading...';
	  },
	  maxMenuHeight: 300,
	  minMenuHeight: 140,
	  menuIsOpen: false,
	  menuPlacement: 'bottom',
	  menuPosition: 'absolute',
	  menuShouldBlockScroll: false,
	  menuShouldScrollIntoView: !(0, utils.isMobileDevice)(),
	  noOptionsMessage: function noOptionsMessage() {
	    return 'No options';
	  },
	  openMenuOnFocus: false,
	  openMenuOnClick: true,
	  options: [],
	  pageSize: 5,
	  placeholder: 'Select...',
	  screenReaderStatus: function screenReaderStatus(_ref) {
	    var count = _ref.count;
	    return "".concat(count, " result").concat(count !== 1 ? 's' : '', " available");
	  },
	  styles: {},
	  tabIndex: '0',
	  tabSelectsValue: true
	};
	exports.defaultProps = defaultProps;
	var instanceId = 1;

	var Select =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Select, _Component);

	  // Misc. Instance Properties
	  // ------------------------------
	  // TODO
	  // Refs
	  // ------------------------------
	  // Lifecycle
	  // ------------------------------
	  function Select(_props) {
	    var _this;

	    _classCallCheck(this, Select);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, _props));

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
	      ariaLiveSelection: '',
	      ariaLiveContext: '',
	      focusedOption: null,
	      focusedValue: null,
	      inputIsHidden: false,
	      isFocused: false,
	      menuOptions: {
	        render: [],
	        focusable: []
	      },
	      selectValue: []
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "blockOptionHover", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isComposing", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "clearFocusValueOnUpdate", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "commonProps", void 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "components", void 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "hasGroups", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "initialTouchX", 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "initialTouchY", 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "inputIsHiddenAfterUpdate", void 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "instancePrefix", '');

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "openAfterFocus", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "scrollToFocusedOptionOnUpdate", false);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "userIsDragging", void 0);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "controlRef", null);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getControlRef", function (ref) {
	      _this.controlRef = ref;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "focusedOptionRef", null);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getFocusedOptionRef", function (ref) {
	      _this.focusedOptionRef = ref;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "menuListRef", null);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getMenuListRef", function (ref) {
	      _this.menuListRef = ref;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "inputRef", null);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getInputRef", function (ref) {
	      _this.inputRef = ref;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "cacheComponents", function (components) {
	      _this.components = (0, components_1.defaultComponents)({
	        components: components
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "focus", _this.focusInput);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "blur", _this.blurInput);

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onChange", function (newValue, actionMeta) {
	      var _this$props = _this.props,
	          onChange = _this$props.onChange,
	          name = _this$props.name;
	      onChange(newValue, _objectSpread({}, actionMeta, {
	        name: name
	      }));
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setValue", function (newValue) {
	      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'set-value';
	      var option = arguments.length > 2 ? arguments[2] : undefined;
	      var _this$props2 = _this.props,
	          closeMenuOnSelect = _this$props2.closeMenuOnSelect,
	          isMulti = _this$props2.isMulti;

	      _this.onInputChange('', {
	        action: 'set-value'
	      });

	      if (closeMenuOnSelect) {
	        _this.inputIsHiddenAfterUpdate = !isMulti;

	        _this.onMenuClose();
	      } // when the select value should change, we should reset focusedValue


	      _this.clearFocusValueOnUpdate = true;

	      _this.onChange(newValue, {
	        action: action,
	        option: option
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "selectOption", function (newValue) {
	      var _this$props3 = _this.props,
	          blurInputOnSelect = _this$props3.blurInputOnSelect,
	          isMulti = _this$props3.isMulti;
	      var selectValue = _this.state.selectValue;

	      if (isMulti) {
	        if (_this.isOptionSelected(newValue, selectValue)) {
	          var candidate = _this.getOptionValue(newValue);

	          _this.setValue(selectValue.filter(function (i) {
	            return _this.getOptionValue(i) !== candidate;
	          }), 'deselect-option', newValue);

	          _this.announceAriaLiveSelection({
	            event: 'deselect-option',
	            context: {
	              value: _this.getOptionLabel(newValue)
	            }
	          });
	        } else {
	          if (!_this.isOptionDisabled(newValue, selectValue)) {
	            _this.setValue([].concat(_toConsumableArray(selectValue), [newValue]), 'select-option', newValue);

	            _this.announceAriaLiveSelection({
	              event: 'select-option',
	              context: {
	                value: _this.getOptionLabel(newValue)
	              }
	            });
	          } else {
	            // announce that option is disabled
	            _this.announceAriaLiveSelection({
	              event: 'select-option',
	              context: {
	                value: _this.getOptionLabel(newValue),
	                isDisabled: true
	              }
	            });
	          }
	        }
	      } else {
	        if (!_this.isOptionDisabled(newValue, selectValue)) {
	          _this.setValue(newValue, 'select-option');

	          _this.announceAriaLiveSelection({
	            event: 'select-option',
	            context: {
	              value: _this.getOptionLabel(newValue)
	            }
	          });
	        } else {
	          // announce that option is disabled
	          _this.announceAriaLiveSelection({
	            event: 'select-option',
	            context: {
	              value: _this.getOptionLabel(newValue),
	              isDisabled: true
	            }
	          });
	        }
	      }

	      if (blurInputOnSelect) {
	        _this.blurInput();
	      }
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "removeValue", function (removedValue) {
	      var selectValue = _this.state.selectValue;

	      var candidate = _this.getOptionValue(removedValue);

	      _this.onChange(selectValue.filter(function (i) {
	        return _this.getOptionValue(i) !== candidate;
	      }), {
	        action: 'remove-value',
	        removedValue: removedValue
	      });

	      _this.announceAriaLiveSelection({
	        event: 'remove-value',
	        context: {
	          value: removedValue ? _this.getOptionLabel(removedValue) : ''
	        }
	      });

	      _this.focusInput();
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "clearValue", function () {
	      var isMulti = _this.props.isMulti;

	      _this.onChange(isMulti ? [] : null, {
	        action: 'clear'
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "popValue", function () {
	      var selectValue = _this.state.selectValue;
	      var lastSelectedValue = selectValue[selectValue.length - 1];

	      _this.announceAriaLiveSelection({
	        event: 'pop-value',
	        context: {
	          value: lastSelectedValue ? _this.getOptionLabel(lastSelectedValue) : ''
	        }
	      });

	      _this.onChange(selectValue.slice(0, selectValue.length - 1), {
	        action: 'pop-value',
	        removedValue: lastSelectedValue
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getOptionLabel", function (data) {
	      return _this.props.getOptionLabel(data);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getOptionValue", function (data) {
	      return _this.props.getOptionValue(data);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getStyles", function (key, props) {
	      var base = styles$1.defaultStyles[key](props);

	      base.boxSizing = 'border-box';
	      var custom = _this.props.styles[key];
	      return custom ? custom(base, props) : base;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getElementId", function (element) {
	      return "".concat(_this.instancePrefix, "-").concat(element);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getActiveDescendentId", function () {
	      var menuIsOpen = _this.props.menuIsOpen;
	      var _this$state = _this.state,
	          menuOptions = _this$state.menuOptions,
	          focusedOption = _this$state.focusedOption;
	      if (!focusedOption || !menuIsOpen) return undefined;
	      var index = menuOptions.focusable.indexOf(focusedOption);
	      var option = menuOptions.render[index];
	      return option && option.key;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "announceAriaLiveSelection", function (_ref2) {
	      var event = _ref2.event,
	          context = _ref2.context;

	      _this.setState({
	        ariaLiveSelection: (0, accessibility.valueEventAriaMessage)(event, context)
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "announceAriaLiveContext", function (_ref3) {
	      var event = _ref3.event,
	          context = _ref3.context;

	      _this.setState({
	        ariaLiveContext: (0, accessibility.instructionsAriaMessage)(event, _objectSpread({}, context, {
	          label: _this.props['aria-label']
	        }))
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMenuMouseDown", function (event) {
	      if (event.button !== 0) {
	        return;
	      }

	      event.stopPropagation();
	      event.preventDefault();

	      _this.focusInput();
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMenuMouseMove", function (event) {
	      _this.blockOptionHover = false;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onControlMouseDown", function (event) {
	      var openMenuOnClick = _this.props.openMenuOnClick;

	      if (!_this.state.isFocused) {
	        if (openMenuOnClick) {
	          _this.openAfterFocus = true;
	        }

	        _this.focusInput();
	      } else if (!_this.props.menuIsOpen) {
	        if (openMenuOnClick) {
	          _this.openMenu('first');
	        }
	      } else {
	        //$FlowFixMe
	        if (event.target.tagName !== 'INPUT') {
	          _this.onMenuClose();
	        }
	      } //$FlowFixMe


	      if (event.target.tagName !== 'INPUT') {
	        event.preventDefault();
	      }
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onDropdownIndicatorMouseDown", function (event) {
	      // ignore mouse events that weren't triggered by the primary button
	      if (event && event.type === 'mousedown' && event.button !== 0) {
	        return;
	      }

	      if (_this.props.isDisabled) return;
	      var _this$props4 = _this.props,
	          isMulti = _this$props4.isMulti,
	          menuIsOpen = _this$props4.menuIsOpen;

	      _this.focusInput();

	      if (menuIsOpen) {
	        _this.inputIsHiddenAfterUpdate = !isMulti;

	        _this.onMenuClose();
	      } else {
	        _this.openMenu('first');
	      }

	      event.preventDefault();
	      event.stopPropagation();
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onClearIndicatorMouseDown", function (event) {
	      // ignore mouse events that weren't triggered by the primary button
	      if (event && event.type === 'mousedown' && event.button !== 0) {
	        return;
	      }

	      _this.clearValue();

	      event.stopPropagation();
	      _this.openAfterFocus = false;
	      setTimeout(function () {
	        return _this.focusInput();
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onScroll", function (event) {
	      if (typeof _this.props.closeMenuOnScroll === 'boolean') {
	        if (event.target instanceof HTMLElement && (0, utils.isDocumentElement)(event.target)) {
	          _this.props.onMenuClose();
	        }
	      } else if (typeof _this.props.closeMenuOnScroll === 'function') {
	        if (_this.props.closeMenuOnScroll(event)) {
	          _this.props.onMenuClose();
	        }
	      }
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onCompositionStart", function () {
	      _this.isComposing = true;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onCompositionEnd", function () {
	      _this.isComposing = false;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTouchStart", function (_ref4) {
	      var touches = _ref4.touches;
	      var touch = touches.item(0);

	      if (!touch) {
	        return;
	      }

	      _this.initialTouchX = touch.clientX;
	      _this.initialTouchY = touch.clientY;
	      _this.userIsDragging = false;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTouchMove", function (_ref5) {
	      var touches = _ref5.touches;
	      var touch = touches.item(0);

	      if (!touch) {
	        return;
	      }

	      var deltaX = Math.abs(touch.clientX - _this.initialTouchX);
	      var deltaY = Math.abs(touch.clientY - _this.initialTouchY);
	      var moveThreshold = 5;
	      _this.userIsDragging = deltaX > moveThreshold || deltaY > moveThreshold;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTouchEnd", function (event) {
	      if (_this.userIsDragging) return; // close the menu if the user taps outside
	      // we're checking on event.target here instead of event.currentTarget, because we want to assert information
	      // on events on child elements, not the document (which we've attached this handler to).

	      if (_this.controlRef && !_this.controlRef.contains(event.target) && _this.menuListRef && !_this.menuListRef.contains(event.target)) {
	        _this.blurInput();
	      } // reset move vars


	      _this.initialTouchX = 0;
	      _this.initialTouchY = 0;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onControlTouchEnd", function (event) {
	      if (_this.userIsDragging) return;

	      _this.onControlMouseDown(event);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onClearIndicatorTouchEnd", function (event) {
	      if (_this.userIsDragging) return;

	      _this.onClearIndicatorMouseDown(event);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onDropdownIndicatorTouchEnd", function (event) {
	      if (_this.userIsDragging) return;

	      _this.onDropdownIndicatorMouseDown(event);
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleInputChange", function (event) {
	      var inputValue = event.currentTarget.value;
	      _this.inputIsHiddenAfterUpdate = false;

	      _this.onInputChange(inputValue, {
	        action: 'input-change'
	      });

	      _this.onMenuOpen();
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onInputFocus", function (event) {
	      var _this$props5 = _this.props,
	          isSearchable = _this$props5.isSearchable,
	          isMulti = _this$props5.isMulti;

	      if (_this.props.onFocus) {
	        _this.props.onFocus(event);
	      }

	      _this.inputIsHiddenAfterUpdate = false;

	      _this.announceAriaLiveContext({
	        event: 'input',
	        context: {
	          isSearchable: isSearchable,
	          isMulti: isMulti
	        }
	      });

	      _this.setState({
	        isFocused: true
	      });

	      if (_this.openAfterFocus || _this.props.openMenuOnFocus) {
	        _this.openMenu('first');
	      }

	      _this.openAfterFocus = false;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onInputBlur", function (event) {
	      if (_this.menuListRef && _this.menuListRef.contains(document.activeElement)) {
	        _this.inputRef.focus();

	        return;
	      }

	      if (_this.props.onBlur) {
	        _this.props.onBlur(event);
	      }

	      _this.onInputChange('', {
	        action: 'input-blur'
	      });

	      _this.onMenuClose();

	      _this.setState({
	        focusedValue: null,
	        isFocused: false
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onOptionHover", function (focusedOption) {
	      if (_this.blockOptionHover || _this.state.focusedOption === focusedOption) {
	        return;
	      }

	      _this.setState({
	        focusedOption: focusedOption
	      });
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "shouldHideSelectedOptions", function () {
	      var _this$props6 = _this.props,
	          hideSelectedOptions = _this$props6.hideSelectedOptions,
	          isMulti = _this$props6.isMulti;
	      if (hideSelectedOptions === undefined) return isMulti;
	      return hideSelectedOptions;
	    });

	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onKeyDown", function (event) {
	      var _this$props7 = _this.props,
	          isMulti = _this$props7.isMulti,
	          backspaceRemovesValue = _this$props7.backspaceRemovesValue,
	          escapeClearsValue = _this$props7.escapeClearsValue,
	          inputValue = _this$props7.inputValue,
	          isClearable = _this$props7.isClearable,
	          isDisabled = _this$props7.isDisabled,
	          menuIsOpen = _this$props7.menuIsOpen,
	          onKeyDown = _this$props7.onKeyDown,
	          tabSelectsValue = _this$props7.tabSelectsValue,
	          openMenuOnFocus = _this$props7.openMenuOnFocus;
	      var _this$state2 = _this.state,
	          focusedOption = _this$state2.focusedOption,
	          focusedValue = _this$state2.focusedValue,
	          selectValue = _this$state2.selectValue;
	      if (isDisabled) return;

	      if (typeof onKeyDown === 'function') {
	        onKeyDown(event);

	        if (event.defaultPrevented) {
	          return;
	        }
	      } // Block option hover events when the user has just pressed a key


	      _this.blockOptionHover = true;

	      switch (event.key) {
	        case 'ArrowLeft':
	          if (!isMulti || inputValue) return;

	          _this.focusValue('previous');

	          break;

	        case 'ArrowRight':
	          if (!isMulti || inputValue) return;

	          _this.focusValue('next');

	          break;

	        case 'Delete':
	        case 'Backspace':
	          if (inputValue) return;

	          if (focusedValue) {
	            _this.removeValue(focusedValue);
	          } else {
	            if (!backspaceRemovesValue) return;

	            if (isMulti) {
	              _this.popValue();
	            } else if (isClearable) {
	              _this.clearValue();
	            }
	          }

	          break;

	        case 'Tab':
	          if (_this.isComposing) return;

	          if (event.shiftKey || !menuIsOpen || !tabSelectsValue || !focusedOption || // don't capture the event if the menu opens on focus and the focused
	          // option is already selected; it breaks the flow of navigation
	          openMenuOnFocus && _this.isOptionSelected(focusedOption, selectValue)) {
	            return;
	          }

	          _this.selectOption(focusedOption);

	          break;

	        case 'Enter':
	          if (event.keyCode === 229) {
	            // ignore the keydown event from an Input Method Editor(IME)
	            // ref. https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode
	            break;
	          }

	          if (menuIsOpen) {
	            if (!focusedOption) return;
	            if (_this.isComposing) return;

	            _this.selectOption(focusedOption);

	            break;
	          }

	          return;

	        case 'Escape':
	          if (menuIsOpen) {
	            _this.inputIsHiddenAfterUpdate = false;

	            _this.onInputChange('', {
	              action: 'menu-close'
	            });

	            _this.onMenuClose();
	          } else if (isClearable && escapeClearsValue) {
	            _this.clearValue();
	          }

	          break;

	        case ' ':
	          // space
	          if (inputValue) {
	            return;
	          }

	          if (!menuIsOpen) {
	            _this.openMenu('first');

	            break;
	          }

	          if (!focusedOption) return;

	          _this.selectOption(focusedOption);

	          break;

	        case 'ArrowUp':
	          if (menuIsOpen) {
	            _this.focusOption('up');
	          } else {
	            _this.openMenu('last');
	          }

	          break;

	        case 'ArrowDown':
	          if (menuIsOpen) {
	            _this.focusOption('down');
	          } else {
	            _this.openMenu('first');
	          }

	          break;

	        case 'PageUp':
	          if (!menuIsOpen) return;

	          _this.focusOption('pageup');

	          break;

	        case 'PageDown':
	          if (!menuIsOpen) return;

	          _this.focusOption('pagedown');

	          break;

	        case 'Home':
	          if (!menuIsOpen) return;

	          _this.focusOption('first');

	          break;

	        case 'End':
	          if (!menuIsOpen) return;

	          _this.focusOption('last');

	          break;

	        default:
	          return;
	      }

	      event.preventDefault();
	    });

	    var value = _props.value;
	    _this.cacheComponents = (0, _memoizeOne.default)(_this.cacheComponents, _reactFastCompare.default).bind(_assertThisInitialized(_assertThisInitialized(_this)));

	    _this.cacheComponents(_props.components);

	    _this.instancePrefix = 'react-select-' + (_this.props.instanceId || ++instanceId);

	    var _selectValue = (0, utils.cleanValue)(value);

	    var _menuOptions = _this.buildMenuOptions(_props, _selectValue);

	    _this.state.menuOptions = _menuOptions;
	    _this.state.selectValue = _selectValue;
	    return _this;
	  }

	  _createClass(Select, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.startListeningComposition();
	      this.startListeningToTouch();

	      if (this.props.closeMenuOnScroll && document && document.addEventListener) {
	        // Listen to all scroll events, and filter them out inside of 'onScroll'
	        document.addEventListener('scroll', this.onScroll, true);
	      }

	      if (this.props.autoFocus) {
	        this.focusInput();
	      }
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$props8 = this.props,
	          options = _this$props8.options,
	          value = _this$props8.value,
	          inputValue = _this$props8.inputValue; // re-cache custom components

	      this.cacheComponents(nextProps.components); // rebuild the menu options

	      if (nextProps.value !== value || nextProps.options !== options || nextProps.inputValue !== inputValue) {
	        var selectValue = (0, utils.cleanValue)(nextProps.value);
	        var menuOptions = this.buildMenuOptions(nextProps, selectValue);
	        var focusedValue = this.getNextFocusedValue(selectValue);
	        var focusedOption = this.getNextFocusedOption(menuOptions.focusable);
	        this.setState({
	          menuOptions: menuOptions,
	          selectValue: selectValue,
	          focusedOption: focusedOption,
	          focusedValue: focusedValue
	        });
	      } // some updates should toggle the state of the input visibility


	      if (this.inputIsHiddenAfterUpdate != null) {
	        this.setState({
	          inputIsHidden: this.inputIsHiddenAfterUpdate
	        });
	        delete this.inputIsHiddenAfterUpdate;
	      }
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var _this$props9 = this.props,
	          isDisabled = _this$props9.isDisabled,
	          menuIsOpen = _this$props9.menuIsOpen;
	      var isFocused = this.state.isFocused;

	      if ( // ensure focus is restored correctly when the control becomes enabled
	      isFocused && !isDisabled && prevProps.isDisabled || // ensure focus is on the Input when the menu opens
	      isFocused && menuIsOpen && !prevProps.menuIsOpen) {
	        this.focusInput();
	      } // scroll the focused option into view if necessary


	      if (this.menuListRef && this.focusedOptionRef && this.scrollToFocusedOptionOnUpdate) {
	        (0, utils.scrollIntoView)(this.menuListRef, this.focusedOptionRef);
	      }

	      this.scrollToFocusedOptionOnUpdate = false;
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.stopListeningComposition();
	      this.stopListeningToTouch();
	      document.removeEventListener('scroll', this.onScroll, true);
	    }
	  }, {
	    key: "onMenuOpen",
	    // ==============================
	    // Consumer Handlers
	    // ==============================
	    value: function onMenuOpen() {
	      this.props.onMenuOpen();
	    }
	  }, {
	    key: "onMenuClose",
	    value: function onMenuClose() {
	      var _this$props10 = this.props,
	          isSearchable = _this$props10.isSearchable,
	          isMulti = _this$props10.isMulti;
	      this.announceAriaLiveContext({
	        event: 'input',
	        context: {
	          isSearchable: isSearchable,
	          isMulti: isMulti
	        }
	      });
	      this.onInputChange('', {
	        action: 'menu-close'
	      });
	      this.props.onMenuClose();
	    }
	  }, {
	    key: "onInputChange",
	    value: function onInputChange(newValue, actionMeta) {
	      this.props.onInputChange(newValue, actionMeta);
	    } // ==============================
	    // Methods
	    // ==============================

	  }, {
	    key: "focusInput",
	    value: function focusInput() {
	      if (!this.inputRef) return;
	      this.inputRef.focus();
	    }
	  }, {
	    key: "blurInput",
	    value: function blurInput() {
	      if (!this.inputRef) return;
	      this.inputRef.blur();
	    } // aliased for consumers

	  }, {
	    key: "openMenu",
	    value: function openMenu(focusOption) {
	      var _this$state3 = this.state,
	          menuOptions = _this$state3.menuOptions,
	          selectValue = _this$state3.selectValue,
	          isFocused = _this$state3.isFocused;
	      var isMulti = this.props.isMulti;
	      var openAtIndex = focusOption === 'first' ? 0 : menuOptions.focusable.length - 1;

	      if (!isMulti) {
	        var selectedIndex = menuOptions.focusable.indexOf(selectValue[0]);

	        if (selectedIndex > -1) {
	          openAtIndex = selectedIndex;
	        }
	      } // only scroll if the menu isn't already open


	      this.scrollToFocusedOptionOnUpdate = !(isFocused && this.menuListRef);
	      this.inputIsHiddenAfterUpdate = false;
	      this.onMenuOpen();
	      this.setState({
	        focusedValue: null,
	        focusedOption: menuOptions.focusable[openAtIndex]
	      });
	      this.announceAriaLiveContext({
	        event: 'menu'
	      });
	    }
	  }, {
	    key: "focusValue",
	    value: function focusValue(direction) {
	      var _this$props11 = this.props,
	          isMulti = _this$props11.isMulti,
	          isSearchable = _this$props11.isSearchable;
	      var _this$state4 = this.state,
	          selectValue = _this$state4.selectValue,
	          focusedValue = _this$state4.focusedValue; // Only multiselects support value focusing

	      if (!isMulti) return;
	      this.setState({
	        focusedOption: null
	      });
	      var focusedIndex = selectValue.indexOf(focusedValue);

	      if (!focusedValue) {
	        focusedIndex = -1;
	        this.announceAriaLiveContext({
	          event: 'value'
	        });
	      }

	      var lastIndex = selectValue.length - 1;
	      var nextFocus = -1;
	      if (!selectValue.length) return;

	      switch (direction) {
	        case 'previous':
	          if (focusedIndex === 0) {
	            // don't cycle from the start to the end
	            nextFocus = 0;
	          } else if (focusedIndex === -1) {
	            // if nothing is focused, focus the last value first
	            nextFocus = lastIndex;
	          } else {
	            nextFocus = focusedIndex - 1;
	          }

	          break;

	        case 'next':
	          if (focusedIndex > -1 && focusedIndex < lastIndex) {
	            nextFocus = focusedIndex + 1;
	          }

	          break;
	      }

	      if (nextFocus === -1) {
	        this.announceAriaLiveContext({
	          event: 'input',
	          context: {
	            isSearchable: isSearchable,
	            isMulti: isMulti
	          }
	        });
	      }

	      this.setState({
	        inputIsHidden: nextFocus === -1 ? false : true,
	        focusedValue: selectValue[nextFocus]
	      });
	    }
	  }, {
	    key: "focusOption",
	    value: function focusOption() {
	      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'first';
	      var pageSize = this.props.pageSize;
	      var _this$state5 = this.state,
	          focusedOption = _this$state5.focusedOption,
	          menuOptions = _this$state5.menuOptions;
	      var options = menuOptions.focusable;
	      if (!options.length) return;
	      var nextFocus = 0; // handles 'first'

	      var focusedIndex = options.indexOf(focusedOption);

	      if (!focusedOption) {
	        focusedIndex = -1;
	        this.announceAriaLiveContext({
	          event: 'menu'
	        });
	      }

	      if (direction === 'up') {
	        nextFocus = focusedIndex > 0 ? focusedIndex - 1 : options.length - 1;
	      } else if (direction === 'down') {
	        nextFocus = (focusedIndex + 1) % options.length;
	      } else if (direction === 'pageup') {
	        nextFocus = focusedIndex - pageSize;
	        if (nextFocus < 0) nextFocus = 0;
	      } else if (direction === 'pagedown') {
	        nextFocus = focusedIndex + pageSize;
	        if (nextFocus > options.length - 1) nextFocus = options.length - 1;
	      } else if (direction === 'last') {
	        nextFocus = options.length - 1;
	      }

	      this.scrollToFocusedOptionOnUpdate = true;
	      this.setState({
	        focusedOption: options[nextFocus],
	        focusedValue: null
	      });
	      this.announceAriaLiveContext({
	        event: 'menu',
	        context: {
	          isDisabled: (0, builtins$1.isOptionDisabled)(options[nextFocus])
	        }
	      });
	    }
	  }, {
	    key: "getTheme",
	    // ==============================
	    // Getters
	    // ==============================
	    value: function getTheme() {
	      // Use the default theme if there are no customizations.
	      if (!this.props.theme) {
	        return theme.defaultTheme;
	      } // If the theme prop is a function, assume the function
	      // knows how to merge the passed-in default theme with
	      // its own modifications.


	      if (typeof this.props.theme === 'function') {
	        return this.props.theme(theme.defaultTheme);
	      } // Otherwise, if a plain theme object was passed in,
	      // overlay it with the default theme.


	      return _objectSpread({}, theme.defaultTheme, this.props.theme);
	    }
	  }, {
	    key: "getCommonProps",
	    value: function getCommonProps() {
	      var clearValue = this.clearValue,
	          getStyles = this.getStyles,
	          setValue = this.setValue,
	          selectOption = this.selectOption,
	          props = this.props;
	      var classNamePrefix = props.classNamePrefix,
	          isMulti = props.isMulti,
	          isRtl = props.isRtl,
	          options = props.options;
	      var selectValue = this.state.selectValue;
	      var hasValue = this.hasValue();

	      var getValue = function getValue() {
	        return selectValue;
	      };

	      var cx = utils.classNames.bind(null, classNamePrefix);

	      return {
	        cx: cx,
	        clearValue: clearValue,
	        getStyles: getStyles,
	        getValue: getValue,
	        hasValue: hasValue,
	        isMulti: isMulti,
	        isRtl: isRtl,
	        options: options,
	        selectOption: selectOption,
	        setValue: setValue,
	        selectProps: props,
	        theme: this.getTheme()
	      };
	    }
	  }, {
	    key: "getNextFocusedValue",
	    value: function getNextFocusedValue(nextSelectValue) {
	      if (this.clearFocusValueOnUpdate) {
	        this.clearFocusValueOnUpdate = false;
	        return null;
	      }

	      var _this$state6 = this.state,
	          focusedValue = _this$state6.focusedValue,
	          lastSelectValue = _this$state6.selectValue;
	      var lastFocusedIndex = lastSelectValue.indexOf(focusedValue);

	      if (lastFocusedIndex > -1) {
	        var nextFocusedIndex = nextSelectValue.indexOf(focusedValue);

	        if (nextFocusedIndex > -1) {
	          // the focused value is still in the selectValue, return it
	          return focusedValue;
	        } else if (lastFocusedIndex < nextSelectValue.length) {
	          // the focusedValue is not present in the next selectValue array by
	          // reference, so return the new value at the same index
	          return nextSelectValue[lastFocusedIndex];
	        }
	      }

	      return null;
	    }
	  }, {
	    key: "getNextFocusedOption",
	    value: function getNextFocusedOption(options) {
	      var lastFocusedOption = this.state.focusedOption;
	      return lastFocusedOption && options.indexOf(lastFocusedOption) > -1 ? lastFocusedOption : options[0];
	    }
	  }, {
	    key: "hasValue",
	    value: function hasValue() {
	      var selectValue = this.state.selectValue;
	      return selectValue.length > 0;
	    }
	  }, {
	    key: "hasOptions",
	    value: function hasOptions() {
	      return !!this.state.menuOptions.render.length;
	    }
	  }, {
	    key: "countOptions",
	    value: function countOptions() {
	      return this.state.menuOptions.focusable.length;
	    }
	  }, {
	    key: "isClearable",
	    value: function isClearable() {
	      var _this$props12 = this.props,
	          isClearable = _this$props12.isClearable,
	          isMulti = _this$props12.isMulti; // single select, by default, IS NOT clearable
	      // multi select, by default, IS clearable

	      if (isClearable === undefined) return isMulti;
	      return isClearable;
	    }
	  }, {
	    key: "isOptionDisabled",
	    value: function isOptionDisabled(option, selectValue) {
	      return typeof this.props.isOptionDisabled === 'function' ? this.props.isOptionDisabled(option, selectValue) : false;
	    }
	  }, {
	    key: "isOptionSelected",
	    value: function isOptionSelected(option, selectValue) {
	      var _this2 = this;

	      if (selectValue.indexOf(option) > -1) return true;

	      if (typeof this.props.isOptionSelected === 'function') {
	        return this.props.isOptionSelected(option, selectValue);
	      }

	      var candidate = this.getOptionValue(option);
	      return selectValue.some(function (i) {
	        return _this2.getOptionValue(i) === candidate;
	      });
	    }
	  }, {
	    key: "filterOption",
	    value: function filterOption(option, inputValue) {
	      return this.props.filterOption ? this.props.filterOption(option, inputValue) : true;
	    }
	  }, {
	    key: "formatOptionLabel",
	    value: function formatOptionLabel(data, context) {
	      if (typeof this.props.formatOptionLabel === 'function') {
	        var inputValue = this.props.inputValue;
	        var selectValue = this.state.selectValue;
	        return this.props.formatOptionLabel(data, {
	          context: context,
	          inputValue: inputValue,
	          selectValue: selectValue
	        });
	      } else {
	        return this.getOptionLabel(data);
	      }
	    }
	  }, {
	    key: "formatGroupLabel",
	    value: function formatGroupLabel(data) {
	      return this.props.formatGroupLabel(data);
	    } // ==============================
	    // Mouse Handlers
	    // ==============================

	  }, {
	    key: "startListeningComposition",
	    // ==============================
	    // Composition Handlers
	    // ==============================
	    value: function startListeningComposition() {
	      if (document && document.addEventListener) {
	        document.addEventListener('compositionstart', this.onCompositionStart, false);
	        document.addEventListener('compositionend', this.onCompositionEnd, false);
	      }
	    }
	  }, {
	    key: "stopListeningComposition",
	    value: function stopListeningComposition() {
	      if (document && document.removeEventListener) {
	        document.removeEventListener('compositionstart', this.onCompositionStart);
	        document.removeEventListener('compositionend', this.onCompositionEnd);
	      }
	    }
	  }, {
	    key: "startListeningToTouch",
	    // ==============================
	    // Touch Handlers
	    // ==============================
	    value: function startListeningToTouch() {
	      if (document && document.addEventListener) {
	        document.addEventListener('touchstart', this.onTouchStart, false);
	        document.addEventListener('touchmove', this.onTouchMove, false);
	        document.addEventListener('touchend', this.onTouchEnd, false);
	      }
	    }
	  }, {
	    key: "stopListeningToTouch",
	    value: function stopListeningToTouch() {
	      if (document && document.removeEventListener) {
	        document.removeEventListener('touchstart', this.onTouchStart);
	        document.removeEventListener('touchmove', this.onTouchMove);
	        document.removeEventListener('touchend', this.onTouchEnd);
	      }
	    }
	  }, {
	    key: "buildMenuOptions",
	    // ==============================
	    // Menu Options
	    // ==============================
	    value: function buildMenuOptions(props, selectValue) {
	      var _this3 = this;

	      var _props$inputValue = props.inputValue,
	          inputValue = _props$inputValue === void 0 ? '' : _props$inputValue,
	          options = props.options;

	      var toOption = function toOption(option, id) {
	        var isDisabled = _this3.isOptionDisabled(option, selectValue);

	        var isSelected = _this3.isOptionSelected(option, selectValue);

	        var label = _this3.getOptionLabel(option);

	        var value = _this3.getOptionValue(option);

	        if (_this3.shouldHideSelectedOptions() && isSelected || !_this3.filterOption({
	          label: label,
	          value: value,
	          data: option
	        }, inputValue)) {
	          return;
	        }

	        var onHover = isDisabled ? undefined : function () {
	          return _this3.onOptionHover(option);
	        };
	        var onSelect = isDisabled ? undefined : function () {
	          return _this3.selectOption(option);
	        };
	        var optionId = "".concat(_this3.getElementId('option'), "-").concat(id);
	        return {
	          innerProps: {
	            id: optionId,
	            onClick: onSelect,
	            onMouseMove: onHover,
	            onMouseOver: onHover,
	            tabIndex: -1
	          },
	          data: option,
	          isDisabled: isDisabled,
	          isSelected: isSelected,
	          key: optionId,
	          label: label,
	          type: 'option',
	          value: value
	        };
	      };

	      return options.reduce(function (acc, item, itemIndex) {
	        if (item.options) {
	          // TODO needs a tidier implementation
	          if (!_this3.hasGroups) _this3.hasGroups = true;
	          var items = item.options;
	          var children = items.map(function (child, i) {
	            var option = toOption(child, "".concat(itemIndex, "-").concat(i));
	            if (option) acc.focusable.push(child);
	            return option;
	          }).filter(Boolean);

	          if (children.length) {
	            var groupId = "".concat(_this3.getElementId('group'), "-").concat(itemIndex);
	            acc.render.push({
	              type: 'group',
	              key: groupId,
	              data: item,
	              options: children
	            });
	          }
	        } else {
	          var option = toOption(item, "".concat(itemIndex));

	          if (option) {
	            acc.render.push(option);
	            acc.focusable.push(item);
	          }
	        }

	        return acc;
	      }, {
	        render: [],
	        focusable: []
	      });
	    } // ==============================
	    // Renderers
	    // ==============================

	  }, {
	    key: "constructAriaLiveMessage",
	    value: function constructAriaLiveMessage() {
	      var _this$state7 = this.state,
	          ariaLiveContext = _this$state7.ariaLiveContext,
	          selectValue = _this$state7.selectValue,
	          focusedValue = _this$state7.focusedValue,
	          focusedOption = _this$state7.focusedOption;
	      var _this$props13 = this.props,
	          options = _this$props13.options,
	          menuIsOpen = _this$props13.menuIsOpen,
	          inputValue = _this$props13.inputValue,
	          screenReaderStatus = _this$props13.screenReaderStatus; // An aria live message representing the currently focused value in the select.

	      var focusedValueMsg = focusedValue ? (0, accessibility.valueFocusAriaMessage)({
	        focusedValue: focusedValue,
	        getOptionLabel: this.getOptionLabel,
	        selectValue: selectValue
	      }) : ''; // An aria live message representing the currently focused option in the select.

	      var focusedOptionMsg = focusedOption && menuIsOpen ? (0, accessibility.optionFocusAriaMessage)({
	        focusedOption: focusedOption,
	        getOptionLabel: this.getOptionLabel,
	        options: options
	      }) : ''; // An aria live message representing the set of focusable results and current searchterm/inputvalue.

	      var resultsMsg = (0, accessibility.resultsAriaMessage)({
	        inputValue: inputValue,
	        screenReaderMessage: screenReaderStatus({
	          count: this.countOptions()
	        })
	      });
	      return "".concat(focusedValueMsg, " ").concat(focusedOptionMsg, " ").concat(resultsMsg, " ").concat(ariaLiveContext);
	    }
	  }, {
	    key: "renderInput",
	    value: function renderInput() {
	      var _this$props14 = this.props,
	          isDisabled = _this$props14.isDisabled,
	          isSearchable = _this$props14.isSearchable,
	          inputId = _this$props14.inputId,
	          inputValue = _this$props14.inputValue,
	          tabIndex = _this$props14.tabIndex;
	      var Input = this.components.Input;
	      var inputIsHidden = this.state.inputIsHidden;
	      var id = inputId || this.getElementId('input');

	      if (!isSearchable) {
	        // use a dummy input to maintain focus/blur functionality
	        return _react.default.createElement(internal.DummyInput, {
	          id: id,
	          innerRef: this.getInputRef,
	          onBlur: this.onInputBlur,
	          onChange: utils.noop,
	          onFocus: this.onInputFocus,
	          readOnly: true,
	          disabled: isDisabled,
	          tabIndex: tabIndex,
	          value: ""
	        });
	      } // aria attributes makes the JSX "noisy", separated for clarity


	      var ariaAttributes = {
	        'aria-autocomplete': 'list',
	        'aria-label': this.props['aria-label'],
	        'aria-labelledby': this.props['aria-labelledby']
	      };
	      var _this$commonProps = this.commonProps,
	          cx = _this$commonProps.cx,
	          theme = _this$commonProps.theme,
	          selectProps = _this$commonProps.selectProps;
	      return _react.default.createElement(Input, _extends({
	        autoCapitalize: "none",
	        autoComplete: "off",
	        autoCorrect: "off",
	        cx: cx,
	        getStyles: this.getStyles,
	        id: id,
	        innerRef: this.getInputRef,
	        isDisabled: isDisabled,
	        isHidden: inputIsHidden,
	        onBlur: this.onInputBlur,
	        onChange: this.handleInputChange,
	        onFocus: this.onInputFocus,
	        selectProps: selectProps,
	        spellCheck: "false",
	        tabIndex: tabIndex,
	        theme: theme,
	        type: "text",
	        value: inputValue
	      }, ariaAttributes));
	    }
	  }, {
	    key: "renderPlaceholderOrValue",
	    value: function renderPlaceholderOrValue() {
	      var _this4 = this;

	      var _this$components = this.components,
	          MultiValue = _this$components.MultiValue,
	          MultiValueContainer = _this$components.MultiValueContainer,
	          MultiValueLabel = _this$components.MultiValueLabel,
	          MultiValueRemove = _this$components.MultiValueRemove,
	          SingleValue = _this$components.SingleValue,
	          Placeholder = _this$components.Placeholder;
	      var commonProps = this.commonProps;
	      var _this$props15 = this.props,
	          controlShouldRenderValue = _this$props15.controlShouldRenderValue,
	          isDisabled = _this$props15.isDisabled,
	          isMulti = _this$props15.isMulti,
	          inputValue = _this$props15.inputValue,
	          placeholder = _this$props15.placeholder;
	      var _this$state8 = this.state,
	          selectValue = _this$state8.selectValue,
	          focusedValue = _this$state8.focusedValue,
	          isFocused = _this$state8.isFocused;

	      if (!this.hasValue() || !controlShouldRenderValue) {
	        return inputValue ? null : _react.default.createElement(Placeholder, _extends({}, commonProps, {
	          key: "placeholder",
	          isDisabled: isDisabled,
	          isFocused: isFocused
	        }), placeholder);
	      }

	      if (isMulti) {
	        var selectValues = selectValue.map(function (opt) {
	          var isOptionFocused = opt === focusedValue;
	          return _react.default.createElement(MultiValue, _extends({}, commonProps, {
	            components: {
	              Container: MultiValueContainer,
	              Label: MultiValueLabel,
	              Remove: MultiValueRemove
	            },
	            isFocused: isOptionFocused,
	            isDisabled: isDisabled,
	            key: _this4.getOptionValue(opt),
	            removeProps: {
	              onClick: function onClick() {
	                return _this4.removeValue(opt);
	              },
	              onTouchEnd: function onTouchEnd() {
	                return _this4.removeValue(opt);
	              },
	              onMouseDown: function onMouseDown(e) {
	                e.preventDefault();
	                e.stopPropagation();
	              }
	            },
	            data: opt
	          }), _this4.formatOptionLabel(opt, 'value'));
	        });
	        return selectValues;
	      }

	      if (inputValue) {
	        return null;
	      }

	      var singleValue = selectValue[0];
	      return _react.default.createElement(SingleValue, _extends({}, commonProps, {
	        data: singleValue,
	        isDisabled: isDisabled
	      }), this.formatOptionLabel(singleValue, 'value'));
	    }
	  }, {
	    key: "renderClearIndicator",
	    value: function renderClearIndicator() {
	      var ClearIndicator = this.components.ClearIndicator;
	      var commonProps = this.commonProps;
	      var _this$props16 = this.props,
	          isDisabled = _this$props16.isDisabled,
	          isLoading = _this$props16.isLoading;
	      var isFocused = this.state.isFocused;

	      if (!this.isClearable() || !ClearIndicator || isDisabled || !this.hasValue() || isLoading) {
	        return null;
	      }

	      var innerProps = {
	        onMouseDown: this.onClearIndicatorMouseDown,
	        onTouchEnd: this.onClearIndicatorTouchEnd,
	        'aria-hidden': 'true'
	      };
	      return _react.default.createElement(ClearIndicator, _extends({}, commonProps, {
	        innerProps: innerProps,
	        isFocused: isFocused
	      }));
	    }
	  }, {
	    key: "renderLoadingIndicator",
	    value: function renderLoadingIndicator() {
	      var LoadingIndicator = this.components.LoadingIndicator;
	      var commonProps = this.commonProps;
	      var _this$props17 = this.props,
	          isDisabled = _this$props17.isDisabled,
	          isLoading = _this$props17.isLoading;
	      var isFocused = this.state.isFocused;
	      if (!LoadingIndicator || !isLoading) return null;
	      var innerProps = {
	        'aria-hidden': 'true'
	      };
	      return _react.default.createElement(LoadingIndicator, _extends({}, commonProps, {
	        innerProps: innerProps,
	        isDisabled: isDisabled,
	        isFocused: isFocused
	      }));
	    }
	  }, {
	    key: "renderIndicatorSeparator",
	    value: function renderIndicatorSeparator() {
	      var _this$components2 = this.components,
	          DropdownIndicator = _this$components2.DropdownIndicator,
	          IndicatorSeparator = _this$components2.IndicatorSeparator; // separator doesn't make sense without the dropdown indicator

	      if (!DropdownIndicator || !IndicatorSeparator) return null;
	      var commonProps = this.commonProps;
	      var isDisabled = this.props.isDisabled;
	      var isFocused = this.state.isFocused;
	      return _react.default.createElement(IndicatorSeparator, _extends({}, commonProps, {
	        isDisabled: isDisabled,
	        isFocused: isFocused
	      }));
	    }
	  }, {
	    key: "renderDropdownIndicator",
	    value: function renderDropdownIndicator() {
	      var DropdownIndicator = this.components.DropdownIndicator;
	      if (!DropdownIndicator) return null;
	      var commonProps = this.commonProps;
	      var isDisabled = this.props.isDisabled;
	      var isFocused = this.state.isFocused;
	      var innerProps = {
	        onMouseDown: this.onDropdownIndicatorMouseDown,
	        onTouchEnd: this.onDropdownIndicatorTouchEnd,
	        'aria-hidden': 'true'
	      };
	      return _react.default.createElement(DropdownIndicator, _extends({}, commonProps, {
	        innerProps: innerProps,
	        isDisabled: isDisabled,
	        isFocused: isFocused
	      }));
	    }
	  }, {
	    key: "renderMenu",
	    value: function renderMenu() {
	      var _this5 = this;

	      var _this$components3 = this.components,
	          Group = _this$components3.Group,
	          GroupHeading = _this$components3.GroupHeading,
	          Menu = _this$components3.Menu,
	          MenuList = _this$components3.MenuList,
	          MenuPortal = _this$components3.MenuPortal,
	          LoadingMessage = _this$components3.LoadingMessage,
	          NoOptionsMessage = _this$components3.NoOptionsMessage,
	          Option = _this$components3.Option;
	      var commonProps = this.commonProps;
	      var _this$state9 = this.state,
	          focusedOption = _this$state9.focusedOption,
	          menuOptions = _this$state9.menuOptions;
	      var _this$props18 = this.props,
	          captureMenuScroll = _this$props18.captureMenuScroll,
	          inputValue = _this$props18.inputValue,
	          isLoading = _this$props18.isLoading,
	          loadingMessage = _this$props18.loadingMessage,
	          minMenuHeight = _this$props18.minMenuHeight,
	          maxMenuHeight = _this$props18.maxMenuHeight,
	          menuIsOpen = _this$props18.menuIsOpen,
	          menuPlacement = _this$props18.menuPlacement,
	          menuPosition = _this$props18.menuPosition,
	          menuPortalTarget = _this$props18.menuPortalTarget,
	          menuShouldBlockScroll = _this$props18.menuShouldBlockScroll,
	          menuShouldScrollIntoView = _this$props18.menuShouldScrollIntoView,
	          noOptionsMessage = _this$props18.noOptionsMessage,
	          onMenuScrollToTop = _this$props18.onMenuScrollToTop,
	          onMenuScrollToBottom = _this$props18.onMenuScrollToBottom;
	      if (!menuIsOpen) return null; // TODO: Internal Option Type here

	      var render = function render(props) {
	        // for performance, the menu options in state aren't changed when the
	        // focused option changes so we calculate additional props based on that
	        var isFocused = focusedOption === props.data;
	        props.innerRef = isFocused ? _this5.getFocusedOptionRef : undefined;
	        return _react.default.createElement(Option, _extends({}, commonProps, props, {
	          isFocused: isFocused
	        }), _this5.formatOptionLabel(props.data, 'menu'));
	      };

	      var menuUI;

	      if (this.hasOptions()) {
	        menuUI = menuOptions.render.map(function (item) {
	          if (item.type === 'group') {
	            var type = item.type,
	                group = _objectWithoutProperties(item, ["type"]);

	            var headingId = "".concat(item.key, "-heading");
	            return _react.default.createElement(Group, _extends({}, commonProps, group, {
	              Heading: GroupHeading,
	              headingProps: {
	                id: headingId
	              },
	              label: _this5.formatGroupLabel(item.data)
	            }), item.options.map(function (option) {
	              return render(option);
	            }));
	          } else if (item.type === 'option') {
	            return render(item);
	          }
	        });
	      } else if (isLoading) {
	        var message = loadingMessage({
	          inputValue: inputValue
	        });
	        if (message === null) return null;
	        menuUI = _react.default.createElement(LoadingMessage, commonProps, message);
	      } else {
	        var _message = noOptionsMessage({
	          inputValue: inputValue
	        });

	        if (_message === null) return null;
	        menuUI = _react.default.createElement(NoOptionsMessage, commonProps, _message);
	      }

	      var menuPlacementProps = {
	        minMenuHeight: minMenuHeight,
	        maxMenuHeight: maxMenuHeight,
	        menuPlacement: menuPlacement,
	        menuPosition: menuPosition,
	        menuShouldScrollIntoView: menuShouldScrollIntoView
	      };

	      var menuElement = _react.default.createElement(Menu_1.MenuPlacer, _extends({}, commonProps, menuPlacementProps), function (_ref6) {
	        var ref = _ref6.ref,
	            _ref6$placerProps = _ref6.placerProps,
	            placement = _ref6$placerProps.placement,
	            maxHeight = _ref6$placerProps.maxHeight;
	        return _react.default.createElement(Menu, _extends({}, commonProps, menuPlacementProps, {
	          innerRef: ref,
	          innerProps: {
	            onMouseDown: _this5.onMenuMouseDown,
	            onMouseMove: _this5.onMenuMouseMove
	          },
	          isLoading: isLoading,
	          placement: placement
	        }), _react.default.createElement(internal.ScrollCaptor, {
	          isEnabled: captureMenuScroll,
	          onTopArrive: onMenuScrollToTop,
	          onBottomArrive: onMenuScrollToBottom
	        }, _react.default.createElement(internal.ScrollBlock, {
	          isEnabled: menuShouldBlockScroll
	        }, _react.default.createElement(MenuList, _extends({}, commonProps, {
	          innerRef: _this5.getMenuListRef,
	          isLoading: isLoading,
	          maxHeight: maxHeight
	        }), menuUI))));
	      }); // positioning behaviour is almost identical for portalled and fixed,
	      // so we use the same component. the actual portalling logic is forked
	      // within the component based on `menuPosition`


	      return menuPortalTarget || menuPosition === 'fixed' ? _react.default.createElement(MenuPortal, _extends({}, commonProps, {
	        appendTo: menuPortalTarget,
	        controlElement: this.controlRef,
	        menuPlacement: menuPlacement,
	        menuPosition: menuPosition
	      }), menuElement) : menuElement;
	    }
	  }, {
	    key: "renderFormField",
	    value: function renderFormField() {
	      var _this6 = this;

	      var _this$props19 = this.props,
	          delimiter = _this$props19.delimiter,
	          isDisabled = _this$props19.isDisabled,
	          isMulti = _this$props19.isMulti,
	          name = _this$props19.name;
	      var selectValue = this.state.selectValue;
	      if (!name || isDisabled) return;

	      if (isMulti) {
	        if (delimiter) {
	          var value = selectValue.map(function (opt) {
	            return _this6.getOptionValue(opt);
	          }).join(delimiter);
	          return _react.default.createElement("input", {
	            name: name,
	            type: "hidden",
	            value: value
	          });
	        } else {
	          var input = selectValue.length > 0 ? selectValue.map(function (opt, i) {
	            return _react.default.createElement("input", {
	              key: "i-".concat(i),
	              name: name,
	              type: "hidden",
	              value: _this6.getOptionValue(opt)
	            });
	          }) : _react.default.createElement("input", {
	            name: name,
	            type: "hidden"
	          });
	          return _react.default.createElement("div", null, input);
	        }
	      } else {
	        var _value = selectValue[0] ? this.getOptionValue(selectValue[0]) : '';

	        return _react.default.createElement("input", {
	          name: name,
	          type: "hidden",
	          value: _value
	        });
	      }
	    }
	  }, {
	    key: "renderLiveRegion",
	    value: function renderLiveRegion() {
	      if (!this.state.isFocused) return null;
	      return _react.default.createElement(internal.A11yText, {
	        "aria-live": "assertive"
	      }, _react.default.createElement("p", {
	        id: "aria-selection-event"
	      }, "\xA0", this.state.ariaLiveSelection), _react.default.createElement("p", {
	        id: "aria-context"
	      }, "\xA0", this.constructAriaLiveMessage()));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$components4 = this.components,
	          Control = _this$components4.Control,
	          IndicatorsContainer = _this$components4.IndicatorsContainer,
	          SelectContainer = _this$components4.SelectContainer,
	          ValueContainer = _this$components4.ValueContainer;
	      var _this$props20 = this.props,
	          className = _this$props20.className,
	          id = _this$props20.id,
	          isDisabled = _this$props20.isDisabled,
	          menuIsOpen = _this$props20.menuIsOpen;
	      var isFocused = this.state.isFocused;
	      var commonProps = this.commonProps = this.getCommonProps();
	      return _react.default.createElement(SelectContainer, _extends({}, commonProps, {
	        className: className,
	        innerProps: {
	          id: id,
	          onKeyDown: this.onKeyDown
	        },
	        isDisabled: isDisabled,
	        isFocused: isFocused
	      }), this.renderLiveRegion(), _react.default.createElement(Control, _extends({}, commonProps, {
	        innerRef: this.getControlRef,
	        innerProps: {
	          onMouseDown: this.onControlMouseDown,
	          onTouchEnd: this.onControlTouchEnd
	        },
	        isDisabled: isDisabled,
	        isFocused: isFocused,
	        menuIsOpen: menuIsOpen
	      }), _react.default.createElement(ValueContainer, _extends({}, commonProps, {
	        isDisabled: isDisabled
	      }), this.renderPlaceholderOrValue(), this.renderInput()), _react.default.createElement(IndicatorsContainer, _extends({}, commonProps, {
	        isDisabled: isDisabled
	      }), this.renderClearIndicator(), this.renderLoadingIndicator(), this.renderIndicatorSeparator(), this.renderDropdownIndicator())), this.renderMenu(), this.renderFormField());
	    }
	  }]);

	  return Select;
	}(_react.Component);

	exports.default = Select;

	_defineProperty(Select, "defaultProps", defaultProps);
	});

	unwrapExports(Select_1);
	var Select_2 = Select_1.defaultProps;

	var stateManager = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.defaultProps = void 0;

	var _react = _interopRequireWildcard(React__default);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var defaultProps = {
	  defaultInputValue: '',
	  defaultMenuIsOpen: false,
	  defaultValue: null
	};
	exports.defaultProps = defaultProps;

	var manageState = function manageState(SelectComponent) {
	  var _class, _temp;

	  return _temp = _class =
	  /*#__PURE__*/
	  function (_Component) {
	    _inherits(StateManager, _Component);

	    function StateManager() {
	      var _getPrototypeOf2;

	      var _this;

	      _classCallCheck(this, StateManager);

	      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StateManager)).call.apply(_getPrototypeOf2, [this].concat(args)));

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "select", void 0);

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
	        inputValue: _this.props.inputValue !== undefined ? _this.props.inputValue : _this.props.defaultInputValue,
	        menuIsOpen: _this.props.menuIsOpen !== undefined ? _this.props.menuIsOpen : _this.props.defaultMenuIsOpen,
	        value: _this.props.value !== undefined ? _this.props.value : _this.props.defaultValue
	      });

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onChange", function (value, actionMeta) {
	        _this.callProp('onChange', value, actionMeta);

	        _this.setState({
	          value: value
	        });
	      });

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onInputChange", function (value, actionMeta) {
	        // TODO: for backwards compatibility, we allow the prop to return a new
	        // value, but now inputValue is a controllable prop we probably shouldn't
	        var newValue = _this.callProp('onInputChange', value, actionMeta);

	        _this.setState({
	          inputValue: newValue !== undefined ? newValue : value
	        });
	      });

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMenuOpen", function () {
	        _this.callProp('onMenuOpen');

	        _this.setState({
	          menuIsOpen: true
	        });
	      });

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMenuClose", function () {
	        _this.callProp('onMenuClose');

	        _this.setState({
	          menuIsOpen: false
	        });
	      });

	      return _this;
	    }

	    _createClass(StateManager, [{
	      key: "focus",
	      value: function focus() {
	        this.select.focus();
	      }
	    }, {
	      key: "blur",
	      value: function blur() {
	        this.select.blur();
	      } // FIXME: untyped flow code, return any

	    }, {
	      key: "getProp",
	      value: function getProp(key) {
	        return this.props[key] !== undefined ? this.props[key] : this.state[key];
	      } // FIXME: untyped flow code, return any

	    }, {
	      key: "callProp",
	      value: function callProp(name) {
	        if (typeof this.props[name] === 'function') {
	          var _this$props;

	          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	            args[_key2 - 1] = arguments[_key2];
	          }

	          return (_this$props = this.props)[name].apply(_this$props, args);
	        }
	      }
	    }, {
	      key: "render",
	      value: function render() {
	        var _this2 = this;

	        var _this$props2 = this.props,
	            defaultInputValue = _this$props2.defaultInputValue,
	            defaultMenuIsOpen = _this$props2.defaultMenuIsOpen,
	            defaultValue = _this$props2.defaultValue,
	            props = _objectWithoutProperties(_this$props2, ["defaultInputValue", "defaultMenuIsOpen", "defaultValue"]);

	        return _react.default.createElement(SelectComponent, _extends({}, props, {
	          ref: function ref(_ref) {
	            _this2.select = _ref;
	          },
	          inputValue: this.getProp('inputValue'),
	          menuIsOpen: this.getProp('menuIsOpen'),
	          onChange: this.onChange,
	          onInputChange: this.onInputChange,
	          onMenuClose: this.onMenuClose,
	          onMenuOpen: this.onMenuOpen,
	          value: this.getProp('value')
	        }));
	      }
	    }]);

	    return StateManager;
	  }(_react.Component), _defineProperty(_class, "defaultProps", defaultProps), _temp;
	};

	var _default = manageState;
	exports.default = _default;
	});

	unwrapExports(stateManager);
	var stateManager_1 = stateManager.defaultProps;

	var Async$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.makeAsyncSelect = exports.defaultProps = void 0;

	var _react = _interopRequireWildcard(React__default);

	var _Select = _interopRequireDefault(Select_1);



	var _stateManager = _interopRequireDefault(stateManager);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var defaultProps = {
	  cacheOptions: false,
	  defaultOptions: false,
	  filterOption: null
	};
	exports.defaultProps = defaultProps;

	var makeAsyncSelect = function makeAsyncSelect(SelectComponent) {
	  var _class, _temp;

	  return _temp = _class =
	  /*#__PURE__*/
	  function (_Component) {
	    _inherits(Async, _Component);

	    function Async(props) {
	      var _this;

	      _classCallCheck(this, Async);

	      _this = _possibleConstructorReturn(this, _getPrototypeOf(Async).call(this));

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "select", void 0);

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "lastRequest", void 0);

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "mounted", false);

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "optionsCache", {});

	      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleInputChange", function (newValue, actionMeta) {
	        var _this$props = _this.props,
	            cacheOptions = _this$props.cacheOptions,
	            onInputChange = _this$props.onInputChange; // TODO

	        var inputValue = (0, utils.handleInputChange)(newValue, actionMeta, onInputChange);

	        if (!inputValue) {
	          delete _this.lastRequest;

	          _this.setState({
	            inputValue: '',
	            loadedInputValue: '',
	            loadedOptions: [],
	            isLoading: false,
	            passEmptyOptions: false
	          });

	          return;
	        }

	        if (cacheOptions && _this.optionsCache[inputValue]) {
	          _this.setState({
	            inputValue: inputValue,
	            loadedInputValue: inputValue,
	            loadedOptions: _this.optionsCache[inputValue],
	            isLoading: false,
	            passEmptyOptions: false
	          });
	        } else {
	          var request = _this.lastRequest = {};

	          _this.setState({
	            inputValue: inputValue,
	            isLoading: true,
	            passEmptyOptions: !_this.state.loadedInputValue
	          }, function () {
	            _this.loadOptions(inputValue, function (options) {
	              if (!_this.mounted) return;

	              if (options) {
	                _this.optionsCache[inputValue] = options;
	              }

	              if (request !== _this.lastRequest) return;
	              delete _this.lastRequest;

	              _this.setState({
	                isLoading: false,
	                loadedInputValue: inputValue,
	                loadedOptions: options || [],
	                passEmptyOptions: false
	              });
	            });
	          });
	        }

	        return inputValue;
	      });

	      _this.state = {
	        defaultOptions: Array.isArray(props.defaultOptions) ? props.defaultOptions : undefined,
	        inputValue: typeof props.inputValue !== 'undefined' ? props.inputValue : '',
	        isLoading: props.defaultOptions === true ? true : false,
	        loadedOptions: [],
	        passEmptyOptions: false
	      };
	      return _this;
	    }

	    _createClass(Async, [{
	      key: "componentDidMount",
	      value: function componentDidMount() {
	        var _this2 = this;

	        this.mounted = true;
	        var defaultOptions = this.props.defaultOptions;
	        var inputValue = this.state.inputValue;

	        if (defaultOptions === true) {
	          this.loadOptions(inputValue, function (options) {
	            if (!_this2.mounted) return;
	            var isLoading = !!_this2.lastRequest;

	            _this2.setState({
	              defaultOptions: options || [],
	              isLoading: isLoading
	            });
	          });
	        }
	      }
	    }, {
	      key: "componentWillReceiveProps",
	      value: function componentWillReceiveProps(nextProps) {
	        // if the cacheOptions prop changes, clear the cache
	        if (nextProps.cacheOptions !== this.props.cacheOptions) {
	          this.optionsCache = {};
	        }

	        if (nextProps.defaultOptions !== this.props.defaultOptions) {
	          this.setState({
	            defaultOptions: Array.isArray(nextProps.defaultOptions) ? nextProps.defaultOptions : undefined
	          });
	        }
	      }
	    }, {
	      key: "componentWillUnmount",
	      value: function componentWillUnmount() {
	        this.mounted = false;
	      }
	    }, {
	      key: "focus",
	      value: function focus() {
	        this.select.focus();
	      }
	    }, {
	      key: "blur",
	      value: function blur() {
	        this.select.blur();
	      }
	    }, {
	      key: "loadOptions",
	      value: function loadOptions(inputValue, callback) {
	        var loadOptions = this.props.loadOptions;
	        if (!loadOptions) return callback();
	        var loader = loadOptions(inputValue, callback);

	        if (loader && typeof loader.then === 'function') {
	          loader.then(callback, function () {
	            return callback();
	          });
	        }
	      }
	    }, {
	      key: "render",
	      value: function render() {
	        var _this3 = this;

	        var _this$props2 = this.props,
	            loadOptions = _this$props2.loadOptions,
	            props = _objectWithoutProperties(_this$props2, ["loadOptions"]);

	        var _this$state = this.state,
	            defaultOptions = _this$state.defaultOptions,
	            inputValue = _this$state.inputValue,
	            isLoading = _this$state.isLoading,
	            loadedInputValue = _this$state.loadedInputValue,
	            loadedOptions = _this$state.loadedOptions,
	            passEmptyOptions = _this$state.passEmptyOptions;
	        var options = passEmptyOptions ? [] : inputValue && loadedInputValue ? loadedOptions : defaultOptions || [];
	        return _react.default.createElement(SelectComponent, _extends({}, props, {
	          ref: function ref(_ref) {
	            _this3.select = _ref;
	          },
	          options: options,
	          isLoading: isLoading,
	          onInputChange: this.handleInputChange
	        }));
	      }
	    }]);

	    return Async;
	  }(_react.Component), _defineProperty(_class, "defaultProps", defaultProps), _temp;
	};

	exports.makeAsyncSelect = makeAsyncSelect;
	var SelectState = (0, _stateManager.default)(_Select.default);

	var _default = makeAsyncSelect(SelectState);

	exports.default = _default;
	});

	var Select$1 = unwrapExports(Async$1);
	var Async_1 = Async$1.makeAsyncSelect;
	var Async_2 = Async$1.defaultProps;

	class Edit$6 extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.selected = null;
	    this.loadOptions = this.loadOptions.bind(this);
	    this.handleChange = this.handleChange.bind(this);
	  }

	  handleChange(selected) {
	    const {
	      onChange,
	      property
	    } = this.props;

	    if (selected) {
	      this.selected = selected.record;
	      onChange(property.name, selected.value, selected.record);
	    } else {
	      onChange(property.name, '');
	    }
	  }

	  async loadOptions(inputValue) {
	    const {
	      property
	    } = this.props;
	    const api = new ApiClient();
	    const records = await api.searchRecords({
	      resourceId: property.reference,
	      query: inputValue
	    });
	    return records.map(record => ({
	      value: record.id,
	      label: record.title,
	      record
	    }));
	  }

	  render() {
	    const {
	      property,
	      record,
	      theme
	    } = this.props;
	    const error = record.errors && record.errors[property.name];
	    const reference = record.populated && record.populated[property.name];
	    let selectedOption = reference && {
	      value: reference.id,
	      label: reference.title
	    };
	    const styles = selectStyles(theme);

	    if (this.selected) {
	      selectedOption = {
	        value: this.selected.id,
	        label: this.selected.title
	      };
	    }

	    return React__default.createElement(PropertyInEdit, {
	      property: property,
	      error: error
	    }, React__default.createElement(Select$1, {
	      cacheOptions: true,
	      value: selectedOption,
	      styles: styles,
	      defaultOptions: true,
	      loadOptions: this.loadOptions,
	      onChange: this.handleChange,
	      isDisabled: property.isDisabled
	    }));
	  }

	}

	var edit$1 = styled.withTheme(Edit$6);

	const ReferenceValue = props => {
	  const {
	    property,
	    record
	  } = props;
	  const h = new ViewHelpers();
	  const refId = record.params[property.name];
	  const populated = record.populated[property.name];
	  const value = populated && populated.title || refId;

	  if (!property.reference) {
	    throw new Error(`property: "${property.name}" does not have a reference`);
	  }

	  if (populated && populated.recordActions.find(a => a.name === 'show')) {
	    const href = h.recordActionUrl({
	      resourceId: property.reference,
	      recordId: refId,
	      actionName: 'show'
	    });
	    return React__default.createElement(reactRouterDom.Link, {
	      to: href
	    }, value);
	  }

	  return React__default.createElement("span", null, value);
	};

	class Show$6 extends React__default.PureComponent {
	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    return React__default.createElement(PropertyInShow, {
	      property: property
	    }, React__default.createElement(ReferenceValue, {
	      property: property,
	      record: record
	    }));
	  }

	}

	class List$6 extends React__default.PureComponent {
	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    return React__default.createElement(ReferenceValue, {
	      property: property,
	      record: record
	    });
	  }

	}

	class Filter$4 extends React__default.PureComponent {
	  constructor(props) {
	    super(props);
	    this.api = new ApiClient();
	    this.options = [];
	    this.loadOptions = this.loadOptions.bind(this);
	    this.handleChange = this.handleChange.bind(this);
	  }

	  handleChange(selected) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    onChange(property.name, selected ? selected.value : '');
	  }

	  async loadOptions(inputValue) {
	    const {
	      property
	    } = this.props;
	    const records = await this.api.searchRecords({
	      resourceId: property.reference,
	      query: inputValue
	    });
	    this.options = records.map(r => ({
	      value: r.id,
	      label: r.title
	    }));
	    return this.options;
	  }

	  render() {
	    const {
	      property,
	      filter,
	      theme
	    } = this.props;
	    const value = typeof filter[property.name] === 'undefined' ? '' : filter[property.name];
	    const selected = (this.options || []).find(o => o.value === value);
	    return React__default.createElement(PropertyInFilter, {
	      property: property
	    }, React__default.createElement(Select$1, {
	      value: typeof selected === 'undefined' ? '' : selected,
	      isClearable: true,
	      cacheOptions: true,
	      styles: filterStyles(theme),
	      loadOptions: this.loadOptions,
	      onChange: this.handleChange,
	      defaultOptions: true
	    }));
	  }

	}

	var filter$2 = styled.withTheme(Filter$4);



	var reference = /*#__PURE__*/Object.freeze({
		__proto__: null,
		edit: edit$1,
		show: Show$6,
		list: List$6,
		filter: filter$2
	});

	class Show$7 extends React__default.PureComponent {
	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    const value = record.params[property.name] || '';
	    return React__default.createElement(PropertyInShow, {
	      property: property
	    }, value.split(/(?:\r\n|\r|\n)/g).map((line, i) => // eslint-disable-next-line react/no-array-index-key
	    React__default.createElement(React__default.Fragment, {
	      key: i
	    }, line, React__default.createElement("br", null))));
	  }

	}

	class Edit$7 extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.handleInputChange = this.handleInputChange.bind(this);
	  }

	  handleInputChange(event) {
	    const {
	      onChange,
	      property
	    } = this.props;
	    onChange(property.name, event.target.value);
	  }

	  render() {
	    const {
	      property,
	      record
	    } = this.props;
	    const value = record.params && typeof record.params[property.name] !== 'undefined' && record.params[property.name] !== null ? record.params[property.name] : '';
	    const error = record.errors && record.errors[property.name];
	    return React__default.createElement(PropertyInEdit, {
	      property: property,
	      error: error
	    }, React__default.createElement(StyledInput, {
	      as: "textarea",
	      className: "input",
	      rows: (value.match(/\n/g) || []).length + 1,
	      id: property.name,
	      name: property.name,
	      onChange: this.handleInputChange,
	      value: value,
	      disabled: property.isDisabled
	    }));
	  }

	}

	var edit$2 = styled.withTheme(Edit$7);



	var textarea = /*#__PURE__*/Object.freeze({
		__proto__: null,
		show: Show$7,
		edit: edit$2
	});

	let globalAny$2 = {};

	try {
	  globalAny$2 = window;
	} catch (error) {
	  if (error.message !== 'window is not defined') {
	    throw error;
	  }
	}

	const types = {
	  textarea,
	  boolean,
	  datetime,
	  reference,
	  date: datetime,
	  richtext
	};

	/**
	 * Component which renders properties in all the places in the AdminBro UI. By all the
	 * places I mean:
	 * - **list**: on the List,
	 * - **edit**: on default actions where user can modify the record like: {@link EditAction},
	 * and {@link NewAction},
	 * - **show**: on the default {@link ShowAction} where user can see the details of a record,
	 * - **filter**: and finally on the sidebar filter,
	 *
	 * Based on the type of given property and where the property is rendered **BasePropertyComponent**
	 * picks Component to use. That is how **date** fields are rendered as **datepicker**
	 * or **boolean** values as **checkbox**'es.
	 *
	 * You can override default behavior by changing **components** param
	 * for given property in **AdminBroOptions**. Take a look at the following example:
	 *
	 * ```
	 * const AdminBro = require('admin-bro')
	 * const ResourceModel = require('./resource-model')
	 * const AdminBroOptions = {
	 *   resources: [{
	 *     resource: ResourceModel
	 *     options: {
	 *       properties: {
	 *         name: {
	 *           components: {
	 *             show: AdminBro.bundle('./my-react-component'),
	 *           },
	 *         },
	 *       },
	 *     },
	 *   }],
	 * }
	 * ```
	 *
	 * In the example above we are altering how **name** property will look
	 * like on the {@link ShowAction}. When we will define **my-react-component.jsx** like this:
	 *
	 * ```
	 * import React from 'react'
	 * import PropertyInShow from 'admin-bro'
	 *
	 * const MyReactComponent = props => {
	 *   const { record, property } = props
	 *   const value = record.params[property.name] === 'foo' ? 'bar' : 'zoe'
	 *   return (
	 *     <PropertyInShow property={property}>
	 *       {value}
	 *     </PropertyInShow>
	 *   )
	 * }
	 * ```
	 *
	 * When record value for given property (**name**) equals 'foo' we will render 'bar',
	 * otherwise 'zoe'
	 *
	 * We also use {@link PropertyInShow} helper component to render field with a label that it looks
	 * similar to already defined properties. For other places you can use
	 * a different _wrapper components_:
	 * - `edit`: {@link PropertyInEdit}
	 * - `show`: {@link PropertyInShow}
	 * - `filter`: {@link PropertyInFilter}
	 * - `list`: doesn't have any special wrapper,
	 *
	 * In your components you have access to the following prop types:
	 *
	 * @component
	 * @name BasePropertyComponent
	 * @category Base
	 * @example
	 * const booleanProperty = {
	 *   isTitle: false,
	 *   name: 'awesome',
	 *   isId: false,
	 *   position: -1,
	 *   label: 'I am awesome',
	 *   type: 'boolean',
	 * }
	 *
	 * const stringProperty = {
	 *   isTitle: true,
	 *   name: 'name',
	 *   isId: false,
	 *   position: -1,
	 *   label: 'Name of a user',
	 *   type: 'string',
	 * }
	 * // Resource is taken from the database
	 * const resource = {
	 *   id: 'User',
	 *   name: 'User Model',
	 *   titleProperty: 'name',
	 *   resourceActions: [],
	 *   listProperties: [booleanProperty, stringProperty],
	 *   editProperties: [booleanProperty, stringProperty],
	 *   showProperties: [booleanProperty, stringProperty],
	 *   filterProperties: [booleanProperty, stringProperty],
	 * }
	 *
	 * const record = {
	 *   id: '1',
	 *   title: 'John',
	 *   params: {
	 *     name: 'John',
	 *     gender: 'male',
	 *   },
	 *   recordActions: [],
	 * }
	 *
	 * return (
	 *   <WrapperBox border>
	 *     <BasePropertyComponent
	 *       property={booleanProperty}
	 *       resource={resource}
	 *       where="edit"
	 *       record={record}
	 *     />
	 *     <BasePropertyComponent
	 *       property={stringProperty}
	 *       resource={resource}
	 *       where="edit"
	 *       record={record}
	 *     />
	 *   </WrapperBox>
	 * )
	 */
	class BasePropertyComponent extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      isClient: false
	    };
	  }

	  componentDidMount() {
	    this.setState({
	      isClient: true
	    });
	  }

	  render() {
	    const {
	      property,
	      resource,
	      record,
	      filter,
	      where,
	      onChange
	    } = this.props;
	    const {
	      isClient
	    } = this.state;
	    let Component = types[property.type] && types[property.type][where] || defaultType[where];

	    if (property.components && property.components[where] && isClient) {
	      const component = property.components[where];

	      if (!component) {
	        throw new Error(`there is no "${property.name}.components.${where}"`);
	      }

	      Component = globalAny$2.AdminBro.UserComponents[component];
	      return React__default.createElement(ErrorBoundary, null, React__default.createElement(Component, {
	        property: property,
	        resource: resource,
	        record: record,
	        filter: filter,
	        onChange: onChange
	      }));
	    }

	    const Array = ArrayType[where];
	    const Mixed = MixedType[where];

	    if (property.isArray) {
	      if (!Array) {
	        return React__default.createElement("div", null);
	      }

	      return React__default.createElement(Array, _extends_1({}, this.props, {
	        ItemComponent: BasePropertyComponent
	      }));
	    }

	    if (property.type === 'mixed' && property.subProperties && property.subProperties.length) {
	      if (!Mixed) {
	        return React__default.createElement("div", null);
	      }

	      return React__default.createElement(Mixed, _extends_1({}, this.props, {
	        ItemComponent: BasePropertyComponent
	      }));
	    }

	    return React__default.createElement(ErrorBoundary, null, React__default.createElement(Component, {
	      property: property,
	      resource: resource,
	      record: record,
	      filter: filter,
	      onChange: onChange
	    }));
	  }

	}

	function camelizePropertyType(type) {
	  return {
	    Edit: type.edit,
	    Show: type.show,
	    List: type.list,
	    Filter: type.filter
	  };
	}

	BasePropertyComponent.DefaultType = camelizePropertyType(defaultType);
	BasePropertyComponent.Boolean = camelizePropertyType(boolean);
	BasePropertyComponent.DateTime = camelizePropertyType(datetime);
	BasePropertyComponent.RichText = camelizePropertyType(richtext);
	BasePropertyComponent.Reference = camelizePropertyType(reference);
	BasePropertyComponent.TextArea = camelizePropertyType(textarea);

	let PropertyPlace;
	/**
	 * JSON representation of a Property.
	 */

	(function (PropertyPlace) {
	  PropertyPlace["show"] = "show";
	  PropertyPlace["list"] = "list";
	  PropertyPlace["edit"] = "edit";
	  PropertyPlace["filter"] = "filter";
	})(PropertyPlace || (PropertyPlace = {}));

	/**
	 * Changes RecordJSON that it can be send as a FormData to the backend.
	 *
	 * @param   {RecordJSON}  record
	 * @return  {FormData}
	 */
	function recordToFormData(record) {
	  const formData = new FormData(); // First let make sure that all the fields in the record.params are properly flatten.
	  // That is why we unflatten all properties and create regular object, where flat
	  // overwrite prevents from having 2 keys referencing the same property. And
	  // the result is flatten again.

	  const normalizedParams = flat_1(flat_2(record.params, {
	    overwrite: true
	  }));
	  Object.entries(normalizedParams).forEach(([key, value]) => {
	    // flatten does not change empty objects "{}" - so in order to prevent having them changed to
	    // "[object Object]" we have to set them to empty strings. File objects has to go through.
	    // eslint-disable-next-line no-undef
	    if (typeof value === 'object' && value.constructor !== File) {
	      formData.set(key, '');
	    } else {
	      formData.set(key, value);
	    }
	  });
	  return formData;
	}

	/**
	 * @name NewAction
	 * @category Actions
	 * @description Shows form for creating a given record.
	 * @component
	 * @private
	 */
	class New extends React__default.Component {
	  constructor(props) {
	    super(props);
	    const {
	      record
	    } = props;
	    this.api = new ApiClient();
	    this.handleChange = this.handleChange.bind(this);
	    this.state = {
	      record: { ...record,
	        params: record && record.params || {},
	        errors: record && record.errors || {},
	        populated: record && record.populated || {}
	      },
	      loading: false
	    };
	  }

	  handleChange(propertyOrRecord, value) {
	    if (typeof value === 'undefined' && propertyOrRecord.params) {
	      this.setState({
	        record: propertyOrRecord
	      });
	    } else {
	      this.setState(state => ({
	        record: { ...state.record,
	          params: { ...state.record.params,
	            [propertyOrRecord]: value
	          }
	        }
	      }));
	    }
	  }

	  handleSubmit(event) {
	    event.preventDefault();
	    const {
	      resource,
	      history,
	      addNotice
	    } = this.props;
	    const {
	      record
	    } = this.state;
	    const formData = recordToFormData(record);
	    this.setState({
	      loading: true
	    });
	    this.api.resourceAction({
	      resourceId: resource.id,
	      actionName: 'new',
	      data: formData,
	      headers: {
	        'Content-Type': 'multipart/form-data'
	      }
	    }).then(response => {
	      if (response.data.notice) {
	        addNotice(response.data.notice);
	      }

	      if (response.data.redirectUrl) {
	        history.push(response.data.redirectUrl);
	      } else {
	        this.setState(state => ({
	          record: { ...state.record,
	            errors: response.data.record.errors
	          },
	          loading: false
	        }));
	      }
	    }).catch(() => {
	      this.setState({
	        loading: false
	      });
	      addNotice({
	        message: 'There was an error creating record, Check out console to see more information.',
	        type: 'error'
	      });
	    });
	    return false;
	  }

	  render() {
	    const {
	      resource
	    } = this.props;
	    const properties = resource.editProperties;
	    const {
	      record,
	      loading
	    } = this.state;
	    return React__default.createElement(WrapperBox, {
	      border: true
	    }, React__default.createElement("form", {
	      onSubmit: this.handleSubmit.bind(this)
	    }, properties.map(property => React__default.createElement(BasePropertyComponent, {
	      key: property.name,
	      where: PropertyPlace.edit,
	      property: property,
	      resource: resource,
	      onChange: this.handleChange,
	      record: record
	    })), React__default.createElement(StyledButton, {
	      type: "submit",
	      className: `is-primary${loading ? ' is-loading' : ''}`
	    }, React__default.createElement("i", {
	      className: "icomoon-save"
	    }), React__default.createElement("span", {
	      className: "btn-text"
	    }, "Save"))));
	  }

	}

	var _new = withNotice(reactRouterDom.withRouter(New));

	/**
	 * @name EditAction
	 * @category Actions
	 * @description Shows form for updating a given record.
	 * @private
	 * @component
	 */

	class Edit$8 extends React__default.Component {
	  constructor(props) {
	    super(props);
	    const {
	      record
	    } = props;
	    this.handleChange = this.handleChange.bind(this);
	    this.state = {
	      record,
	      loading: false
	    };
	    this.api = new ApiClient();
	  }

	  handleChange(propertyOrRecord, value) {
	    if (typeof value === 'undefined' && propertyOrRecord.params) {
	      this.setState({
	        record: propertyOrRecord
	      });
	    } else {
	      this.setState(state => ({
	        record: { ...state.record,
	          params: { ...state.record.params,
	            [propertyOrRecord]: value
	          }
	        }
	      }));
	    }
	  }

	  handleSubmit(event) {
	    const {
	      resource,
	      history,
	      addNotice
	    } = this.props;
	    const {
	      record
	    } = this.state;
	    const formData = recordToFormData(record);
	    this.setState({
	      loading: true
	    });
	    this.api.recordAction({
	      resourceId: resource.id,
	      actionName: 'edit',
	      recordId: record.id,
	      data: formData,
	      headers: {
	        'Content-Type': 'multipart/form-data'
	      }
	    }).then(response => {
	      if (response.data.notice) {
	        addNotice(response.data.notice);
	      }

	      if (response.data.redirectUrl) {
	        history.push(response.data.redirectUrl);
	      } else {
	        this.setState(state => ({
	          record: { ...state.record,
	            errors: response.data.record.errors
	          },
	          loading: false
	        }));
	      }
	    }).catch(() => {
	      this.setState({
	        loading: false
	      });
	      addNotice({
	        message: 'There was an error updating record, Check out console to see more information.',
	        type: 'error'
	      });
	    });
	    event.preventDefault();
	    return false;
	  }

	  render() {
	    const {
	      resource
	    } = this.props;
	    const properties = resource.editProperties;
	    const {
	      record,
	      loading
	    } = this.state;
	    return React__default.createElement(WrapperBox, {
	      border: true
	    }, React__default.createElement("form", {
	      onSubmit: this.handleSubmit.bind(this)
	    }, properties.map(property => React__default.createElement(BasePropertyComponent, {
	      key: property.name,
	      where: PropertyPlace.edit,
	      onChange: this.handleChange,
	      property: property,
	      resource: resource,
	      record: record
	    })), React__default.createElement(StyledButton, {
	      type: "submit",
	      className: `is-primary${loading ? ' is-loading' : ''}`
	    }, React__default.createElement("i", {
	      className: "icomoon-save"
	    }), React__default.createElement("span", {
	      className: "btn-text"
	    }, "Save"))));
	  }

	}
	/**
	 * @memberof Edit
	 */


	var edit$3 = withNotice(reactRouterDom.withRouter(Edit$8));

	/**
	 * @name ShowAction
	 * @category Actions
	 * @description Shows a given record.
	 * @component
	 * @private
	 */

	const Show$8 = props => {
	  const {
	    resource,
	    record
	  } = props;
	  const properties = resource.showProperties;
	  return React__default.createElement(WrapperBox, {
	    border: true
	  }, properties.map(property => React__default.createElement(BasePropertyComponent, {
	    key: property.name,
	    where: PropertyPlace.show,
	    property: property,
	    resource: resource,
	    record: record
	  })));
	};

	const Td = styled__default.td.withConfig({
	  displayName: "record-in-list__Td",
	  componentId: "sc-1ue4o4w-0"
	})(["&&&{color:", ";& a:not(.in-dropdown){color:", ";}&.main{font-weight:bold;}&.selected{border-left:", " ", " solid;}&.not-selected{border-left:", " solid transparent;}}"], ({
	  theme
	}) => theme.colors.defaultText, ({
	  theme
	}) => theme.colors.primary, ({
	  theme
	}) => theme.sizes.paddingMin, ({
	  theme
	}) => theme.colors.primary, ({
	  theme
	}) => theme.sizes.paddingMin);
	class RecordInList extends React__default.PureComponent {
	  render() {
	    const {
	      resource,
	      record,
	      actionPerformed,
	      isLoading,
	      onSelect,
	      isSelected
	    } = this.props;
	    const {
	      recordActions
	    } = record;
	    return React__default.createElement("tr", null, React__default.createElement(Td, {
	      className: isSelected ? 'selected' : 'not-selected'
	    }, onSelect && record.bulkActions.length ? React__default.createElement("input", {
	      type: "checkbox",
	      onChange: () => onSelect(record),
	      checked: isSelected
	    }) : null), resource.listProperties.map(property => React__default.createElement(Td, {
	      key: property.name,
	      "data-property-name": property.name,
	      className: resource.titleProperty.name === property.name ? 'main' : undefined
	    }, isLoading ? React__default.createElement(Placeholder, {
	      style: {
	        height: 14
	      }
	    }) : React__default.createElement(BasePropertyComponent, {
	      key: property.name,
	      where: PropertyPlace.list,
	      property: property,
	      resource: resource,
	      record: record
	    }))), React__default.createElement(Td, {
	      key: "options"
	    }, recordActions.length ? React__default.createElement(Dropdown$1, {
	      className: "is-right is-hoverable"
	    }, recordActions.map(action => React__default.createElement(ActionButton$1, {
	      action: action,
	      key: action.name,
	      resourceId: resource.id,
	      recordId: record.id,
	      actionPerformed: actionPerformed,
	      className: "is-white in-dropdown"
	    }))) : ''));
	  }

	}

	const StyledLink$1 = styled__default(reactRouterDom.NavLink).attrs({
	  className: 'is-sortable text-small'
	}).withConfig({
	  displayName: "sort-link__StyledLink",
	  componentId: "sc-1iy20ff-0"
	})(["color:", ";&.active{color:", ";}& > i{margin-left:", "}"], ({
	  theme
	}) => theme.colors.lightText, ({
	  theme
	}) => theme.colors.primary, ({
	  theme
	}) => theme.sizes.padding);

	class SortLink extends React__default.PureComponent {
	  constructor(props) {
	    super(props);
	    this.isActive = this.isActive.bind(this);
	  }

	  isActive() {
	    const {
	      sortBy,
	      property
	    } = this.props;
	    return sortBy === property.name;
	  }

	  render() {
	    const {
	      property,
	      location,
	      direction
	    } = this.props;
	    const query = new URLSearchParams(location.search);
	    const oppositeDirection = this.isActive() && direction === 'asc' ? 'desc' : 'asc';
	    const sortedByClass = `icomoon-dropdown-${direction === 'asc' ? 'open' : 'close'}`;
	    query.set('direction', oppositeDirection);
	    query.set('sortBy', property.name);
	    return React__default.createElement(StyledLink$1, {
	      to: {
	        search: query.toString()
	      },
	      isActive: this.isActive
	    }, property.label, this.isActive() ? React__default.createElement("i", {
	      className: sortedByClass
	    }) : '');
	  }

	}

	var SortLink$1 = reactRouterDom.withRouter(SortLink);

	const Th = styled__default.th.withConfig({
	  displayName: "thstyled__Th",
	  componentId: "zxhn8c-0"
	})(["&&&{font-size:", ";text-transform:uppercase;color:", ";font-weight:normal;padding:", ";letter-spacing:0.1em;border:none;}"], ({
	  theme
	}) => theme.fonts.min, ({
	  theme
	}) => theme.colors.lightText, ({
	  theme
	}) => theme.sizes.padding);

	const PropertyHeader = props => {
	  const {
	    property,
	    titleProperty
	  } = props;
	  const isMain = property.name === titleProperty.name;
	  return React__default.createElement(Th, {
	    className: isMain ? 'main' : undefined
	  }, property.isSortable ? React__default.createElement(SortLink$1, props) : property.label);
	};

	/**
	 * @memberof RecordsTableHeader
	 * @alias RecordsTableHeader
	 */

	/**
	 * Prints `thead` section for table with records.
	 *
	 * @component
	 * @example <caption>List with 2 properties</caption>
	 * const properties = [{
	 *   label: 'First Name',
	 *   name: 'firstName',
	 *   isSortable: true,
	 * }, {
	 *   label: 'Last Name',
	 *   name: 'lastName',
	 * }]
	 * return (
	 * <WrapperBox border>
	 *   <Table>
	 *    <RecordsTableHeader
	 *      properties={properties}
	 *      titleProperty={properties[0]}
	 *      sortBy={'firstName'}
	 *      direction={'asc'}
	 *    />
	 *    <tbody><tr>
	 *      <td>John</td>
	 *      <td>Doe</td>
	 *      <td><StyledButton>Do something with John</StyledButton></td>
	 *    </tr></tbody>
	 *   </Table>
	 * </WrapperBox>
	 * )
	 */
	const RecordsTableHeader = props => {
	  const {
	    titleProperty,
	    properties,
	    sortBy,
	    direction,
	    onSelectAll,
	    selectedAll
	  } = props;
	  return React__default.createElement("thead", null, React__default.createElement("tr", {
	    key: "header"
	  }, onSelectAll ? React__default.createElement(Th, null, React__default.createElement("input", {
	    style: {
	      marginLeft: 5
	    },
	    type: "checkbox",
	    onChange: () => onSelectAll(),
	    checked: selectedAll
	  })) : null, properties.map(property => React__default.createElement(PropertyHeader, {
	    key: property.name,
	    titleProperty: titleProperty,
	    property: property,
	    sortBy: sortBy,
	    direction: direction
	  })), React__default.createElement("th", {
	    key: "actions",
	    style: {
	      width: 80
	    }
	  })));
	};

	const NoRecords = props => {
	  const {
	    resource
	  } = props;
	  const canCreate = resource.resourceActions.find(a => a.name === 'new');
	  const h = new ViewHelpers();
	  const newAction = h.resourceActionUrl({
	    resourceId: resource.id,
	    actionName: 'new'
	  });
	  return React__default.createElement("div", {
	    className: "content has-text-centered"
	  }, React__default.createElement("h3", null, "No records"), React__default.createElement("p", null, "There are no records in this resource.", canCreate ? React__default.createElement(React__default.Fragment, null, React__default.createElement("span", null, "Create "), React__default.createElement(reactRouterDom.Link, {
	    to: newAction
	  }, "first record")) : ''));
	};

	const getBulkActionsFromRecords = records => {
	  const actions = Object.values(records.reduce((memo, record) => ({ ...memo,
	    ...record.bulkActions.reduce((actionsMemo, action) => ({ ...actionsMemo,
	      [action.name]: action
	    }), {})
	  }), {}));
	  return actions;
	};

	const SelectedRecordsWrapper = styled__default.section.withConfig({
	  displayName: "selected-records__SelectedRecordsWrapper",
	  componentId: "sc-1tzov1n-0"
	})(["position:absolute;top:-30px;padding-left:", ";"], ({
	  theme
	}) => theme.sizes.padding);
	const InlineLabel = styled__default(Label).withConfig({
	  displayName: "selected-records__InlineLabel",
	  componentId: "sc-1tzov1n-1"
	})(["&&&{display:inline;line-height:36px;}"]);

	const SelectedRecords = props => {
	  const {
	    resource,
	    selectedRecords
	  } = props;

	  if (!selectedRecords || !selectedRecords.length) {
	    return null;
	  }

	  const bulkActions = getBulkActionsFromRecords(selectedRecords);
	  return React__default.createElement(SelectedRecordsWrapper, null, React__default.createElement(InlineLabel, null, `selected: ${selectedRecords.length}`), bulkActions.map(action => React__default.createElement(ActionButton$1, {
	    action: action,
	    key: action.name,
	    resourceId: resource.id,
	    className: "is-text",
	    recordIds: selectedRecords.map(records => records.id)
	  })));
	};

	const RecordsTableWrapper = styled__default.section.withConfig({
	  displayName: "records-table__RecordsTableWrapper",
	  componentId: "sc-10jbltm-0"
	})(["position:relative;"]);

	const RecordsTable = props => {
	  const {
	    resource,
	    records,
	    actionPerformed,
	    sortBy,
	    direction,
	    isLoading,
	    onSelect,
	    selectedRecords,
	    onSelectAll
	  } = props;

	  if (!records.length) {
	    return React__default.createElement(NoRecords, {
	      resource: resource
	    });
	  }

	  const selectedAll = selectedRecords && !!records.find(record => selectedRecords.find(selected => selected.id === record.id));
	  return React__default.createElement(RecordsTableWrapper, null, React__default.createElement(SelectedRecords, {
	    resource: resource,
	    selectedRecords: selectedRecords
	  }), React__default.createElement(Table, null, React__default.createElement(RecordsTableHeader, {
	    properties: resource.listProperties,
	    titleProperty: resource.titleProperty,
	    direction: direction,
	    sortBy: sortBy,
	    onSelectAll: onSelectAll,
	    selectedAll: selectedAll
	  }), React__default.createElement("tbody", null, records.map(record => React__default.createElement(RecordInList, {
	    record: record,
	    resource: resource,
	    key: record.id,
	    actionPerformed: actionPerformed,
	    isLoading: isLoading,
	    onSelect: onSelect,
	    isSelected: selectedRecords && !!selectedRecords.find(selected => selected.id === record.id)
	  })))));
	};

	// TODO: add direction enum

	/**
	 * @name NewAction
	 * @category Actions
	 * @description Shows form for creating a given record.
	 * @component
	 * @private
	 */
	class List$7 extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.handleActionPerformed = this.handleActionPerformed.bind(this);
	    this.handleSelect = this.handleSelect.bind(this);
	    this.handleSelectAll = this.handleSelectAll.bind(this);
	    this.state = {
	      records: [],
	      page: 1,
	      perPage: 20,
	      total: 0,
	      loading: true,
	      direction: 'asc',
	      sortBy: undefined,
	      selectedRecords: []
	    };
	  }

	  componentDidMount() {
	    this._fetchData(this.props);
	  }

	  shouldComponentUpdate(newProps) {
	    const {
	      resource,
	      location
	    } = this.props;

	    if (resource.id !== newProps.resource.id || location.search !== newProps.location.search) {
	      this._fetchData(newProps);

	      return false;
	    }

	    return true;
	  }

	  componentWillUnmount() {
	    const {
	      setTag
	    } = this.props;

	    if (setTag) {
	      setTag('');
	    }
	  }

	  _fetchData(props) {
	    const {
	      location,
	      resource,
	      setTag,
	      addNotice
	    } = props;
	    const {
	      resource: oldResource
	    } = this.props;
	    const {
	      selectedRecords
	    } = this.state;
	    const api = new ApiClient();
	    this.setState({
	      loading: true
	    });
	    const query = new URLSearchParams(location.search);
	    api.resourceAction({
	      actionName: 'list',
	      resourceId: resource.id,
	      params: query
	    }).then(response => {
	      const listActionResponse = response.data;
	      this.setState({
	        records: listActionResponse.records,
	        page: listActionResponse.meta.page,
	        perPage: listActionResponse.meta.perPage,
	        total: listActionResponse.meta.total,
	        direction: listActionResponse.meta.direction,
	        sortBy: listActionResponse.meta.sortBy,
	        selectedRecords: oldResource.id === resource.id ? selectedRecords : [],
	        loading: false
	      });

	      if (setTag) {
	        if (typeof response.data.meta.total === 'undefined') {
	          setTag('');
	        } else {
	          setTag(response.data.meta.total.toString());
	        }
	      }
	    }).catch(() => {
	      addNotice({
	        message: 'There was an error fetching records, Check out console to see more information.',
	        type: 'error'
	      });
	    });
	  }

	  handleActionPerformed() {
	    this._fetchData(this.props);
	  }

	  handleSelect(record) {
	    const {
	      selectedRecords
	    } = this.state;
	    const selectedIndex = selectedRecords.findIndex(selected => selected.id === record.id);

	    if (selectedIndex < 0) {
	      this.setState({
	        selectedRecords: [...selectedRecords, record]
	      });
	    } else {
	      const newSelectedRecords = [...selectedRecords];
	      newSelectedRecords.splice(selectedIndex, 1);
	      this.setState({
	        selectedRecords: newSelectedRecords
	      });
	    }
	  }

	  handleSelectAll() {
	    const {
	      records,
	      selectedRecords
	    } = this.state;
	    const missing = records.filter(record => !selectedRecords.find(selected => selected.id === record.id) && record.bulkActions.length);

	    if (missing.length) {
	      this.setState({
	        selectedRecords: [...selectedRecords, ...missing]
	      });
	    } else {
	      const newSelectedRecords = selectedRecords.filter(selected => !records.find(record => record.id === selected.id));
	      this.setState({
	        selectedRecords: newSelectedRecords
	      });
	    }
	  }

	  render() {
	    const {
	      resource
	    } = this.props;
	    const {
	      records,
	      page,
	      perPage,
	      total,
	      loading,
	      direction,
	      sortBy,
	      selectedRecords
	    } = this.state;
	    return React__default.createElement(WrapperBox, {
	      border: true
	    }, React__default.createElement(RecordsTable, {
	      resource: resource,
	      records: records,
	      actionPerformed: this.handleActionPerformed,
	      onSelect: this.handleSelect,
	      onSelectAll: this.handleSelectAll,
	      selectedRecords: selectedRecords,
	      direction: direction,
	      sortBy: sortBy,
	      isLoading: loading
	    }), React__default.createElement(Paginate$1, {
	      page: page,
	      perPage: perPage,
	      total: total
	    }));
	  }

	}

	var list = withNotice(reactRouterDom.withRouter(List$7));

	/**
	 * @name ShowAction
	 * @category Actions
	 * @description Shows a given record.
	 * @component
	 * @private
	 */

	const BulkDelete = props => {
	  const {
	    resource,
	    records,
	    action,
	    addNotice,
	    history
	  } = props;
	  const [loading, setLoading] = React.useState(false);

	  if (!records) {
	    return React__default.createElement(ErrorMessageBox, {
	      title: "No records selected"
	    }, "In order to remove records, you have to pick them first.");
	  }

	  const handleClick = () => {
	    const api = new ApiClient();
	    setLoading(true);
	    const recordIds = records.map(r => r.id);
	    api.bulkAction({
	      resourceId: resource.id,
	      actionName: action.name,
	      recordIds,
	      method: 'post'
	    }).then(response => {
	      setLoading(false);

	      if (response.data.notice) {
	        addNotice(response.data.notice);
	      }

	      if (response.data.redirectUrl) {
	        history.push(response.data.redirectUrl);
	      }
	    }).catch(error => {
	      setLoading(false);
	      addNotice({
	        message: 'There was an error deleting records, Check out console to see more information.',
	        type: 'error'
	      });
	      throw error;
	    });
	  };

	  return React__default.createElement(WrapperBox, {
	    border: true
	  }, React__default.createElement("h1", null, "Following records will be removed:"), React__default.createElement(Table, null, records.map(record => React__default.createElement("tr", null, resource.listProperties.map(property => React__default.createElement("td", {
	    key: property.name,
	    className: resource.titleProperty.name === property.name ? 'main' : undefined
	  }, React__default.createElement(BasePropertyComponent, {
	    where: PropertyPlace.list,
	    property: property,
	    resource: resource,
	    record: record
	  })))))), React__default.createElement("p", null, React__default.createElement(StyledButton, {
	    onClick: handleClick,
	    className: `is-primary${loading ? ' is-loading' : ''}`
	  }, `Confirm the removal of ${records.length} records`)));
	};

	var bulkDelete = withNotice(reactRouter.withRouter(BulkDelete));



	var actions = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'new': _new,
		edit: edit$3,
		show: Show$8,
		list: list,
		bulkDelete: bulkDelete
	});

	/**
	 * Component which renders all the default and custom actions for both the Resource and the Record.
	 *
	 * It passes all props down to the actual Action component.
	 *
	 * Example of creating your own actions:
	 * ```
	 * // AdminBro options
	 * const AdminBroOptions = {
	 *   resources: [
	 *      resource,
	 *      options: {
	 *        actions: {
	 *           myNewAction: {
	 *             label: 'amazing action',
	 *             icon: 'fas fa-eye',
	 *             inVisible: (resource, record) => record.param('email') !== '',
	 *             actionType: 'record',
	 *             component: AdminBro.bundle('./my-new-action'),
	 *             handler: (request, response, data) => {
	 *               return {
	 *                  ...
	 *               }
	 *             }
	 *           }
	 *        }
	 *      }
	 *   ]
	 * }
	 * ```
	 *
	 * ```
	 * // ./my-new-action.jsx
	 * import WrapperBox from 'admin-bro'
	 *
	 * const MyNewAction = (props) => {
	 *   const { resource, action, record } = props
	 *   // do something with the props and render action
	 *   return (
	 *     <WrapperBox>Some Action Content</WrapperBox>
	 *   )
	 * }
	 * ```
	 *
	 * @component
	 * @name BaseActionComponent
	 * @category Base
	 */
	class BaseActionComponent extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      isClient: false
	    };
	  }

	  componentDidMount() {
	    this.setState({
	      isClient: true
	    });
	  }

	  render() {
	    const {
	      resource,
	      action,
	      record,
	      records,
	      setTag
	    } = this.props;
	    const {
	      isClient
	    } = this.state;
	    const documentationLink = [DOCS, 'BaseAction.html'].join('/');
	    let Action = actions[action.name];

	    if (isClient && action.component) {
	      Action = AdminBro.UserComponents[action.component];
	    }

	    if (Action) {
	      return React__default.createElement(ErrorBoundary, null, React__default.createElement(Action, {
	        action: action,
	        resource: resource,
	        record: record,
	        records: records,
	        setTag: setTag
	      }));
	    }

	    return Action || React__default.createElement(WrapperBox, {
	      border: true
	    }, React__default.createElement("div", {
	      className: "notification"
	    }, "You have to implement action component for your Action. See:", ' ', React__default.createElement("a", {
	      href: documentationLink
	    }, "the documentation")));
	  }

	}

	/**
	 * Indicates if route action should be updated, meaning whether it should fetch
	 * new data from the backend.
	 * @private
	 *
	 * @param {AnyActionParams} currentMatchParams
	 * @param {AnyActionParams} newMatchParams
	 * @return  {boolean}
	 */
	const shouldActionReFetchData = (currentMatchParams, newMatchParams) => {
	  const {
	    resourceId,
	    recordId,
	    actionName
	  } = currentMatchParams;
	  const {
	    resourceId: newResourceId,
	    recordId: newRecordId,
	    actionName: newActionName
	  } = newMatchParams;
	  return resourceId !== newResourceId || recordId !== newRecordId || actionName !== newActionName;
	};

	const ContainerRecord = styled__default.div.withConfig({
	  displayName: "record-action__ContainerRecord",
	  componentId: "aqlm90-0"
	})(["display:flex;flex-direction:column;"]);

	class RecordAction extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      record: undefined,
	      isLoading: true
	    };
	  }

	  componentDidMount() {
	    const {
	      match
	    } = this.props;
	    this.fetchRecord(match.params);
	  }

	  shouldComponentUpdate(newProps) {
	    const {
	      match
	    } = this.props;

	    if (shouldActionReFetchData(match.params, newProps.match.params)) {
	      this.fetchRecord(newProps.match.params);
	      return false;
	    }

	    return true;
	  }

	  getResourceAndAction(name = null) {
	    const {
	      match,
	      resources
	    } = this.props;
	    const {
	      resourceId,
	      actionName
	    } = match.params;
	    const {
	      record
	    } = this.state;
	    const nameToCheck = name || actionName;
	    const resource = resources.find(r => r.id === resourceId);
	    const action = record && record.recordActions.find(r => r.name === nameToCheck);
	    return {
	      resource: resource || undefined,
	      action: action || undefined
	    };
	  }

	  fetchRecord({
	    actionName,
	    recordId,
	    resourceId
	  }) {
	    const {
	      addNotice
	    } = this.props;
	    const api = new ApiClient();
	    this.setState({
	      isLoading: true,
	      record: undefined
	    });
	    api.recordAction({
	      resourceId,
	      recordId,
	      actionName
	    }).then(response => {
	      this.setState({
	        isLoading: false,
	        record: response.data.record
	      });
	    }).catch(error => {
	      addNotice({
	        message: ['There was an error fetching the record, ', 'Check out console to see more information.'].join('\n'),
	        type: 'error'
	      });
	      throw error;
	    });
	  }

	  render() {
	    const {
	      match
	    } = this.props;
	    const {
	      actionName,
	      recordId,
	      resourceId
	    } = match.params;
	    const {
	      record,
	      isLoading
	    } = this.state;
	    const {
	      resource,
	      action
	    } = this.getResourceAndAction();

	    if (!resource) {
	      return React__default.createElement(NoResourceError, {
	        resourceId: resourceId
	      });
	    }

	    if (!action && !isLoading) {
	      return React__default.createElement(NoActionError, {
	        resourceId: resourceId,
	        actionName: actionName
	      });
	    }

	    if (!record && !isLoading) {
	      return React__default.createElement(NoRecordError, {
	        resourceId: resourceId,
	        recordId: recordId
	      });
	    }

	    return React__default.createElement(ContainerRecord, null, React__default.createElement(NoticeWrapper$1, null, React__default.createElement(Notice, null)), React__default.createElement(WrapperBox, null, React__default.createElement(Breadcrumbs, {
	      resource: resource,
	      actionName: actionName,
	      record: record
	    }), React__default.createElement(ActionHeader, {
	      resource: resource,
	      recordId: recordId,
	      action: action,
	      record: record
	    }), isLoading ? React__default.createElement(Loader, null) : React__default.createElement(BaseActionComponent, {
	      action: action,
	      resource: resource,
	      record: record
	    })));
	  }

	}

	const mapStateToProps$4 = state => ({
	  resources: state.resources
	});

	var RecordAction$1 = withNotice(reactRedux.connect(mapStateToProps$4)(RecordAction));

	const FilterWrapper = styled__default.section.withConfig({
	  displayName: "filter__FilterWrapper",
	  componentId: "sc-11shy29-0"
	})(["background:", ";flex-shrink:0;width:", ";border-left:1px solid ", ";color:", ";padding-top:60px;transition:width 0.5s;position:absolute;top:0;right:0;bottom:0;overflow-x:hidden;overflow-y:scroll;&.filter-hidden{width:0;transition:width 0.5s;}&&& ", ",&&& ", "{color:", ";}"], ({
	  theme
	}) => theme.colors.darkBck, ({
	  theme
	}) => theme.sizes.sidebarWidth, ({
	  theme
	}) => theme.colors.borderOnDark, ({
	  theme
	}) => theme.colors.filterDefaultText, Label, StyledInput, ({
	  theme
	}) => theme.colors.filterDefaultText);
	const FilterLink = styled__default.a.withConfig({
	  displayName: "filter__FilterLink",
	  componentId: "sc-11shy29-1"
	})(["color:", ";& > span{opacity:0.5;color:", ";border:1px solid ", ";border-radius:3px;padding:8px 10px;margin-right:", ";}&:hover{color:", ";& span{color:", ";border-color:", ";opacity:1;}}"], ({
	  theme
	}) => theme.colors.filterDefaultText, ({
	  theme
	}) => theme.colors.lightText, ({
	  theme
	}) => theme.colors.lightText, ({
	  theme
	}) => theme.sizes.padding, ({
	  theme
	}) => theme.colors.primary, ({
	  theme
	}) => theme.colors.primary, ({
	  theme
	}) => theme.colors.primary);
	const FilterContent = styled__default.section.withConfig({
	  displayName: "filter__FilterContent",
	  componentId: "sc-11shy29-2"
	})(["padding:", ";width:", ";min-width:", ";overflow:hidden;min-height:100%;& a,& button{margin:", " 0;width:100%;}"], ({
	  theme
	}) => theme.sizes.paddingLayout, ({
	  theme
	}) => theme.sizes.sidebarWidth, ({
	  theme
	}) => theme.sizes.sidebarWidth, ({
	  theme
	}) => theme.sizes.paddingMin);

	class Filter$5 extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.handleSubmit = this.handleSubmit.bind(this);
	    this.handleChange = this.handleChange.bind(this);
	    this.resetFilter = this.resetFilter.bind(this);
	    this.state = {
	      filter: this.parseQuery()
	    };
	  }

	  componentWillReceiveProps(nextProps) {
	    const {
	      match
	    } = this.props;

	    if (nextProps.match.params.resourceId !== match.params.resourceId) {
	      this.setState({
	        filter: {}
	      });
	    }
	  }

	  parseQuery() {
	    const {
	      location
	    } = this.props;
	    const filter = {};
	    const query = new URLSearchParams(location.search);

	    for (const entry of query.entries()) {
	      const [key, value] = entry;

	      if (key.match('filters.')) {
	        filter[key.replace('filters.', '')] = value;
	      }
	    }

	    return filter;
	  }

	  handleSubmit(event) {
	    event.preventDefault();
	    const {
	      filter
	    } = this.state;
	    const {
	      history
	    } = this.props;
	    const search = new URLSearchParams(window.location.search);
	    Object.keys(filter).forEach(key => {
	      if (filter[key] !== '') {
	        search.set(`filters.${key}`, filter[key]);
	      } else {
	        search.delete(`filters.${key}`);
	      }
	    });
	    search.set('page', '1');
	    history.push(`${history.location.pathname}?${search.toString()}`);
	    return false;
	  }

	  resetFilter(event) {
	    const {
	      history
	    } = this.props;
	    event.preventDefault();
	    const filteredSearch = new URLSearchParams();
	    const search = new URLSearchParams(window.location.search);

	    for (const key of search.keys()) {
	      if (!key.match('filters.')) {
	        filteredSearch.set(key, search.get(key));
	      }
	    }

	    const query = filteredSearch.toString() === '' ? `?${filteredSearch.toString()}` : '';
	    history.push(history.location.pathname + query);
	    this.setState({
	      filter: {}
	    });
	  }

	  handleChange(propertyName, value) {
	    if (propertyName.params) {
	      throw new Error('you can not pass RecordJSON to filters');
	    }

	    this.setState(state => ({
	      filter: { ...state.filter,
	        [propertyName]: value
	      }
	    }));
	  }

	  render() {
	    const {
	      resource,
	      isVisible,
	      toggleFilter
	    } = this.props;
	    const {
	      filter
	    } = this.state;
	    const properties = resource.filterProperties;
	    return React__default.createElement(FilterWrapper, {
	      className: isVisible ? undefined : 'filter-hidden'
	    }, React__default.createElement(FilterContent, null, React__default.createElement(FilterLink, {
	      onClick: toggleFilter
	    }, React__default.createElement("span", null, React__default.createElement("i", {
	      className: "fas fa-arrow-right"
	    })), "Filter"), React__default.createElement("form", {
	      onSubmit: this.handleSubmit.bind(this)
	    }, properties.map(property => React__default.createElement(BasePropertyComponent, {
	      key: property.name,
	      where: PropertyPlace.filter,
	      onChange: this.handleChange,
	      property: property,
	      filter: filter,
	      resource: resource
	    })), React__default.createElement(StyledButton, {
	      className: "is-primary"
	    }, "Apply Changes"), React__default.createElement(StyledButton, {
	      as: "a",
	      className: "is-text",
	      onClick: this.resetFilter
	    }, "Clear filters"))));
	  }

	}

	var Filter$6 = reactRouterDom.withRouter(Filter$5);

	var queryHasFilter = (queryString => {
	  const query = new URLSearchParams(queryString);

	  for (const key of query.keys()) {
	    if (key.match('filters.')) {
	      return true;
	    }
	  }

	  return false;
	});

	const ResourceAction = props => {
	  const {
	    resources,
	    match,
	    location
	  } = props;
	  const {
	    resourceId,
	    actionName
	  } = match.params;
	  const resource = resources.find(r => r.id === resourceId);

	  if (!resource) {
	    return React__default.createElement(NoResourceError, {
	      resourceId: resourceId
	    });
	  }

	  const action = resource.resourceActions.find(r => r.name === actionName);

	  if (!action) {
	    return React__default.createElement(NoActionError, {
	      resourceId: resourceId,
	      actionName: actionName
	    });
	  }

	  const [filterVisible, setFilerVisible] = React.useState(queryHasFilter(location.search));
	  const [tag, setTag] = React.useState('');
	  return React__default.createElement("div", null, React__default.createElement(NoticeWrapper$1, null, React__default.createElement(Notice, null)), React__default.createElement(WrapperBox, null, React__default.createElement(Breadcrumbs, {
	    resource: resource,
	    actionName: actionName
	  }), React__default.createElement(ActionHeader, {
	    resource: resource,
	    action: action,
	    tag: tag,
	    toggleFilter: action.showFilter ? () => setFilerVisible(!filterVisible) : undefined
	  }), React__default.createElement(BaseActionComponent, {
	    action: action,
	    resource: resource,
	    setTag: setTag
	  })), action.showFilter ? React__default.createElement(Filter$6, {
	    resource: resource,
	    isVisible: filterVisible,
	    toggleFilter: () => {
	      setFilerVisible(!filterVisible);
	    }
	  }) : '');
	};

	const mapStateToProps$5 = state => ({
	  paths: state.paths,
	  resources: state.resources
	});

	var ResourceAction$1 = reactRedux.connect(mapStateToProps$5)(ResourceAction);

	const NO_RECORDS_ERROR = {
	  message: 'There was an error fetching records, Check out console to see more information.',
	  type: 'error'
	};

	class BulkAction extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      records: undefined,
	      isLoading: true,
	      tag: undefined
	    };
	  }

	  componentDidMount() {
	    const {
	      match
	    } = this.props;
	    this.fetchRecords(match.params);
	  }

	  shouldComponentUpdate(newProps) {
	    const {
	      match
	    } = this.props;

	    if (shouldActionReFetchData(match.params, newProps.match.params)) {
	      this.fetchRecords(newProps.match.params);
	      return false;
	    }

	    return true;
	  }

	  setTag(tagName) {
	    this.setState({
	      tag: tagName
	    });
	  }

	  fetchRecords({
	    resourceId,
	    actionName
	  }) {
	    const {
	      addNotice,
	      location
	    } = this.props;
	    const recordIdsString = new URLSearchParams(location.search).get('recordIds');
	    const recordIds = recordIdsString ? recordIdsString.split(',') : [];
	    const api = new ApiClient();
	    this.setState({
	      isLoading: true,
	      records: undefined
	    });
	    return api.bulkAction({
	      resourceId,
	      recordIds,
	      actionName
	    }).then(response => {
	      this.setState({
	        isLoading: false,
	        records: response.data.records
	      });
	    }).catch(error => {
	      addNotice(NO_RECORDS_ERROR);
	      throw error;
	    });
	  }

	  render() {
	    const {
	      resources,
	      match
	    } = this.props;
	    const {
	      resourceId,
	      actionName
	    } = match.params;
	    const {
	      isLoading,
	      tag,
	      records
	    } = this.state;
	    const resource = resources.find(r => r.id === resourceId);

	    if (!resource) {
	      return React__default.createElement(NoResourceError, {
	        resourceId: resourceId
	      });
	    }

	    if (!records && !isLoading) {
	      return React__default.createElement(ErrorMessageBox, {
	        title: "No records"
	      }, React__default.createElement("p", null, "You have not selected any records"));
	    }

	    const action = getBulkActionsFromRecords(records || []).find(r => r.name === actionName);

	    if (!action && !isLoading) {
	      return React__default.createElement(NoActionError, {
	        resourceId: resourceId,
	        actionName: actionName
	      });
	    }

	    return React__default.createElement("div", null, React__default.createElement(NoticeWrapper$1, null, React__default.createElement(Notice, null)), React__default.createElement(WrapperBox, null, React__default.createElement(Breadcrumbs, {
	      resource: resource,
	      actionName: actionName
	    }), React__default.createElement(ActionHeader, {
	      resource: resource,
	      action: action,
	      tag: tag
	    }), isLoading ? React__default.createElement(Loader, null) : React__default.createElement(BaseActionComponent, {
	      action: action,
	      resource: resource,
	      records: records,
	      setTag: this.setTag
	    })));
	  }

	}

	const mapStateToProps$6 = state => ({
	  resources: state.resources
	});

	var BulkAction$1 = withNotice(reactRedux.connect(mapStateToProps$6)(BulkAction));

	class Page extends React__default.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      isClient: false
	    };
	  }

	  componentDidMount() {
	    this.setState({
	      isClient: true
	    });
	  }

	  render() {
	    const {
	      pages,
	      match
	    } = this.props;
	    const {
	      params
	    } = match;
	    const {
	      pageName
	    } = params;
	    const {
	      isClient
	    } = this.state;
	    const currentPage = pages.find(page => page.name === pageName);

	    if (!currentPage) {
	      return React__default.createElement(ErrorMessageBox, {
	        title: "There is no page of given name"
	      }, React__default.createElement("p", null, "Page:", React__default.createElement("b", null, ` "${pageName}" `), "does not exist."));
	    }

	    const Component = AdminBro.UserComponents[currentPage.component];

	    if (!Component || !isClient) {
	      return React__default.createElement(ErrorMessageBox, {
	        title: "No component specified"
	      }, React__default.createElement("p", null, "You have to specify component which will render this Page"));
	    }

	    return React__default.createElement(React__default.Fragment, null, React__default.createElement(NoticeWrapper$1, null, React__default.createElement(Notice, null)), React__default.createElement(ErrorBoundary, null, React__default.createElement(Component, null)));
	  }

	}

	const mapStateToProps$7 = state => ({
	  pages: state.pages
	});

	var Page$1 = reactRedux.connect(mapStateToProps$7)(Page);

	const GlobalStyle = styled.createGlobalStyle`
  html, body, #app {
      width: 100%;
      height: 100%;
      background: ${({
  theme
}) => theme.colors.bck};
      color: ${({
  theme
}) => theme.colors.defaultText};
  }

  .content h1, .content h2, .content h3, .content h4, .content h5, .content h6 {
    color: ${({
  theme
}) => theme.colors.defaultText};
  }

  a {
    color: ${({
  theme
}) => theme.colors.primary};
    &:hover {
      color: ${({
  theme
}) => theme.colors.primaryHover};
    }
  }
`;
	const ApplicationWrapper = styled__default.section.withConfig({
	  displayName: "application__ApplicationWrapper",
	  componentId: "sc-16sklbq-0"
	})(["font-size:14px;font-family:'Roboto',sans-serif;display:flex;flex-direction:row;height:100%;"]);
	const Core = styled__default.section.withConfig({
	  displayName: "application__Core",
	  componentId: "sc-16sklbq-1"
	})(["height:100%;overflow-y:auto;width:100%;background:", ";display:flex;flex-direction:column;"], ({
	  theme
	}) => theme.colors.innerBck);

	const App = () => {
	  const h = new ViewHelpers();
	  const resourceId = ':resourceId';
	  const actionName = ':actionName';
	  const recordId = ':recordId';
	  const pageName = ':pageName';
	  const recordActionUrl = h.recordActionUrl({
	    resourceId,
	    recordId,
	    actionName
	  });
	  const resourceActionUrl = h.resourceActionUrl({
	    resourceId,
	    actionName
	  });
	  const bulkActionUrl = h.bulkActionUrl({
	    resourceId,
	    actionName
	  });
	  const pageUrl = h.pageUrl(pageName);
	  return React__default.createElement(React__default.Fragment, null, React__default.createElement(GlobalStyle, null), React__default.createElement(ApplicationWrapper, null, React__default.createElement(Sidebar$1, null), React__default.createElement(Core, null, React__default.createElement(TopBar$1, null), React__default.createElement(reactRouterDom.Switch, null, React__default.createElement(reactRouterDom.Route, {
	    path: h.dashboardUrl(),
	    exact: true,
	    component: Dashboard$2
	  }), React__default.createElement(reactRouterDom.Route, {
	    path: resourceActionUrl,
	    exact: true,
	    component: ResourceAction$1
	  }), React__default.createElement(reactRouterDom.Route, {
	    path: recordActionUrl,
	    exact: true,
	    component: RecordAction$1
	  }), React__default.createElement(reactRouterDom.Route, {
	    path: bulkActionUrl,
	    exact: true,
	    component: BulkAction$1
	  }), React__default.createElement(reactRouterDom.Route, {
	    path: pageUrl,
	    exact: true,
	    component: Page$1
	  })))));
	};

	const UploadInput = styled__default.input.withConfig({
	  displayName: "drop-area__UploadInput",
	  componentId: "sc-19uar0s-0"
	})(["font-size:100px;position:absolute;left:0;top:0;opacity:0;bottom:0;cursor:pointer;width:100%;"]);
	const ValidationInformation = styled__default.p.withConfig({
	  displayName: "drop-area__ValidationInformation",
	  componentId: "sc-19uar0s-1"
	})(["&&&{font-size:", ";label{display:inline;}}"], ({
	  theme
	}) => theme.fonts.min);
	const Wrapper$2 = styled__default.div.withConfig({
	  displayName: "drop-area__Wrapper",
	  componentId: "sc-19uar0s-2"
	})(["position:relative;border:dashed ", " 1px;text-align:center;padding:", ";&:hover{border-color:", ";}i{color:", ";margin-bottom:20px;}.innerWrapper{position:relative;}"], ({
	  theme
	}) => theme.colors.border, ({
	  theme
	}) => theme.sizes.paddingLayout, ({
	  theme
	}) => theme.colors.borderHover, ({
	  theme
	}) => theme.colors.superLightBack);
	const DropMessage = styled__default.div.withConfig({
	  displayName: "drop-area__DropMessage",
	  componentId: "sc-19uar0s-3"
	})(["position:absolute;border:5px solid ", ";top:0;left:0;right:0;bottom:0;opacity:0;& > h1{color:", ";font-size:", ";margin-top:", ";transition:transform 0.5s;}&.active{background:", ";opacity:1;transition:opacity 1s;& > h1{transform:rotate(2deg) scale(1.2);transition:transform 0.5s;}}"], ({
	  theme
	}) => theme.colors.primaryHover, ({
	  theme
	}) => theme.colors.filterDefaultText, ({
	  theme
	}) => theme.fonts.header, ({
	  theme
	}) => theme.sizes.paddingLayout, ({
	  theme
	}) => theme.colors.primary);

	const validateContentType = (mimeTypes, mimeType) => {
	  if (!mimeTypes || !mimeTypes.length) {
	    return true;
	  }

	  return mimeTypes.includes(mimeType);
	};

	const validateSize = (maxSize, size) => {
	  if (!maxSize) {
	    return true;
	  }

	  if (!size) {
	    return true;
	  }

	  return +maxSize >= +size;
	};

	const inKb = size => {
	  if (!size) {
	    return '';
	  }

	  return `${Math.round(+size / 1024)} KB`;
	};
	/**
	 * @returns {void}
	 * @memberof DropArea
	 * @alias OnUpload
	 */


	/**
	 * Drop Area which can be used for uploading files.
	 *
	 * how to use it in your custom component.tsx:
	 * ```
	 * import React, { useState } from 'react'
	 * import { DropArea, PropertyInEdit, BasePropertyProps } from 'admin-bro'
	 * import { unflatten } from 'flat'
	 *
	 * const UploadPhoto: React.FC<BasePropertyProps> = (props) => {
	 *   const { property, record, onChange } = props
	 *
	 *   const fileObject = unflatten(record.params)[property.name]
	 *
	 *   const onUpload = (files: FileList) => {
	 *     const newRecord = {...record}
	 *     const [file] = files
	 *
	 *     onChange({
	 *       ...newRecord,
	 *       params: {
	 *         ...newRecord.params,
	 *         [`${property.name}.file`]: file,
	 *         [`${property.name}.name`]: file.name,
	 *         [`${property.name}.size`]: file.size,
	 *         [`${property.name}.type`]: file.type,
	 *       }
	 *     })
	 *     event.preventDefault()
	 *   }
	 *
	 *   return (
	 *     <PropertyInEdit property={property}>
	 *       <DropArea
	 *         fileObject={fileObject}
	 *         onUpload={onUpload}
	 *         propertyName={property.name}
	 *       />
	 *     </PropertyInEdit>
	 *   )
	 * }
	 * ```
	 *
	 * @component
	 *
	 * @example
	 * const fileObject = null
	 * const maxSize = 1024
	 * const mimeTypes = ['application/pdf']
	 * const onUpload = (files) => { alert(files[0].name) }
	 * const property = {name: 'fileUpload', label: 'File Upload'}
	 * return (
	 * <PropertyInEdit property={property}>
	 *   <DropArea
	 *     fileObject={fileObject}
	 *     onUpload={onUpload}
	 *     propertyName={property.name}
	 *     validate= { { maxSize, mimeTypes } }
	 *   />
	 * </PropertyInEdit>
	 * )
	 */
	const DropArea = props => {
	  const {
	    fileObject,
	    onUpload,
	    propertyName,
	    validate = {},
	    addNotice
	  } = props;
	  const [isDragging, setIsDragging] = React.useState(false);

	  const onDragEnter = () => setIsDragging(true);

	  const onDragLeave = () => setIsDragging(false);

	  const onDragOver = () => setIsDragging(true);

	  const onDrop = event => {
	    event.preventDefault();
	    setIsDragging(false);
	    const {
	      files
	    } = event.dataTransfer || event.target;

	    for (let i = 0; i < files.length; i += 1) {
	      const file = files.item(i);

	      if (!file) {
	        return;
	      }

	      if (!validateSize(validate.maxSize, file && file.size)) {
	        addNotice({
	          message: `File: ${file.name} size is too big`,
	          type: 'error'
	        });
	        return;
	      }

	      if (!validateContentType(validate.mimeTypes, file.type)) {
	        addNotice({
	          message: `File: ${file.name} has unsupported type: ${file.type}`,
	          type: 'error'
	        });
	        return;
	      }
	    }

	    onUpload(files);
	  };

	  return React__default.createElement(Wrapper$2, {
	    onDragEnter: onDragEnter,
	    onDragOver: onDragOver,
	    onDragLeave: onDragLeave,
	    onDrop: onDrop
	  }, React__default.createElement(DropMessage, {
	    className: isDragging ? 'active' : 'inactive',
	    onDragEnter: onDragEnter
	  }, React__default.createElement("h1", null, "Drop Here")), React__default.createElement(UploadInput, {
	    type: "file",
	    id: propertyName,
	    onChange: event => onDrop(event)
	  }), fileObject ? React__default.createElement("div", null, React__default.createElement(Label, null, "File name"), React__default.createElement("p", null, fileObject.name), React__default.createElement("p", null, `(${Math.round(+fileObject.size / 1024)}) KB`)) : React__default.createElement("div", null, React__default.createElement("p", null, React__default.createElement("i", {
	    className: "fa fa-4x fa-upload"
	  })), React__default.createElement("p", null, "Pick or Drop File here to upload it."), React__default.createElement(ValidationInformation, null, validate.maxSize ? React__default.createElement("p", null, React__default.createElement(Label, null, "Max size:"), inKb(validate.maxSize)) : '', validate.mimeTypes && validate.mimeTypes.length ? React__default.createElement("p", null, React__default.createElement(Label, null, "Available types:"), validate.mimeTypes.join(', ')) : '')));
	}; // TODO remove this hack


	var dropArea = withNotice(DropArea);



	var AppComponents = /*#__PURE__*/Object.freeze({
		__proto__: null,
		ActionButton: ActionButton$1,
		ActionHeader: ActionHeader,
		BaseActionComponent: BaseActionComponent,
		Breadcrumbs: Breadcrumbs,
		DefaultDashboard: Dashboard,
		ErrorBoundary: ErrorBoundary,
		Filter: Filter$6,
		LoggedIn: LoggedIn,
		NoRecords: NoRecords,
		Notice: Notice,
		PropertyHeader: PropertyHeader,
		RecordInList: RecordInList,
		RecordsTableHeader: RecordsTableHeader,
		RecordsTable: RecordsTable,
		TopBar: TopBar$1,
		Version: Version,
		SortLink: SortLink$1,
		DropArea: dropArea
	});

	/**
	 * @file Default AdminBro theme
	 * @private
	 */
	// sorted alphabetically

	const colors$1 = {
	  bck: '#fff',
	  defaultText: '#111114',
	  lightText: '#70728F',
	  lightBck: '#F8F8FA',
	  superLightBack: '#FCFCFC',
	  border: '#eeeeef',
	  borderHover: '#b5b5b5',
	  borderOnDark: '#4E5779',
	  innerBck: '#f7f7Fa',
	  darkBck: '#303b62',
	  superDarkBck: '#192035',
	  inputBck: '#fff',
	  filterDefaultText: '#fff',
	  filterLightText: '#b5b5b5',
	  love: '#e6282b',
	  primary: '#4A69F2',
	  primaryHover: '#545B8C',
	  success: '#21C197',
	  successBorder: '#8CDAD9',
	  lightSuccess: '#DBF0F1',
	  error: '#F0616F',
	  lightError: '#F6E1E6',
	  warning: '#FF9F89'
	};
	const sizes = {
	  navbarHeight: '64px',
	  sidebarWidth: '300px',
	  sidebarMobileWidth: '98px',
	  paddingLayout: '30px',
	  padding: '15px',
	  paddingMin: '5px'
	};
	const fonts = {
	  base: '14px',
	  medium: '12px',
	  min: '11px',
	  header: '32px'
	};
	const breakpoints = {
	  minMobileWidth: '320px',
	  minTabletWidth: '769px',
	  minDesktopWidth: '1024px',
	  minWidescreenWidth: '1216px',
	  minFullHDWidth: '1408px'
	};

	var style = /*#__PURE__*/Object.freeze({
		__proto__: null,
		colors: colors$1,
		sizes: sizes,
		fonts: fonts,
		breakpoints: breakpoints
	});

	const pathsType = PropTypes$1.shape({
	  loginPath: PropTypes$1.string.isRequired,
	  rootPath: PropTypes$1.string.isRequired,
	  logoutPath: PropTypes$1.string.isRequired
	});
	const sessionType = PropTypes$1.shape({
	  email: PropTypes$1.string
	});
	const brandingType = PropTypes$1.shape({
	  logo: PropTypes$1.string.isRequired,
	  companyName: PropTypes$1.string.isRequired,
	  softwareBrothers: PropTypes$1.bool.isRequired
	});
	const propertyTypeShape = {
	  isId: PropTypes$1.bool.isRequired,
	  isSortable: PropTypes$1.bool.isRequired,
	  isTitle: PropTypes$1.bool.isRequired,
	  label: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]).isRequired,
	  name: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]).isRequired,
	  position: PropTypes$1.number.isRequired,
	  type: PropTypes$1.string.isRequired,
	  availableValues: PropTypes$1.arrayOf(PropTypes$1.shape({
	    title: PropTypes$1.string,
	    value: PropTypes$1.string
	  })),
	  reference: PropTypes$1.oneOfType([PropTypes$1.string]),
	  isArray: PropTypes$1.boolean
	};
	const propertyType = PropTypes$1.shape(propertyTypeShape);
	propertyTypeShape.subProperties = PropTypes$1.arrayOf(propertyType);
	const versionsType = PropTypes$1.shape({
	  admin: PropTypes$1.string,
	  app: PropTypes$1.string
	});
	const simplifiedPropertyType = PropTypes$1.shape({
	  isId: PropTypes$1.bool,
	  isSortable: PropTypes$1.bool,
	  isTitle: PropTypes$1.bool,
	  isVisible: PropTypes$1.bool,
	  label: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]).isRequired,
	  name: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]).isRequired,
	  position: PropTypes$1.number,
	  type: PropTypes$1.string,
	  availableValues: PropTypes$1.arrayOf(PropTypes$1.shape({
	    title: PropTypes$1.string,
	    value: PropTypes$1.string
	  })),
	  reference: PropTypes$1.oneOfType([PropTypes$1.string])
	});
	const actionType = PropTypes$1.shape({
	  actionType: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.arrayOf(PropTypes$1.string)]).isRequired,
	  icon: PropTypes$1.string,
	  label: PropTypes$1.string.isRequired,
	  name: PropTypes$1.string.isRequired,
	  showFilter: PropTypes$1.bool
	});
	const resourceParentType = PropTypes$1.shape({
	  name: PropTypes$1.string.isRequired,
	  icon: PropTypes$1.string.isRequired
	});
	const resourceType = PropTypes$1.shape({
	  editProperties: PropTypes$1.arrayOf(propertyType).isRequired,
	  filterProperties: PropTypes$1.arrayOf(propertyType).isRequired,
	  href: PropTypes$1.string.isRequired,
	  id: PropTypes$1.string.isRequired,
	  listProperties: PropTypes$1.arrayOf(propertyType).isRequired,
	  name: PropTypes$1.string.isRequired,
	  parent: resourceParentType.isRequired,
	  resourceActions: PropTypes$1.arrayOf(actionType).isRequired,
	  showProperties: PropTypes$1.arrayOf(propertyType).isRequired,
	  titleProperty: propertyType.isRequired
	});
	const resourceParentWithResourcesType = PropTypes$1.shape({
	  name: PropTypes$1.string.isRequired,
	  icon: PropTypes$1.string.isRequired,
	  resources: PropTypes$1.arrayOf(resourceType).isRequired
	});
	const recordType = PropTypes$1.shape({
	  params: PropTypes$1.object.isRequired,
	  populated: PropTypes$1.object,
	  errors: PropTypes$1.object,
	  id: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
	  title: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
	  recordActions: PropTypes$1.arrayOf(actionType).isRequired
	});
	const locationType = PropTypes$1.shape({
	  pathname: PropTypes$1.string.isRequired
	});
	const historyType = PropTypes$1.shape({
	  push: PropTypes$1.func.isRequired
	});
	const matchType = PropTypes$1.shape({
	  params: PropTypes$1.shape({
	    resourceId: PropTypes$1.string,
	    recordId: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
	    actionName: PropTypes$1.string
	  })
	});
	const childrenType = PropTypes$1.oneOfType([PropTypes$1.element, PropTypes$1.arrayOf(PropTypes$1.oneOfType([PropTypes$1.element, PropTypes$1.arrayOf(PropTypes$1.element), PropTypes$1.string, PropTypes$1.number])), PropTypes$1.string, PropTypes$1.number]);
	const noticeType = PropTypes$1.shape({
	  message: PropTypes$1.string,
	  progress: PropTypes$1.number,
	  type: PropTypes$1.oneOf(['success', 'error'])
	});

	var types$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		pathsType: pathsType,
		sessionType: sessionType,
		brandingType: brandingType,
		propertyType: propertyType,
		versionsType: versionsType,
		simplifiedPropertyType: simplifiedPropertyType,
		actionType: actionType,
		resourceParentType: resourceParentType,
		resourceType: resourceType,
		resourceParentWithResourcesType: resourceParentWithResourcesType,
		recordType: recordType,
		locationType: locationType,
		historyType: historyType,
		matchType: matchType,
		childrenType: childrenType,
		noticeType: noticeType
	});

	const env = {
	  NODE_ENV: "development" 
	};
	const store = createStore(window.REDUX_STATE);
	const theme$1 = window.THEME;
	const Application = React__default.createElement(reactRedux.Provider, {
	  store: store
	}, React__default.createElement(styled.ThemeProvider, {
	  theme: theme$1
	}, React__default.createElement(reactRouterDom.BrowserRouter, null, React__default.createElement(App, null)))); // eslint-disable-next-line no-undef

	window.regeneratorRuntime = regenerator;
	var bundleEntry = {
	  withNotice,
	  Application,
	  ViewHelpers,
	  UserComponents: {},
	  ApiClient,
	  style,
	  PropertyTypes: BasePropertyComponent,
	  env,
	  ...Components,
	  ...AppComponents,
	  types: types$1,
	  // TODO: following is a backward compatible - remove this in version 2.0
	  Components: { ...Components,
	    ...AppComponents
	  }
	};

	return bundleEntry;

}(React, ReactRedux, ReactRouterDOM, styled, Redux, axios, ReactDOM, PropTypes, ReactRouter));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWJ1bmRsZS5kZXZlbG9wbWVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIi4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzLnRzIiwiLi4vLi4vY29tcG9uZW50cy9hcHAvc2lkZWJhci9zaWRlYmFyLWJyYW5kaW5nLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3NpZGViYXIvc3R5bGVkL3NpZGViYXItbGluay5zdHlsZWQudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvc2lkZWJhci9zaWRlYmFyLXJlc291cmNlLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3NpZGViYXIvc3R5bGVkL3NpZGViYXItZ3JvdXAtdGl0bGUuc3R5bGVkLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3NpZGViYXIvc2lkZWJhci1wYXJlbnQudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvc2lkZWJhci9zaWRlYmFyLWZvb3Rlci50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcC9zaWRlYmFyL3N0eWxlZC9zaWRlYmFyLWxhYmVsLnN0eWxlZC50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcC9zaWRlYmFyL3N0eWxlZC9zaWRlYmFyLXNlY3Rpb24uc3R5bGVkLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3NpZGViYXIvc2lkZWJhci1wYWdlcy50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcC9zaWRlYmFyL3V0aWxzL2dyb3VwLXJlc291cmNlcy50cyIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3NpZGViYXIvaGFtYnVyZ2VyLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3NpZGViYXIvc3R5bGVkL3NpZGViYXItd3JhcHBlci5zdHlsZWQudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvc2lkZWJhci9zaWRlYmFyLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL2xvZ2dlZC1pbi50c3giLCIuLi8uLi9jb21wb25lbnRzL3VpL2xhYmVsLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3ZlcnNpb24udHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvdG9wLWJhci50c3giLCIuLi8uLi9jb21wb25lbnRzL3VpL2NvbHVtbi50c3giLCIuLi8uLi9jb21wb25lbnRzL3VpL2NvbHVtbnMudHN4IiwiLi4vLi4vY29tcG9uZW50cy91aS9kYXNoYm9hcmQtaGVhZGVyLnRzeCIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCIuLi8uLi9jb21wb25lbnRzL3VpL2Ryb3Bkb3duLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvdWkvd3JhcHBlci1ib3gudHN4IiwiLi4vLi4vY29tcG9uZW50cy91aS9sb2FkZXIudHN4IiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2p3LXBhZ2luYXRlL2xpYi9qdy1wYWdpbmF0ZS5qcyIsIi4uLy4uL2NvbXBvbmVudHMvdWkvc3R5bGVkLWJ1dHRvbi50c3giLCIuLi8uLi9jb21wb25lbnRzL3VpL3N0eWxlZC1saW5rLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvdWkvcGFnaW5hdGUudHN4IiwiLi4vLi4vY29tcG9uZW50cy91aS9wbGFjZWhvbGRlci50c3giLCIuLi8uLi9jb21wb25lbnRzL3VpL3Byb3BlcnR5LWluLWVkaXQudHN4IiwiLi4vLi4vY29tcG9uZW50cy91aS9wcm9wZXJ0eS1pbi1maWx0ZXIudHN4IiwiLi4vLi4vY29tcG9uZW50cy91aS9wcm9wZXJ0eS1pbi1zaG93LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvdWkvc3R5bGVkLXNlY3Rpb24udHN4IiwiLi4vLi4vY29tcG9uZW50cy91aS90YWJsZS50c3giLCIuLi8uLi9jb21wb25lbnRzL3VpL3ZhbHVlLWJsb2NrLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvdWkvc3R5bGVkLWlucHV0LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvdWkvZXJyb3ItbWVzc2FnZS50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcC9kZWZhdWx0LWRhc2hib2FyZC50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcC9lcnJvci1ib3VuZGFyeS50c3giLCIuLi8uLi8uLi9jb25zdGFudHMudHMiLCIuLi8uLi9zdG9yZS9zdG9yZS50cyIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL25vdGljZS50c3giLCIuLi8uLi9jb21wb25lbnRzL3JvdXRlcy9zdHlsZWQvbm90aWNlLXdyYXBwZXIuc3R5bGVkLmpzeCIsIi4uLy4uL2NvbXBvbmVudHMvcm91dGVzL2Rhc2hib2FyZC50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcC9icmVhZGNydW1icy50c3giLCIuLi8uLi91dGlscy9hcGktY2xpZW50LnRzIiwiLi4vLi4vc3RvcmUvd2l0aC1ub3RpY2UudHMiLCIuLi8uLi9jb21wb25lbnRzL2FwcC9hY3Rpb24tYnV0dG9uLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL2FjdGlvbi1oZWFkZXIudHN4IiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2ZsYXQvbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9mbGF0L2luZGV4LmpzIiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2FycmF5L2NvbnZlcnQtcGFyYW1zLXRvLWFycmF5LWl0ZW1zLnRzIiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2FycmF5L3VwZGF0ZS1wYXJhbXMtYXJyYXkudHMiLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvYXJyYXkvZWRpdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvYXJyYXkvbGlzdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvYXJyYXkvc2hvdy50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvYXJyYXkvaW5kZXgudHMiLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvbWl4ZWQvZWRpdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvbWl4ZWQvc2hvdy50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvbWl4ZWQvbGlzdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvbWl4ZWQvaW5kZXgudHMiLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvZGVmYXVsdC10eXBlL3Nob3cudHN4IiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21lbW9pemUtb25lL2Rpc3QvbWVtb2l6ZS1vbmUuZXNtLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9tZW1vaXplLmVzbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L3VuaXRsZXNzLmVzbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9oYXNoL2Rpc3QvaGFzaC5lc20uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGlzL2Rpc3Qvc3R5bGlzLmVzbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsaXMtcnVsZS1zaGVldC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jcmVhdGUtZW1vdGlvbi9kaXN0L2luZGV4LmVzbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9lbW90aW9uL2Rpc3QvaW5kZXguZXNtLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BlcmZvcm1hbmNlLW5vdy9saWIvcGVyZm9ybWFuY2Utbm93LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JhZi9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnB1dC1hdXRvc2l6ZS9saWIvQXV0b3NpemVJbnB1dC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvaGFzQ2xhc3MuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvcmVtb3ZlQ2xhc3MuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQvcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQuZXMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9Qcm9wVHlwZXMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvQ1NTVHJhbnNpdGlvbi5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25Hcm91cC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL1JlcGxhY2VUcmFuc2l0aW9uLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2Rpc3QvcmVhY3Qtc2VsZWN0LmVzbS5qcyIsIi4uLy4uL3N0eWxlcy9zZWxlY3Qtc3R5bGVzLnRzIiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2RlZmF1bHQtdHlwZS9lZGl0LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9kZWZhdWx0LXR5cGUvZmlsdGVyLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9kZWZhdWx0LXR5cGUvbGlzdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvYm9vbGVhbi9lZGl0LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9ib29sZWFuL21hcC12YWx1ZS50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvYm9vbGVhbi9zaG93LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9ib29sZWFuL2xpc3QudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL2Jvb2xlYW4vZmlsdGVyLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9kYXRldGltZS9lZGl0LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9kYXRldGltZS9tYXAtdmFsdWUudHMiLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvZGF0ZXRpbWUvc2hvdy50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvZGF0ZXRpbWUvbGlzdC50c3giLCIuLi8uLi8uLi9iYWNrZW5kL3V0aWxzL2ZpbHRlci50cyIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9kYXRldGltZS9maWx0ZXIudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL3JpY2h0ZXh0L2VkaXQudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL3JpY2h0ZXh0L3Nob3cudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL3JpY2h0ZXh0L2xpc3QudHN4IiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvdXRpbHMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9jb21wb25lbnRzL01lbnUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9pbnRlcm5hbC9yZWFjdC1mYXN0LWNvbXBhcmUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9kaWFjcml0aWNzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvZmlsdGVycy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL2ludGVybmFsL0ExMXlUZXh0LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvaW50ZXJuYWwvRHVtbXlJbnB1dC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL2ludGVybmFsL05vZGVSZXNvbHZlci5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL2ludGVybmFsL1Njcm9sbExvY2svY29uc3RhbnRzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvaW50ZXJuYWwvU2Nyb2xsTG9jay91dGlscy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL2ludGVybmFsL1Njcm9sbExvY2svaW5kZXguanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9pbnRlcm5hbC9TY3JvbGxCbG9jay5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL2ludGVybmFsL1Njcm9sbENhcHRvci5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL2ludGVybmFsL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvYWNjZXNzaWJpbGl0eS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL2J1aWx0aW5zLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvY29tcG9uZW50cy9jb250YWluZXJzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvY29tcG9uZW50cy9pbmRpY2F0b3JzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvY29tcG9uZW50cy9Db250cm9sLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvY29tcG9uZW50cy9Hcm91cC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL2NvbXBvbmVudHMvSW5wdXQuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9jb21wb25lbnRzL011bHRpVmFsdWUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9jb21wb25lbnRzL09wdGlvbi5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL2NvbXBvbmVudHMvUGxhY2Vob2xkZXIuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9jb21wb25lbnRzL1NpbmdsZVZhbHVlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvY29tcG9uZW50cy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL3N0eWxlcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL3RoZW1lLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvU2VsZWN0LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvc3RhdGVNYW5hZ2VyLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvQXN5bmMuanMiLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvcmVmZXJlbmNlL2VkaXQudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL3JlZmVyZW5jZS9yZWZlcmVuY2UtdmFsdWUudHN4IiwiLi4vLi4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlL3JlZmVyZW5jZS9zaG93LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcHJvcGVydHktdHlwZS9yZWZlcmVuY2UvbGlzdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvcmVmZXJlbmNlL2ZpbHRlci50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvdGV4dGFyZWEvc2hvdy50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvdGV4dGFyZWEvZWRpdC50c3giLCIuLi8uLi9jb21wb25lbnRzL3Byb3BlcnR5LXR5cGUvaW5kZXgudHN4IiwiLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Byb3BlcnR5LWpzb24uaW50ZXJmYWNlLnRzIiwiLi4vLi4vY29tcG9uZW50cy9hY3Rpb25zL3JlY29yZC10by1mb3JtLWRhdGEudHMiLCIuLi8uLi9jb21wb25lbnRzL2FjdGlvbnMvbmV3LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYWN0aW9ucy9lZGl0LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYWN0aW9ucy9zaG93LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3JlY29yZHMtdGFibGUvcmVjb3JkLWluLWxpc3QudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvc29ydC1saW5rLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3JlY29yZHMtdGFibGUvc3R5bGVkL3RoLnN0eWxlZC50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcC9yZWNvcmRzLXRhYmxlL3Byb3BlcnR5LWhlYWRlci50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcC9yZWNvcmRzLXRhYmxlL3JlY29yZHMtdGFibGUtaGVhZGVyLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3JlY29yZHMtdGFibGUvbm8tcmVjb3Jkcy50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcC9yZWNvcmRzLXRhYmxlL3V0aWxzL2dldC1idWxrLWFjdGlvbnMtZnJvbS1yZWNvcmRzLnRzIiwiLi4vLi4vY29tcG9uZW50cy9hcHAvcmVjb3Jkcy10YWJsZS9zZWxlY3RlZC1yZWNvcmRzLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL3JlY29yZHMtdGFibGUvcmVjb3Jkcy10YWJsZS50c3giLCIuLi8uLi9jb21wb25lbnRzL2FjdGlvbnMvbGlzdC50c3giLCIuLi8uLi9jb21wb25lbnRzL2FjdGlvbnMvYnVsay1kZWxldGUudHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvYmFzZS1hY3Rpb24tY29tcG9uZW50LnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcm91dGVzL3V0aWxzL3Nob3VsZC1hY3Rpb24tcmUtZmV0Y2gtZGF0YS50cyIsIi4uLy4uL2NvbXBvbmVudHMvcm91dGVzL3JlY29yZC1hY3Rpb24udHN4IiwiLi4vLi4vY29tcG9uZW50cy9hcHAvZmlsdGVyLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvcm91dGVzL3V0aWxzL3F1ZXJ5LWhhcy1maWx0ZXIudHMiLCIuLi8uLi9jb21wb25lbnRzL3JvdXRlcy9yZXNvdXJjZS1hY3Rpb24udHN4IiwiLi4vLi4vY29tcG9uZW50cy9yb3V0ZXMvYnVsay1hY3Rpb24udHN4IiwiLi4vLi4vY29tcG9uZW50cy9yb3V0ZXMvcGFnZS50c3giLCIuLi8uLi9jb21wb25lbnRzL2FwcGxpY2F0aW9uLnRzeCIsIi4uLy4uL2NvbXBvbmVudHMvYXBwL2Ryb3AtYXJlYS50c3giLCIuLi8uLi9zdHlsZXMvdmFyaWFibGVzLnRzIiwiLi4vLi4vdHlwZXMvaW5kZXguanMiLCIuLi8uLi9idW5kbGUtZW50cnkuanN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsImltcG9ydCBBZG1pbkJyb09wdGlvbnMgZnJvbSAnLi4vLi4vYWRtaW4tYnJvLW9wdGlvbnMuaW50ZXJmYWNlJ1xuaW1wb3J0IHsgUGF0aHMgfSBmcm9tICcuLi8uLi9mcm9udGVuZC9zdG9yZS9zdG9yZSdcblxubGV0IGdsb2JhbEFueTogYW55ID0ge31cblxudHJ5IHtcbiAgZ2xvYmFsQW55ID0gd2luZG93XG59IGNhdGNoIChlcnJvcikge1xuICBpZiAoZXJyb3IubWVzc2FnZSAhPT0gJ3dpbmRvdyBpcyBub3QgZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbi8qKlxuICogUGFyYW1zIGZvciBhIHJlY29yZCBhY3Rpb25cbiAqIEBhbGlhcyBSZWNvcmRBY3Rpb25QYXJhbXNcbiAqIEBtZW1iZXJvZiBWaWV3SGVscGVyc1xuICovXG5leHBvcnQgdHlwZSBSZWNvcmRBY3Rpb25QYXJhbXMgPSB7XG4gIHJlc291cmNlSWQ6IHN0cmluZztcbiAgYWN0aW9uTmFtZTogc3RyaW5nO1xuICByZWNvcmRJZDogc3RyaW5nO1xufVxuXG4vKipcbiAqIFBhcmFtcyBmb3IgYSBidWxrIGFjdGlvblxuICogQGFsaWFzIEJ1bGtBY3Rpb25QYXJhbXNcbiAqIEBtZW1iZXJvZiBWaWV3SGVscGVyc1xuICovXG5leHBvcnQgdHlwZSBCdWxrQWN0aW9uUGFyYW1zID0ge1xuICByZXNvdXJjZUlkOiBzdHJpbmc7XG4gIGFjdGlvbk5hbWU6IHN0cmluZztcbiAgcmVjb3JkSWRzPzogQXJyYXk8c3RyaW5nPjtcbn1cblxuLyoqXG4gKiBQYXJhbXMgZm9yIGEgcmVzb3VyY2UgYWN0aW9uXG4gKiBAYWxpYXMgUmVzb3VyY2VBY3Rpb25QYXJhbXNcbiAqIEBtZW1iZXJvZiBWaWV3SGVscGVyc1xuICovXG5leHBvcnQgdHlwZSBSZXNvdXJjZUFjdGlvblBhcmFtcyA9IHtcbiAgcmVzb3VyY2VJZDogc3RyaW5nO1xuICBhY3Rpb25OYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ29sbGVjdGlvbiBvZiBoZWxwZXIgbWV0aG9kcyBhdmFpbGFibGUgaW4gdGhlIHZpZXdzXG4gKi9cbmNsYXNzIFZpZXdIZWxwZXJzIHtcbiAgcHVibGljIG9wdGlvbnM6IFBhdGhzXG5cbiAgY29uc3RydWN0b3IoeyBvcHRpb25zIH06IHsgb3B0aW9ucz86IEFkbWluQnJvT3B0aW9ucyB9ID0ge30pIHtcbiAgICBsZXQgb3B0czogUGF0aHMgPSBWaWV3SGVscGVycy5nZXRQYXRocyhvcHRpb25zKVxuXG4gICAgb3B0cyA9IG9wdHMgfHwge1xuICAgICAgcm9vdFBhdGg6ICcvYWRtaW4nLFxuICAgIH1cblxuICAgIC8vIHdoZW4gVmlld0hlbHBlcnMgYXJlIHVzZWQgb24gdGhlIGZyb250ZW5kLCBwYXRocyBhcmUgdGFrZW4gZnJvbSBnbG9iYWwgUmVkdXggU3RhdGVcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRzXG4gIH1cblxuICBzdGF0aWMgZ2V0UGF0aHMob3B0aW9ucz86IEFkbWluQnJvT3B0aW9ucyk6IFBhdGhzIHtcbiAgICByZXR1cm4gb3B0aW9ucyB8fCAoZ2xvYmFsQW55LlJFRFVYX1NUQVRFICYmIGdsb2JhbEFueS5SRURVWF9TVEFURS5wYXRocylcbiAgfVxuXG4gIC8qKlxuICAgKiBUbyBlYWNoIHJlbGF0ZWQgcGF0aCBhZGRzIHJvb3RQYXRoIHBhc3NlZCBieSB0aGUgdXNlciwgYXMgd2VsbCBhcyBhIHF1ZXJ5IHN0cmluZ1xuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSBwYXRocyAgIGxpc3Qgb2YgcGFydHMgb2YgdGhlIHVybFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgIHBhdGhcbiAgICovXG4gIHVybEJ1aWxkZXIocGF0aHM6IEFycmF5PHN0cmluZz4pOiBzdHJpbmcge1xuICAgIGNvbnN0IHsgcm9vdFBhdGggfSA9IHRoaXMub3B0aW9uc1xuICAgIHJldHVybiBgJHtyb290UGF0aH0vJHtwYXRocy5qb2luKCcvJyl9YFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbG9naW4gVVJMXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGxvZ2luVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5sb2dpblBhdGhcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGxvZ291dCBVUkxcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgbG9nb3V0VXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5sb2dvdXRQYXRoXG4gIH1cblxuICBsaXN0VXJsKHsgcmVzb3VyY2VJZCB9KTogc3RyaW5nIHtcbiAgICBjb25zb2xlLndhcm4oYFxuICAgICAgRGVwcmVjYXRpb246IHRoaXMgXCJWaWV3SGVscGVycyNsaXN0VXJsXCIgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IHZlcnNpb25zLlxuICAgICAgUGxlYXNlIHVzZSBcInJlc291cmNlQWN0aW9uVXJsKHsgcmVzb3VyY2VJZCwgYWN0aW9uTmFtZTogJ2xpc3QnfSlcIlxuICAgICAgaW5zdGVhZGApXG4gICAgcmV0dXJuIHRoaXMucmVzb3VyY2VBY3Rpb25VcmwoeyByZXNvdXJjZUlkLCBhY3Rpb25OYW1lOiAnbGlzdCcgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIFVSTCBmb3IgdGhlIGRhc2hib2FyZFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBkYXNoYm9hcmRVcmwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJvb3RQYXRoXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBVUkwgZm9yIGdpdmVuIHBhZ2UgbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFnZU5hbWUgICAgICAgcGFnZSBuYW1lIHdoaWNoIGlzIGEgdW5pcXVlIGtleSBzcGVjaWZpZWQgaW5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtAbGluayBBZG1pbkJyb09wdGlvbnN9XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHBhZ2VVcmwocGFnZU5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudXJsQnVpbGRlcihbJ3BhZ2VzJywgcGFnZU5hbWVdKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcmVzb3VyY2VBY3Rpb24gdXJsXG4gICAqXG4gICAqIEBwYXJhbSAgIHtSZXNvdXJjZUFjdGlvblBhcmFtc30gIG9wdGlvbnNcbiAgICogQHBhcmFtICAge3N0cmluZ30gIG9wdGlvbnMucmVzb3VyY2VJZFxuICAgKiBAcGFyYW0gICB7c3RyaW5nfSAgb3B0aW9ucy5hY3Rpb25OYW1lXG4gICAqXG4gICAqIEByZXR1cm4gIHtzdHJpbmd9XG4gICAqL1xuICByZXNvdXJjZUFjdGlvblVybCh7IHJlc291cmNlSWQsIGFjdGlvbk5hbWUgfTogUmVzb3VyY2VBY3Rpb25QYXJhbXMpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnVybEJ1aWxkZXIoWydyZXNvdXJjZXMnLCByZXNvdXJjZUlkLCAnYWN0aW9ucycsIGFjdGlvbk5hbWVdKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcmVjb3JkQWN0aW9uIHVybFxuICAgKlxuICAgKiBAcGFyYW0gICB7UmVjb3JkQWN0aW9uUGFyYW1zfSAgb3B0aW9uc1xuICAgKiBAcGFyYW0gICB7c3RyaW5nfSAgb3B0aW9ucy5yZXNvdXJjZUlkXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9ICBvcHRpb25zLnJlY29yZElkXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9ICBvcHRpb25zLmFjdGlvbk5hbWVcbiAgICpcbiAgICogQHJldHVybiAge3N0cmluZ31cbiAgICovXG4gIHJlY29yZEFjdGlvblVybCh7IHJlc291cmNlSWQsIHJlY29yZElkLCBhY3Rpb25OYW1lIH06IFJlY29yZEFjdGlvblBhcmFtcyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudXJsQnVpbGRlcihbJ3Jlc291cmNlcycsIHJlc291cmNlSWQsICdyZWNvcmRzJywgcmVjb3JkSWQsIGFjdGlvbk5hbWVdKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYnVsa0FjdGlvbiB1cmxcbiAgICpcbiAgICogQHBhcmFtICAge0J1bGtBY3Rpb25QYXJhbXN9ICBvcHRpb25zXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9ICBvcHRpb25zLnJlc291cmNlSWRcbiAgICogQHBhcmFtICAge3N0cmluZ30gIFtvcHRpb25zLnJlY29yZElkc11cbiAgICogQHBhcmFtICAge3N0cmluZ30gIG9wdGlvbnMuYWN0aW9uTmFtZVxuICAgKlxuICAgKiBAcmV0dXJuICB7c3RyaW5nfVxuICAgKi9cbiAgYnVsa0FjdGlvblVybCh7IHJlc291cmNlSWQsIHJlY29yZElkcywgYWN0aW9uTmFtZSB9OiBCdWxrQWN0aW9uUGFyYW1zKTogc3RyaW5nIHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLnVybEJ1aWxkZXIoW1xuICAgICAgJ3Jlc291cmNlcycsIHJlc291cmNlSWQsICdidWxrJywgYWN0aW9uTmFtZSxcbiAgICBdKVxuICAgIGlmIChyZWNvcmRJZHMgJiYgcmVjb3JkSWRzLmxlbmd0aCkge1xuICAgICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKClcbiAgICAgIHF1ZXJ5LmFwcGVuZCgncmVjb3JkSWRzJywgcmVjb3JkSWRzLmpvaW4oJywnKSlcbiAgICAgIHJldHVybiBgJHt1cmx9PyR7cXVlcnkudG9TdHJpbmcoKX1gXG4gICAgfVxuICAgIHJldHVybiB1cmxcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFic29sdXRlIHBhdGggdG8gYSBnaXZlbiBhc3NldC5cbiAgICogQHByaXZhdGVcbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSBhc3NldFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBhc3NldFBhdGgoYXNzZXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudXJsQnVpbGRlcihbJ2Zyb250ZW5kJywgJ2Fzc2V0cycsIGFzc2V0XSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWaWV3SGVscGVyc1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IFZpZXdIZWxwZXJzIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzJ1xuaW1wb3J0IHsgQnJhbmRpbmdPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vYWRtaW4tYnJvLW9wdGlvbnMuaW50ZXJmYWNlJ1xuXG5jb25zdCBMb2dvTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuZGVmYXVsdFRleHR9O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgc3BhbiB7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICB9XG5gXG5cbmNvbnN0IExvZ29JbWFnZSA9IHN0eWxlZC5pbWdgXG4gIG1hcmdpbi1yaWdodDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9O1xuICBoZWlnaHQ6IDM1cHg7XG5gXG5cbnR5cGUgUHJvcHMgPSB7XG4gIGJyYW5kaW5nOiBCcmFuZGluZ09wdGlvbnM7XG59XG5cbmNvbnN0IFNpZGViYXJCcmFuZGluZzogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgYnJhbmRpbmcgfSA9IHByb3BzXG4gIGNvbnN0IHsgbG9nbywgY29tcGFueU5hbWUgfSA9IGJyYW5kaW5nXG4gIGNvbnN0IGggPSBuZXcgVmlld0hlbHBlcnMoKVxuICByZXR1cm4gKFxuICAgIDxMb2dvTGluayB0bz17aC5kYXNoYm9hcmRVcmwoKX0+XG4gICAgICB7bG9nbyAmJiAoXG4gICAgICAgIDxMb2dvSW1hZ2VcbiAgICAgICAgICBzcmM9e2xvZ299XG4gICAgICAgICAgYWx0PXtjb21wYW55TmFtZX1cbiAgICAgICAgICBoZWlnaHQ9XCIzNXB4XCJcbiAgICAgICAgICB3aWR0aD1cIjM1cHhcIlxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIDxzcGFuPntjb21wYW55TmFtZX08L3NwYW4+XG4gICAgPC9Mb2dvTGluaz5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaWRlYmFyQnJhbmRpbmdcbiIsImltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuY29uc3QgU2lkZWJhckxpbmsgPSBzdHlsZWQoTmF2TGluaylgXG4gIGNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmxpZ2h0VGV4dH07XG4gIHBhZGRpbmc6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nTWlufTtcbiAgZGlzcGxheTogYmxvY2s7XG5cbiAgJjpob3ZlciB7XG4gICAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMucHJpbWFyeX07XG4gIH1cblxuICAmLmFjdGl2ZSB7XG4gICAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMucHJpbWFyeX07XG4gIH1cbmBcblxuZXhwb3J0IGRlZmF1bHQgU2lkZWJhckxpbmtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gJ3JlYWN0LXJvdXRlcidcblxuaW1wb3J0IFJlc291cmNlSlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVzb3VyY2UtanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgU2lkZWJhckxpbmsgZnJvbSAnLi9zdHlsZWQvc2lkZWJhci1saW5rLnN0eWxlZCdcblxuXG50eXBlIFByb3BzID0ge1xuICByZXNvdXJjZTogUmVzb3VyY2VKU09OO1xufVxuXG5jb25zdCBTaWRlYmFyUmVzb3VyY2U6IFJlYWN0LkZDPFByb3BzICYgUm91dGVDb21wb25lbnRQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZSB9ID0gcHJvcHNcbiAgY29uc3QgaXNBY3RpdmUgPSAobWF0Y2gsIGxvY2F0aW9uKTogYm9vbGVhbiA9PiAhIWxvY2F0aW9uLnBhdGhuYW1lLm1hdGNoKGAvcmVzb3VyY2VzLyR7cmVzb3VyY2UuaWR9L2ApXG4gIHJldHVybiAoXG4gICAgPGxpPlxuICAgICAgPFNpZGViYXJMaW5rIHRvPXtyZXNvdXJjZS5ocmVmfSBpc0FjdGl2ZT17aXNBY3RpdmV9IGRhdGEtdGVzdGlkPVwic2lkZWJhci1yZXNvdXJjZS1saW5rXCI+XG4gICAgICAgIHtyZXNvdXJjZS5uYW1lfVxuICAgICAgPC9TaWRlYmFyTGluaz5cbiAgICA8L2xpPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoU2lkZWJhclJlc291cmNlKVxuIiwiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcblxuY29uc3QgU2lkZWJhckdyb3VwVGl0bGUgPSBzdHlsZWQuc3BhbmBcbiAgYmFja2dyb3VuZDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5saWdodEJja307XG4gIHBhZGRpbmctbGVmdDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9O1xuICBwYWRkaW5nLXJpZ2h0OiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ307XG4gIGxpbmUtaGVpZ2h0OiA0MHB4O1xuICBib3JkZXItcmFkaXVzOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ0xheW91dH07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBiYXNlbGluZTtcbiAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuZGVmYXVsdFRleHR9O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgJiA+IGksICYgPiBzdmcge1xuICAgIG1hcmdpbi1yaWdodDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmdNaW59O1xuICAgIGNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmxpZ2h0VGV4dH07XG4gICAgbWFyZ2luLXJpZ2h0OiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ307XG4gIH1cbmBcblxuZXhwb3J0IGRlZmF1bHQgU2lkZWJhckdyb3VwVGl0bGVcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmltcG9ydCBTaWRlYmFyUmVzb3VyY2UgZnJvbSAnLi9zaWRlYmFyLXJlc291cmNlJ1xuaW1wb3J0IFJlc291cmNlSlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVzb3VyY2UtanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgU2lkZWJhckdyb3VwVGl0bGUgZnJvbSAnLi9zdHlsZWQvc2lkZWJhci1ncm91cC10aXRsZS5zdHlsZWQnXG5cbmNvbnN0IFJlc291cmNlc0xpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9IDA7XG4gIHBhZGRpbmctbGVmdDogNDBweDtcbmBcblxudHlwZSBQcm9wcyA9IHtcbiAgcGFyZW50OiB7XG4gICAgaWNvbjogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICByZXNvdXJjZXM6IEFycmF5PFJlc291cmNlSlNPTj47XG4gIH07XG59XG5cbmNsYXNzIFNpZGViYXJQYXJlbnQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcGFyZW50IH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyBpY29uLCBuYW1lLCByZXNvdXJjZXMgfSA9IHBhcmVudFxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxsaT5cbiAgICAgICAgPFNpZGViYXJHcm91cFRpdGxlPlxuICAgICAgICAgIDxpIGNsYXNzTmFtZT17aWNvbn0gLz5cbiAgICAgICAgICB7bmFtZX1cbiAgICAgICAgPC9TaWRlYmFyR3JvdXBUaXRsZT5cbiAgICAgICAgPFJlc291cmNlc0xpc3Q+XG4gICAgICAgICAge3Jlc291cmNlcy5tYXAocmVzb3VyY2UgPT4gKFxuICAgICAgICAgICAgPFNpZGViYXJSZXNvdXJjZVxuICAgICAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgICAgICAgIGtleT17cmVzb3VyY2UuaWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L1Jlc291cmNlc0xpc3Q+XG4gICAgICA8L2xpPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaWRlYmFyUGFyZW50XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5jb25zdCBTdHlsZWRGb290ZXIgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuZm9udHMubWlufTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5saWdodFRleHR9O1xuXG4gICYgc3ZnLCAmIGEge1xuICAgIGNvbG9yOiAgJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5sb3ZlfTtcbiAgICBtYXJnaW46IDAgICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nTWlufTtcbiAgfVxuYFxuXG50eXBlIFByb3BzID0ge1xuICBoaWRkZW4/OiBib29sZWFuO1xufVxuXG5jb25zdCBTaWRlYmFyRm9vdGVyOiBSZWFjdC5GQzxQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBoaWRkZW4gfSA9IHByb3BzXG4gIGlmIChoaWRkZW4pIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFN0eWxlZEZvb3Rlcj5cbiAgICAgICAgPGFcbiAgICAgICAgICBocmVmPVwiaHR0cDovL3NvZnR3YXJlYnJvdGhlcnMuY29cIlxuICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgID5cbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXMgZmEtaGVhcnQgZmEtMnhcIiAvPlxuICAgICAgICA8L2E+XG4gICAgICA8L1N0eWxlZEZvb3Rlcj5cbiAgICApXG4gIH1cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkRm9vdGVyPlxuICAgICAgPHNwYW4+XG4gICAgICAgIFdpdGhcbiAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLWhlYXJ0XCIgLz5cbiAgICAgICAgYnlcbiAgICAgICAgPGFcbiAgICAgICAgICBocmVmPVwiaHR0cDovL3NvZnR3YXJlYnJvdGhlcnMuY29cIlxuICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgID5cbiAgICAgICAgICBTb2Z0d2FyZUJyb3RoZXJzXG4gICAgICAgIDwvYT5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L1N0eWxlZEZvb3Rlcj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaWRlYmFyRm9vdGVyXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5jb25zdCBTaWRlYmFyTGFiZWwgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbi10b3A6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nfTtcbiAgbWFyZ2luLWxlZnQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nfTtcbiAgbWFyZ2luLWJvdHRvbTogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9O1xuICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5saWdodFRleHR9O1xuICBmb250LXNpemU6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5mb250cy5taW59O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsZXR0ZXItc3BhY2luZzogLjFlbTtcbmBcblxuZXhwb3J0IGRlZmF1bHQgU2lkZWJhckxhYmVsXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5jb25zdCBTaWRlYmFyU2VjdGlvbiA9IHN0eWxlZC5zZWN0aW9uYFxuICBwYWRkaW5nOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gYCR7dGhlbWUuc2l6ZXMucGFkZGluZ30gJHt0aGVtZS5zaXplcy5wYWRkaW5nTGF5b3V0fWB9O1xuICB3aWR0aDogICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5zaWRlYmFyV2lkdGh9O1xuICB0cmFuc2l0aW9uOiBwYWRkaW5nIDAuNXM7XG4gICYgPiBzZWN0aW9uIHtcbiAgICBvcGFjaXR5OiAxO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC41cztcbiAgfVxuYFxuZXhwb3J0IGRlZmF1bHQgU2lkZWJhclNlY3Rpb25cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmltcG9ydCB7IFJlZHV4U3RhdGUgfSBmcm9tICcuLi8uLi8uLi9zdG9yZS9zdG9yZSdcbmltcG9ydCBTaWRlYmFyTGFiZWwgZnJvbSAnLi9zdHlsZWQvc2lkZWJhci1sYWJlbC5zdHlsZWQnXG5pbXBvcnQgU2lkZWJhckxpbmsgZnJvbSAnLi9zdHlsZWQvc2lkZWJhci1saW5rLnN0eWxlZCdcbmltcG9ydCBWaWV3SGVscGVycyBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL3V0aWxzL3ZpZXctaGVscGVycydcbmltcG9ydCBTaWRlYmFyU2VjdGlvbiBmcm9tICcuL3N0eWxlZC9zaWRlYmFyLXNlY3Rpb24uc3R5bGVkJ1xuXG5jb25zdCBQYWdlc0xpc3RXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgJiYmIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gIH1cbmBcblxudHlwZSBQcm9wcyA9IHtcbiAgcGFnZXM/OiBSZWR1eFN0YXRlWydwYWdlcyddO1xufVxuXG5jb25zdCBTaWRlYmFyUGFnZXM6IFJlYWN0LkZDPFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHBhZ2VzIH0gPSBwcm9wc1xuICBjb25zdCBoID0gbmV3IFZpZXdIZWxwZXJzKClcblxuICBpZiAoIXBhZ2VzIHx8ICFwYWdlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gKDw+PC8+KVxuICB9XG5cbiAgY29uc3QgaXNBY3RpdmUgPSAocGFnZSwgbG9jYXRpb24pOiBib29sZWFuID0+IChcbiAgICAhIWxvY2F0aW9uLnBhdGhuYW1lLm1hdGNoKGAvcGFnZXMvJHtwYWdlLm5hbWV9YClcbiAgKVxuXG4gIHJldHVybiAoXG4gICAgPFNpZGViYXJTZWN0aW9uPlxuICAgICAgPFNpZGViYXJMYWJlbD5QYWdlczwvU2lkZWJhckxhYmVsPlxuICAgICAgPFBhZ2VzTGlzdFdyYXBwZXI+XG4gICAgICAgIHtwYWdlcy5tYXAocGFnZSA9PiAoXG4gICAgICAgICAgPFNpZGViYXJMaW5rXG4gICAgICAgICAgICB0bz17aC5wYWdlVXJsKHBhZ2UubmFtZSl9XG4gICAgICAgICAgICBrZXk9e3BhZ2UubmFtZX1cbiAgICAgICAgICAgIGlzQWN0aXZlPXsobWF0Y2gsIGxvY2F0aW9uKTogYm9vbGVhbiA9PiBpc0FjdGl2ZShwYWdlLCBsb2NhdGlvbil9XG4gICAgICAgICAgICBkYXRhLXRlc3RpZD1cInNpZGViYXItcGFnZS1saW5rXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7cGFnZS5sYWJlbH1cbiAgICAgICAgICA8L1NpZGViYXJMaW5rPlxuICAgICAgICApKX1cbiAgICAgIDwvUGFnZXNMaXN0V3JhcHBlcj5cbiAgICA8L1NpZGViYXJTZWN0aW9uPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpZGViYXJQYWdlc1xuIiwiaW1wb3J0IFJlc291cmNlSlNPTiBmcm9tICcuLi8uLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVzb3VyY2UtanNvbi5pbnRlcmZhY2UnXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5leHBvcnQgZGVmYXVsdCAocmVzb3VyY2VzOiBBcnJheTxSZXNvdXJjZUpTT04+KTogQXJyYXk8e1xuICBuYW1lOiBzdHJpbmc7XG4gIGljb246IHN0cmluZztcbiAgcmVzb3VyY2VzOiBBcnJheTxSZXNvdXJjZUpTT04+O1xufT4gPT4ge1xuICBjb25zdCB2aXNpYmxlUmVzb3VyY2VzID0gcmVzb3VyY2VzLmZpbHRlcihyZXMgPT4gKFxuICAgIHJlcy5yZXNvdXJjZUFjdGlvbnMuZmluZChhID0+IGEubmFtZSA9PT0gJ2xpc3QnKVxuICApKVxuICBjb25zdCBtYXAgPSB2aXNpYmxlUmVzb3VyY2VzLnJlZHVjZSgobWVtbywgcmVzb3VyY2UpID0+IHtcbiAgICBpZiAobWVtb1tyZXNvdXJjZS5wYXJlbnQubmFtZV0pIHtcbiAgICAgIG1lbW9bcmVzb3VyY2UucGFyZW50Lm5hbWVdLnB1c2gocmVzb3VyY2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIG1lbW9bcmVzb3VyY2UucGFyZW50Lm5hbWVdID0gW3Jlc291cmNlXVxuICAgIH1cbiAgICBtZW1vW3Jlc291cmNlLnBhcmVudC5uYW1lXS5pY29uID0gcmVzb3VyY2UucGFyZW50Lmljb25cbiAgICByZXR1cm4gbWVtb1xuICB9LCB7fSlcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1hcCkubWFwKHBhcmVudE5hbWUgPT4gKHtcbiAgICBuYW1lOiBwYXJlbnROYW1lLFxuICAgIGljb246IG1hcFtwYXJlbnROYW1lXS5pY29uLFxuICAgIHJlc291cmNlczogbWFwW3BhcmVudE5hbWVdLFxuICB9KSlcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmNvbnN0IFN0eWxlZEhhbWJ1cmdlciA9IHN0eWxlZC5hYFxuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBmbG9hdDogbGVmdDtcbiAgd2lkdGg6IDQ4cHg7XG4gIGhlaWdodDogMzJweDtcbiAgcGFkZGluZzogMTBweCAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ307XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgei1pbmRleDogMTA7XG5cbiAgJiA+IGRpdiB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAycHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5kZWZhdWx0VGV4dH07XG4gICAgbWFyZ2luLWJvdHRvbTogM3B4O1xuICB9XG5gXG5cbnR5cGUgUHJvcHMgPSB7XG4gIG9uQ2xpY2s6IChldmVudDogYW55KSA9PiB2b2lkO1xufVxuXG5jb25zdCBIYW1idXJnZXI6IFJlYWN0LkZDPFByb3BzPiA9IHByb3BzID0+IChcbiAgPFN0eWxlZEhhbWJ1cmdlciB7Li4ucHJvcHN9PlxuICAgIDxkaXYgLz5cbiAgICA8ZGl2IC8+XG4gICAgPGRpdiAvPlxuICA8L1N0eWxlZEhhbWJ1cmdlcj5cbilcblxuZXhwb3J0IGRlZmF1bHQgSGFtYnVyZ2VyXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5jb25zdCBTaWRlYmFyV3JhcHBlciA9IHN0eWxlZC5hc2lkZWBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1zaHJpbms6IDA7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdy15OiBhdXRvO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuYmNrfTtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5ib3JkZXJ9O1xuICB3aWR0aDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnNpZGViYXJXaWR0aH07XG4gIHRyYW5zaXRpb246IHdpZHRoIDAuNXM7XG5cbiAgJi5oaWRkZW4ge1xuICAgIHdpZHRoOiA1MHB4O1xuICAgIHRyYW5zaXRpb246IHdpZHRoIDAuNXM7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAmID4gc2VjdGlvbiB7XG4gICAgICBwYWRkaW5nOiAgJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9IDRweDtcbiAgICAgIHRyYW5zaXRpb246IHBhZGRpbmcgMC41cztcbiAgICAgICYgPiBzZWN0aW9uIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjVzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuYFxuXG5leHBvcnQgZGVmYXVsdCBTaWRlYmFyV3JhcHBlclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCBTaWRlYmFyQnJhbmRpbmcgZnJvbSAnLi9zaWRlYmFyLWJyYW5kaW5nJ1xuaW1wb3J0IFNpZGViYXJQYXJlbnQgZnJvbSAnLi9zaWRlYmFyLXBhcmVudCdcbmltcG9ydCBTaWRlYmFyRm9vdGVyIGZyb20gJy4vc2lkZWJhci1mb290ZXInXG5pbXBvcnQgU2lkZWJhclBhZ2VzIGZyb20gJy4vc2lkZWJhci1wYWdlcydcbmltcG9ydCBncm91cFJlc291cmNlcyBmcm9tICcuL3V0aWxzL2dyb3VwLXJlc291cmNlcydcbmltcG9ydCBIYW1idXJnZXIgZnJvbSAnLi9oYW1idXJnZXInXG5pbXBvcnQgeyBSZWR1eFN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvc3RvcmUnXG5pbXBvcnQgU2lkZWJhckxhYmVsIGZyb20gJy4vc3R5bGVkL3NpZGViYXItbGFiZWwuc3R5bGVkJ1xuaW1wb3J0IFNpZGViYXJXcmFwcGVyIGZyb20gJy4vc3R5bGVkL3NpZGViYXItd3JhcHBlci5zdHlsZWQnXG5pbXBvcnQgU2lkZWJhclNlY3Rpb24gZnJvbSAnLi9zdHlsZWQvc2lkZWJhci1zZWN0aW9uLnN0eWxlZCdcblxudHlwZSBQcm9wcyA9IFBpY2s8UmVkdXhTdGF0ZSwgJ3Jlc291cmNlcycgfCAnYnJhbmRpbmcnIHwgJ3BhZ2VzJz5cblxuY29uc3QgU2lkZWJhcjogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgYnJhbmRpbmcsIHJlc291cmNlcywgcGFnZXMgfSA9IHByb3BzXG4gIGNvbnN0IFtoaWRkZW4sIHNldEhpZGRlbl0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgcmV0dXJuIChcbiAgICA8U2lkZWJhcldyYXBwZXIgY2xhc3NOYW1lPXtoaWRkZW4gPyAnaGlkZGVuJyA6ICdhY3RpdmUnfT5cbiAgICAgIDxTaWRlYmFyU2VjdGlvbj5cbiAgICAgICAgPEhhbWJ1cmdlciBvbkNsaWNrPXsoKTogdm9pZCA9PiBzZXRIaWRkZW4oIWhpZGRlbil9IC8+XG4gICAgICAgIDxTaWRlYmFyQnJhbmRpbmcgYnJhbmRpbmc9e2JyYW5kaW5nfSAvPlxuICAgICAgPC9TaWRlYmFyU2VjdGlvbj5cbiAgICAgIDxTaWRlYmFyU2VjdGlvbiBzdHlsZT17eyBmbGV4R3JvdzogMSB9fT5cbiAgICAgICAgPFNpZGViYXJMYWJlbD5OYXZpZ2F0aW9uPC9TaWRlYmFyTGFiZWw+XG4gICAgICAgIDx1bD5cbiAgICAgICAgICB7Z3JvdXBSZXNvdXJjZXMocmVzb3VyY2VzKS5tYXAocGFyZW50ID0+IChcbiAgICAgICAgICAgIDxTaWRlYmFyUGFyZW50IHBhcmVudD17cGFyZW50fSBrZXk9e3BhcmVudC5uYW1lfSAvPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L3VsPlxuICAgICAgPC9TaWRlYmFyU2VjdGlvbj5cbiAgICAgIDxTaWRlYmFyUGFnZXMgcGFnZXM9e3BhZ2VzfSAvPlxuICAgICAge2JyYW5kaW5nLnNvZnR3YXJlQnJvdGhlcnMgJiYgPFNpZGViYXJGb290ZXIgaGlkZGVuPXtoaWRkZW59IC8+fVxuICAgIDwvU2lkZWJhcldyYXBwZXI+XG4gIClcbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBSZWR1eFN0YXRlKTogUHJvcHMgPT4gKHtcbiAgcmVzb3VyY2VzOiBzdGF0ZS5yZXNvdXJjZXMsXG4gIGJyYW5kaW5nOiBzdGF0ZS5icmFuZGluZyxcbiAgcGFnZXM6IHN0YXRlLnBhZ2VzLFxufSlcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKFNpZGViYXIpXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5pbXBvcnQgeyBDdXJyZW50QWRtaW4gfSBmcm9tICcuLi8uLi8uLi9jdXJyZW50LWFkbWluLmludGVyZmFjZSdcblxuY29uc3QgVXNlckJveCA9IHN0eWxlZC5kaXYuYXR0cnMoe1xuICBjbGFzc05hbWU6ICduYXZiYXItbGluaycsXG59KWBcbiAgcGFkZGluZy1yaWdodDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9O1xuICBib3JkZXItcmFkaXVzOiA1MHB4O1xuICBtYXJnaW46IDEwcHggMDtcbiAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMubGlnaHRUZXh0fTtcblxuICBpbWcge1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBtYXJnaW4tbGVmdDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9O1xuXG4gICAgJjphZnRlciB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgfVxuYFxuXG5jb25zdCBEcm9wZG93biA9IHN0eWxlZC5kaXYuYXR0cnMoe1xuICBjbGFzc05hbWU6ICduYXZiYXItZHJvcGRvd24nLFxufSlgXG4gIGJvcmRlci1yYWRpdXM6IDBweDtcbiAgYm9yZGVyOiBub25lO1xuICBwYWRkaW5nOiAwO1xuICB0b3A6IDk1JTtcbmBcblxuY29uc3QgTG9nZ2VkSW5Cb3ggPSBzdHlsZWQuZGl2LmF0dHJzKHtcbiAgY2xhc3NOYW1lOiAnbmF2YmFyLWl0ZW0gaGFzLWRyb3Bkb3duIGlzLWhvdmVyYWJsZSBuYXZiYXItdXNlcicsXG59KWBcbiAgXG4gICYmJjpob3ZlciAke1VzZXJCb3h9IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnN1cGVyTGlnaHRCYWNrfTtcbiAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5saWdodFRleHR9O1xuICB9XG4gICYmJjpob3ZlciAke0Ryb3Bkb3dufSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5zdXBlckxpZ2h0QmFja307XG4gICAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMubGlnaHRUZXh0fTtcbiAgfVxuYFxuXG5jb25zdCBEcm9wZG93bkxpbmsgPSBzdHlsZWQuYS5hdHRycyh7XG4gIGNsYXNzTmFtZTogJ25hdmJhci1pdGVtJyxcbn0pYFxuICAmJiYge1xuICAgIHBhZGRpbmc6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiBgJHt0aGVtZS5zaXplcy5wYWRkaW5nfSAke3RoZW1lLnNpemVzLnBhZGRpbmdMYXlvdXR9YH07XG4gICAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuZGVmYXVsdFRleHR9O1xuICAgIHBhZGRpbmctbGVmdDogNDBweDtcbiAgICBib3JkZXI6IG5vbmU7XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgIGJvcmRlcjogNHB4ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMucHJpbWFyeX07XG4gICAgICBwYWRkaW5nLWxlZnQ6IDM2cHg7XG4gICAgICBib3JkZXItc3R5bGU6IG5vbmUgc29saWQ7XG4gICAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5kZWZhdWx0VGV4dH07XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICB9XG4gICAgXG4gICAgaSwgc3ZnIHtcbiAgICAgIG1hcmdpbi1yaWdodDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9O1xuICAgIH1cbiAgfVxuYFxuXG50eXBlIFByb3BzID0ge1xuICBzZXNzaW9uOiBDdXJyZW50QWRtaW47XG4gIHBhdGhzOiB7XG4gICAgbG9nb3V0UGF0aDogc3RyaW5nO1xuICB9O1xufVxuXG5jb25zdCBMb2dnZWRJbjogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgc2Vzc2lvbiwgcGF0aHMgfSA9IHByb3BzXG4gIHJldHVybiAoXG4gICAgPExvZ2dlZEluQm94PlxuICAgICAgPFVzZXJCb3g+XG4gICAgICAgIHtzZXNzaW9uLmVtYWlsfVxuICAgICAgICA8aW1nIHNyYz1cImh0dHBzOi8vYXBpLmFkb3JhYmxlLmlvL2F2YXRhcnMvMjQvc29mdHdhcmVicm90aGVycy5wbmdcIiBhbHQ9XCJ1c2VyXCIgLz5cbiAgICAgIDwvVXNlckJveD5cbiAgICAgIDxEcm9wZG93bj5cbiAgICAgICAgPERyb3Bkb3duTGluayBocmVmPXtwYXRocy5sb2dvdXRQYXRofT5cbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXMgZmEtc2lnbi1vdXQtYWx0XCIgLz5cbiAgICAgICAgICBTaWduIG91dFxuICAgICAgICA8L0Ryb3Bkb3duTGluaz5cbiAgICAgIDwvRHJvcGRvd24+XG4gICAgPC9Mb2dnZWRJbkJveD5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBMb2dnZWRJblxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcblxuLyoqXG4gKiBAY2xhc3NcbiAqIFJlcHJlc2VudHMgbGFiZWxzIGluc2lkZSB0aGUgYXBwbGljYXRpb24uXG4gKlxuICogQGNvbXBvbmVudFxuICogQGV4YW1wbGVcbiAqIHJldHVybiAoXG4gKiA8V3JhcHBlckJveCBib3JkZXI+XG4gKiAgIDxMYWJlbD5Tb21lIExhYmVsOjwvTGFiZWw+XG4gKiAgIDxwPlRleHQgYmVsb3cgdGhlIGxhYmVsPC9wPlxuICogPC9XcmFwcGVyQm94PlxuICogKVxuICovXG5jb25zdCBMYWJlbCA9IHN0eWxlZC5sYWJlbC5hdHRycyh7XG4gIGNsYXNzTmFtZTogJ2xhYmVsJyxcbn0pYFxuICAmJiYge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC1zaXplOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuZm9udHMubWlufTtcbiAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5saWdodFRleHR9O1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgbWFyZ2luOiAwIDAgOHB4IDA7XG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuMWVtO1xuICB9XG5gXG5cbi8qKlxuICogQG1lbWJlcm9mIExhYmVsXG4gKi9cbnR5cGUgUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG4gIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcztcbiAgaHRtbEZvcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGFiZWxcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmltcG9ydCBMYWJlbCBmcm9tICcuLi91aS9sYWJlbCdcbmltcG9ydCB7IFZlcnNpb25Qcm9wcyB9IGZyb20gJy4uLy4uLy4uL2FkbWluLWJyby1vcHRpb25zLmludGVyZmFjZSdcblxuY29uc3QgVmVyc2lvbldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxMHB4IDA7XG5gXG5cbmNvbnN0IFZlcnNpb25CbG9jayA9IHN0eWxlZC5wYFxuICAmJiYge1xuICAgICYgPiBsYWJlbCB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgfVxuICB9XG5gXG5cbmV4cG9ydCB0eXBlIFByb3BzID0ge1xuICB2ZXJzaW9uczogVmVyc2lvblByb3BzO1xufVxuXG5cbmNvbnN0IFZlcnNpb246IFJlYWN0LkZDPFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHZlcnNpb25zIH0gPSBwcm9wc1xuICBjb25zdCB7IGFkbWluLCBhcHAgfSA9IHZlcnNpb25zXG4gIHJldHVybiAoXG4gICAgPFZlcnNpb25XcmFwcGVyPlxuICAgICAge2FkbWluICYmIChcbiAgICAgICAgPFZlcnNpb25CbG9jaz5cbiAgICAgICAgICA8TGFiZWw+YWRtaW46PC9MYWJlbD5cbiAgICAgICAgICB7YWRtaW59XG4gICAgICAgIDwvVmVyc2lvbkJsb2NrPlxuICAgICAgKX1cbiAgICAgIHthcHAgJiYgKFxuICAgICAgICA8VmVyc2lvbkJsb2NrPlxuICAgICAgICAgIDxMYWJlbD5hcHA6PC9MYWJlbD5cbiAgICAgICAgICB7YXBwfVxuICAgICAgICA8L1ZlcnNpb25CbG9jaz5cbiAgICAgICl9XG4gICAgPC9WZXJzaW9uV3JhcHBlcj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBWZXJzaW9uXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5pbXBvcnQgTG9nZ2VkSW4gZnJvbSAnLi9sb2dnZWQtaW4nXG5pbXBvcnQgVmVyc2lvbiBmcm9tICcuL3ZlcnNpb24nXG5cbmltcG9ydCB7IEN1cnJlbnRBZG1pbiB9IGZyb20gJy4uLy4uLy4uL2N1cnJlbnQtYWRtaW4uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgVmVyc2lvblByb3BzIH0gZnJvbSAnLi4vLi4vLi4vYWRtaW4tYnJvLW9wdGlvbnMuaW50ZXJmYWNlJ1xuaW1wb3J0IHsgUmVkdXhTdGF0ZSB9IGZyb20gJy4uLy4uL3N0b3JlL3N0b3JlJ1xuXG5jb25zdCBOYXZiYXIgPSBzdHlsZWQubmF2LmF0dHJzKHtcbiAgY2xhc3NOYW1lOiAnbmF2YmFyJyxcbn0pYFxuICBoZWlnaHQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5uYXZiYXJIZWlnaHR9O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5ib3JkZXJ9O1xuICBwYWRkaW5nOiAwICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nTGF5b3V0fTtcbiAgZmxleC1zaHJpbms6IDA7XG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuYmNrfTtcbmBcblxudHlwZSBQcm9wc0Zyb21TdGF0ZSA9IHtcbiAgdmVyc2lvbnM6IFZlcnNpb25Qcm9wcztcbiAgc2Vzc2lvbjogQ3VycmVudEFkbWluIHwgbnVsbDtcbiAgcGF0aHM6IHtcbiAgICBsb2dvdXRQYXRoOiBzdHJpbmc7XG4gIH07XG59XG5cbmNvbnN0IFRvcEJhcjogUmVhY3QuRkM8UHJvcHNGcm9tU3RhdGU+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgc2Vzc2lvbiwgdmVyc2lvbnMsIHBhdGhzIH0gPSBwcm9wc1xuICByZXR1cm4gKFxuICAgIDxOYXZiYXI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdmJhci1tZW51XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmF2YmFyLXN0YXJ0XCI+XG4gICAgICAgICAgPFZlcnNpb24gdmVyc2lvbnM9e3ZlcnNpb25zfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuYXZiYXItZW5kXCI+XG4gICAgICAgICAge3Nlc3Npb24gJiYgc2Vzc2lvbi5lbWFpbCA/IDxMb2dnZWRJbiBzZXNzaW9uPXtzZXNzaW9ufSBwYXRocz17cGF0aHN9IC8+IDogJyd9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9OYXZiYXI+XG4gIClcbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBSZWR1eFN0YXRlKTogUHJvcHNGcm9tU3RhdGUgPT4gKHtcbiAgc2Vzc2lvbjogc3RhdGUuc2Vzc2lvbixcbiAgcGF0aHM6IHtcbiAgICBsb2dvdXRQYXRoOiBzdGF0ZS5wYXRocy5sb2dvdXRQYXRoLFxuICB9LFxuICB2ZXJzaW9uczogc3RhdGUudmVyc2lvbnMsXG59KVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoVG9wQmFyKVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcblxuY29uc3QgU3R5bGVkQ29sdW1uID0gc3R5bGVkLnNlY3Rpb24uYXR0cnM8UHJvcHM+KCh7IHdpZHRoID0gNCwgb2Zmc2V0ID0gMCB9KSA9PiAoe1xuICBjbGFzc05hbWU6IGBjb2x1bW4gaXMtJHt3aWR0aH0tZGVza3RvcCBpcy1vZmZzZXQtJHtvZmZzZXR9YCxcbn0pKWBcblxuYFxuXG4vKipcbiAqIENvbHVtIHJlcHJlc2VudGF0aW9uIGluIEFkbWluQnJvIGdyaWQuIEl0IHVzZXMgW2J1bG1hXShodHRwczovL2J1bG1hLmlvL2RvY3VtZW50YXRpb24vKSBncmlkLlxuICpcbiAqIEV4YW1wbGUgdXNhZ2Ugd2l0aCB7QGxpbmsgQ29sdW1ufVxuICogYGBgSmF2YVNjcmlwdFxuICogaW1wb3J0IHsgQ29sdW1uLCBDb2x1bW5zIH0gZnJvbSAnYWRtaW4tYnJvJ1xuICogLy8uLi5cbiAqIHJldHVybiAoXG4gKiAgIDxjb2x1bW5zPlxuICogICAgICA8Y29sdW1uIHdpZHRoPXs4fT5cbiAqICAgICAgICBTb21lIGNvbnRlbnQgb24gdGhlIGxlZnRcbiAqICAgICAgPC9jb2x1bW4+XG4gKiAgICAgIDxjb2x1bW4gd2lkdGg9ezR9PlxuICogICAgICAgIFNvbWUgY29udGVudCBvbiB0aGUgcmlnaHRcbiAqICAgICAgPC9jb2x1bW4+XG4gKiAgIDwvY29sdW1ucz5cbiAqICApXG4gKiBgYGBcbiAqXG4gKiBAc2VlIGh0dHBzOi8vYnVsbWEuaW8vZG9jdW1lbnRhdGlvbi9cbiAqIEBzZWUge0BsaW5rIENvbHVtbnN9XG4gKiBAY29tcG9uZW50XG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+TGF5b3V0IHdpdGggdGV4dCBibG9ja3MgYnkgdXNpbmcgY29sdW1uPC9jYXB0aW9uPlxuICogcmV0dXJuIChcbiAqICAgPENvbHVtbnM+XG4gKiAgICAgPENvbHVtbiB3aWR0aD17Mn0gb2Zmc2V0PXsyfT5cbiAqICAgICAgIDxXcmFwcGVyQm94PlNvbWUgd3JhcHBlZCB0ZXh0PC9XcmFwcGVyQm94PlxuICogICAgIDwvQ29sdW1uPlxuICogICAgIDxDb2x1bW4gd2lkdGg9ezN9PlxuICogICAgIDxXcmFwcGVyQm94IGJvcmRlcj5JbnNpZGUgQm9yZGVyPC9XcmFwcGVyQm94PlxuICogICAgIDwvQ29sdW1uPlxuICogICAgIDxDb2x1bW4gd2lkdGg9ezV9IHN0eWxlPXt7YmFja2dyb3VuZDogJyNjY2MnfX0+bm9ybWFsIHRleHQ8L0NvbHVtbj5cbiAqICAgPC9Db2x1bW5zPlxuICogKVxuICovXG5jb25zdCBDb2x1bW46IFJlYWN0LkZDPFByb3BzPiA9IHByb3BzID0+IDxTdHlsZWRDb2x1bW4gey4uLnByb3BzfSAvPlxuXG4vKipcbiAqIEBtZW1iZXJvZiBDb2x1bW5cbiAqL1xudHlwZSBQcm9wcyA9IHtcbiAgLyoqXG4gICAqIFdpZHRoIG9mIHRoZSBjb2x1bW4gaW4gMTIgY29sdW1uIGdyaWQsIGRlZmF1bHQgdG8gNFxuICAgKi9cbiAgd2lkdGg/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBjb2x1bW4gb2Zmc2V0LCBkZWZhdWx0IHRvIDBcbiAgICovXG4gIG9mZnNldD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5jb25zdCBTdHlsZWRDb2x1bW5zID0gc3R5bGVkLnNlY3Rpb24uYXR0cnMoe1xuICBjbGFzc05hbWU6ICdjb2x1bW5zIGlzLW11bHRpbGluZScsXG59KWBcblxuYFxuXG4vKipcbiAqIENvbHVtbnMgd3JhcHBlciBmb3IgdGhlIGdyaWQgaW4gQWRtaW5Ccm8uIEl0IHVzZXMgW2J1bG1hXShodHRwczovL2J1bG1hLmlvL2RvY3VtZW50YXRpb24vKSBncmlkLlxuICpcbiAqIEV4YW1wbGUgdXNhZ2Ugd2l0aCB7QGxpbmsgQ29sdW1ufVxuICogYGBgSmF2YVNjcmlwdFxuICogaW1wb3J0IHsgQ29sdW1uLCBDb2x1bW5zIH0gZnJvbSAnYWRtaW4tYnJvJ1xuICogLy8uLi5cbiAqIHJldHVybiAoXG4gKiAgIDxjb2x1bW5zPlxuICogICAgICA8Y29sdW1uIHdpZHRoPXs4fT5cbiAqICAgICAgICBTb21lIGNvbnRlbnQgb24gdGhlIGxlZnRcbiAqICAgICAgPC9jb2x1bW4+XG4gKiAgICAgIDxjb2x1bW4gd2lkdGg9ezR9PlxuICogICAgICAgIFNvbWUgY29udGVudCBvbiB0aGUgcmlnaHRcbiAqICAgICAgPC9jb2x1bW4+XG4gKiAgIDwvY29sdW1ucz5cbiAqICApXG4gKiBgYGBcbiAqXG4gKiBAc2VlIGh0dHBzOi8vYnVsbWEuaW8vZG9jdW1lbnRhdGlvbi9cbiAqIEBzZWUgQ29sdW1uXG4gKlxuICogQGNvbXBvbmVudFxuICogQGV4YW1wbGVcbiAqIHJldHVybiAoXG4gKiAgIDxDb2x1bW5zPlxuICogICAgICA8Q29sdW1uIHdpZHRoPXs4fT5cbiAqICAgICAgICBTb21lIGNvbnRlbnQgb24gdGhlIGxlZnRcbiAqICAgICAgPC9Db2x1bW4+XG4gKiAgICAgIDxDb2x1bW4gd2lkdGg9ezR9PlxuICogICAgICAgIFNvbWUgY29udGVudCBvbiB0aGUgcmlnaHRcbiAqICAgICAgPC9Db2x1bW4+XG4gKiAgIDwvQ29sdW1ucz5cbiAqIClcbiAqL1xuY29uc3QgQ29sdW1uczogUmVhY3QuRkMgPSBwcm9wcyA9PiA8U3R5bGVkQ29sdW1ucyB7Li4ucHJvcHN9IC8+XG5cbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuc2VjdGlvbi5hdHRycyh7XG4gIGNsYXNzTmFtZTogJ2NvbnRlbnQnLFxufSlgXG4gICYmIHtcbiAgICBwYWRkaW5nOiA5MHB4ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nTGF5b3V0fTtcbiAgICBiYWNrZ3JvdW5kOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnN1cGVyRGFya0Jja307XG4gICAgY29sb3I6ICNmZmY7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICAmID4gKiB7XG4gICAgICBjb2xvcjogI2ZmZjtcbiAgICB9XG5cbiAgICBwIHtcbiAgICAgIGNvbG9yOiAjZmZmO1xuICAgIH1cblxuICAgIGgxIHtcbiAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgZm9udC1zaXplOiA1M3B4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogNHB4O1xuICAgIH1cbiAgfVxuYFxuLyoqXG4gKiBDb21wb25lbnQgd2hpY2ggY2FuIGJlIHVzZWQgYXMgdGhlIG91dHN0YW5kaW5nIGhlYWRlciBvZiB0aGUgZGFzaGJvYXJkIHBhZ2UuXG4gKlxuICogQGNvbXBvbmVudFxuICogQGV4YW1wbGUgPGNhcHRpb24+RW1wdHkgSGVhZGVyIHdpdGggc2ltcGxlIHRleHQ8L2NhcHRpb24+XG4gKiByZXR1cm4gKFxuICogIDxEYXNoYm9hcmRIZWFkZXI+XG4gKiAgICA8aDE+U29tZSB0ZXh0IGluc2lkZSBhIGhlYWRlcjwvaDE+XG4gKiAgICA8cD5TdWJ0aXRsZTwvcD5cbiAqICA8L0Rhc2hib2FyZEhlYWRlcj5cbiAqIClcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5IZWFkZXIgd2l0aCBvdmVybGF5IGJsb2NrczwvY2FwdGlvbj5cbiAqIHJldHVybiAoXG4gKiAgIDxkaXY+XG4gKiAgICAgPERhc2hib2FyZEhlYWRlcj5cbiAqICAgICAgIDxoMT5PdmVybGF5aW5nIHRleHQ8L2gxPlxuICogICAgIDwvRGFzaGJvYXJkSGVhZGVyPlxuICogICAgIDxXcmFwcGVyQm94PlxuICogICAgICAgPENvbHVtbnMgc3R5bGU9e3ttYXJnaW5Ub3A6ICctODBweCd9fT5cbiAqICAgICAgICAgPENvbHVtbj48VmFsdWVCbG9jayAgaWNvbj1cImZhIGZhLWJvbWJcIiB2YWx1ZT1cIjVcIj5cbiAqICAgICAgICAgICBVdGlsc1xuICogICAgICAgICA8L1ZhbHVlQmxvY2s+PC9Db2x1bW4+XG4gKiAgICAgICAgIDxDb2x1bW4+PFZhbHVlQmxvY2sgIGljb249XCJmYSBmYS1zdGFyXCIgdmFsdWU9XCIxMlwiPlxuICogICAgICAgICAgIEFyZVxuICogICAgICAgICA8L1ZhbHVlQmxvY2s+PC9Db2x1bW4+XG4gKiAgICAgICAgIDxDb2x1bW4+PFZhbHVlQmxvY2sgIGljb249XCJmYSBmYS1jb2dcIiB2YWx1ZT1cIjVcIiBjb2xvcj1cInJlZFwiPlxuICogICAgICAgICAgIEF3ZXNvbWVcbiAqICAgICAgICAgPC9WYWx1ZUJsb2NrPjwvQ29sdW1uPlxuICogICAgICAgPC9Db2x1bW5zPlxuICogICAgIDwvV3JhcHBlckJveD5cbiAqICAgPC9kaXY+XG4gKiApXG4gKi9cbmNvbnN0IERhc2hib2FyZEhlYWRlcjogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHByb3BzXG4gIHJldHVybiAoXG4gICAgPFdyYXBwZXI+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9XcmFwcGVyPlxuICApXG59XG5cbi8qKlxuICogQG1lbWJlcm9mIERhc2hib2FyZEhlYWRlclxuICovXG50eXBlIFByb3BzID0ge1xuICAvKipcbiAgICogTW9zdCBwcm9iYWJseSB5b3Ugd2lsbCB1c2UgYEgxYCBhbmQgYFBgIHRhZ3MgaGVyZVxuICAqL1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBEYXNoYm9hcmRIZWFkZXJcbiIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kczsiLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5jb25zdCBEcm9wZG93blRyaWdnZXIgPSBzdHlsZWQuZGl2LmF0dHJzKHtcbiAgY2xhc3NOYW1lOiAnZHJvcGRvd24tdHJpZ2dlcicsXG59KWBcbiAgcGFkZGluZzogMHB4ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nfTtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBsaW5lLWhlaWdodDogMjBweDtcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5iY2t9O1xuICB9XG5gXG5cbmNvbnN0IERyb3Bkb3duTWVudSA9IHN0eWxlZC5kaXYuYXR0cnMoe1xuICBjbGFzc05hbWU6ICdkcm9wZG93bi1tZW51Jyxcbn0pYFxuICAmID4gLmRyb3Bkb3duLWNvbnRlbnQge1xuICAgIGJvcmRlcjogMHB4IG5vbmU7XG4gICAgYm9yZGVyLXJhZGl1czogMHB4O1xuICAgIGJveC1zaGFkb3c6IDAgNnB4IDEzcHggMCByZ2JhKDY5LDcwLDg1LDAuMTMpO1xuICAgIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuYmNrfTtcbiAgfVxuYFxuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGEgZHJvcGRvd24gd2l0aCBidXR0b25zLlxuICpcbiAqIEBjb21wb25lbnRcbiAqIEBleGFtcGxlXG4gKiByZXR1cm4gKFxuICogPFdyYXBwZXJCb3ggYm9yZGVyIHN0eWxlPXt7aGVpZ2h0OiAyMDAsIG1hcmdpbkxlZnQ6IDIwMH19PlxuICogICA8RHJvcGRvd24gY2xhc3NOYW1lPVwiaXMtcmlnaHQgaXMtaG92ZXJhYmxlXCI+XG4gKiAgICAgPFN0eWxlZEJ1dHRvbiBjbGFzc05hbWU9XCJpcy13aGl0ZSBpbi1kcm9wZG93blwiPkJ1dHRvbiAxPC9TdHlsZWRCdXR0b24+XG4gKiAgICAgPFN0eWxlZEJ1dHRvbiBjbGFzc05hbWU9XCJpcy13aGl0ZSBpbi1kcm9wZG93blwiPkJ1dHRvbiAyPC9TdHlsZWRCdXR0b24+XG4gKiAgIDwvRHJvcGRvd24+XG4gKiA8L1dyYXBwZXJCb3g+XG4gKiApXG4gKi9cbmNvbnN0IERyb3Bkb3duOiBSZWFjdC5GQzxQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBjaGlsZHJlbiB9ID0gcHJvcHNcbiAgbGV0IHsgY2xhc3NOYW1lID0gJycgfSA9IHByb3BzXG4gIGNsYXNzTmFtZSArPSAnIGRyb3Bkb3duJ1xuICByZXR1cm4gKFxuICAgIDxkaXYgey4uLnByb3BzfSBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICA8RHJvcGRvd25UcmlnZ2VyPlxuICAgICAgICA8aSBjbGFzc05hbWU9XCJpY29tb29uLW9wdGlvbnNcIiAvPlxuICAgICAgPC9Ecm9wZG93blRyaWdnZXI+XG4gICAgICA8RHJvcGRvd25NZW51PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWNvbnRlbnRcIj5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9Ecm9wZG93bk1lbnU+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuLyoqXG4gKiBAbWVtYmVyb2YgRHJvcGRvd25cbiAqL1xudHlwZSBQcm9wcyA9IHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93blxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcblxuY29uc3QgU3R5bGVkV3JhcHBlckJveCA9IHN0eWxlZC5zZWN0aW9uPFByb3BzPmBcbiAgcGFkZGluZzogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmdMYXlvdXR9O1xuICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5kZWZhdWx0VGV4dH07XG4gIGZsZXgtZ3JvdzogMTtcbiAgYm9yZGVyOiAkeyhwcm9wcyk6IHN0cmluZyA9PiAocHJvcHMuYm9yZGVyID8gYDFweCBzb2xpZCAke3Byb3BzLnRoZW1lLmNvbG9ycy5ib3JkZXJ9YCA6ICdub25lJyl9O1xuICBiYWNrZ3JvdW5kOiAkeyhwcm9wcyk6IHN0cmluZyA9PiAocHJvcHMuYm9yZGVyID8gcHJvcHMudGhlbWUuY29sb3JzLmJjayA6ICd0cmFuc3BhcmVudCcpfTtcblxuICAmID4gaDEge1xuICAgIGZvbnQtc2l6ZTogMjJweDtcbiAgICBtYXJnaW4tdG9wOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ307XG4gICAgbWFyZ2luLWJvdHRvbTogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9O1xuICB9XG5gXG5cbi8qKlxuICogQmFzaWMgbGF5b3V0IGVsZW1lbnQgd2hpY2ggY29udHJvbHMgcGFkZGluZy5cbiAqXG4gKiBAY29tcG9uZW50XG4gKiBAZXhhbXBsZVxuICogcmV0dXJuIChcbiAqICAgPFdyYXBwZXJCb3ggYm9yZGVyPlxuICogICAgIDxoMT5IZWFkZXI8L2gxPlxuICogICAgIDxwPlNvbWUgaW5zaWRlIGNvbnRlbnQ8L3A+XG4gKiAgIDwvV3JhcHBlckJveD5cbiAqIClcbiAqL1xuY29uc3QgV3JhcHBlckJveDogUmVhY3QuRkM8UHJvcHM+ID0gcHJvcHMgPT4gKDxTdHlsZWRXcmFwcGVyQm94IHsuLi5wcm9wc30gLz4pXG5cbi8qKlxuICogQG1lbWJlcm9mIFdyYXBwZXJCb3hcbiAqL1xudHlwZSBQcm9wcyA9IHtcbiAgLyoqXG4gICAqIElmIHdyYXBwZXIgc2hvdWxkIGhhdmUgYSBib3JkZXIuXG4gICAqL1xuICBib3JkZXI/OiBib29sZWFuO1xuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdyYXBwZXJCb3hcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgV3JhcHBlckJveCBmcm9tICcuL3dyYXBwZXItYm94J1xuXG5jb25zdCBTcGlubmVyID0gc3R5bGVkLmRpdi5hdHRycyh7XG4gIGNsYXNzTmFtZTogJ2xkcy1mYWNlYm9vaycsXG59KWBcbiAgJiB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aWR0aDogNjRweDtcbiAgICBoZWlnaHQ6IDY0cHg7XG4gIH1cbiAgJiBkaXYge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogNnB4O1xuICAgIHdpZHRoOiAxM3B4O1xuICAgIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMucHJpbWFyeX07XG4gICAgYW5pbWF0aW9uOiBsZHMtZmFjZWJvb2sgMS4ycyBjdWJpYy1iZXppZXIoMCwgMC41LCAwLjUsIDEpIGluZmluaXRlO1xuICB9XG4gICYgZGl2Om50aC1jaGlsZCgxKSB7XG4gICAgbGVmdDogNnB4O1xuICAgIGFuaW1hdGlvbi1kZWxheTogLTAuMjRzO1xuICB9XG4gICYgZGl2Om50aC1jaGlsZCgyKSB7XG4gICAgbGVmdDogMjZweDtcbiAgICBhbmltYXRpb24tZGVsYXk6IC0wLjEycztcbiAgfVxuICAmIGRpdjpudGgtY2hpbGQoMykge1xuICAgIGxlZnQ6IDQ1cHg7XG4gICAgYW5pbWF0aW9uLWRlbGF5OiAwO1xuICB9XG4gIEBrZXlmcmFtZXMgbGRzLWZhY2Vib29rIHtcbiAgICAwJSB7XG4gICAgICB0b3A6IDZweDtcbiAgICAgIGhlaWdodDogNTFweDtcbiAgICB9XG4gICAgNTAlLCAxMDAlIHtcbiAgICAgIHRvcDogMTlweDtcbiAgICAgIGhlaWdodDogMjZweDtcbiAgICB9XG4gIH1cblxuYFxuXG4vKipcbiAqIFNpbXBsZSBsb2FkZXJcbiAqXG4gKiBAY29tcG9uZW50XG4gKiBAZXhhbXBsZVxuICogcmV0dXJuIChcbiAqICAgPFdyYXBwZXJCb3ggYm9yZGVyPjxMb2FkZXIvPjwvV3JhcHBlckJveD5cbiAqIClcbiAqL1xuY29uc3QgTG9hZGVyOiBSZWFjdC5GQyA9ICgpID0+IChcbiAgPFdyYXBwZXJCb3ggc3R5bGU9e3sgdGV4dEFsaWduOiAnY2VudGVyJyB9fT5cbiAgICA8U3Bpbm5lcj5cbiAgICAgIDxkaXYgLz5cbiAgICAgIDxkaXYgLz5cbiAgICAgIDxkaXYgLz5cbiAgICA8L1NwaW5uZXI+XG4gIDwvV3JhcHBlckJveD5cbilcblxuZXhwb3J0IGRlZmF1bHQgTG9hZGVyXG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIHBhZ2luYXRlKHRvdGFsSXRlbXMsIGN1cnJlbnRQYWdlLCBwYWdlU2l6ZSwgbWF4UGFnZXMpIHtcbiAgICBpZiAoY3VycmVudFBhZ2UgPT09IHZvaWQgMCkgeyBjdXJyZW50UGFnZSA9IDE7IH1cbiAgICBpZiAocGFnZVNpemUgPT09IHZvaWQgMCkgeyBwYWdlU2l6ZSA9IDEwOyB9XG4gICAgaWYgKG1heFBhZ2VzID09PSB2b2lkIDApIHsgbWF4UGFnZXMgPSAxMDsgfVxuICAgIC8vIGNhbGN1bGF0ZSB0b3RhbCBwYWdlc1xuICAgIHZhciB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKHRvdGFsSXRlbXMgLyBwYWdlU2l6ZSk7XG4gICAgLy8gZW5zdXJlIGN1cnJlbnQgcGFnZSBpc24ndCBvdXQgb2YgcmFuZ2VcbiAgICBpZiAoY3VycmVudFBhZ2UgPCAxKSB7XG4gICAgICAgIGN1cnJlbnRQYWdlID0gMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY3VycmVudFBhZ2UgPiB0b3RhbFBhZ2VzKSB7XG4gICAgICAgIGN1cnJlbnRQYWdlID0gdG90YWxQYWdlcztcbiAgICB9XG4gICAgdmFyIHN0YXJ0UGFnZSwgZW5kUGFnZTtcbiAgICBpZiAodG90YWxQYWdlcyA8PSBtYXhQYWdlcykge1xuICAgICAgICAvLyB0b3RhbCBwYWdlcyBsZXNzIHRoYW4gbWF4IHNvIHNob3cgYWxsIHBhZ2VzXG4gICAgICAgIHN0YXJ0UGFnZSA9IDE7XG4gICAgICAgIGVuZFBhZ2UgPSB0b3RhbFBhZ2VzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gdG90YWwgcGFnZXMgbW9yZSB0aGFuIG1heCBzbyBjYWxjdWxhdGUgc3RhcnQgYW5kIGVuZCBwYWdlc1xuICAgICAgICB2YXIgbWF4UGFnZXNCZWZvcmVDdXJyZW50UGFnZSA9IE1hdGguZmxvb3IobWF4UGFnZXMgLyAyKTtcbiAgICAgICAgdmFyIG1heFBhZ2VzQWZ0ZXJDdXJyZW50UGFnZSA9IE1hdGguY2VpbChtYXhQYWdlcyAvIDIpIC0gMTtcbiAgICAgICAgaWYgKGN1cnJlbnRQYWdlIDw9IG1heFBhZ2VzQmVmb3JlQ3VycmVudFBhZ2UpIHtcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgcGFnZSBuZWFyIHRoZSBzdGFydFxuICAgICAgICAgICAgc3RhcnRQYWdlID0gMTtcbiAgICAgICAgICAgIGVuZFBhZ2UgPSBtYXhQYWdlcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXJyZW50UGFnZSArIG1heFBhZ2VzQWZ0ZXJDdXJyZW50UGFnZSA+PSB0b3RhbFBhZ2VzKSB7XG4gICAgICAgICAgICAvLyBjdXJyZW50IHBhZ2UgbmVhciB0aGUgZW5kXG4gICAgICAgICAgICBzdGFydFBhZ2UgPSB0b3RhbFBhZ2VzIC0gbWF4UGFnZXMgKyAxO1xuICAgICAgICAgICAgZW5kUGFnZSA9IHRvdGFsUGFnZXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBjdXJyZW50IHBhZ2Ugc29tZXdoZXJlIGluIHRoZSBtaWRkbGVcbiAgICAgICAgICAgIHN0YXJ0UGFnZSA9IGN1cnJlbnRQYWdlIC0gbWF4UGFnZXNCZWZvcmVDdXJyZW50UGFnZTtcbiAgICAgICAgICAgIGVuZFBhZ2UgPSBjdXJyZW50UGFnZSArIG1heFBhZ2VzQWZ0ZXJDdXJyZW50UGFnZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBjYWxjdWxhdGUgc3RhcnQgYW5kIGVuZCBpdGVtIGluZGV4ZXNcbiAgICB2YXIgc3RhcnRJbmRleCA9IChjdXJyZW50UGFnZSAtIDEpICogcGFnZVNpemU7XG4gICAgdmFyIGVuZEluZGV4ID0gTWF0aC5taW4oc3RhcnRJbmRleCArIHBhZ2VTaXplIC0gMSwgdG90YWxJdGVtcyAtIDEpO1xuICAgIC8vIGNyZWF0ZSBhbiBhcnJheSBvZiBwYWdlcyB0byBuZy1yZXBlYXQgaW4gdGhlIHBhZ2VyIGNvbnRyb2xcbiAgICB2YXIgcGFnZXMgPSBBcnJheS5mcm9tKEFycmF5KChlbmRQYWdlICsgMSkgLSBzdGFydFBhZ2UpLmtleXMoKSkubWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiBzdGFydFBhZ2UgKyBpOyB9KTtcbiAgICAvLyByZXR1cm4gb2JqZWN0IHdpdGggYWxsIHBhZ2VyIHByb3BlcnRpZXMgcmVxdWlyZWQgYnkgdGhlIHZpZXdcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3RhbEl0ZW1zOiB0b3RhbEl0ZW1zLFxuICAgICAgICBjdXJyZW50UGFnZTogY3VycmVudFBhZ2UsXG4gICAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZSxcbiAgICAgICAgdG90YWxQYWdlczogdG90YWxQYWdlcyxcbiAgICAgICAgc3RhcnRQYWdlOiBzdGFydFBhZ2UsXG4gICAgICAgIGVuZFBhZ2U6IGVuZFBhZ2UsXG4gICAgICAgIHN0YXJ0SW5kZXg6IHN0YXJ0SW5kZXgsXG4gICAgICAgIGVuZEluZGV4OiBlbmRJbmRleCxcbiAgICAgICAgcGFnZXM6IHBhZ2VzXG4gICAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gcGFnaW5hdGU7XG4iLCJpbXBvcnQgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQsIHsgY3NzIH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbnR5cGUgT25DbGlja0hhbmRsZXIgPSAoKSA9PiBhbnk7XG5cbi8qKlxuICogQG1lbWJlcm9mIFN0eWxlZEJ1dHRvblxuICovXG50eXBlIFByb3BzID0ge1xuICAvKipcbiAgICogSWYgYnV0dG9uIHNob3VsZCBiZSBwcmVzZW50ZWQgYXMgYSBwcmltYXJ5IGFjdGlvblxuICAgKi9cbiAgcHJpbWFyeTogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEJvZHkgb2YgdGhlIGJ1dHRvblxuICAgKi9cbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIGNsaWNrIGNhbGxiYWNrXG4gICAqL1xuICBvbkNsaWNrPzogT25DbGlja0hhbmRsZXI7XG4gIC8qKlxuICAgKiBBcyB3aGljaCBlbGVtZW50IGl0IHNob3VsZCBiZSByZW5kZXJlZC4gRm9yIGV4YW1wbGU6IGFzOiAnYScgb3IgYXM6ICdidXR0b24nXG4gICAqL1xuICBhcz86IHN0cmluZztcbiAgLyoqXG4gICAqIEhyZWZcbiAgICovXG4gIHRvOiBzdHJpbmc7XG5cbiAgdHlwZT86IHN0cmluZztcbn1cblxuY29uc3Qgc3R5bGVzID0gY3NzYFxuJiYmIHtcbiAgICBmb250LXNpemU6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5mb250cy5tZWRpdW19O1xuICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgYm9yZGVyLWNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnByaW1hcnl9O1xuICAgIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuYmNrfTtcbiAgICBoZWlnaHQ6IDM0cHg7XG4gICAgcGFkZGluZzogICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiBgJHt0aGVtZS5zaXplcy5wYWRkaW5nTWlufSAke3RoZW1lLnNpemVzLnBhZGRpbmd9YH07XG4gICAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMucHJpbWFyeX07XG4gICAgJiBpLCAmIHN2ZyB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICB9XG4gICAgJjpob3ZlciB7XG4gICAgICBib3JkZXItY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMucHJpbWFyeUhvdmVyfTtcbiAgICB9XG5cbiAgICAmLmlzLXdoaXRlIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuYmNrfTtcbiAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5kZWZhdWx0VGV4dH07XG4gICAgfVxuXG4gICAgJi5pcy1wcmltYXJ5IHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMucHJpbWFyeX07XG4gICAgICBjb2xvcjogI2ZmZmZmZjtcbiAgICAgICY6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnByaW1hcnlIb3Zlcn07XG4gICAgICB9XG4gICAgfVxuXG4gICAgJi5pcy10ZXh0IHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMucHJpbWFyeX07XG4gICAgICBib3JkZXI6IHRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgICYuaW4tZHJvcGRvd24ge1xuICAgICAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuZGVmYXVsdFRleHR9O1xuICAgICAgZm9udC1zaXplOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuZm9udHMuYmFzZX07XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIHRleHQtYWxpZ246IHN0YXJ0O1xuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgaGVpZ2h0OiA0MHB4O1xuICAgICAgcGFkZGluZy1sZWZ0OiA0MHB4O1xuICAgICAgYm9yZGVyOiBub25lO1xuXG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgYm9yZGVyOiA0cHggJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5wcmltYXJ5fTtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAzNnB4O1xuICAgICAgICBib3JkZXItc3R5bGU6IG5vbmUgc29saWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5gXG5cbi8qKlxuICogQmFzZSBidXR0b24gY29tcG9uZW50XG4gKlxuICogQGNvbXBvbmVudFxuICogQGV4YW1wbGUgPGNhcHRpb24+UmVndWxhciBidXR0b248L2NhcHRpb24+XG4gKiByZXR1cm4gKFxuICAqICAgPFdyYXBwZXJCb3ggYm9yZGVyPlxuICAqICAgICA8U3R5bGVkQnV0dG9uPkkgYW0gYnV0dG9uPC9TdHlsZWRCdXR0b24+XG4gICogICA8L1dyYXBwZXJCb3g+XG4gICogKVxuICAqXG4gICogQGV4YW1wbGUgPGNhcHRpb24+UHJpbWFyeSBidXR0b248L2NhcHRpb24+XG4gICogcmV0dXJuIChcbiAgKiAgIDxXcmFwcGVyQm94IGJvcmRlcj5cbiAgKiAgICAgPFN0eWxlZEJ1dHRvbiBwcmltYXJ5PkkgYW0gcHJpbWFyeSBidXR0b248L1N0eWxlZEJ1dHRvbj5cbiAgKiAgIDwvV3JhcHBlckJveD5cbiAgKiApXG4gICpcbiAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5XaXRoIGljb248L2NhcHRpb24+XG4gICogcmV0dXJuIChcbiAgKiAgIDxXcmFwcGVyQm94IGJvcmRlcj5cbiAgKiAgICAgPFN0eWxlZEJ1dHRvbj48aSBjbGFzcz1cImZhIGZhLWJvbWJcIiAvPkkgYW0gYnV0dG9uIHdpdGggaWNvbjwvU3R5bGVkQnV0dG9uPlxuICAqICAgPC9XcmFwcGVyQm94PlxuICAqIClcbiAgKi9cbmNvbnN0IFN0eWxlZEJ1dHRvbiA9IHN0eWxlZCgnYnV0dG9uJykuYXR0cnM8UHJvcHM+KCh7IHByaW1hcnkgfSkgPT4gKHtcbiAgY2xhc3NOYW1lOiBgYnV0dG9uJHtwcmltYXJ5ID8gJyBpcy1wcmltYXJ5JyA6ICcnfWAsXG59KSlgXG4gICR7c3R5bGVzfVxuYFxuXG5leHBvcnQge1xuICBTdHlsZWRCdXR0b24gYXMgZGVmYXVsdCxcbiAgc3R5bGVzLFxufVxuIiwiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBzdHlsZXMgfSBmcm9tICcuL3N0eWxlZC1idXR0b24nXG5cbnR5cGUgT25DbGlja0hhbmRsZXIgPSAoKSA9PiBhbnk7XG5cbi8qKlxuICogQG1lbWJlcm9mIFN0eWxlZExpbmtcbiAqL1xudHlwZSBQcm9wcyA9IHtcbiAgLyoqXG4gICAqIElmIGJ1dHRvbiBzaG91bGQgYmUgcHJlc2VudGVkIGFzIGEgcHJpbWFyeSBhY3Rpb25cbiAgICovXG4gIHByaW1hcnk6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBCb2R5IG9mIHRoZSBidXR0b25cbiAgICovXG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBjbGljayBjYWxsYmFja1xuICAgKi9cbiAgb25DbGljaz86IE9uQ2xpY2tIYW5kbGVyO1xuICAvKipcbiAgICogS2luZCBvZiB3aGljaCBlbGVtZW50IGl0IHNob3VsZCBiZSByZW5kZXJlZC4gRm9yIGV4YW1wbGU6IGFzOiAnYScgb3IgYXM6ICdidXR0b24nXG4gICAqL1xuICBhcz86IHN0cmluZztcbiAgLyoqXG4gICAqIEhyZWZcbiAgICovXG4gIHRvOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ29tcG9uZW50IHdyYXBwaW5nIExpbmsgZnJvbSBSZWFjdCBSb3V0ZXIgd2l0aCBzdHlsZWQuIEl0IGxvb2tzIGV4YWN0bHkgbGlrZSB7QGxpbmsgU3R5bGVkQnV0dG9ufVxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvcmVhY3Qtcm91dGVyL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3JlYWN0LXJvdXRlci1kb20vZG9jcy9hcGkvTGluay5tZFxuICogQGNvbXBvbmVudFxuKi9cbmNvbnN0IFN0eWxlZExpbmsgPSBzdHlsZWQoTGluaykuYXR0cnM8UHJvcHM+KCh7IHByaW1hcnkgfSkgPT4gKHtcbiAgY2xhc3NOYW1lOiBgYnV0dG9uJHtwcmltYXJ5ID8gJyBpcy1wcmltYXJ5JyA6ICcnfWAsXG59KSlgXG4gICR7c3R5bGVzfVxuYFxuXG5leHBvcnQgZGVmYXVsdCBTdHlsZWRMaW5rXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgSldQYWdpbmF0ZSBmcm9tICdqdy1wYWdpbmF0ZSdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbmltcG9ydCBTdHlsZWRMaW5rIGZyb20gJy4vc3R5bGVkLWxpbmsnXG5cbmNvbnN0IFBhZ2luYXRpb25XcmFwcGVyID0gc3R5bGVkLmRpdi5hdHRycyh7XG4gIGNsYXNzTmFtZTogJ2xldmVsLWl0ZW0gcGFnaW5hdGlvbi1jb250ZW50Jyxcbn0pYFxuICAmID4gLnBhZ2luYXRpb24ge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuYm9yZGVyfTtcbiAgICBwYWRkaW5nOiA0cHg7XG4gIH1cbmBcbi8qKlxuICogUGFnaW5hdGlvbiBjb21wb25lbnRcbiAqXG4gKiBAY29tcG9uZW50XG4gKiBAZXhhbXBsZVxuICogY29uc3QgbG9jYXRpb24gPSB7IHNlYXJjaDogJyd9XG4gKiByZXR1cm4gKFxuICogICA8V3JhcHBlckJveD5cbiAqICAgICA8UGFnaW5hdGUgdG90YWw9ezEwMH0gcGFnZT17NH0gcGVyUGFnZT17MTB9IGxvY2F0aW9uPXtsb2NhdGlvbn0gLz5cbiAqICAgPC9XcmFwcGVyQm94PlxuICogKVxuICovXG5jbGFzcyBQYWdpbmF0ZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8Um91dGVDb21wb25lbnRQcm9wcyAmIFByb3BzPiB7XG4gIGxpbmtUb1BhZ2UocGFnZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCB7IGxvY2F0aW9uIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3Qgc2VhcmNoID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhsb2NhdGlvbi5zZWFyY2gpXG4gICAgc2VhcmNoLnNldCgncGFnZScsIHBhZ2UudG9TdHJpbmcoKSlcbiAgICByZXR1cm4gc2VhcmNoLnRvU3RyaW5nKClcbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgdG90YWwsIHBhZ2UsIHBlclBhZ2UgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBjdXJyZW50UGFnZSA9IHBhZ2UgfHwgMVxuICAgIGNvbnN0IHBhZ2luYXRlID0gSldQYWdpbmF0ZSh0b3RhbCwgY3VycmVudFBhZ2UsIHBlclBhZ2UpXG5cbiAgICBjb25zdCBpc0ZpcnN0UGFnZSA9IGN1cnJlbnRQYWdlID09PSBwYWdpbmF0ZS5zdGFydFBhZ2VcbiAgICBjb25zdCBpc0xhc3RQYWdlID0gY3VycmVudFBhZ2UgPT09IHBhZ2luYXRlLmVuZFBhZ2VcblxuICAgIGNvbnN0IHByZXZQYWdlID0gaXNGaXJzdFBhZ2UgPyBjdXJyZW50UGFnZSA6IGN1cnJlbnRQYWdlIC0gMVxuICAgIGNvbnN0IG5leHRQYWdlID0gaXNMYXN0UGFnZSA/IGN1cnJlbnRQYWdlIDogY3VycmVudFBhZ2UgKyAxXG5cbiAgICBpZiAocGFnaW5hdGUudG90YWxQYWdlcyA9PT0gMSB8fCB0b3RhbCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxQYWdpbmF0aW9uV3JhcHBlcj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdpbmF0aW9uXCI+XG4gICAgICAgICAgPFN0eWxlZExpbmtcbiAgICAgICAgICAgIHRvPXt7IHNlYXJjaDogdGhpcy5saW5rVG9QYWdlKHByZXZQYWdlKSB9fVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgYnV0dG9uIGlzLXdoaXRlJHtpc0ZpcnN0UGFnZSA/ICcgZGlzYWJsZWQnIDogJyd9YH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJpY29tb29uLXBhZ2luYXRpb24tbGVmdFwiIC8+XG4gICAgICAgICAgPC9TdHlsZWRMaW5rPlxuICAgICAgICAgIHtwYWdpbmF0ZS5wYWdlcy5tYXAocCA9PiAoXG4gICAgICAgICAgICA8U3R5bGVkTGlua1xuICAgICAgICAgICAgICBrZXk9e3B9XG4gICAgICAgICAgICAgIHRvPXt7IHNlYXJjaDogdGhpcy5saW5rVG9QYWdlKHApIH19XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17YHBhZ2VzIGJ1dHRvbiBpcy13aGl0ZSR7cCA9PT0gY3VycmVudFBhZ2UgPyAnIGlzLXByaW1hcnknIDogJyd9YH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3B9XG4gICAgICAgICAgICA8L1N0eWxlZExpbms+XG4gICAgICAgICAgKSl9XG4gICAgICAgICAgPFN0eWxlZExpbmtcbiAgICAgICAgICAgIHRvPXt7IHNlYXJjaDogdGhpcy5saW5rVG9QYWdlKG5leHRQYWdlKSB9fVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgYnV0dG9uIGlzLXdoaXRlJHtpc0xhc3RQYWdlID8gJyBkaXNhYmxlZCcgOiAnJ31gfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImljb21vb24tcGFnaW5hdGlvbi1yaWdodFwiIC8+XG4gICAgICAgICAgPC9TdHlsZWRMaW5rPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvUGFnaW5hdGlvbldyYXBwZXI+XG4gICAgKVxuICB9XG59XG5cbi8qKlxuICogQG1lbWJlcm9mIFBhZ2luYXRlXG4gKi9cbnR5cGUgUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBDdXJyZW50IHBhZ2VcbiAgICovXG4gIHBhZ2U6IG51bWJlcjtcbiAgLyoqXG4gICAqIEl0ZW1zIHBlciBwYWdlXG4gICAqL1xuICBwZXJQYWdlOiBudW1iZXI7XG4gIC8qKlxuICAgKiBUb3RhbCBudW1iZXIgb2YgaXRlbXNcbiAgICovXG4gIHRvdGFsOiBudW1iZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoUGFnaW5hdGUpXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmNvbnN0IFN0eWxlZFBsYWNlaG9sZGVyID0gc3R5bGVkLmRpdmBcbiAgQGtleWZyYW1lcyBwbGFjZUhvbGRlclNoaW1tZXJ7XG4gICAgMCV7XG4gICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IC00NjhweCAwXG4gICAgfVxuICAgIDEwMCV7XG4gICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDQ2OHB4IDBcbiAgICB9XG4gIH1cblxuICBhbmltYXRpb24tZHVyYXRpb246IDFzO1xuICBhbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkcztcbiAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG4gIGFuaW1hdGlvbi1uYW1lOiBwbGFjZUhvbGRlclNoaW1tZXI7XG4gIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGxpbmVhcjtcbiAgYmFja2dyb3VuZDogI2Y2ZjdmODtcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjZWVlZWVlIDglLCAjZGRkZGRkIDE4JSwgI2VlZWVlZSAzMyUpO1xuICBiYWNrZ3JvdW5kLXNpemU6IDEwMDBweCAxMDRweDtcbiAgaGVpZ2h0OiAzMzhweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuYFxuXG4vKipcbiAqIFJlbmRlcnMgcGxhY2Vob2xkZXJcbiAqIEBjb21wb25lbnRcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5JbWFnZSBwbGFjZWhvbGRlcjwvY2FwdGlvbj5cbiAqIHJldHVybiAoXG4gKiAgIDxXcmFwcGVyQm94IGJvcmRlcj5cbiAqICAgICA8UGxhY2Vob2xkZXIgc3R5bGU9e3sgd2lkdGg6IDEwMCwgaGVpZ2h0OiAyMDAgfX0gLz5cbiAqICAgPC9XcmFwcGVyQm94PlxuICogKVxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlRleHQgcGxhY2Vob2xkZXI8L2NhcHRpb24+XG4gKiByZXR1cm4gKFxuICogICA8V3JhcHBlckJveCBib3JkZXI+XG4gKiAgICAgPExhYmVsPlNvbWUgbmFtZTwvTGFiZWw+XG4gKiAgICAgPFBsYWNlaG9sZGVyIHN0eWxlPXt7IHdpZHRoOiA0MDAsIGhlaWdodDogMTQgfX0gLz5cbiAqICAgPC9XcmFwcGVyQm94PlxuICogKVxuICovXG5jb25zdCBQbGFjZWhvbGRlcjogUmVhY3QuRkM8UHJvcHM+ID0gcHJvcHMgPT4gKDxTdHlsZWRQbGFjZWhvbGRlciB7Li4ucHJvcHN9IC8+KVxuXG4vKipcbiAqIEBtZW1iZXJvZiBQbGFjZWhvbGRlclxuICovXG50eXBlIFByb3BzID0ge1xuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBsYWNlaG9sZGVyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5pbXBvcnQgTGFiZWwgZnJvbSAnLi9sYWJlbCdcblxuY29uc3QgUHJvcGVydHkgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tYm90dG9tOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ0xheW91dH07XG5cbiAgJiBpbnB1dCB7XG4gICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICBib3JkZXItY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuYm9yZGVyfTtcbiAgICBib3gtc2hhZG93OiBub25lO1xuICAgICY6Zm9jdXMge1xuICAgICAgYm9yZGVyLWNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnByaW1hcnl9O1xuICAgIH1cbiAgfVxuXG4gICYgLmNvbnRyb2wgPiBpbnB1dFt0eXBlPXRleHRde1xuICAgIGhlaWdodDogNDBweDtcbiAgfVxuYFxuLyoqXG4gKiBXcmFwcyBpbnB1dCB3aXRoIGxhYmVsIGFuZCBvcHRpb25hbCBlcnJvclxuICpcbiAqIEBjb21wb25lbnRcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlN0YW5kYXJkIHByb3BlcnR5PC9jYXB0aW9uPlxuICogY29uc3QgcHJvcGVydHkgPSB7XG4gKiAgIGxhYmVsOiAnTXkgYW1hemluZyBwcm9wZXJ0eScsXG4gKiAgIG5hbWU6ICdteUFtYXppbmdQcm9wZXJ0eScsXG4gKiB9XG4gKiBjb25zdCBlcnJvciA9IHsgbWVzc2FnZTogJ2FuZCB0aGVyZSBpcyBhbiBlcnJvcicgfVxuICogcmV0dXJuIChcbiAqICAgPFdyYXBwZXJCb3g+XG4gKiAgICAgPFByb3BlcnR5SW5FZGl0IHByb3BlcnR5PXtwcm9wZXJ0eX0gZXJyb3I9e2Vycm9yfT5cbiAqICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJpbnB1dFwiIC8+XG4gKiAgICAgPC9Qcm9wZXJ0eUluRWRpdD5cbiAqICAgPC9XcmFwcGVyQm94PlxuICogKVxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggYW4gaWNvbjwvY2FwdGlvbj5cbiAqIGNvbnN0IHByb3BlcnR5ID0ge1xuICogICBsYWJlbDogJ015IGFtYXppbmcgcHJvcGVydHknLFxuICogICBuYW1lOiAnbXlBbWF6aW5nUHJvcGVydHknLFxuICogfVxuICogLy8gSXQgaXMgYmFzZWQgb24gdGhlIGJ1bG1hIGNsYXNzZXNcbiAqIHJldHVybiAoXG4gKiAgIDxXcmFwcGVyQm94PlxuICogICAgIDxQcm9wZXJ0eUluRWRpdCBwcm9wZXJ0eT17cHJvcGVydHl9PlxuICogICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sIGhhcy1pY29ucy1yaWdodFwiPlxuICogICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiaW5wdXRcIiAvPlxuICogICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpY29uIGlzLXNtYWxsIGlzLXJpZ2h0XCI+XG4gKiAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYm9tYlwiIC8+XG4gKiAgICAgICAgIDwvc3Bhbj5cbiAqICAgICAgIDwvZGl2PlxuICogICAgIDwvUHJvcGVydHlJbkVkaXQ+XG4gKiAgIDwvV3JhcHBlckJveD5cbiAqIClcbiAqL1xuY29uc3QgUHJvcGVydHlJbkVkaXQ6IFJlYWN0LkZDPFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IGNoaWxkcmVuLCBwcm9wZXJ0eSwgZXJyb3IgfSA9IHByb3BzXG4gIHJldHVybiAoXG4gICAgPFByb3BlcnR5IGRhdGEtdGVzdGlkPXtgUHJvcGVydHlJbkVkaXQtJHtwcm9wZXJ0eS5uYW1lfWB9PlxuICAgICAgPExhYmVsIGh0bWxGb3I9e3Byb3BlcnR5Lm5hbWV9Pntwcm9wZXJ0eS5sYWJlbH08L0xhYmVsPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvZGl2PlxuICAgICAge2Vycm9yICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWxwIGlzLWRhbmdlclwiPntlcnJvci5tZXNzYWdlfTwvZGl2PlxuICAgICAgKX1cbiAgICA8L1Byb3BlcnR5PlxuICApXG59XG5cbi8qKlxuICogQG1lbWJlcm9mIFByb3BlcnR5SW5FZGl0XG4gKi9cbnR5cGUgUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBXcmFwcGVkIGlucHV0IGVsZW1lbnRcbiAgICovXG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBQcm9wZXJ0eSBvYmplY3QgYmFzZWQgb24ge0BsaW5rIFByb3BlcnR5SlNPTn1cbiAgICovXG4gIHByb3BlcnR5OiB7XG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgbGFiZWxcbiAgICAgKi9cbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFVuaXF1ZSBwcm9wZXJ0eSBuYW1lIC0gaXRzIHBhdGNoLlxuICAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgfTtcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGVycm9yIG1lc3NhZ2VcbiAgICovXG4gIGVycm9yPzoge1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvcGVydHlJbkVkaXRcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmltcG9ydCBMYWJlbCBmcm9tICcuL2xhYmVsJ1xuXG5jb25zdCBQcm9wZXJ0eSA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmdMYXlvdXR9IDA7XG5cbiAgJiBpbnB1dCB7XG4gICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICBib3JkZXItY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuYm9yZGVyT25EYXJrfTtcbiAgICBib3gtc2hhZG93OiBub25lO1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgIGNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmxpZ2h0VGV4dH07XG5cbiAgICAmOmZvY3VzIHtcbiAgICAgIGJvcmRlci1jb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5wcmltYXJ5fTtcbiAgICB9XG4gIH1cbiAgJiAuaWNvbiB7XG4gICAgb3BhY2l0eTogMC4yNTtcbiAgfVxuYFxuXG4vKipcbiAqIFdyYXBzIGlucHV0IHdpdGggbGFiZWwgaW4gRmlsdGVyXG4gKlxuICogQGNvbXBvbmVudFxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHByb3BlcnR5ID0ge1xuICogICBsYWJlbDogJ015IGFtYXppbmcgcHJvcGVydHknLFxuICogICBuYW1lOiAnbXlBbWF6aW5nUHJvcGVydHknLFxuICogfVxuICogcmV0dXJuIChcbiAqICAgPFdyYXBwZXJCb3ggc3R5bGU9e3sgYmFja2dyb3VuZDogJyMzMDNiNjInIH19PlxuICogICAgIDxQcm9wZXJ0eUluRmlsdGVyIHByb3BlcnR5PXtwcm9wZXJ0eX0+XG4gKiAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiaW5wdXRcIiAvPlxuICogICAgIDwvUHJvcGVydHlJbkZpbHRlcj5cbiAqICAgPC9XcmFwcGVyQm94PlxuICogKVxuICovXG5jb25zdCBQcm9wZXJ0eUluRmlsdGVyOiBSZWFjdC5GQzxQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBwcm9wZXJ0eSwgY2hpbGRyZW4gfSA9IHByb3BzXG4gIHJldHVybiAoXG4gICAgPFByb3BlcnR5IGRhdGEtdGVzdGlkPXtgUHJvcGVydHlJbkZpbHRlci0ke3Byb3BlcnR5Lm5hbWV9YH0+XG4gICAgICA8TGFiZWw+e3Byb3BlcnR5LmxhYmVsfTwvTGFiZWw+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9Qcm9wZXJ0eT5cbiAgKVxufVxuXG4vKipcbiAqIEBtZW1iZXJvZiBQcm9wZXJ0eUluRmlsdGVyXG4gKi9cbnR5cGUgUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBXcmFwcGVkIGlucHV0IGVsZW1lbnRcbiAgICovXG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBTdWJzZXQgb2YgcHJvcGVydHkgb2JqZWN0IGJhc2VkIG9uIHtAbGluayBQcm9wZXJ0eUpTT059IGNvbnRhaW5pbmcganVzdCBsYWJlbCBhbmQgbmFtZVxuICAgKi9cbiAgcHJvcGVydHk6IHtcbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBsYWJlbFxuICAgICAqL1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVW5pcXVlIHByb3BlcnR5IG5hbWUgLSBpdHMgcGF0Y2guXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuICB9O1xufVxuXG5leHBvcnQgeyBMYWJlbCwgUHJvcGVydHkgfVxuXG5leHBvcnQgZGVmYXVsdCBQcm9wZXJ0eUluRmlsdGVyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5pbXBvcnQgTGFiZWwgZnJvbSAnLi9sYWJlbCdcblxuY29uc3QgUHJvcGVydHkgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tYm90dG9tOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ0xheW91dH07XG5gXG5cbi8qKlxuICogV3JhcHMgaW5wdXQgd2l0aCBsYWJlbCBpbiBTaG93XG4gKlxuICogQGNvbXBvbmVudFxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHByb3BlcnR5ID0ge1xuICAqICAgbGFiZWw6ICdNeSBhbWF6aW5nIHByb3BlcnR5JyxcbiAgKiAgIG5hbWU6ICdteUFtYXppbmdQcm9wZXJ0eScsXG4gICogfVxuICAqIHJldHVybiAoXG4gICogICA8V3JhcHBlckJveCBib3JkZXI+XG4gICogICAgIDxQcm9wZXJ0eUluU2hvdyBwcm9wZXJ0eT17cHJvcGVydHl9PlxuICAqICAgICAgIEFuZCBoZXJlIGdvZXMgYSBwcm9wZXJ0eSB2YWx1ZS5cbiAgKiAgICAgPC9Qcm9wZXJ0eUluU2hvdz5cbiAgKiAgIDwvV3JhcHBlckJveD5cbiAgKiApXG4gKi9cbmNvbnN0IFByb3BlcnR5SW5TaG93OiBSZWFjdC5GQzxQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBwcm9wZXJ0eSwgY2hpbGRyZW4gfSA9IHByb3BzXG4gIHJldHVybiAoXG4gICAgPFByb3BlcnR5IGRhdGEtdGVzdGlkPXtgUHJvcGVydHlJblNob3ctJHtwcm9wZXJ0eS5uYW1lfWB9PlxuICAgICAgPExhYmVsPntwcm9wZXJ0eS5sYWJlbH08L0xhYmVsPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvUHJvcGVydHk+XG4gIClcbn1cblxuLyoqXG4gKiBAbWVtYmVyb2YgUHJvcGVydHlJblNob3dcbiAqL1xudHlwZSBQcm9wcyA9IHtcbiAgLyoqXG4gICAqIFdyYXBwZWQgaW5wdXQgZWxlbWVudFxuICAgKi9cbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIFN1YnNldCBvZiBwcm9wZXJ0eSBvYmplY3QgYmFzZWQgb24ge0BsaW5rIFByb3BlcnR5SlNPTn0gY29udGFpbmluZyBqdXN0IGxhYmVsIGFuZCBuYW1lXG4gICAqL1xuICBwcm9wZXJ0eToge1xuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGxhYmVsXG4gICAgICovXG4gICAgbGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBVbmlxdWUgcHJvcGVydHkgbmFtZSAtIGl0cyBwYXRjaC5cbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gIH07XG59XG5cblByb3BlcnR5SW5TaG93LmRlZmF1bHRQcm9wcyA9IHtcbiAgY2hpbGRyZW46IG51bGwsXG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3BlcnR5SW5TaG93XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG4vKipcbiAqIE1hcmtzIGdyb3VwIG9mIGZpZWxkcyBhcyBhIHNlY3Rpb25cbiAqXG4gKiBAY29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHByb3BlcnR5ID0ge1xuICogICBsYWJlbDogJ015IGFtYXppbmcgcHJvcGVydHknLFxuICogICBuYW1lOiAnbXlBbWF6aW5nUHJvcGVydHknLFxuICogfVxuICogcmV0dXJuIChcbiAqIDxTdHlsZWRTZWN0aW9uPlxuICogIDxQcm9wZXJ0eUluRWRpdCBwcm9wZXJ0eT17cHJvcGVydHl9PlxuICogICAgPGlucHV0IGNsYXNzTmFtZT1cImlucHV0XCIgLz5cbiAqICA8L1Byb3BlcnR5SW5FZGl0PlxuICogIDxwPlxuICogICAgPFN0eWxlZEJ1dHRvbj5cbiAqICAgICAgQWRkIG5ldyBpdGVtIGluIHNlY3Rpb25cbiAqICAgIDwvU3R5bGVkQnV0dG9uPlxuICogIDwvcD5cbiAqIDwvU3R5bGVkU2VjdGlvbj5cbiAqIClcbiAqL1xuY29uc3QgU3R5bGVkU2VjdGlvbiA9IHN0eWxlZC5zZWN0aW9uYFxuICBib3JkZXItbGVmdDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmdNaW59IHNvbGlkICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMubGlnaHRCY2t9O1xuICBwYWRkaW5nLWxlZnQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nfTtcbmBcblxuZXhwb3J0IGRlZmF1bHQgU3R5bGVkU2VjdGlvblxuIiwiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcblxuLyoqXG4gKiBTaW1wbGUgY29tcG9uZW50IGZvciBzdHlsaW5nIHRhYmxlc1xuICpcbiAqIEBjb21wb25lbnRcbiAqIEBleGFtcGxlXG4gKiByZXR1cm4gKFxuICogPFdyYXBwZXJCb3ggYm9yZGVyPlxuICogICA8aDE+VGFibGUgSW5mb3JtYXRpb248L2gxPlxuICogICA8VGFibGU+XG4gKiAgICAgPHRoZWFkPlxuICogICAgICAgPHRyPlxuICogICAgICAgICA8dGg+PExhYmVsPkxhYmVsMTwvTGFiZWw+PC90aD5cbiAqICAgICAgICAgPHRoPjxMYWJlbD5MYWJlbDI8L0xhYmVsPjwvdGg+XG4gKiAgICAgICA8L3RyPlxuICogICAgIDwvdGhlYWQ+XG4gKiAgICAgPHRib2R5PlxuICogICAgICAgPHRyPlxuICogICAgICAgICA8dGQ+VmFsdWUxPC90ZD5cbiAqICAgICAgICAgPHRkPlZhbHVlMTI8L3RkPlxuICogICAgICAgPC90cj5cbiAqICAgICAgIDx0cj5cbiAqICAgICAgICAgPHRkPlZhbHVlMTwvdGQ+XG4gKiAgICAgICAgIDx0ZD5WYWx1ZTEyPC90ZD5cbiAqICAgICAgIDwvdHI+XG4gKiAgICAgPC90Ym9keT5cbiAqICAgPC9UYWJsZT5cbiAqIDwvV3JhcHBlckJveD5cbiAqIClcbiAqL1xuY29uc3QgVGFibGUgPSBzdHlsZWQudGFibGUuYXR0cnMoe1xuICBjbGFzc05hbWU6ICd0YWJsZSBpcy1mdWxsd2lkdGgnLFxufSlgXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuXG4gICYgPiB0aGVhZCA+IHRyID4gdGgge1xuICAgIGJvcmRlcjogbm9uZTtcbiAgfVxuXG4gICYgdHIuaXMtc2VsZWN0ZWQge1xuICAgIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMucHJpbWFyeX07XG4gIH1cblxuICAmIHRyOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnN1cGVyTGlnaHRCYWNrfTtcbiAgfVxuXG4gIHRkIHtcbiAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5kZWZhdWx0VGV4dH07XG4gICAgcGFkZGluZzogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9O1xuICAgIGJvcmRlci1jb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5ib3JkZXJ9O1xuICB9XG5gXG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5cbmltcG9ydCBXcmFwcGVyQm94IGZyb20gJy4vd3JhcHBlci1ib3gnXG5pbXBvcnQgTGFiZWwgZnJvbSAnLi9sYWJlbCdcblxuY29uc3QgT3ZlcmxheUxpbmsgPSBzdHlsZWQoTGluaylgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBibG9jaztcbiAgdHJhbnNpdGlvbjogYm9yZGVyLXdpZHRoIDAuMnM7XG4gICY6aG92ZXIge1xuICAgIHRyYW5zaXRpb246IGJvcmRlci13aWR0aCAwLjJzO1xuICAgIGJvcmRlci1ib3R0b206IDVweCBzb2xpZCAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnByaW1hcnl9O1xuICB9XG5gXG5cbmNvbnN0IExldmVsID0gc3R5bGVkLmRpdi5hdHRycyh7XG4gIGNsYXNzTmFtZTogJ2xldmVsJyxcbn0pYFxuICBjb2xvcjogJHsocHJvcHMpOiBzdHJpbmcgPT4gcHJvcHMuY29sb3IgfHwgcHJvcHMudGhlbWUuY29sb3JzLnByaW1hcnl9O1xuICBtYXJnaW4tdG9wOiA4cHg7XG5cbiAgJiAudmFsdWUge1xuICAgIGZvbnQtc2l6ZTogMzRweDtcbiAgfVxuXG4gICYgLmljb24ge1xuICAgIGZvbnQtc2l6ZTogMzRweDtcbiAgfVxuYFxuXG4vKipcbiAqIFNpbXBsZSBXaWRnZXQsIHdoaWNoIGNhbiBiZSB1c2VkIGluIHRoZSBkYXNoYm9hcmRcbiAqXG4gKiBAbmFtZSBWYWx1ZUJsb2NrXG4gKiBAY29tcG9uZW50XG4gKiBAZXhhbXBsZVxuICogcmV0dXJuIChcbiAqICAgPFdyYXBwZXJCb3g+PENvbHVtbnM+XG4gKiAgICAgPENvbHVtbj48VmFsdWVCbG9jayAgaWNvbj1cImZhIGZhLWJvbWJcIiB2YWx1ZT1cIjVcIj5cbiAqICAgICAgIFV0aWxzXG4gKiAgICAgPC9WYWx1ZUJsb2NrPjwvQ29sdW1uPlxuICogICAgIDxDb2x1bW4+PFZhbHVlQmxvY2sgIGljb249XCJmYSBmYS1zdGFyXCIgdmFsdWU9XCIxMlwiIGhyZWY9XCIvYXBpL3Jlc291cmNlTmFtZVwiPlxuICogICAgICAgQXJlXG4gKiAgICAgPC9WYWx1ZUJsb2NrPjwvQ29sdW1uPlxuICogICAgIDxDb2x1bW4+PFZhbHVlQmxvY2sgIGljb249XCJmYSBmYS1jb2dcIiB2YWx1ZT1cIjVcIiBjb2xvcj1cInJlZFwiPlxuICogICAgICAgQXdlc29tZVxuICogICAgIDwvVmFsdWVCbG9jaz48L0NvbHVtbj5cbiAqICAgPC9Db2x1bW5zPjwvV3JhcHBlckJveD5cbiAqIClcbiAqL1xuY29uc3QgVmFsdWVCbG9jazogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgaWNvbiwgdmFsdWUsIGNoaWxkcmVuLCBjb2xvciwgaHJlZiwgbGFiZWwgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8V3JhcHBlckJveCBib3JkZXIgc3R5bGU9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScgfX0+XG4gICAgICB7aHJlZiA/IDxPdmVybGF5TGluayB0bz17aHJlZn0gLz4gOiAnJ31cbiAgICAgIHsgbGFiZWwgPyA8TGFiZWw+e2xhYmVsfTwvTGFiZWw+IDogJycgfVxuICAgICAgPExldmVsIGNvbG9yPXtjb2xvcn0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmFsdWVcIj5cbiAgICAgICAgICB7dmFsdWV9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImljb25cIj5cbiAgICAgICAgICA8aSBjbGFzc05hbWU9e2ljb259IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9MZXZlbD5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1dyYXBwZXJCb3g+XG4gIClcbn1cblxuLyoqXG4gKiBAbWVtYmVyb2YgVmFsdWVCbG9ja1xuICovXG50eXBlIFByb3BzID0ge1xuICAvKipcbiAgICogSWNvbiBjbGFzczogaS5lIFwiZmEgZmEtYm9tYlwiXG4gICAqL1xuICBpY29uPzogc3RyaW5nO1xuICAvKipcbiAgICogVmFsdWUgc3RyaW5nIHdoaWNoXG4gICAqL1xuICB2YWx1ZT86IHN0cmluZyB8IG51bWJlcjtcbiAgLyoqXG4gICAqIENvbnRlbnQgaW5zaWRlIGEgYmxvY2tcbiAgICovXG4gIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xuICAvKipcbiAgICogT3B0aW9uYWwgY29sb3JcbiAgICovXG4gIGNvbG9yPzogc3RyaW5nO1xuICAvKipcbiAgICogTGluayB1cmwgaWYgdGhlIGJsb2NrIHNob3VsZCBiZSBjbGlja2FibGVcbiAgICovXG4gIGhyZWY/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBMYWJlbCBvZiB0aGUgYmxvY2tcbiAgICovXG4gIGxhYmVsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBWYWx1ZUJsb2NrXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5jb25zdCBTdHlsZWRJbnB1dCA9IHN0eWxlZC5pbnB1dC5hdHRycyhwcm9wcyA9PiAoe1xuICBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZSB8fCAnaW5wdXQnLFxufSkpYFxuICBiYWNrZ3JvdW5kOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmlucHV0QmNrfTtcbiAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuZGVmYXVsdFRleHR9O1xuICBoZWlnaHQ6IGF1dG87XG4gIGJvcmRlci1yYWRpdXM6IDBweDtcbiAgYm9yZGVyLWNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmJvcmRlcn07XG4gIGJveC1zaGFkb3c6IG5vbmU7XG4gICY6aG92ZXJ7XG4gICAgYm9yZGVyLWNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmJvcmRlckhvdmVyfTtcbiAgfVxuYFxuXG5leHBvcnQgZGVmYXVsdCBTdHlsZWRJbnB1dFxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFdyYXBwZXJCb3ggZnJvbSAnLi93cmFwcGVyLWJveCdcblxudHlwZSBQcm9wcyA9IHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbn1cblxuLyoqXG4gKiBAbWVtYmVyb2YgRXJyb3JNZXNzYWdlQm94XG4gKiBAYWxpYXMgRXJyb3JNZXNzYWdlQm94UHJvcHNcbiAqL1xuZXhwb3J0IHR5cGUgRXJyb3JNZXNzYWdlQm94UHJvcHMgPSB7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG4gIHRlc3RJZD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAY2xhc3NcbiAqIFByaW50cyBlcnJvciBtZXNzYWdlXG4gKlxuICogQGNvbXBvbmVudFxuICogQGV4YW1wbGVcbiAqIHJldHVybiAoXG4gKiA8RXJyb3JNZXNzYWdlQm94IHRpdGxlPXsnU29tZSBlcnJvcid9PlxuICogICA8cD5UZXh0IGJlbG93IHRoZSB0aXRsZTwvcD5cbiAqIDwvRXJyb3JNZXNzYWdlQm94PlxuICogKVxuICovXG5jb25zdCBFcnJvck1lc3NhZ2VCb3g6IFJlYWN0LkZDPEVycm9yTWVzc2FnZUJveFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IGNoaWxkcmVuLCB0aXRsZSwgdGVzdElkIH0gPSBwcm9wc1xuICByZXR1cm4gKFxuICAgIDxXcmFwcGVyQm94PlxuICAgICAgPFdyYXBwZXJCb3ggYm9yZGVyIGRhdGEtdGVzdGlkPXt0ZXN0SWR9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnQgaGFzLXRleHQtY2VudGVyZWRcIj5cbiAgICAgICAgICA8aDM+e3RpdGxlfTwvaDM+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1dyYXBwZXJCb3g+XG4gICAgPC9XcmFwcGVyQm94PlxuICApXG59XG5cbmNvbnN0IE5vUmVzb3VyY2VFcnJvcjogUmVhY3QuRkM8e3Jlc291cmNlSWQ6IHN0cmluZ30+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcmVzb3VyY2VJZCB9ID0gcHJvcHNcbiAgcmV0dXJuIChcbiAgICA8RXJyb3JNZXNzYWdlQm94IHRpdGxlPVwiNDA0IC0gUEFHRSBOT1QgRk9VTkRcIiB0ZXN0SWQ9XCJOb1Jlc291cmNlRXJyb3JcIj5cbiAgICAgIFJlc291cmNlIG9mIGdpdmVuIGlkOlxuICAgICAgPGI+e2AgJHtyZXNvdXJjZUlkfSBgfTwvYj5cbiAgICAgIGNhbm5vdCBiZSBmb3VuZC5cbiAgICA8L0Vycm9yTWVzc2FnZUJveD5cbiAgKVxufVxuXG5jb25zdCBOb0FjdGlvbkVycm9yOiBSZWFjdC5GQzx7cmVzb3VyY2VJZDogc3RyaW5nOyBhY3Rpb25OYW1lOiBzdHJpbmd9PiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHJlc291cmNlSWQsIGFjdGlvbk5hbWUgfSA9IHByb3BzXG4gIHJldHVybiAoXG4gICAgPEVycm9yTWVzc2FnZUJveCB0aXRsZT1cIjQwNCAtIFBBR0UgTk9UIEZPVU5EXCIgdGVzdElkPVwiTm9BY3Rpb25FcnJvclwiPlxuICAgICAgICBSZXNvdXJjZTpcbiAgICAgIDxiPntgICR7cmVzb3VyY2VJZH0gYH08L2I+XG4gICAgICAgIGRvZXMgbm90IGhhdmUgYW4gYWN0aW9uIHdpdGggbmFtZTpcbiAgICAgIDxiPntgICR7YWN0aW9uTmFtZX0gYH08L2I+XG4gICAgPC9FcnJvck1lc3NhZ2VCb3g+XG4gIClcbn1cblxuY29uc3QgTm9SZWNvcmRFcnJvcjogUmVhY3QuRkM8e1xuICByZXNvdXJjZUlkOiBzdHJpbmc7XG4gIHJlY29yZElkOiBzdHJpbmc7XG59PiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHJlc291cmNlSWQsIHJlY29yZElkIH0gPSBwcm9wc1xuICByZXR1cm4gKFxuICAgIDxFcnJvck1lc3NhZ2VCb3ggdGl0bGU9XCI0MDQgLSBQQUdFIE5PVCBGT1VORFwiIHRlc3RJZD1cIk5vUmVjb3JkRXJyb3JcIj5cbiAgICAgICAgUmVzb3VyY2U6XG4gICAgICA8Yj57YCAke3Jlc291cmNlSWR9IGB9PC9iPlxuICAgICAgICBkb2VzIG5vdCBoYXZlIGEgcmVjb3JkIHdpdGggaWQ6XG4gICAgICA8Yj57YCAke3JlY29yZElkfSBgfTwvYj5cbiAgICA8L0Vycm9yTWVzc2FnZUJveD5cbiAgKVxufVxuXG5leHBvcnQge1xuICBOb1Jlc291cmNlRXJyb3IsXG4gIE5vQWN0aW9uRXJyb3IsXG4gIE5vUmVjb3JkRXJyb3IsXG4gIEVycm9yTWVzc2FnZUJveCBhcyBkZWZhdWx0LFxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcblxuaW1wb3J0IHsgQ29sdW1uLCBDb2x1bW5zIH0gZnJvbSAnLi4vdWknXG5cbmNvbnN0IERhc2hib2FyZFdyYXBwZXIgPSBzdHlsZWQuc2VjdGlvbmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1ncm93OiAxO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgcGFkZGluZzogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9O1xuYFxuXG5jb25zdCBJbmZvQm94ID0gc3R5bGVkLnNlY3Rpb24uYXR0cnMoe1xuICBjbGFzc05hbWU6ICdjb250ZW50Jyxcbn0pYFxuICB3aWR0aDogNTQwcHg7XG5gXG5cbmNvbnN0IFNvZnR3YXJlQnJvdGhlcnMgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxMHB4IDA7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmxvdmV9O1xuXG4gIGltZyB7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgcGFkZGluZzogMTBweCAxNXB4IDEwcHggMDtcbiAgICB3aWR0aDogMTQwcHg7XG4gIH1cblxuICBhIHtcbiAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5sb3ZlfTtcbiAgfVxuYFxuXG5jb25zdCBEYXNoYm9hcmQ6IFJlYWN0LkZDID0gKCkgPT4gKFxuICA8RGFzaGJvYXJkV3JhcHBlcj5cbiAgICA8SW5mb0JveD5cbiAgICAgIDxoMT5XZWxjb21lIG9uIGJvYXJkITwvaDE+XG4gICAgICA8cD5cbiAgICAgICAgVGhhbmsgeW91IGZvciB0cnlpbmcgb3V0XG4gICAgICAgIDxiPiBBZG1pbkJyby48L2I+XG4gICAgICA8L3A+XG4gICAgICA8cD5OZXh0LCB5b3UgbWlnaHQgd2FudCB0byBjaGVjayBvdXQgdGhlIGZvbGxvd2luZyB0dXRvcmlhbHM6PC9wPlxuICAgICAgPENvbHVtbnM+XG4gICAgICAgIDxDb2x1bW4gd2lkdGg9ezZ9PlxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIDxsaT48YSBocmVmPVwiaHR0cHM6Ly9zb2Z0d2FyZWJyb3RoZXJzLmdpdGh1Yi5pby9hZG1pbi1icm8tZGV2L3R1dG9yaWFsLTAzLXBhc3NpbmctcmVzb3VyY2VzLmh0bWxcIj5BZGRpbmcgUmVzb3VyY2VzPC9hPjwvbGk+XG4gICAgICAgICAgICA8bGk+PGEgaHJlZj1cImh0dHBzOi8vc29mdHdhcmVicm90aGVycy5naXRodWIuaW8vYWRtaW4tYnJvLWRldi90dXRvcmlhbC0wNC1jdXN0b21pemluZy1yZXNvdXJjZXMuaHRtbFwiPkN1c3RvbWl6aW5nIHJlc291cmNlczwvYT48L2xpPlxuICAgICAgICAgICAgPGxpPjxhIGhyZWY9XCJodHRwczovL3NvZnR3YXJlYnJvdGhlcnMuZ2l0aHViLmlvL2FkbWluLWJyby1kZXYvdHV0b3JpYWwtMDUtYWN0aW9ucy5odG1sXCI+Q3VzdG9taXppbmcgQWN0aW9uczwvYT48L2xpPlxuICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvQ29sdW1uPlxuICAgICAgICA8Q29sdW1uIHdpZHRoPXs2fT5cbiAgICAgICAgICA8dWw+XG4gICAgICAgICAgICA8bGk+PGEgaHJlZj1cImh0dHBzOi8vc29mdHdhcmVicm90aGVycy5naXRodWIuaW8vYWRtaW4tYnJvLWRldi90dXRvcmlhbC0wNi13cml0aW5nLXJlYWN0LWNvbXBvbmVudHMuaHRtbFwiPldyaXRpbmcgeW91ciBvd24gY29tcG9uZW50czwvYT48L2xpPlxuICAgICAgICAgICAgPGxpPjxhIGhyZWY9XCJodHRwczovL3NvZnR3YXJlYnJvdGhlcnMuZ2l0aHViLmlvL2FkbWluLWJyby1kZXYvdHV0b3JpYWwtMDctY3VzdG9tLWRhc2hib2FyZC5odG1sXCI+Q3VzdG9taXppbmcgRGFzaGJvYXJkPC9hPjwvbGk+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9Db2x1bW4+XG4gICAgICA8L0NvbHVtbnM+XG4gICAgICA8cD5cbiAgICAgICAgSW4gY2FzZSB5b3UgZm91bmQgYW55IGVycm9ycyxcbiAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9Tb2Z0d2FyZUJyb3RoZXJzL2FkbWluLWJyby9pc3N1ZXNcIj4gcmFpc2UgYW4gaXNzdWUgPC9hPlxuICAgICAgICBvbiBvdXIgR2l0SHViIGFjY291bnQuXG4gICAgICA8L3A+XG4gICAgICA8cD5cbiAgICAgICAgRm9yIHRoZSBsYXRlc3QgaW5mb3JtYXRpb24gYWJvdXQgQWRtaW5Ccm8gYW5kIG1vcmUgLVxuICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9zb2Z0d2FyZWJyb3RoZXJzLmNvL2Jsb2cvXCI+IGNoZWNrIG91dCBvdXIgYmxvZy48L2E+XG4gICAgICA8L3A+XG4gICAgICA8U29mdHdhcmVCcm90aGVycz5cbiAgICAgICAgPGltZyBzcmM9XCJodHRwczovL3NvZnR3YXJlYnJvdGhlcnMuY28vYXNzZXRzL2ltYWdlcy9zb2Z0d2FyZS1icm90aGVycy1sb2dvLWZ1bGwuc3ZnXCIgYWx0PVwiU29mdHdhcmVCcm90aGVyc1wiIC8+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFdhbnQgdG8gYWRkIGFkdmFuY2VkIGZpZWxkcyBsaWtlIEdvb2dsZSBNYXBzLFxuICAgICAgICAgIGVucmljaCBpbnRlcmZhY2Ugd2l0aCBjdXN0b20gZ3JhcGhzIG9yIHNpbXBseSBsb29rIGZvciBwcm9mZXNzaW9uYWwgaGVscD8gWW91IGNhbiBhbHdheXNcbiAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9zb2Z0d2FyZWJyb3RoZXJzLmNvL3NlcnZpY2VzXCI+IHdvcmsgd2l0aCB1cyE8L2E+XG4gICAgICAgIDwvcD5cbiAgICAgIDwvU29mdHdhcmVCcm90aGVycz5cbiAgICA8L0luZm9Cb3g+XG4gIDwvRGFzaGJvYXJkV3JhcHBlcj5cbilcblxuZXhwb3J0IGRlZmF1bHQgRGFzaGJvYXJkXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5cbnR5cGUgU3RhdGUgPSB7XG4gIGVycm9yOiBhbnk7XG59XG5cbmNsYXNzIEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55LCBTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlcnJvcjogbnVsbCxcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRDYXRjaChlcnJvcik6IHZvaWQge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvciB9KVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3QgeyBlcnJvciB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5vdGlmaWNhdGlvbiBpcy1kYW5nZXJcIj5cbiAgICAgICAgICA8cD57ZXJyb3IudG9TdHJpbmcoKX08L3A+XG4gICAgICAgICAgPHA+U2VlIGRldmVsb3BtZW50IGNvbnNvbGUgZm9yIG1vcmUgZGV0YWlscy4uLjwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuIHx8IG51bGxcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFcnJvckJvdW5kYXJ5XG4iLCJleHBvcnQgY29uc3QgRE9DUyA9ICdodHRwczovL3NvZnR3YXJlYnJvdGhlcnMuZ2l0aHViLmlvL2FkbWluLWJyby1kZXYnXG5leHBvcnQgY29uc3QgREVGQVVMVF9QQVRIUyA9IHtcbiAgcm9vdFBhdGg6ICcvYWRtaW4nLFxuICBsb2dvdXRQYXRoOiAnL2FkbWluL2xvZ291dCcsXG4gIGxvZ2luUGF0aDogJy9hZG1pbi9sb2dpbicsXG59XG5cbi8qIGNzcGVsbDogZGlzYWJsZS1uZXh0LWxpbmUgKi9cbmV4cG9ydCBjb25zdCBBRE1JTl9CUk9fVE1QX0RJUiA9ICcuYWRtaW5icm8nXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGUgKi9cbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCdcbmltcG9ydCBSZXNvdXJjZUpTT04gZnJvbSAnLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Jlc291cmNlLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgQnJhbmRpbmdPcHRpb25zLCBWZXJzaW9uUHJvcHMsIEFkbWluUGFnZSB9IGZyb20gJy4uLy4uL2FkbWluLWJyby1vcHRpb25zLmludGVyZmFjZSdcbmltcG9ydCB7IEN1cnJlbnRBZG1pbiB9IGZyb20gJy4uLy4uL2N1cnJlbnQtYWRtaW4uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgREVGQVVMVF9QQVRIUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cydcbmltcG9ydCB7IE5vdGljZU1lc3NhZ2UgfSBmcm9tICcuL3dpdGgtbm90aWNlJ1xuaW1wb3J0IFBhZ2VKU09OIGZyb20gJy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9wYWdlLWpzb24uaW50ZXJmYWNlJ1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZVBhZ2VzID0gKGRhdGE6IEFycmF5PEFkbWluUGFnZT4pOiB7XG4gIHR5cGU6IHN0cmluZzsgZGF0YTogQXJyYXk8QWRtaW5QYWdlPjtcbn0gPT4gKHtcbiAgdHlwZTogJ1BBR0VTX0lOSVRJQUxJWkUnLFxuICBkYXRhLFxufSlcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVSZXNvdXJjZXMgPSAoZGF0YTogQXJyYXk8UmVzb3VyY2VKU09OPik6IHtcbiAgdHlwZTogc3RyaW5nOyBkYXRhOiBBcnJheTxSZXNvdXJjZUpTT04+O1xufSA9PiAoe1xuICB0eXBlOiAnUkVTT1VSQ0VTX0lOSVRJQUxJWkUnLFxuICBkYXRhLFxufSlcblxuZXhwb3J0IHR5cGUgRGFzaGJvYXJkSW5TdGF0ZSA9IHtcbiAgY29tcG9uZW50Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZURhc2hib2FyZCA9IChkYXRhOiBEYXNoYm9hcmRJblN0YXRlKToge1xuICB0eXBlOiBzdHJpbmc7XG4gIGRhdGE6IERhc2hib2FyZEluU3RhdGU7XG59ID0+ICh7XG4gIHR5cGU6ICdEQVNIQk9BUkRfSU5JVElBTElaRScsXG4gIGRhdGEsXG59KVxuXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUJyYW5kaW5nID0gKGRhdGE6IEJyYW5kaW5nT3B0aW9ucyk6IHtcbiAgdHlwZTogc3RyaW5nO1xuICBkYXRhOiBCcmFuZGluZ09wdGlvbnM7XG59ID0+ICh7XG4gIHR5cGU6ICdCUkFORElOR19JTklUSUFMSVpFJyxcbiAgZGF0YSxcbn0pXG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplUGF0aHMgPSAoZGF0YTogUGF0aHMpOiB7XG4gIHR5cGU6IHN0cmluZztcbiAgZGF0YTogUGF0aHM7XG59ID0+ICh7XG4gIHR5cGU6ICdQQVRIU19JTklUSUFMSVpFJyxcbiAgZGF0YSxcbn0pXG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplVmVyc2lvbnMgPSAoZGF0YTogVmVyc2lvblByb3BzKToge1xuICB0eXBlOiBzdHJpbmc7XG4gIGRhdGE6IFZlcnNpb25Qcm9wcztcbn0gPT4gKHtcbiAgdHlwZTogJ1ZFUlNJT05TX0lOSVRJQUxJWkUnLFxuICBkYXRhLFxufSlcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVTZXNzaW9uID0gKGRhdGEgPSB7fSkgPT4gKHtcbiAgdHlwZTogJ1NFU1NJT05fSU5JVElBTElaRScsXG4gIGRhdGEsXG59KVxuXG5leHBvcnQgdHlwZSBOb3RpY2VNZXNzYWdlSW5TdGF0ZSA9IE5vdGljZU1lc3NhZ2UgJiB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgaWQ6IHN0cmluZztcbiAgdHlwZTogTm90aWNlTWVzc2FnZVsndHlwZSddO1xuICBwcm9ncmVzczogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBQYXRocyA9IHtcbiAgcm9vdFBhdGg6IHN0cmluZztcbiAgbG9nb3V0UGF0aDogc3RyaW5nO1xuICBsb2dpblBhdGg6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IGFkZE5vdGljZSA9IChkYXRhOiBOb3RpY2VNZXNzYWdlID0geyBtZXNzYWdlOiAnJyB9KToge1xuICB0eXBlOiBzdHJpbmc7XG4gIGRhdGE6IE5vdGljZU1lc3NhZ2VJblN0YXRlO1xufSA9PiAoe1xuICB0eXBlOiAnQUREX05PVElDRScsXG4gIGRhdGE6IHtcbiAgICBtZXNzYWdlOiBkYXRhLm1lc3NhZ2UsXG4gICAgaWQ6IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KSxcbiAgICB0eXBlOiBkYXRhLnR5cGUgfHwgJ3N1Y2Nlc3MnLFxuICAgIHByb2dyZXNzOiAwLFxuICB9LFxufSlcblxuZXhwb3J0IGNvbnN0IHNldE5vdGljZVByb2dyZXNzID0gKHsgbm90aWNlSWQsIHByb2dyZXNzIH06IHtcbiAgbm90aWNlSWQ6IHN0cmluZztcbiAgcHJvZ3Jlc3M6IG51bWJlcjtcbn0pID0+ICh7XG4gIHR5cGU6ICdTRVRfTk9USUNFX1BST0dSRVNTJyxcbiAgZGF0YTogeyBub3RpY2VJZCwgcHJvZ3Jlc3MgfSxcbn0pXG5cbmV4cG9ydCBjb25zdCBkcm9wTm90aWNlID0gKG5vdGljZUlkOiBzdHJpbmcpID0+ICh7XG4gIHR5cGU6ICdEUk9QX05PVElDRScsXG4gIGRhdGE6IHsgbm90aWNlSWQgfSxcbn0pXG5cbmNvbnN0IHJlc291cmNlc1JlZHVjZXIgPSAoXG4gIHN0YXRlOiBBcnJheTxSZXNvdXJjZUpTT04+ID0gW10sXG4gIGFjdGlvbjoge1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBkYXRhOiBBcnJheTxSZXNvdXJjZUpTT04+O1xuICB9LFxuKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgY2FzZSAnUkVTT1VSQ0VTX0lOSVRJQUxJWkUnOlxuICAgIHJldHVybiBhY3Rpb24uZGF0YVxuICBkZWZhdWx0OiByZXR1cm4gc3RhdGVcbiAgfVxufVxuXG5jb25zdCBwYWdlc1JlZHVjZXIgPSAoXG4gIHN0YXRlOiBBcnJheTxQYWdlSlNPTj4gPSBbXSxcbiAgYWN0aW9uOiB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGRhdGE6IEFycmF5PFBhZ2VKU09OPjtcbiAgfSxcbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gIGNhc2UgJ1BBR0VTX0lOSVRJQUxJWkUnOlxuICAgIHJldHVybiBhY3Rpb24uZGF0YVxuICBkZWZhdWx0OiByZXR1cm4gc3RhdGVcbiAgfVxufVxuXG5jb25zdCBicmFuZGluZ1JlZHVjZXIgPSAoc3RhdGUgPSB7fSwgYWN0aW9uOiB7XG4gIHR5cGU6IHN0cmluZztcbiAgZGF0YTogQnJhbmRpbmdPcHRpb25zO1xufSkgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gIGNhc2UgJ0JSQU5ESU5HX0lOSVRJQUxJWkUnOlxuICAgIHJldHVybiBhY3Rpb24uZGF0YVxuICBkZWZhdWx0OiByZXR1cm4gc3RhdGVcbiAgfVxufVxuXG5jb25zdCBwYXRoc1JlZHVjZXIgPSAoXG4gIHN0YXRlOiBQYXRocyA9IERFRkFVTFRfUEFUSFMsXG4gIGFjdGlvbjoge3R5cGU6IHN0cmluZzsgZGF0YTogUGF0aHN9LFxuKTogUGF0aHMgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gIGNhc2UgJ1BBVEhTX0lOSVRJQUxJWkUnOlxuICAgIHJldHVybiBhY3Rpb24uZGF0YVxuICBkZWZhdWx0OiByZXR1cm4gc3RhdGVcbiAgfVxufVxuXG5jb25zdCBkYXNoYm9hcmRSZWR1Y2VyID0gKHN0YXRlID0ge30sIGFjdGlvbjoge1xuICB0eXBlOiBzdHJpbmc7XG4gIGRhdGE6IERhc2hib2FyZEluU3RhdGU7XG59KTogRGFzaGJvYXJkSW5TdGF0ZSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgY2FzZSAnREFTSEJPQVJEX0lOSVRJQUxJWkUnOlxuICAgIHJldHVybiBhY3Rpb24uZGF0YVxuICBkZWZhdWx0OiByZXR1cm4gc3RhdGVcbiAgfVxufVxuXG5jb25zdCBzZXNzaW9uUmVkdWNlciA9IChcbiAgc3RhdGU6IEN1cnJlbnRBZG1pbiB8IG51bGwgPSBudWxsLFxuICBhY3Rpb246IHtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgZGF0YTogQ3VycmVudEFkbWluO1xuICB9LFxuKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgY2FzZSAnU0VTU0lPTl9JTklUSUFMSVpFJzpcbiAgICByZXR1cm4gYWN0aW9uLmRhdGFcbiAgZGVmYXVsdDogcmV0dXJuIHN0YXRlXG4gIH1cbn1cblxuY29uc3QgdmVyc2lvbnNSZWR1Y2VyID0gKHN0YXRlID0ge30sIGFjdGlvbjoge1xuICB0eXBlOiBzdHJpbmc7XG4gIGRhdGE6IFZlcnNpb25Qcm9wcztcbn0pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICBjYXNlICdWRVJTSU9OU19JTklUSUFMSVpFJzpcbiAgICByZXR1cm4ge1xuICAgICAgYWRtaW46IGFjdGlvbi5kYXRhLmFkbWluLFxuICAgICAgYXBwOiBhY3Rpb24uZGF0YS5hcHAsXG4gICAgfVxuICBkZWZhdWx0OiByZXR1cm4gc3RhdGVcbiAgfVxufVxuXG50eXBlIE5vdGljZUFyZ3MgPSB7IG5vdGljZUlkOiBzdHJpbmc7IHByb2dyZXNzOiBudW1iZXIgfVxuXG5jb25zdCBub3RpY2VzUmVkdWNlciA9IChzdGF0ZTogQXJyYXk8Tm90aWNlTWVzc2FnZUluU3RhdGU+ID0gW10sIGFjdGlvbjoge1xuICB0eXBlOiBzdHJpbmc7XG4gIGRhdGE6IE5vdGljZU1lc3NhZ2VJblN0YXRlIHwgTm90aWNlQXJncztcbn0pOiBBcnJheTxOb3RpY2VNZXNzYWdlSW5TdGF0ZT4gPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gIGNhc2UgJ0FERF9OT1RJQ0UnOiB7XG4gICAgY29uc3Qgbm90aWNlcyA9IFthY3Rpb24uZGF0YSBhcyBOb3RpY2VNZXNzYWdlSW5TdGF0ZV1cbiAgICByZXR1cm4gbm90aWNlc1xuICB9XG4gIGNhc2UgJ0RST1BfTk9USUNFJzoge1xuICAgIHJldHVybiBzdGF0ZS5maWx0ZXIobm90aWNlID0+IG5vdGljZS5pZCAhPT0gKGFjdGlvbi5kYXRhIGFzIE5vdGljZUFyZ3MpLm5vdGljZUlkKVxuICB9XG4gIGNhc2UgJ1NFVF9OT1RJQ0VfUFJPR1JFU1MnOiB7XG4gICAgcmV0dXJuIHN0YXRlLm1hcChub3RpY2UgPT4gKHtcbiAgICAgIC4uLm5vdGljZSxcbiAgICAgIHByb2dyZXNzOiBub3RpY2UuaWQgPT09IChhY3Rpb24uZGF0YSBhcyBOb3RpY2VBcmdzKS5ub3RpY2VJZFxuICAgICAgICA/IGFjdGlvbi5kYXRhLnByb2dyZXNzXG4gICAgICAgIDogbm90aWNlLnByb2dyZXNzLFxuICAgIH0pKVxuICB9XG4gIGRlZmF1bHQ6IHJldHVybiBzdGF0ZVxuICB9XG59XG5cbmV4cG9ydCB0eXBlIFJlZHV4U3RhdGUgPSB7XG4gIHJlc291cmNlczogQXJyYXk8UmVzb3VyY2VKU09OPjtcbiAgYnJhbmRpbmc6IEJyYW5kaW5nT3B0aW9ucztcbiAgcGF0aHM6IFBhdGhzO1xuICBzZXNzaW9uOiBDdXJyZW50QWRtaW4gfCBudWxsO1xuICBkYXNoYm9hcmQ6IERhc2hib2FyZEluU3RhdGU7XG4gIG5vdGljZXM6IEFycmF5PE5vdGljZU1lc3NhZ2VJblN0YXRlPjtcbiAgdmVyc2lvbnM6IFZlcnNpb25Qcm9wcztcbiAgcGFnZXM6IEFycmF5PFBhZ2VKU09OPjtcbn1cblxuY29uc3QgcmVkdWNlciA9IGNvbWJpbmVSZWR1Y2VyczxSZWR1eFN0YXRlPih7XG4gIHJlc291cmNlczogcmVzb3VyY2VzUmVkdWNlcixcbiAgYnJhbmRpbmc6IGJyYW5kaW5nUmVkdWNlcixcbiAgcGF0aHM6IHBhdGhzUmVkdWNlcixcbiAgc2Vzc2lvbjogc2Vzc2lvblJlZHVjZXIsXG4gIGRhc2hib2FyZDogZGFzaGJvYXJkUmVkdWNlcixcbiAgbm90aWNlczogbm90aWNlc1JlZHVjZXIsXG4gIHZlcnNpb25zOiB2ZXJzaW9uc1JlZHVjZXIsXG4gIHBhZ2VzOiBwYWdlc1JlZHVjZXIsXG59KVxuXG5leHBvcnQgZGVmYXVsdCAoaW5pdGlhbFN0YXRlID0ge30pID0+IGNyZWF0ZVN0b3JlKHJlZHVjZXIsIGluaXRpYWxTdGF0ZSlcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCB7IGRyb3BOb3RpY2UsIHNldE5vdGljZVByb2dyZXNzLCBOb3RpY2VNZXNzYWdlSW5TdGF0ZSwgUmVkdXhTdGF0ZSB9IGZyb20gJy4uLy4uL3N0b3JlL3N0b3JlJ1xuXG5jb25zdCBUSU1FX1RPX0RJU0FQUEVBUiA9IDNcblxuY29uc3QgTm90aWNlV3JhcHBlciA9IHN0eWxlZC5kaXYuYXR0cnM8e2NsYXNzTmFtZTogc3RyaW5nfT4oe1xuICBjbGFzc05hbWU6ICdub3RpZmljYXRpb24nLFxufSlgXG4gIG1heC13aWR0aDogMTAwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICBib3JkZXItcmFkaXVzOiAwO1xuICBib3JkZXItc3R5bGU6IG5vbmUgbm9uZSBzb2xpZCBub25lO1xuICBib3JkZXItd2lkdGg6IDFweDtcbiAgcGFkZGluZzogMTNweCAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ0xheW91dH07XG5cbiAgJjpub3QoOmxhc3QtY2hpbGQpIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xuICB9XG5cbiAgJi5zdWNjZXNzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmxpZ2h0U3VjY2Vzc307XG4gICAgYm9yZGVyLWNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnN1Y2Nlc3N9O1xuXG4gICAgJiAucHJvZ3Jlc3NCYXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5zdWNjZXNzfTtcbiAgICB9XG4gIH1cblxuICAmLmVycm9yIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmxpZ2h0RXJyb3J9O1xuICAgIGJvcmRlci1jb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5lcnJvcn07XG4gICAgJiAuZGVsZXRlOmJlZm9yZSwgJiAuZGVsZXRlOmFmdGVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuZXJyb3J9O1xuICAgIH1cbiAgICAmIC5wcm9ncmVzc0JhciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmVycm9yfTtcbiAgICB9XG4gIH1cblxuICAmIC5kZWxldGUge1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgIHJpZ2h0OiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ0xheW91dH07XG4gICAgdG9wOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ307XG5cbiAgICAmOmJlZm9yZSwgJjphZnRlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnN1Y2Nlc3N9O1xuICAgIH1cblxuICAgICY6YWZ0ZXIge1xuICAgICAgaGVpZ2h0OiA4MCU7XG4gICAgICB3aWR0aDogMXB4O1xuICAgIH1cbiAgICAmOmJlZm9yZSB7XG4gICAgICB3aWR0aDogODAlO1xuICAgICAgaGVpZ2h0OiAxcHg7XG4gICAgfVxuICB9XG5cbiAgJiAucHJvZ3Jlc3NCYXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogMDtcbiAgICBoZWlnaHQ6IDRweDtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgIHRyYW5zaXRpb246IHdpZHRoIDFzIGxpbmVhcjtcbiAgfVxuYFxuXG50eXBlIE5vdGlmeVByb2dyZXNzID0gKG9wdGlvbnM6IHtcbiAgbm90aWNlSWQ6IHN0cmluZzsgcHJvZ3Jlc3M6IG51bWJlcjtcbn0pID0+IHZvaWRcblxudHlwZSBOb3RpY2VFbGVtZW50UHJvcHMgPSB7XG4gIG5vdGljZTogTm90aWNlTWVzc2FnZUluU3RhdGU7XG4gIGRyb3A6ICgpID0+IGFueTtcbiAgbm90aWZ5UHJvZ3Jlc3M6IE5vdGlmeVByb2dyZXNzO1xufVxuXG50eXBlIE5vdGljZUVsZW1lbnRTdGF0ZSA9IHtcbiAgcHJvZ3Jlc3M6IG51bWJlcjtcbn1cblxuY2xhc3MgTm90aWNlRWxlbWVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxOb3RpY2VFbGVtZW50UHJvcHMsIE5vdGljZUVsZW1lbnRTdGF0ZT4ge1xuICBwcml2YXRlIHRpbWVyOiBOb2RlSlMuVGltZW91dCB8IG51bGxcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIGNvbnN0IHsgbm90aWNlIH0gPSBwcm9wc1xuICAgIHRoaXMudGltZXIgPSBudWxsXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHByb2dyZXNzOiBub3RpY2UucHJvZ3Jlc3MgfHwgMCxcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICBjb25zdCB7IGRyb3AsIG5vdGljZSwgbm90aWZ5UHJvZ3Jlc3MgfSA9IHRoaXMucHJvcHNcblxuICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSkgPT4ge1xuICAgICAgICBjb25zdCBwcm9ncmVzcyA9IHN0YXRlLnByb2dyZXNzICsgMTAwIC8gVElNRV9UT19ESVNBUFBFQVJcbiAgICAgICAgbm90aWZ5UHJvZ3Jlc3MoeyBub3RpY2VJZDogbm90aWNlLmlkLCBwcm9ncmVzcyB9KVxuICAgICAgICByZXR1cm4geyBwcm9ncmVzcyB9XG4gICAgICB9KVxuICAgIH0sIDEwMDApXG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcilcbiAgICAgIH1cbiAgICAgIGRyb3AoKVxuICAgIH0sIDEwMDAgKiAoVElNRV9UT19ESVNBUFBFQVIgKyAxKSlcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpXG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBub3RpY2UsIGRyb3AgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB7IHByb2dyZXNzIH0gPSB0aGlzLnN0YXRlXG4gICAgcmV0dXJuIChcbiAgICAgIDxOb3RpY2VXcmFwcGVyIGNsYXNzTmFtZT17bm90aWNlLnR5cGV9PlxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImRlbGV0ZVwiIG9uQ2xpY2s9e2Ryb3B9IHR5cGU9XCJidXR0b25cIiAvPlxuICAgICAgICB7IG5vdGljZS5tZXNzYWdlIH1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9ncmVzc0JhclwiIHN0eWxlPXt7IHdpZHRoOiBgJHtwcm9ncmVzc30lYCB9fSAvPlxuICAgICAgPC9Ob3RpY2VXcmFwcGVyPlxuICAgIClcbiAgfVxufVxuXG50eXBlIE5vdGljZUJveFByb3BzRnJvbVN0YXRlID0ge1xuICBub3RpY2VzOiBBcnJheTxOb3RpY2VNZXNzYWdlSW5TdGF0ZT47XG59XG5cbnR5cGUgTm90aWNlQm94RGlzcGF0Y2hGcm9tU3RhdGUgPSB7XG4gIGRyb3A6IChub3RpY2VJZDogc3RyaW5nKSA9PiB2b2lkO1xuICBub3RpZnlQcm9ncmVzczogTm90aWZ5UHJvZ3Jlc3M7XG59XG5cbmNvbnN0IE5vdGljZUJveDogUmVhY3QuRkM8Tm90aWNlQm94UHJvcHNGcm9tU3RhdGUgJiBOb3RpY2VCb3hEaXNwYXRjaEZyb21TdGF0ZT4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBkcm9wLCBub3RpY2VzLCBub3RpZnlQcm9ncmVzcyB9ID0gcHJvcHNcbiAgY29uc3Qgbm90aWNlID0gbm90aWNlcy5sZW5ndGggPyBub3RpY2VzW25vdGljZXMubGVuZ3RoIC0gMV0gOiBudWxsXG4gIGlmIChub3RpY2UpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPE5vdGljZUVsZW1lbnRcbiAgICAgICAga2V5PXtub3RpY2UuaWR9XG4gICAgICAgIG5vdGljZT17bm90aWNlfVxuICAgICAgICBkcm9wPXsoKTogdm9pZCA9PiBkcm9wKG5vdGljZS5pZCl9XG4gICAgICAgIG5vdGlmeVByb2dyZXNzPXtub3RpZnlQcm9ncmVzc31cbiAgICAgIC8+XG4gICAgKVxuICB9XG4gIHJldHVybiAoXG4gICAgPGRpdiAvPlxuICApXG59XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogUmVkdXhTdGF0ZSk6IE5vdGljZUJveFByb3BzRnJvbVN0YXRlID0+ICh7XG4gIG5vdGljZXM6IHN0YXRlLm5vdGljZXMsXG59KVxuXG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCk6IE5vdGljZUJveERpc3BhdGNoRnJvbVN0YXRlID0+ICh7XG4gIGRyb3A6IChub3RpY2VJZDogc3RyaW5nKTogdm9pZCA9PiBkaXNwYXRjaChkcm9wTm90aWNlKG5vdGljZUlkKSksXG4gIG5vdGlmeVByb2dyZXNzOiAoe1xuICAgIG5vdGljZUlkLCBwcm9ncmVzcyxcbiAgfSk6IHZvaWQgPT4gZGlzcGF0Y2goc2V0Tm90aWNlUHJvZ3Jlc3MoeyBub3RpY2VJZCwgcHJvZ3Jlc3MgfSkpLFxufSlcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgbWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsXG4pKE5vdGljZUJveClcbiIsImltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmNvbnN0IE5vdGljZVdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYFxuXG5leHBvcnQgZGVmYXVsdCBOb3RpY2VXcmFwcGVyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlLCBGdW5jdGlvbkNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgRGVmYXVsdERhc2hib2FyZCBmcm9tICcuLi9hcHAvZGVmYXVsdC1kYXNoYm9hcmQnXG5pbXBvcnQgRXJyb3JCb3VuZGFyeSBmcm9tICcuLi9hcHAvZXJyb3ItYm91bmRhcnknXG5pbXBvcnQgeyBSZWR1eFN0YXRlIH0gZnJvbSAnLi4vLi4vc3RvcmUvc3RvcmUnXG5pbXBvcnQgTm90aWNlIGZyb20gJy4uL2FwcC9ub3RpY2UnXG5pbXBvcnQgTm90aWNlV3JhcHBlciBmcm9tICcuL3N0eWxlZC9ub3RpY2Utd3JhcHBlci5zdHlsZWQnXG5cbmRlY2xhcmUgY29uc3QgQWRtaW5Ccm86IHtcbiAgVXNlckNvbXBvbmVudHM6IFJlY29yZDxzdHJpbmcsIEZ1bmN0aW9uQ29tcG9uZW50Pjtcbn1cblxudHlwZSBTdGF0ZSA9IHtcbiAgaXNDbGllbnQ6IGJvb2xlYW47XG59XG5cbnR5cGUgUHJvcHNGcm9tU3RhdGUgPSB7XG4gIGRhc2hib2FyZDoge1xuICAgIGNvbXBvbmVudD86IHN0cmluZztcbiAgfTtcbn1cblxuY2xhc3MgRGFzaGJvYXJkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzRnJvbVN0YXRlLCBTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHNGcm9tU3RhdGUpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNDbGllbnQ6IGZhbHNlLFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc0NsaWVudDogdHJ1ZSB9KVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBkYXNoYm9hcmQgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB7IGlzQ2xpZW50IH0gPSB0aGlzLnN0YXRlXG4gICAgbGV0IENvbXBvbmVudFxuICAgIGlmIChkYXNoYm9hcmQgJiYgZGFzaGJvYXJkLmNvbXBvbmVudCAmJiBpc0NsaWVudFxuICAgICAgICAmJiBBZG1pbkJyby5Vc2VyQ29tcG9uZW50c1tkYXNoYm9hcmQuY29tcG9uZW50XVxuICAgICkge1xuICAgICAgQ29tcG9uZW50ID0gQWRtaW5Ccm8uVXNlckNvbXBvbmVudHNbZGFzaGJvYXJkLmNvbXBvbmVudF0gYXMgRnVuY3Rpb25Db21wb25lbnRcbiAgICB9IGVsc2Uge1xuICAgICAgQ29tcG9uZW50ID0gRGVmYXVsdERhc2hib2FyZFxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8Tm90aWNlV3JhcHBlcj5cbiAgICAgICAgICA8Tm90aWNlIC8+XG4gICAgICAgIDwvTm90aWNlV3JhcHBlcj5cbiAgICAgICAgPEVycm9yQm91bmRhcnk+XG4gICAgICAgICAgPENvbXBvbmVudCAvPlxuICAgICAgICA8L0Vycm9yQm91bmRhcnk+XG4gICAgICA8Lz5cbiAgICApXG4gIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBSZWR1eFN0YXRlKTogUHJvcHNGcm9tU3RhdGUgPT4gKHtcbiAgZGFzaGJvYXJkOiBzdGF0ZS5kYXNoYm9hcmQsXG59KVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoRGFzaGJvYXJkKVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5pbXBvcnQgUmVzb3VyY2VKU09OIGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9yZXNvdXJjZS1qc29uLmludGVyZmFjZSdcbmltcG9ydCBSZWNvcmRKU09OIGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9yZWNvcmQtanNvbi5pbnRlcmZhY2UnXG5cbmNvbnN0IEJyZWFkY3J1bWJzQ29udGFpbmVyID0gc3R5bGVkLm5hdi5hdHRycyh7XG4gIGNsYXNzTmFtZTogJ2JyZWFkY3J1bWInLFxufSlgXG4gICYmJiB7XG4gICAgbWFyZ2luOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gYC0ke3RoZW1lLnNpemVzLnBhZGRpbmd9IDAgJHt0aGVtZS5zaXplcy5wYWRkaW5nfSAtMTBweGB9O1xuICAgIGZvbnQtc2l6ZTogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmZvbnRzLmJhc2V9O1xuICB9XG5gXG5cbmNvbnN0IEJyZWFkY3J1bWJMaW5rID0gc3R5bGVkKExpbmspYFxuICAmJiYge1xuICAgIGNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmxpZ2h0VGV4dH07XG4gICAgJjpob3ZlciB7XG4gICAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5wcmltYXJ5fTtcbiAgICB9XG4gIH1cbmBcblxuLyoqXG4gKiBAbWVtYmVyb2YgQnJlYWRjcnVtYnNcbiAqL1xudHlwZSBQcm9wcyA9IHtcbiAgLyoqXG4gICAqIFJlc291cmNlXG4gICAqL1xuICByZXNvdXJjZTogUmVzb3VyY2VKU09OO1xuICAvKipcbiAgICogcmVjb3JkXG4gICAqL1xuICByZWNvcmQ/OiBSZWNvcmRKU09OIHwgbnVsbDtcbiAgLyoqXG4gICAqIE5hbWUgb2YgYW4gYWN0aW9uXG4gICAqL1xuICBhY3Rpb25OYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQGNvbXBvbmVudFxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQnJlYWRjcnVtYnMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHJlbmRlclJlc291cmNlKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyByZXNvdXJjZSwgcmVjb3JkIH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuIChcbiAgICAgIDxsaT5cbiAgICAgICAgPEJyZWFkY3J1bWJMaW5rIHRvPXtyZXNvdXJjZS5ocmVmfSBjbGFzc05hbWU9e3JlY29yZCA/ICdpcy1hY3RpdmUnIDogJyd9PlxuICAgICAgICAgIHtyZXNvdXJjZS5uYW1lfVxuICAgICAgICA8L0JyZWFkY3J1bWJMaW5rPlxuICAgICAgPC9saT5cbiAgICApXG4gIH1cblxuICByZW5kZXJBY3Rpb24oKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IGFjdGlvbk5hbWUsIHJlc291cmNlLCByZWNvcmQgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBhY3Rpb24gPSByZXNvdXJjZS5yZXNvdXJjZUFjdGlvbnMuZmluZChhID0+IGEubmFtZSA9PT0gYWN0aW9uTmFtZSlcbiAgICAgIHx8IChyZWNvcmQgJiYgcmVjb3JkLnJlY29yZEFjdGlvbnMuZmluZChhID0+IGEubmFtZSA9PT0gYWN0aW9uTmFtZSkpXG4gICAgaWYgKGFjdGlvbikge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpIGNsYXNzTmFtZT1cImlzLWFjdGl2ZVwiPlxuICAgICAgICAgIDxCcmVhZGNydW1iTGluayB0bz1cIiNcIj57YWN0aW9uLmxhYmVsfTwvQnJlYWRjcnVtYkxpbms+XG4gICAgICAgIDwvbGk+XG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEJyZWFkY3J1bWJzQ29udGFpbmVyPlxuICAgICAgICA8dWw+XG4gICAgICAgICAge3RoaXMucmVuZGVyUmVzb3VyY2UoKX1cbiAgICAgICAgICB7dGhpcy5yZW5kZXJBY3Rpb24oKX1cbiAgICAgICAgPC91bD5cbiAgICAgIDwvQnJlYWRjcnVtYnNDb250YWluZXI+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJyZWFkY3J1bWJzXG4iLCJpbXBvcnQgYXhpb3MsIHsgQXhpb3NSZXNwb25zZSwgQXhpb3NJbnN0YW5jZSwgQXhpb3NSZXF1ZXN0Q29uZmlnIH0gZnJvbSAnYXhpb3MnXG5pbXBvcnQgUmVjb3JkSlNPTiBmcm9tICcuLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVjb3JkLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgUmVjb3JkQWN0aW9uUmVzcG9uc2UsIEFjdGlvblJlc3BvbnNlLCBCdWxrQWN0aW9uUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9iYWNrZW5kL2FjdGlvbnMvYWN0aW9uLmludGVyZmFjZSdcblxubGV0IGdsb2JhbEFueTogYW55ID0ge31cblxudHJ5IHtcbiAgZ2xvYmFsQW55ID0gd2luZG93XG59IGNhdGNoIChlcnJvcikge1xuICBpZiAoZXJyb3IubWVzc2FnZSAhPT0gJ3dpbmRvdyBpcyBub3QgZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbi8qKlxuICogVHlwZSBvZiBhbiBbYXhpb3MgcmVxdWVzdF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2Jsb2IvbWFzdGVyL2luZGV4LmQudHMjTDQzfVxuICpcbiAqIEB0eXBlZGVmIHtvYmplY3R9IEF4aW9zUmVxdWVzdENvbmZpZ1xuICogQGFsaWFzIEF4aW9zUmVxdWVzdENvbmZpZ1xuICogQG1lbWJlcm9mIEFwaUNsaWVudFxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MvYmxvYi9tYXN0ZXIvaW5kZXguZC50cyNMNDNcbiAqL1xuXG5jb25zdCBjaGVja1Jlc3BvbnNlID0gKHJlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlKTogdm9pZCA9PiB7XG4gIGNvbnN0IGxvZ2luVXJsID0gW3dpbmRvdy5sb2NhdGlvbi5vcmlnaW4sIGdsb2JhbEFueS5SRURVWF9TVEFURS5wYXRocy5sb2dpblBhdGhdLmpvaW4oJycpXG4gIC8vIGlmIHJlc3BvbnNlIGhhcyByZWRpcmVjdCB0byBsb2dpblVybFxuICBpZiAocmVzcG9uc2UucmVxdWVzdC5yZXNwb25zZVVSTFxuICAgICAgJiYgcmVzcG9uc2UucmVxdWVzdC5yZXNwb25zZVVSTC5tYXRjaChsb2dpblVybClcbiAgKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgYWxlcnQoJ1lvdXIgc2Vzc2lvbiBleHBpcmVkLiBZb3Ugd2lsbCBiZSByZWRpcmVjdGVkIHRvIGxvZ2luIHNjcmVlbicpXG4gICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbihsb2dpblVybClcbiAgfVxufVxuXG4vKipcbiAqIEV4dGVuZHMge0BsaW5rIEF4aW9zUmVxdWVzdENvbmZpZ31cbiAqXG4gKiBAYWxpYXMgUmVzb3VyY2VBY3Rpb25BUElQYXJhbXNcbiAqIEBtZW1iZXJvZiBBcGlDbGllbnRcbiAqIEBwcm9wZXJ0eSB7YW55fSAgIC4uLiAgICBhbnkgcHJvcGVydHkgc3VwcG9ydGVkIGJ5IHtAbGluayBBeGlvc1JlcXVlc3RDb25maWd9XG4gKi9cbmV4cG9ydCB0eXBlIFJlc291cmNlQWN0aW9uQVBJUGFyYW1zID0gQXhpb3NSZXF1ZXN0Q29uZmlnICYge1xuICAvKipcbiAgICogaWQgb2YgYSByZXNvdXJjZSB0YWtlbiBmcm9tIHtAbGluayBSZXNvdXJjZUpTT059XG4gICAqL1xuICByZXNvdXJjZUlkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBhY3Rpb24gbmFtZSB0YWtlbiBmcm9tICB7QGxpbmsgQWN0aW9uSlNPTn1cbiAgICovXG4gIGFjdGlvbk5hbWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBFeHRlbmRzIHtAbGluayBBeGlvc1JlcXVlc3RDb25maWd9XG4gKlxuICogQGFsaWFzIFJlY29yZEFjdGlvbkFQSVBhcmFtc1xuICogQG1lbWJlcm9mIEFwaUNsaWVudFxuICogQHByb3BlcnR5IHthbnl9ICAgLi4uICAgIGFueSBwcm9wZXJ0eSBzdXBwb3J0ZWQgYnkge0BsaW5rIEF4aW9zUmVxdWVzdENvbmZpZ31cbiAqL1xuZXhwb3J0IHR5cGUgUmVjb3JkQWN0aW9uQVBJUGFyYW1zID0gQXhpb3NSZXF1ZXN0Q29uZmlnICYge1xuICAvKipcbiAgICogaWQgb2YgYSByZWNvcmQgdGFrZW4gZnJvbSB7QGxpbmsgUmVjb3JkSlNPTn1cbiAgICovXG4gIHJlY29yZElkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBpZCBvZiBhIHJlc291cmNlIHRha2VuIGZyb20ge0BsaW5rIFJlc291cmNlSlNPTn1cbiAgICovXG4gIHJlc291cmNlSWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIGFjdGlvbiBuYW1lIHRha2VuIGZyb20gIHtAbGluayBBY3Rpb25KU09OfVxuICAgKi9cbiAgYWN0aW9uTmFtZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEV4dGVuZHMge0BsaW5rIEF4aW9zUmVxdWVzdENvbmZpZ31cbiAqXG4gKiBAYWxpYXMgQnVsa0FjdGlvbkFQSVBhcmFtc1xuICogQG1lbWJlcm9mIEFwaUNsaWVudFxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MvYmxvYi9tYXN0ZXIvaW5kZXguZC50cyNMNDNcbiAqIEBwcm9wZXJ0eSB7YW55fSAgIC4uLiAgICBhbnkgcHJvcGVydHkgc3VwcG9ydGVkIGJ5IHtAbGluayBBeGlvc1JlcXVlc3RDb25maWd9XG4gKi9cbmV4cG9ydCB0eXBlIEJ1bGtBY3Rpb25BUElQYXJhbXMgPSBBeGlvc1JlcXVlc3RDb25maWcgJiB7XG4gIC8qKlxuICAgKiBpZCBvZiBhIHJlY29yZCB0YWtlbiBmcm9tIHtAbGluayBSZWNvcmRKU09OfVxuICAgKi9cbiAgcmVjb3JkSWRzOiBBcnJheTxzdHJpbmc+O1xuICAvKipcbiAgICogaWQgb2YgYSByZXNvdXJjZSB0YWtlbiBmcm9tIHtAbGluayBSZXNvdXJjZUpTT059XG4gICAqL1xuICByZXNvdXJjZUlkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBhY3Rpb24gbmFtZSB0YWtlbiBmcm9tICB7QGxpbmsgQWN0aW9uSlNPTn1cbiAgICovXG4gIGFjdGlvbk5hbWU6IHN0cmluZztcbn1cblxuXG4vKipcbiAqIEV4dGVuZHMge0BsaW5rIEF4aW9zUmVxdWVzdENvbmZpZ31cbiAqXG4gKiBAYWxpYXMgR2V0UGFnZUFQSVBhcmFtc1xuICogQG1lbWJlcm9mIEFwaUNsaWVudFxuICogQHByb3BlcnR5IHthbnl9ICAgLi4uICAgIGFueSBwcm9wZXJ0eSBzdXBwb3J0ZWQgYnkge0BsaW5rIEF4aW9zUmVxdWVzdENvbmZpZ31cbiAqL1xuZXhwb3J0IHR5cGUgR2V0UGFnZUFQSVBhcmFtcyA9IEF4aW9zUmVxdWVzdENvbmZpZyAmIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBwYWdlIG5hbWVcbiAgICovXG4gIHBhZ2VOYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ2xpZW50IHdoaWNoIGFjY2VzcyB0aGUgYWRtaW4gQVBJLlxuICogVXNlIGl0IHRvIGZldGNoIGRhdGEgZnJvbSBhdXRvIGdlbmVyYXRlZCBBZG1pbkJybyBBUEkuXG4gKlxuICogSW4gdGhlIGJhY2tlbmQgaXQgdXNlcyBbYXhpb3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9heGlvcy9heGlvcykgY2xpZW50XG4gKiBsaWJyYXJ5LlxuICpcbiAqIFVzYWdlOlxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHsgQXBpQ2xpZW50IH0gZnJvbSAnYWRtaW4tYnJvJ1xuICpcbiAqIGNvbnN0IGFwaSA9IG5ldyBBcGlDbGllbnQoKVxuICogYXBpLmdldFJlY29yZHMoeyByZXNvdXJjZUlkOiAnQ29tbWVudHMnIH0pLnRoZW4ocmVzdWx0cyA9PiB7Li4ufSlcbiAqIGBgYFxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3NcbiAqL1xuY2xhc3MgQXBpQ2xpZW50IHtcbiAgcHJpdmF0ZSBiYXNlVVJMOiBzdHJpbmdcblxuICBwcml2YXRlIGNsaWVudDogQXhpb3NJbnN0YW5jZVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYmFzZVVSTCA9IEFwaUNsaWVudC5nZXRCYXNlVXJsKClcbiAgICB0aGlzLmNsaWVudCA9IGF4aW9zLmNyZWF0ZSh7XG4gICAgICBiYXNlVVJMOiB0aGlzLmJhc2VVUkwsXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBnZXRCYXNlVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFt3aW5kb3cubG9jYXRpb24ub3JpZ2luLCBnbG9iYWxBbnkuUkVEVVhfU1RBVEUucGF0aHMucm9vdFBhdGhdLmpvaW4oJycpXG4gIH1cblxuICAvKipcbiAgICogU2VhcmNoIGJ5IHF1ZXJ5IHN0cmluZyBmb3IgcmVjb3JkcyBpbiBhIGdpdmVuIHJlc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gICB7T2JqZWN0fSAgb3B0aW9uc1xuICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgb3B0aW9ucy5yZXNvdXJjZUlkICBpZCBvZiBhIHtAbGluayBSZXNvdXJjZUpTT059XG4gICAqIEBwYXJhbSAgIHtTdHJpbmd9ICBvcHRpb25zLnF1ZXJ5ICAgICAgIHF1ZXJ5IHN0cmluZ1xuICAgKlxuICAgKiBAcmV0dXJuICB7UHJvbWlzZTxTZWFyY2hSZXNwb25zZT59XG4gICAqL1xuICBhc3luYyBzZWFyY2hSZWNvcmRzKHsgcmVzb3VyY2VJZCwgcXVlcnkgfToge1xuICAgIHJlc291cmNlSWQ6IHN0cmluZztcbiAgICBxdWVyeTogc3RyaW5nO1xuICB9KTogUHJvbWlzZTxBcnJheTxSZWNvcmRKU09OPj4ge1xuICAgIGNvbnN0IHEgPSBlbmNvZGVVUklDb21wb25lbnQocXVlcnkpXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQoYC9hcGkvcmVzb3VyY2VzLyR7cmVzb3VyY2VJZH0vc2VhcmNoLyR7cX1gKVxuICAgIGNoZWNrUmVzcG9uc2UocmVzcG9uc2UpXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVjb3Jkc1xuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZXMgZ2l2ZW4gcmVzb3VyY2Uge0BsaW5rIEFjdGlvbn0gb24gdGhlIGJhY2tlbmQuXG4gICAqXG4gICAqIEBwYXJhbSAgIHtSZXNvdXJjZUFjdGlvbkFQSVBhcmFtc30gICAgIG9wdGlvbnNcbiAgICogQHJldHVybiAge1Byb21pc2U8QWN0aW9uUmVzcG9uc2U+fSAgICAgcmVzcG9uc2UgZnJvbSBhbiB7QGxpbmsgQWN0aW9ufVxuICAgKi9cbiAgYXN5bmMgcmVzb3VyY2VBY3Rpb24ob3B0aW9uczogUmVzb3VyY2VBY3Rpb25BUElQYXJhbXMpOiBQcm9taXNlPEF4aW9zUmVzcG9uc2U8QWN0aW9uUmVzcG9uc2U+PiB7XG4gICAgY29uc3QgeyByZXNvdXJjZUlkLCBhY3Rpb25OYW1lLCBkYXRhLCAuLi5heGlvc1BhcmFtcyB9ID0gb3B0aW9uc1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jbGllbnQucmVxdWVzdCh7XG4gICAgICB1cmw6IGAvYXBpL3Jlc291cmNlcy8ke3Jlc291cmNlSWR9L2FjdGlvbnMvJHthY3Rpb25OYW1lfWAsXG4gICAgICBtZXRob2Q6IGRhdGEgPyAnUE9TVCcgOiAnR0VUJyxcbiAgICAgIC4uLmF4aW9zUGFyYW1zLFxuICAgICAgZGF0YSxcbiAgICB9KVxuICAgIGNoZWNrUmVzcG9uc2UocmVzcG9uc2UpXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlcyBnaXZlbiByZWNvcmQge0BsaW5rIEFjdGlvbn0gb24gdGhlIGJhY2tlbmQuXG4gICAqXG4gICAqIEBwYXJhbSAgIHtSZWNvcmRBY3Rpb25BUElQYXJhbXN9IG9wdGlvbnNcbiAgICogQHJldHVybiAge1Byb21pc2U8UmVjb3JkQWN0aW9uUmVzcG9uc2U+fSAgICAgICAgICAgIHJlc3BvbnNlIGZyb20gYW4ge0BsaW5rIEFjdGlvbn1cbiAgICovXG4gIGFzeW5jIHJlY29yZEFjdGlvbihvcHRpb25zOiBSZWNvcmRBY3Rpb25BUElQYXJhbXMpOiBQcm9taXNlPEF4aW9zUmVzcG9uc2U8UmVjb3JkQWN0aW9uUmVzcG9uc2U+PiB7XG4gICAgY29uc3QgeyByZXNvdXJjZUlkLCByZWNvcmRJZCwgYWN0aW9uTmFtZSwgZGF0YSwgLi4uYXhpb3NQYXJhbXMgfSA9IG9wdGlvbnNcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2xpZW50LnJlcXVlc3Qoe1xuICAgICAgdXJsOiBgL2FwaS9yZXNvdXJjZXMvJHtyZXNvdXJjZUlkfS9yZWNvcmRzLyR7cmVjb3JkSWR9LyR7YWN0aW9uTmFtZX1gLFxuICAgICAgbWV0aG9kOiBkYXRhID8gJ1BPU1QnIDogJ0dFVCcsXG4gICAgICAuLi5heGlvc1BhcmFtcyxcbiAgICAgIGRhdGEsXG4gICAgfSlcbiAgICBjaGVja1Jlc3BvbnNlKHJlc3BvbnNlKVxuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZXMgZ2l2ZW4gYnVsayB7QGxpbmsgQWN0aW9ufSBvbiB0aGUgYmFja2VuZC5cbiAgICpcbiAgICogQHBhcmFtICAge0J1bGtBY3Rpb25BUElQYXJhbXN9IG9wdGlvbnNcbiAgICogQHJldHVybiAge1Byb21pc2U8QnVsa0FjdGlvblJlc3BvbnNlPn0gICAgICAgICAgICByZXNwb25zZSBmcm9tIGFuIHtAbGluayBBY3Rpb259XG4gICAqL1xuICBhc3luYyBidWxrQWN0aW9uKG9wdGlvbnM6IEJ1bGtBY3Rpb25BUElQYXJhbXMpOiBQcm9taXNlPEF4aW9zUmVzcG9uc2U8QnVsa0FjdGlvblJlc3BvbnNlPj4ge1xuICAgIGNvbnN0IHsgcmVzb3VyY2VJZCwgcmVjb3JkSWRzLCBhY3Rpb25OYW1lLCBkYXRhLCAuLi5heGlvc1BhcmFtcyB9ID0gb3B0aW9uc1xuXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpXG4gICAgcGFyYW1zLmFwcGVuZCgncmVjb3JkSWRzJywgcmVjb3JkSWRzLmpvaW4oJywnKSlcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jbGllbnQucmVxdWVzdCh7XG4gICAgICB1cmw6IGAvYXBpL3Jlc291cmNlcy8ke3Jlc291cmNlSWR9L2J1bGsvJHthY3Rpb25OYW1lfWAsXG4gICAgICBtZXRob2Q6IGRhdGEgPyAnUE9TVCcgOiAnR0VUJyxcbiAgICAgIC4uLmF4aW9zUGFyYW1zLFxuICAgICAgZGF0YSxcbiAgICAgIHBhcmFtcyxcbiAgICB9KVxuICAgIGNoZWNrUmVzcG9uc2UocmVzcG9uc2UpXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlcyBkYXNoYm9hcmQgaGFuZGxlci5cbiAgICpcbiAgICogQHBhcmFtICAge0F4aW9zUmVxdWVzdENvbmZpZ30gICAgICAgb3B0aW9uc1xuICAgKiBAcmV0dXJuICB7UHJvbWlzZTxhbnk+fSAgICAgICAgICAgICByZXNwb25zZSBmcm9tIHRoZSBoYW5kbGVyIGZ1bmN0aW9uIGRlZmluZWQgaW5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge0BsaW5rIEFkbWluQnJvT3B0aW9ucyNkYXNoYm9hcmR9XG4gICAqL1xuICBhc3luYyBnZXREYXNoYm9hcmQob3B0aW9uczogQXhpb3NSZXF1ZXN0Q29uZmlnID0ge30pOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0KCcvYXBpL2Rhc2hib2FyZCcsIG9wdGlvbnMpXG4gICAgY2hlY2tSZXNwb25zZShyZXNwb25zZSlcbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VzIGhhbmRsZXIgZnVuY3Rpb24gb2YgZ2l2ZW4gcGFnZSBhbmQgcmV0dXJucyBpdHMgcmVzcG9uc2UuXG4gICAqXG4gICAqIEBwYXJhbSAgIHtHZXRQYWdlQVBJUGFyYW1zfSAgICAgICAgICAgICAgICBvcHRpb25zXG4gICAqIEByZXR1cm4gIHtQcm9taXNlPGFueT59ICAgICAgICAgICAgICAgICAgICByZXNwb25zZSBmcm9tIHRoZSBoYW5kbGVyIG9mIGdpdmVuIHBhZ2VcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZWQgaW4ge0BsaW5rIEFkbWluQnJvT3B0aW9ucyNwYWdlc31cbiAgICovXG4gIGFzeW5jIGdldFBhZ2Uob3B0aW9uczogR2V0UGFnZUFQSVBhcmFtcyk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgeyBwYWdlTmFtZSwgLi4uYXhpb3NQYXJhbXMgfSA9IG9wdGlvbnNcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2xpZW50LnJlcXVlc3Qoe1xuICAgICAgdXJsOiBgL2FwaS9wYWdlcy8ke3BhZ2VOYW1lfWAsXG4gICAgICAuLi5heGlvc1BhcmFtcyxcbiAgICB9KVxuICAgIGNoZWNrUmVzcG9uc2UocmVzcG9uc2UpXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBpQ2xpZW50XG4iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBhZGROb3RpY2UgfSBmcm9tICcuL3N0b3JlJ1xuXG4vKipcbiAqIE5vdGljZU1lc3NhZ2Ugd2hpY2ggY2FuIGJlIHByZXNlbnRlZCBhcyBhIFwiVG9hc3RcIiBtZXNzYWdlLlxuICogQGFsaWFzIE5vdGljZU1lc3NhZ2VcbiAqIEBtZW1iZXJvZiB3aXRoTm90aWNlXG4gKi9cbmV4cG9ydCB0eXBlIE5vdGljZU1lc3NhZ2UgPSB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgdHlwZT86ICdzdWNjZXNzJyB8ICdlcnJvcic7XG59XG5cblxuLyoqXG4gKiBBZGRpdGlvbmFsIHByb3BzIHdoaWNoIGFyZSBwYXNzZWQgdG8geW91ciBjb21wb25lbnRcbiAqIEBhbGlhcyBBZGROb3RpY2VQcm9wc1xuICogQG1lbWJlcm9mIHdpdGhOb3RpY2VcbiAqL1xuZXhwb3J0IHR5cGUgQWRkTm90aWNlUHJvcHMgPSB7XG4gIC8vIEZ1bmN0aW9uIHRyaWdnZXJpbmcgbm90aWNlIG1lc3NhZ2VzXG4gIGFkZE5vdGljZTogKG5vdGljZTogTm90aWNlTWVzc2FnZSkgPT4gdm9pZDtcbn1cblxuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gpOiBBZGROb3RpY2VQcm9wcyA9PiAoe1xuICBhZGROb3RpY2U6IChub3RpY2U6IE5vdGljZU1lc3NhZ2UpOiB2b2lkID0+IGRpc3BhdGNoKGFkZE5vdGljZShub3RpY2UpKSxcbn0pXG5cbi8qKlxuICogSGlnaCBPcmRlciBDb21wb25lbnQgd2hpY2ggYWxsb3dzIHlvdSB0byBwb3N0IG5vdGljZSBtZXNzYWdlcyBmcm9tIHlvdXIgY29tcG9uZW50c1xuICpcbiAqIEl0IGdpdmVzIHlvdSB0aGUgYWRkaXRpb25hbCBwcm9wOiBgYWRkTm90aWNlKG5vdGljZU1lc3NhZ2UpYCB0YWtpbmcge0BsaW5rIE5vdGljZU1lc3NhZ2V9LlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7IHdpdGhOb3RpY2UgfSBmcm9tICdhZG1pbi1icm8nXG4gKlxuICogY29uc3QgTVlfTUVTU0FHRSA9IHtcbiAqICAgbWVzc2FnZTogJ0kgYW0gdG9hc3QgbWVzc2FnZScsXG4gKiAgIHR5cGU6ICdzdWNjZXNzJyxcbiAqIH1cbiAqIGNvbnN0IE15Q3VzdG9tQ29tcG9uZW50ID0gKHsgYWRkTm90aWNlIH0pID0+IHtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8YSBvbkNsaWNrPXsoKSA9PiBhZGROb3RpY2UoTVlfTUVTU0FHRSl9PkNsaWNrIE1lPC9hPlxuICogICApXG4gKiB9XG4gKiBleHBvcnQgZGVmYXVsdCB3aXRoTm90aWNlKE15Q3VzdG9tQ29tcG9uZW50KVxuICogYGBgXG4gKlxuICogQGNvbXBvbmVudFxuICovXG5jb25zdCB3aXRoTm90aWNlID0gQ29tcG9uZW50ID0+IGNvbm5lY3QobnVsbCwgbWFwRGlzcGF0Y2hUb1Byb3BzKShDb21wb25lbnQpXG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhOb3RpY2VcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1hbGVydCAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG5cbmltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUsIENvbXBvbmVudENsYXNzIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbmltcG9ydCB7IEF4aW9zUmVzcG9uc2UgfSBmcm9tICdheGlvcydcbmltcG9ydCBTdHlsZWRMaW5rIGZyb20gJy4uL3VpL3N0eWxlZC1saW5rJ1xuaW1wb3J0IEFwaUNsaWVudCBmcm9tICcuLi8uLi91dGlscy9hcGktY2xpZW50J1xuaW1wb3J0IFZpZXdIZWxwZXJzIGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzJ1xuaW1wb3J0IHdpdGhOb3RpY2UsIHsgQWRkTm90aWNlUHJvcHMgfSBmcm9tICcuLi8uLi9zdG9yZS93aXRoLW5vdGljZSdcbmltcG9ydCBBY3Rpb25KU09OIGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9hY3Rpb24tanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgeyBBY3Rpb25SZXNwb25zZSB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvYWN0aW9ucy9hY3Rpb24uaW50ZXJmYWNlJ1xuXG50eXBlIFByb3BzID0ge1xuICBhY3Rpb246IEFjdGlvbkpTT047XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgcmVzb3VyY2VJZDogc3RyaW5nO1xuICByZWNvcmRJZD86IHN0cmluZztcbiAgcmVjb3JkSWRzPzogQXJyYXk8c3RyaW5nPjtcbiAgYWN0aW9uUGVyZm9ybWVkPzogKGFjdGlvbk5hbWU6IHN0cmluZykgPT4gYW55O1xufVxuXG4vKipcbiAqIFJlbmRlcnMgQnV0dG9uIGZvciBhbiBhY3Rpb25cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbXBvbmVudFxuICovXG5jbGFzcyBBY3Rpb25CdXR0b24gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFJvdXRlQ29tcG9uZW50UHJvcHMgJiBQcm9wcyAmIEFkZE5vdGljZVByb3BzPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5oYW5kbGVDbGljayA9IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKVxuICB9XG5cbiAgaHJlZigpOiBzdHJpbmcge1xuICAgIGNvbnN0IHtcbiAgICAgIGFjdGlvbiwgcmVzb3VyY2VJZCwgcmVjb3JkSWQsIHJlY29yZElkcyxcbiAgICB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IGggPSBuZXcgVmlld0hlbHBlcnMoKVxuICAgIGNvbnN0IHsgbmFtZTogYWN0aW9uTmFtZSwgYWN0aW9uVHlwZSB9ID0gYWN0aW9uXG5cbiAgICBzd2l0Y2ggKGFjdGlvblR5cGUpIHtcbiAgICBjYXNlICdyZWNvcmQnOlxuICAgICAgaWYgKCFyZWNvcmRJZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBoYXZlIHRvIHNwZWNpZnkgXCJyZWNvcmRJZFwiIGZvciByZWNvcmQgYWN0aW9uJylcbiAgICAgIH1cbiAgICAgIHJldHVybiBoLnJlY29yZEFjdGlvblVybCh7IHJlc291cmNlSWQsIHJlY29yZElkLCBhY3Rpb25OYW1lIH0pXG4gICAgY2FzZSAncmVzb3VyY2UnOlxuICAgICAgcmV0dXJuIGgucmVzb3VyY2VBY3Rpb25VcmwoeyByZXNvdXJjZUlkLCBhY3Rpb25OYW1lIH0pXG4gICAgY2FzZSAnYnVsayc6XG4gICAgICByZXR1cm4gaC5idWxrQWN0aW9uVXJsKHsgcmVzb3VyY2VJZCwgcmVjb3JkSWRzLCBhY3Rpb25OYW1lIH0pXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCJhY3Rpb25UeXBlXCIgc2hvdWxkIGJlIGVpdGhlciByZWNvcmQsIHJlc291cmNlIG9yIGJ1bGsnKVxuICAgIH1cbiAgfVxuXG4gIGNhbGxBcGkoKTogdm9pZCB7XG4gICAgY29uc3Qge1xuICAgICAgYWN0aW9uLCByZXNvdXJjZUlkLCByZWNvcmRJZCwgbG9jYXRpb24sXG4gICAgICBoaXN0b3J5LCBhY3Rpb25QZXJmb3JtZWQsIGFkZE5vdGljZSwgcmVjb3JkSWRzLFxuICAgIH0gPSB0aGlzLnByb3BzXG5cbiAgICBjb25zdCBhcGkgPSBuZXcgQXBpQ2xpZW50KClcbiAgICBsZXQgcHJvbWlzZTogUHJvbWlzZTxBeGlvc1Jlc3BvbnNlPEFjdGlvblJlc3BvbnNlPj5cblxuICAgIHN3aXRjaCAoYWN0aW9uLmFjdGlvblR5cGUpIHtcbiAgICBjYXNlICdyZWNvcmQnOlxuICAgICAgaWYgKCFyZWNvcmRJZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBoYXZlIHRvIHNwZWNpZnkgXCJyZWNvcmRJZFwiIGZvciByZWNvcmQgYWN0aW9uJylcbiAgICAgIH1cbiAgICAgIHByb21pc2UgPSBhcGkucmVjb3JkQWN0aW9uKHtcbiAgICAgICAgcmVzb3VyY2VJZCwgYWN0aW9uTmFtZTogYWN0aW9uLm5hbWUsIHJlY29yZElkLFxuICAgICAgfSlcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAncmVzb3VyY2UnOlxuICAgICAgcHJvbWlzZSA9IGFwaS5yZXNvdXJjZUFjdGlvbih7XG4gICAgICAgIHJlc291cmNlSWQsIGFjdGlvbk5hbWU6IGFjdGlvbi5uYW1lLFxuICAgICAgfSlcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYnVsayc6XG4gICAgICBpZiAoIXJlY29yZElkcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBoYXZlIHRvIHNwZWNpZnkgXCJyZWNvcmRJZHNcIiBmb3IgYnVsayBhY3Rpb24nKVxuICAgICAgfVxuICAgICAgcHJvbWlzZSA9IGFwaS5idWxrQWN0aW9uKHtcbiAgICAgICAgcmVzb3VyY2VJZCwgYWN0aW9uTmFtZTogYWN0aW9uLm5hbWUsIHJlY29yZElkcyxcbiAgICAgIH0pXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiYWN0aW9uVHlwZVwiIHNob3VsZCBiZSBlaXRoZXIgcmVjb3JkLCByZXNvdXJjZSBvciBidWxrJylcbiAgICB9XG5cbiAgICBwcm9taXNlLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zdCB7IGRhdGEgfSA9IHJlc3BvbnNlXG4gICAgICBpZiAoZGF0YS5ub3RpY2UpIHtcbiAgICAgICAgYWRkTm90aWNlKGRhdGEubm90aWNlKVxuICAgICAgfVxuICAgICAgaWYgKGRhdGEucmVkaXJlY3RVcmwgJiYgbG9jYXRpb24ucGF0aG5hbWUgIT09IGRhdGEucmVkaXJlY3RVcmwpIHtcbiAgICAgICAgaGlzdG9yeS5wdXNoKGRhdGEucmVkaXJlY3RVcmwpXG4gICAgICB9XG4gICAgICBpZiAoYWN0aW9uUGVyZm9ybWVkKSB7XG4gICAgICAgIGFjdGlvblBlcmZvcm1lZChhY3Rpb24ubmFtZSlcbiAgICAgIH1cbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIHRocm93IGVycm9yXG4gICAgfSlcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKGV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgeyBhY3Rpb24gfSA9IHRoaXMucHJvcHNcblxuICAgIGlmIChhY3Rpb24uZ3VhcmQgJiYgIWNvbmZpcm0oYWN0aW9uLmd1YXJkKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICh0eXBlb2YgYWN0aW9uLmNvbXBvbmVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgYWN0aW9uLmNvbXBvbmVudCA9PT0gZmFsc2UpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIHRoaXMuY2FsbEFwaSgpXG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3Qge1xuICAgICAgYWN0aW9uLCBjbGFzc05hbWUsXG4gICAgfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKFxuICAgICAgPFN0eWxlZExpbmtcbiAgICAgICAgdG89e3RoaXMuaHJlZigpfVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZSB8fCAnJ31cbiAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja31cbiAgICAgID5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaWNvblwiPlxuICAgICAgICAgIDxpIGNsYXNzTmFtZT17YWN0aW9uLmljb259IC8+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYnRuLXRleHRcIj5cbiAgICAgICAgICB7YWN0aW9uLmxhYmVsfVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L1N0eWxlZExpbms+XG4gICAgKVxuICB9XG59XG5cbi8vIFRPRE8gLSByZW1vdmUgdGhpcyBoYWNrXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKHdpdGhOb3RpY2UoQWN0aW9uQnV0dG9uKSkgYXMgdW5rbm93biBhcyBDb21wb25lbnRDbGFzczxQcm9wcz5cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuaW1wb3J0IEFjdGlvbkJ1dHRvbiBmcm9tICcuL2FjdGlvbi1idXR0b24nXG5pbXBvcnQgU3R5bGVkQnV0dG9uIGZyb20gJy4uL3VpL3N0eWxlZC1idXR0b24nXG5cbmltcG9ydCBWaWV3SGVscGVycyBmcm9tICcuLi8uLi8uLi9iYWNrZW5kL3V0aWxzL3ZpZXctaGVscGVycydcblxuaW1wb3J0IFJlc291cmNlSlNPTiBmcm9tICcuLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVzb3VyY2UtanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgQWN0aW9uSlNPTiBmcm9tICcuLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvYWN0aW9uLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IFJlY29yZEpTT04gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3JlY29yZC1qc29uLmludGVyZmFjZSdcblxuY29uc3QgSGVhZGVyV3JhcHBlciA9IHN0eWxlZC5zZWN0aW9uLmF0dHJzKHtcbiAgY2xhc3NOYW1lOiAnbGV2ZWwnLFxufSlgXG4gICYmJiB7XG4gICAgbWFyZ2luLWJvdHRvbTogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9O1xuICB9XG5gXG5cbmNvbnN0IFRhZyA9IHN0eWxlZC5zcGFuLmF0dHJzKHtcbiAgY2xhc3NOYW1lOiAndGFnJyxcbn0pYFxuICAmJiYge1xuICAgIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMucHJpbWFyeX07XG4gICAgY29sb3I6ICNmZmY7XG4gICAgbWFyZ2luLWxlZnQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nfTtcbiAgfVxuYFxuXG5jb25zdCBCYWNrQnRuID0gc3R5bGVkKExpbmspYFxuICAmJiYge1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICB3aWR0aDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmdMYXlvdXR9O1xuICAgIGhlaWdodDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmdMYXlvdXR9O1xuICAgIGNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmxpZ2h0VGV4dH07XG4gICAgZm9udC1zaXplOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuZm9udHMuYmFzZX07XG4gICAgcGFkZGluZzogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmdNaW59O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuc3VwZXJMaWdodEJhY2t9O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW4tcmlnaHQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nfTtcbiAgICAmOmhvdmVye1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5saWdodFRleHR9O1xuICAgICAgY29sb3I6ICNmZmY7XG4gICAgfVxuICB9XG5gXG5cbmNvbnN0IEhlYWRlclRpdGxlID0gc3R5bGVkLmgxLmF0dHJzKHtcbiAgY2xhc3NOYW1lOiAnbGV2ZWwtbGVmdCcsXG59KWBcbiAgJiYmIHtcbiAgICBmb250LXNpemU6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5mb250cy5oZWFkZXJ9O1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIH1cbmBcblxuY29uc3QgSGVhZGVyQnV0dG9ucyA9IHN0eWxlZC5kaXYuYXR0cnMoe1xuICBjbGFzc05hbWU6ICdsZXZlbC1yaWdodCcsXG59KWBcbiAgJiYmIGEge1xuICAgIG1hcmdpbi1sZWZ0OiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ307XG4gIH1cbmBcblxuLyoqXG4gKiBAbWVtYmVyb2YgQWN0aW9uSGVhZGVyXG4gKiBAcHJpdmF0ZVxuICovXG5pbnRlcmZhY2UgUHJvcHMge1xuICByZXNvdXJjZTogUmVzb3VyY2VKU09OO1xuICByZWNvcmQ/OiBSZWNvcmRKU09OO1xuICB0b2dnbGVGaWx0ZXI/OiAoKSA9PiBhbnk7XG4gIGFjdGlvblBlcmZvcm1lZD86ICgpID0+IGFueTtcbiAgcmVjb3JkSWQ/OiBzdHJpbmc7XG4gIGFjdGlvbj86IEFjdGlvbkpTT047XG4gIHRhZz86IHN0cmluZztcbn1cblxuLyoqXG4gKiBIZWFkZXIgb2YgYW4gYWN0aW9uXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb21wb25lbnRcbiAqL1xuY29uc3QgQWN0aW9uSGVhZGVyOiBSZWFjdC5GQzxQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgaCA9IG5ldyBWaWV3SGVscGVycygpXG4gIGNvbnN0IHtcbiAgICByZXNvdXJjZSwgdG9nZ2xlRmlsdGVyLCBhY3Rpb25QZXJmb3JtZWQsIHJlY29yZCwgYWN0aW9uLCB0YWcsIHJlY29yZElkLFxuICB9ID0gcHJvcHNcbiAgY29uc3QgcmVzb3VyY2VJZCA9IHJlc291cmNlLmlkXG4gIGxldCBhY3Rpb25zID0gcmVjb3JkID8gcmVjb3JkLnJlY29yZEFjdGlvbnMgOiByZXNvdXJjZS5yZXNvdXJjZUFjdGlvbnNcblxuICAvLyBsaXN0IGFjdGlvbiBpcyBub3QgYWNjZXNzaWJsZSB2aWEgdGhlIEFjdGlvbkhlYWRlciBidXR0b25zXG4gIGFjdGlvbnMgPSBhY3Rpb25zICYmIGFjdGlvbnMuZmlsdGVyKHJhID0+ICFbYWN0aW9uICYmIGFjdGlvbi5uYW1lLCAnbGlzdCddLmluY2x1ZGVzKHJhLm5hbWUpKVxuXG4gIGNvbnN0IHRpdGxlID0gYWN0aW9uID8gYWN0aW9uLmxhYmVsIDogcmVzb3VyY2UubmFtZVxuICBjb25zdCBpc0xpc3QgPSBhY3Rpb24gJiYgYWN0aW9uLm5hbWUgPT09ICdsaXN0J1xuXG4gIHJldHVybiAoXG4gICAgPEhlYWRlcldyYXBwZXI+XG4gICAgICA8SGVhZGVyVGl0bGU+XG4gICAgICAgIHshaXNMaXN0ICYmIChcbiAgICAgICAgICA8QmFja0J0biB0bz17aC5yZXNvdXJjZUFjdGlvblVybCh7IHJlc291cmNlSWQsIGFjdGlvbk5hbWU6ICdsaXN0JyB9KX0+XG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJpY29tb29uLXBhZ2luYXRpb24tbGVmdFwiIC8+XG4gICAgICAgICAgPC9CYWNrQnRuPlxuICAgICAgICApfVxuICAgICAgICB7dGl0bGV9XG4gICAgICAgIHt0YWcgPyAoPFRhZz57dGFnfTwvVGFnPikgOiAnJ31cbiAgICAgIDwvSGVhZGVyVGl0bGU+XG4gICAgICA8SGVhZGVyQnV0dG9ucz5cbiAgICAgICAge2FjdGlvbnMubWFwKGhlYWRlckFjdGlvbiA9PiAoXG4gICAgICAgICAgPEFjdGlvbkJ1dHRvblxuICAgICAgICAgICAgYWN0aW9uPXtoZWFkZXJBY3Rpb259XG4gICAgICAgICAgICBrZXk9e2hlYWRlckFjdGlvbi5uYW1lfVxuICAgICAgICAgICAgYWN0aW9uUGVyZm9ybWVkPXthY3Rpb25QZXJmb3JtZWR9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJpcy1wcmltYXJ5XCJcbiAgICAgICAgICAgIHJlc291cmNlSWQ9e3Jlc291cmNlLmlkfVxuICAgICAgICAgICAgcmVjb3JkSWQ9e3JlY29yZElkfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgICB7dG9nZ2xlRmlsdGVyICYmIChcbiAgICAgICAgICA8U3R5bGVkQnV0dG9uIG9uQ2xpY2s9e3RvZ2dsZUZpbHRlcn0gYXM9XCJhXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpY29uXCI+XG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhcyBmYS1zbGlkZXJzLWhcIiAvPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYnRuLXRleHRcIj5GaWx0ZXI8L3NwYW4+XG4gICAgICAgICAgPC9TdHlsZWRCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L0hlYWRlckJ1dHRvbnM+XG4gICAgPC9IZWFkZXJXcmFwcGVyPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFjdGlvbkhlYWRlclxuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmXG4gICAgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuIiwidmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJylcblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuXG5mbGF0dGVuLmZsYXR0ZW4gPSBmbGF0dGVuXG5mbGF0dGVuLnVuZmxhdHRlbiA9IHVuZmxhdHRlblxuXG5mdW5jdGlvbiBmbGF0dGVuICh0YXJnZXQsIG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge31cblxuICB2YXIgZGVsaW1pdGVyID0gb3B0cy5kZWxpbWl0ZXIgfHwgJy4nXG4gIHZhciBtYXhEZXB0aCA9IG9wdHMubWF4RGVwdGhcbiAgdmFyIG91dHB1dCA9IHt9XG5cbiAgZnVuY3Rpb24gc3RlcCAob2JqZWN0LCBwcmV2LCBjdXJyZW50RGVwdGgpIHtcbiAgICBjdXJyZW50RGVwdGggPSBjdXJyZW50RGVwdGggfHwgMVxuICAgIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XVxuICAgICAgdmFyIGlzYXJyYXkgPSBvcHRzLnNhZmUgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSlcbiAgICAgIHZhciB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKVxuICAgICAgdmFyIGlzYnVmZmVyID0gaXNCdWZmZXIodmFsdWUpXG4gICAgICB2YXIgaXNvYmplY3QgPSAoXG4gICAgICAgIHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nIHx8XG4gICAgICAgIHR5cGUgPT09ICdbb2JqZWN0IEFycmF5XSdcbiAgICAgIClcblxuICAgICAgdmFyIG5ld0tleSA9IHByZXZcbiAgICAgICAgPyBwcmV2ICsgZGVsaW1pdGVyICsga2V5XG4gICAgICAgIDoga2V5XG5cbiAgICAgIGlmICghaXNhcnJheSAmJiAhaXNidWZmZXIgJiYgaXNvYmplY3QgJiYgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCAmJlxuICAgICAgICAoIW9wdHMubWF4RGVwdGggfHwgY3VycmVudERlcHRoIDwgbWF4RGVwdGgpKSB7XG4gICAgICAgIHJldHVybiBzdGVwKHZhbHVlLCBuZXdLZXksIGN1cnJlbnREZXB0aCArIDEpXG4gICAgICB9XG5cbiAgICAgIG91dHB1dFtuZXdLZXldID0gdmFsdWVcbiAgICB9KVxuICB9XG5cbiAgc3RlcCh0YXJnZXQpXG5cbiAgcmV0dXJuIG91dHB1dFxufVxuXG5mdW5jdGlvbiB1bmZsYXR0ZW4gKHRhcmdldCwgb3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBvcHRzLmRlbGltaXRlciB8fCAnLidcbiAgdmFyIG92ZXJ3cml0ZSA9IG9wdHMub3ZlcndyaXRlIHx8IGZhbHNlXG4gIHZhciByZXN1bHQgPSB7fVxuXG4gIHZhciBpc2J1ZmZlciA9IGlzQnVmZmVyKHRhcmdldClcbiAgaWYgKGlzYnVmZmVyIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0YXJnZXQpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIHJldHVybiB0YXJnZXRcbiAgfVxuXG4gIC8vIHNhZmVseSBlbnN1cmUgdGhhdCB0aGUga2V5IGlzXG4gIC8vIGFuIGludGVnZXIuXG4gIGZ1bmN0aW9uIGdldGtleSAoa2V5KSB7XG4gICAgdmFyIHBhcnNlZEtleSA9IE51bWJlcihrZXkpXG5cbiAgICByZXR1cm4gKFxuICAgICAgaXNOYU4ocGFyc2VkS2V5KSB8fFxuICAgICAga2V5LmluZGV4T2YoJy4nKSAhPT0gLTEgfHxcbiAgICAgIG9wdHMub2JqZWN0XG4gICAgKSA/IGtleVxuICAgICAgOiBwYXJzZWRLZXlcbiAgfVxuXG4gIHZhciBzb3J0ZWRLZXlzID0gT2JqZWN0LmtleXModGFyZ2V0KS5zb3J0KGZ1bmN0aW9uIChrZXlBLCBrZXlCKSB7XG4gICAgcmV0dXJuIGtleUEubGVuZ3RoIC0ga2V5Qi5sZW5ndGhcbiAgfSlcblxuICBzb3J0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzcGxpdCA9IGtleS5zcGxpdChkZWxpbWl0ZXIpXG4gICAgdmFyIGtleTEgPSBnZXRrZXkoc3BsaXQuc2hpZnQoKSlcbiAgICB2YXIga2V5MiA9IGdldGtleShzcGxpdFswXSlcbiAgICB2YXIgcmVjaXBpZW50ID0gcmVzdWx0XG5cbiAgICB3aGlsZSAoa2V5MiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyZWNpcGllbnRba2V5MV0pXG4gICAgICB2YXIgaXNvYmplY3QgPSAoXG4gICAgICAgIHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nIHx8XG4gICAgICAgIHR5cGUgPT09ICdbb2JqZWN0IEFycmF5XSdcbiAgICAgIClcblxuICAgICAgLy8gZG8gbm90IHdyaXRlIG92ZXIgZmFsc2V5LCBub24tdW5kZWZpbmVkIHZhbHVlcyBpZiBvdmVyd3JpdGUgaXMgZmFsc2VcbiAgICAgIGlmICghb3ZlcndyaXRlICYmICFpc29iamVjdCAmJiB0eXBlb2YgcmVjaXBpZW50W2tleTFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKChvdmVyd3JpdGUgJiYgIWlzb2JqZWN0KSB8fCAoIW92ZXJ3cml0ZSAmJiByZWNpcGllbnRba2V5MV0gPT0gbnVsbCkpIHtcbiAgICAgICAgcmVjaXBpZW50W2tleTFdID0gKFxuICAgICAgICAgIHR5cGVvZiBrZXkyID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICFvcHRzLm9iamVjdCA/IFtdIDoge31cbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICByZWNpcGllbnQgPSByZWNpcGllbnRba2V5MV1cbiAgICAgIGlmIChzcGxpdC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGtleTEgPSBnZXRrZXkoc3BsaXQuc2hpZnQoKSlcbiAgICAgICAga2V5MiA9IGdldGtleShzcGxpdFswXSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB1bmZsYXR0ZW4gYWdhaW4gZm9yICdtZXNzeSBvYmplY3RzJ1xuICAgIHJlY2lwaWVudFtrZXkxXSA9IHVuZmxhdHRlbih0YXJnZXRba2V5XSwgb3B0cylcbiAgfSlcblxuICByZXR1cm4gcmVzdWx0XG59XG4iLCJpbXBvcnQgKiBhcyBmbGF0IGZyb20gJ2ZsYXQnXG5pbXBvcnQgUHJvcGVydHlKU09OIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9wcm9wZXJ0eS1qc29uLmludGVyZmFjZSdcbmltcG9ydCBSZWNvcmRKU09OIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9yZWNvcmQtanNvbi5pbnRlcmZhY2UnXG5cbi8qKlxuICogQ29udmVydHMgZmxhdHRlbiBwYXJhbXMgdG8gYXJyYXkgaXRlbXMgd2hlbiBnaXZlbiBwcm9wZXJ0eSBpcyBhbiBhcnJheS5cbiAqXG4gKiBXaGF0IHByb2JsZW0gaXQgc29sdmVzOlxuICogc28gbGV0IHNheSB1c2VyIGhhcyBhIHJlY29yZCB3aXRoIHJlY29yZC5wcm9wZXJ0eTpcbiAqIGBgYFxuICogSXRlbS4wLmltYWdlVmFyaWFudHMuMC5kYXRlQ3JlYXRlZDogXCIyMDE5LTA5LTE5VDEwOjAwOjAwLjAwMFpcIlxuICogSXRlbS4wLmltYWdlVmFyaWFudHMuMC5pbWFnZVVSTDogXCJ1cmwgdG8gaGVscFwiXG4gKiBJdGVtLjAuaW1hZ2VWYXJpYW50cy4wLmlzQXBwcm92ZWQ6IHRydWVcbiAqIEl0ZW0uMC5pbWFnZVZhcmlhbnRzLjAuaXNEZWxldGVkOiBmYWxzZVxuICogSXRlbS4wLmltYWdlVmFyaWFudHMuMS5kYXRlQ3JlYXRlZDogXCIyMDE5LTA5LTE5VDE5OjEwOjM0LjkxOVpcIlxuICogSXRlbS4wLmltYWdlVmFyaWFudHMuMS5pbWFnZVVSTDogXCJ1cmwgMlwiXG4gKiBgYGBcbiAqXG4gKiB0aGlzIGZ1bmN0aW9uIGZvciBwcm9wZXJ0eTogYEl0ZW0uMC5pbWFnZVZhcmlhbnRzYCBzaG91bGQgcmV0dXJuIGFycmF5IHdpdGggMiBpdGVtcy4gV2hlcmUgZm9yXG4gKiBwcm9wZXJ0eSBgSXRlbWAgYXJyYXkgd2l0aCBvbmUgZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7UHJvcGVydHlKU09OfSBwcm9wZXJ0eVxuICogQHBhcmFtIHtSZWNvcmRKU09OfSByZWNvcmRcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBjb252ZXJ0UGFyYW1zVG9BcnJheUl0ZW1zID0gKHByb3BlcnR5OiBQcm9wZXJ0eUpTT04sIHJlY29yZDogUmVjb3JkSlNPTik6IEFycmF5PHN0cmluZz4gPT4ge1xuICBjb25zdCB0ZW1wTmFtZSA9ICdhcnJheUZpZWxkJ1xuICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYF4ke3Byb3BlcnR5Lm5hbWV9YClcbiAgLyoqXG4gICAqIGluIHRoaXMgc3RlcCB3ZSBmaWx0ZXIga2V5cyB3aGljaCBzdGFydHMgd2l0aCByZWdleCB0aGUgc2FtZSBhcyBuYW1lLiBTbyBsZXQgc2F5XG4gICAqIHByb3BlcnR5IG5hbWUgaXM6IEl0ZW0uMC5pbWFnZVZhcmlhbnRzIGFuZCB0aGUgcmVjb3JkLnBhcmFtcyBpczpcbiAgICoge1xuICAgKiAgJ2FueU90aGVyS2V5JzogJ3ZhbHVlJ1xuICAgKiAgJ0l0ZW0uMC5pbWFnZVZhcmlhbnRzLjAuZGF0ZUNyZWF0ZWQnOiAnMjAxOS0wOS0xOVQxMDowMDowMC4wMDBaJyxcbiAgICogICdJdGVtLjAuaW1hZ2VWYXJpYW50cy4wLmltYWdlVVJMJzogJ3VybCB0byBoZWxwJ1xuICAgKiB9XG4gICAqXG4gICAqIHNvIGtleXMgd2lsbCBiZSBgSXRlbS4wLmltYWdlVmFyaWFudHMuMC5kYXRlQ3JlYXRlZGAgYW5kIGBJdGVtLjAuaW1hZ2VWYXJpYW50cy4wLmltYWdlVVJMYFxuICAgKi9cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHJlY29yZC5wYXJhbXMpLmZpbHRlcihrZXkgPT4ga2V5Lm1hdGNoKHJlZ2V4KSlcblxuICAvKipcbiAgICogTmV4dCwgd2UgY3JlYXRlIG5ldyBvYmplY3Qgd2l0aCBvbmx5IHRob3NlIGtleXMuIEJ1dCB3ZSBoYXZlIHRvIHJlbmFtZSB0aGUgcmVnZXggcGFydFxuICAgKiBiZWNhdXNlIGl0IGNvdWxkIGhhcyBkb3RzICh0YWtlIGEgbG9vayBhdCBjb25zdCB0ZW1wTmFtZSA9ICdhcnJheUZpZWxkJyBvbiB0aGUgdG9wKS5cbiAgICogSWYgd2UgZGlkbid0IGRvIHRoaXMgLSB0aGVuIHVuZmxhdHRlbiBmdW5jdGlvbiB3b3VsZG4ndCB3b3JrLlxuICAgKlxuICAgKiBzbyBpbiBvdXIgZXhhbXBsZSBvYmogaXMgbm90OiB7XG4gICAqICAnSXRlbS4wLmltYWdlVmFyaWFudHMuMC5kYXRlQ3JlYXRlZCc6ICcyMDE5LTA5LTE5VDEwOjAwOjAwLjAwMFonLFxuICAgKiAgJ0l0ZW0uMC5pbWFnZVZhcmlhbnRzLjAuaW1hZ2VVUkwnOiAndXJsIHRvIGhlbHAnXG4gICAqIH1cbiAgICpcbiAgICogYnV0OiB7XG4gICAqICAnYXJyYXlGaWVsZC4wLmRhdGVDcmVhdGVkJzogJzIwMTktMDktMTlUMTA6MDA6MDAuMDAwWicsXG4gICAqICAnYXJyYXlGaWVsZC4wLmltYWdlVVJMJzogJ3VybCB0byBoZWxwJ1xuICAgKiB9XG4gICAqL1xuICBjb25zdCBvYmogPSBrZXlzLnJlZHVjZSgobWVtbywga2V5KSA9PiAoe1xuICAgIC4uLm1lbW8sXG4gICAgW2tleS5yZXBsYWNlKHJlZ2V4LCB0ZW1wTmFtZSldOiByZWNvcmQucGFyYW1zW2tleV0sXG4gIH0pLCB7fSlcblxuICAvKipcbiAgICogSW4gdGhlIGxhc3Qgc3RlcCB3ZSB1bmZsYXR0ZW4gdGhlIG9iamVjdCBhbmQgcmV0dXJuICd0ZW1wTmFtZScgcHJvcGVydHk6XG4gICAqIHtcbiAgICogICdhcnJheUZpZWxkOiBbe1xuICAgKiAgICAgZGF0ZUNyZWF0ZWQnOiAnMjAxOS0wOS0xOVQxMDowMDowMC4wMDBaJyxcbiAgICogICAgICdhcnJheUZpZWxkLjAuaW1hZ2VVUkwnOiAndXJsIHRvIGhlbHAnLFxuICAgKiAgIH1dLFxuICAgKiB9WydhcnJheUZpZWxkJ11cbiAgICovXG4gIGNvbnN0IHVuZmxhdHRlbiA9IGZsYXQudW5mbGF0dGVuKG9iaikgYXMgQXJyYXk8c3RyaW5nPlxuICByZXR1cm4gdW5mbGF0dGVuW3RlbXBOYW1lXSB8fCBbXVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb252ZXJ0UGFyYW1zVG9BcnJheUl0ZW1zXG4iLCJpbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnZmxhdCdcblxuaW1wb3J0IFJlY29yZEpTT04gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3JlY29yZC1qc29uLmludGVyZmFjZSdcblxuLyoqXG4gKiBmb3IgZ2l2ZW4gcGFyYW1zOlxuICpcbiAqIGV4YW1wbGU6XG4gKiBgYGBcbiAqIGFub3RoZXJJdGVtOiAndmFsdWUnXG4gKiBJdGVtLjAuaW1hZ2VWYXJpYW50cy4wLmRhdGVDcmVhdGVkOiBcIjIwMTktMDktMTlUMTA6MDA6MDAuMDAwWlwiXG4gKiBJdGVtLjAuaW1hZ2VWYXJpYW50cy4wLmltYWdlVVJMOiBcInVybCB0byBoZWxwXCJcbiAqIEl0ZW0uMC5pbWFnZVZhcmlhbnRzLjAuaXNBcHByb3ZlZDogdHJ1ZVxuICogSXRlbS4wLmltYWdlVmFyaWFudHMuMC5pc0RlbGV0ZWQ6IGZhbHNlXG4gKiBJdGVtLjAuaW1hZ2VWYXJpYW50cy4xLmRhdGVDcmVhdGVkOiBcIjIwMTktMDktMTlUMTk6MTA6MzQuOTE5WlwiXG4gKiBJdGVtLjAuaW1hZ2VWYXJpYW50cy4xLmltYWdlVVJMOiBcInVybCAyXCJcbiAqIGBgYFxuICpcbiAqIGFuZCBnaXZlbiBwcm9wZXJ0eVBhdGgsIGV4YW1wbGU6IGBJdGVtLjAuaW1hZ2VWYXJpYW50c2BcbiAqIGFuZCBuZXcgYXJyYXksIGV4YW1wbGU6IFt7XG4gKiAgIGRhdGVDcmVhdGVkOiBcIjIwMTktMDktMTlUMTk6MTA6MzQuOTE5WlwiXG4gKiAgIGltYWdlVVJMOiBcInVybCAyXCJcbiAqIH1dXG4gKlxuICogcmV0dXJuczpcbiAqIGBgYFxuICogYW5vdGhlckl0ZW06ICd2YWx1ZSdcbiAqIEl0ZW0uMC5pbWFnZVZhcmlhbnRzLjEuZGF0ZUNyZWF0ZWQ6IFwiMjAxOS0wOS0xOVQxOToxMDozNC45MTlaXCJcbiAqIEl0ZW0uMC5pbWFnZVZhcmlhbnRzLjEuaW1hZ2VVUkw6IFwidXJsIDJcIlxuICogYGBgXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlUGFyYW1zQXJyYXkoXG4gIHBhcmFtczogUmVjb3JkSlNPTlsncGFyYW1zJ10sXG4gIHByb3BlcnR5UGF0aDogc3RyaW5nLFxuICBhcnJheTogQXJyYXk8YW55Pixcbik6IFJlY29yZEpTT05bJ3BhcmFtcyddIHtcbiAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGBeJHtwcm9wZXJ0eVBhdGh9YClcbiAgY29uc3QgZmlsdGVyZWRQYXJhbXMgPSBPYmplY3QuZW50cmllcyhwYXJhbXMpXG4gICAgLmZpbHRlcigoW2tleV0pID0+ICFrZXkubWF0Y2gocmVnZXgpKVxuICAgIC5yZWR1Y2UoKG1lbW8sIFtrZXksIHZhbHVlXSkgPT4gKHtcbiAgICAgIC4uLm1lbW8sXG4gICAgICBba2V5XTogdmFsdWUsXG4gICAgfSksIHt9KVxuXG4gIHJldHVybiBmbGF0dGVuKHtcbiAgICAuLi5maWx0ZXJlZFBhcmFtcyxcbiAgICBbcHJvcGVydHlQYXRoXTogYXJyYXksXG4gIH0pXG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlLCBNb3VzZUV2ZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBmbGF0dGVuLCB1bmZsYXR0ZW4gfSBmcm9tICdmbGF0J1xuXG5pbXBvcnQgUHJvcGVydHlJbkVkaXQgZnJvbSAnLi4vLi4vdWkvcHJvcGVydHktaW4tZWRpdCdcbmltcG9ydCBDb2x1bW4gZnJvbSAnLi4vLi4vdWkvY29sdW1uJ1xuaW1wb3J0IENvbHVtbnMgZnJvbSAnLi4vLi4vdWkvY29sdW1ucydcbmltcG9ydCBjb252ZXJ0UGFyYW1zVG9BcnJheUl0ZW1zIGZyb20gJy4vY29udmVydC1wYXJhbXMtdG8tYXJyYXktaXRlbXMnXG5pbXBvcnQgU3R5bGVkU2VjdGlvbiBmcm9tICcuLi8uLi91aS9zdHlsZWQtc2VjdGlvbidcbmltcG9ydCBQcm9wZXJ0eUpTT04gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Byb3BlcnR5LWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IFJlY29yZEpTT04gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3JlY29yZC1qc29uLmludGVyZmFjZSdcbmltcG9ydCB7IFN0eWxlZEJ1dHRvbiB9IGZyb20gJy4uLy4uL3VpJ1xuaW1wb3J0IHVwZGF0ZVBhcmFtc0FycmF5IGZyb20gJy4vdXBkYXRlLXBhcmFtcy1hcnJheSdcblxuY29uc3Qgbm9ybWFsaXplUGFyYW1zID0gKHBhcmFtczogUmVjb3JkSlNPTlsncGFyYW1zJ10pOiBSZWNvcmRKU09OWydwYXJhbXMnXSA9PiAoXG4gIGZsYXR0ZW48c3RyaW5nLCBhbnk+KHVuZmxhdHRlbihwYXJhbXMsIHsgb3ZlcndyaXRlOiB0cnVlIH0pKVxuKVxuXG50eXBlIFByb3BzID0ge1xuICBwcm9wZXJ0eTogUHJvcGVydHlKU09OO1xuICByZWNvcmQ6IFJlY29yZEpTT047XG4gIG9uQ2hhbmdlOiAocmVjb3JkOiBSZWNvcmRKU09OKSA9PiBhbnk7XG4gIEl0ZW1Db21wb25lbnQ6IHR5cGVvZiBSZWFjdC5Db21wb25lbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLmFkZE5ldyA9IHRoaXMuYWRkTmV3LmJpbmQodGhpcylcbiAgfVxuXG4gIGFkZE5ldyhldmVudDogTW91c2VFdmVudCk6IGZhbHNlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQsIG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgaXRlbXMgPSBjb252ZXJ0UGFyYW1zVG9BcnJheUl0ZW1zKHByb3BlcnR5LCByZWNvcmQpXG4gICAgY29uc3QgbmV3UmVjb3JkID0geyAuLi5yZWNvcmQgfVxuICAgIG5ld1JlY29yZC5wYXJhbXMgPSBub3JtYWxpemVQYXJhbXMoe1xuICAgICAgLi4ubmV3UmVjb3JkLnBhcmFtcywgLy8gb3RoZXJ3aXNlIHlhcm4gdHlwZXMgaXMgbm90IHdvcmtpbmdcbiAgICAgIFtwcm9wZXJ0eS5uYW1lXTogW1xuICAgICAgICAuLi5pdGVtcyxcbiAgICAgICAgcHJvcGVydHkuc3ViUHJvcGVydGllcy5sZW5ndGggPyB7fSA6ICcnLFxuICAgICAgXSxcbiAgICB9KVxuICAgIG9uQ2hhbmdlKG5ld1JlY29yZClcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZW1vdmVJdGVtKGksIGV2ZW50OiBNb3VzZUV2ZW50KTogZmFsc2Uge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCwgb25DaGFuZ2UgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBpdGVtcyA9IGNvbnZlcnRQYXJhbXNUb0FycmF5SXRlbXMocHJvcGVydHksIHJlY29yZClcbiAgICBjb25zdCBuZXdJdGVtcyA9IFsuLi5pdGVtc11cbiAgICBuZXdJdGVtcy5zcGxpY2UoaSwgMSlcbiAgICBjb25zdCBuZXdSZWNvcmQgPSB7IC4uLnJlY29yZCB9XG5cbiAgICBuZXdSZWNvcmQucGFyYW1zID0gdXBkYXRlUGFyYW1zQXJyYXkoXG4gICAgICBuZXdSZWNvcmQucGFyYW1zLCBwcm9wZXJ0eS5uYW1lLCBuZXdJdGVtcyxcbiAgICApXG5cbiAgICBvbkNoYW5nZShuZXdSZWNvcmQpXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmVuZGVySXRlbShpdGVtLCBpKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IEl0ZW1Db21wb25lbnQsIHByb3BlcnR5IH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuIChcbiAgICAgIDxDb2x1bW5zIGtleT17aX0+XG4gICAgICAgIDxDb2x1bW4gd2lkdGg9ezEwfT5cbiAgICAgICAgICA8SXRlbUNvbXBvbmVudFxuICAgICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICBwcm9wZXJ0eT17e1xuICAgICAgICAgICAgICAuLi5wcm9wZXJ0eSxcbiAgICAgICAgICAgICAgbmFtZTogYCR7cHJvcGVydHkubmFtZX0uJHtpfWAsXG4gICAgICAgICAgICAgIGxhYmVsOiBgWyR7aSArIDF9XWAsXG4gICAgICAgICAgICAgIGlzQXJyYXk6IGZhbHNlLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0NvbHVtbj5cbiAgICAgICAgPENvbHVtbiB3aWR0aD17Mn0+XG4gICAgICAgICAgPFN0eWxlZEJ1dHRvblxuICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luVG9wOiAyNSB9fVxuICAgICAgICAgICAgb25DbGljaz17KGV2ZW50KTogZmFsc2UgPT4gdGhpcy5yZW1vdmVJdGVtKGksIGV2ZW50KX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBSZW1vdmVcbiAgICAgICAgICA8L1N0eWxlZEJ1dHRvbj5cbiAgICAgICAgPC9Db2x1bW4+XG4gICAgICA8L0NvbHVtbnM+XG4gICAgKVxuICB9XG5cbiAgcmVuZGVySW5wdXQoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBpdGVtcyA9IGNvbnZlcnRQYXJhbXNUb0FycmF5SXRlbXMocHJvcGVydHksIHJlY29yZClcbiAgICByZXR1cm4gKFxuICAgICAgPFN0eWxlZFNlY3Rpb24gc3R5bGU9e3sgbWFyZ2luVG9wOiAyMCB9fT5cbiAgICAgICAge2l0ZW1zLm1hcCgoaXRlbSwgaSkgPT4gdGhpcy5yZW5kZXJJdGVtKGl0ZW0sIGkpKX1cbiAgICAgICAgPHA+XG4gICAgICAgICAgPFN0eWxlZEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmFkZE5ld30+XG4gICAgICAgICAgICBBZGQgbmV3IGl0ZW1cbiAgICAgICAgICA8L1N0eWxlZEJ1dHRvbj5cbiAgICAgICAgPC9wPlxuICAgICAgPC9TdHlsZWRTZWN0aW9uPlxuICAgIClcbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IGVycm9yID0gcmVjb3JkLmVycm9ycyAmJiByZWNvcmQuZXJyb3JzW3Byb3BlcnR5Lm5hbWVdXG4gICAgcmV0dXJuIChcbiAgICAgIDxQcm9wZXJ0eUluRWRpdCBwcm9wZXJ0eT17cHJvcGVydHl9IGVycm9yPXtlcnJvcn0+XG4gICAgICAgIHt0aGlzLnJlbmRlcklucHV0KCl9XG4gICAgICA8L1Byb3BlcnR5SW5FZGl0PlxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Q2hpbGQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0ICogYXMgZmxhdCBmcm9tICdmbGF0J1xuXG5pbXBvcnQgVmlld0hlbHBlcnMgZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC91dGlscy92aWV3LWhlbHBlcnMnXG5pbXBvcnQgUHJvcGVydHlKU09OIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9wcm9wZXJ0eS1qc29uLmludGVyZmFjZSdcbmltcG9ydCBSZWNvcmRKU09OIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9yZWNvcmQtanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgUmVzb3VyY2VKU09OIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9yZXNvdXJjZS1qc29uLmludGVyZmFjZSdcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcHJvcGVydHk6IFByb3BlcnR5SlNPTjtcbiAgcmVjb3JkOiBSZWNvcmRKU09OO1xuICByZXNvdXJjZTogUmVzb3VyY2VKU09OO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxQcm9wcz4ge1xuICByZW5kZXIoKTogUmVhY3RDaGlsZCB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkLCByZXNvdXJjZSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHNob3dBY3Rpb24gPSByZWNvcmQucmVjb3JkQWN0aW9ucy5maW5kKGEgPT4gYS5uYW1lID09PSAnc2hvdycpXG4gICAgY29uc3QgdW5mbGF0dGVuID0gZmxhdC51bmZsYXR0ZW4ocmVjb3JkLnBhcmFtcykgYXMgUmVjb3JkPHN0cmluZywgYW55PlxuICAgIGNvbnN0IHZhbHVlcyA9IHVuZmxhdHRlbltwcm9wZXJ0eS5uYW1lXSB8fCBbXVxuXG4gICAgaWYgKHJlc291cmNlLnRpdGxlUHJvcGVydHkubmFtZSA9PT0gcHJvcGVydHkubmFtZSAmJiBzaG93QWN0aW9uKSB7XG4gICAgICBjb25zdCBoID0gbmV3IFZpZXdIZWxwZXJzKClcbiAgICAgIGNvbnN0IGhyZWYgPSBoLnJlY29yZEFjdGlvblVybCh7XG4gICAgICAgIHJlc291cmNlSWQ6IHJlc291cmNlLmlkLCByZWNvcmRJZDogcmVjb3JkLmlkLCBhY3Rpb25OYW1lOiAnc2hvdycsXG4gICAgICB9KVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPExpbmsgdG89e2hyZWZ9PntgbGVuZ3RoOiAke3ZhbHVlcy5sZW5ndGh9YH08L0xpbms+XG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxzcGFuPntgbGVuZ3RoOiAke3ZhbHVlcy5sZW5ndGh9YH08L3NwYW4+XG4gICAgKVxuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBQcm9wZXJ0eUluU2hvdyBmcm9tICcuLi8uLi91aS9wcm9wZXJ0eS1pbi1zaG93J1xuaW1wb3J0IGNvbnZlcnRQYXJhbXNUb0FycmF5SXRlbXMgZnJvbSAnLi9jb252ZXJ0LXBhcmFtcy10by1hcnJheS1pdGVtcydcbmltcG9ydCBTdHlsZWRTZWN0aW9uIGZyb20gJy4uLy4uL3VpL3N0eWxlZC1zZWN0aW9uJ1xuaW1wb3J0IFByb3BlcnR5SlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcHJvcGVydHktanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgUmVjb3JkSlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVjb3JkLWpzb24uaW50ZXJmYWNlJ1xuXG50eXBlIFByb3BzID0ge1xuICBwcm9wZXJ0eTogUHJvcGVydHlKU09OO1xuICByZWNvcmQ6IFJlY29yZEpTT047XG4gIEl0ZW1Db21wb25lbnQ6IHR5cGVvZiBSZWFjdC5Db21wb25lbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNob3cgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCwgSXRlbUNvbXBvbmVudCB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3QgaXRlbXMgPSBjb252ZXJ0UGFyYW1zVG9BcnJheUl0ZW1zKHByb3BlcnR5LCByZWNvcmQpXG5cbiAgICByZXR1cm4gKFxuICAgICAgPFByb3BlcnR5SW5TaG93IHByb3BlcnR5PXtwcm9wZXJ0eX0+XG4gICAgICAgIDxTdHlsZWRTZWN0aW9uPlxuICAgICAgICAgIHtpdGVtcy5tYXAoKGl0ZW0sIGkpID0+IChcbiAgICAgICAgICAgIDxJdGVtQ29tcG9uZW50XG4gICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgICAgcHJvcGVydHk9e3tcbiAgICAgICAgICAgICAgICAuLi5wcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICBuYW1lOiBgJHtwcm9wZXJ0eS5uYW1lfS4ke2l9YCxcbiAgICAgICAgICAgICAgICBsYWJlbDogYFske2kgKyAxfV1gLFxuICAgICAgICAgICAgICAgIGlzQXJyYXk6IGZhbHNlLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9TdHlsZWRTZWN0aW9uPlxuICAgICAgPC9Qcm9wZXJ0eUluU2hvdz5cbiAgICApXG4gIH1cbn1cbiIsIi8vIGltcG9ydCBTaG93IGZyb20gJy4vc2hvdydcbmltcG9ydCBFZGl0IGZyb20gJy4vZWRpdCdcbmltcG9ydCBMaXN0IGZyb20gJy4vbGlzdCdcbmltcG9ydCBTaG93IGZyb20gJy4vc2hvdydcblxuZXhwb3J0IHtcbiAgU2hvdyBhcyBzaG93LFxuICBFZGl0IGFzIGVkaXQsXG4gIExpc3QgYXMgbGlzdCxcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IFByb3BlcnR5SW5FZGl0IGZyb20gJy4uLy4uL3VpL3Byb3BlcnR5LWluLWVkaXQnXG5pbXBvcnQgU3R5bGVkU2VjdGlvbiBmcm9tICcuLi8uLi91aS9zdHlsZWQtc2VjdGlvbidcbmltcG9ydCB7IEVkaXRQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcblxudHlwZSBQcm9wcyA9IHtcbiAgSXRlbUNvbXBvbmVudDogdHlwZW9mIFJlYWN0LkNvbXBvbmVudDtcbn1cblxuY29uc3QgRWRpdDogUmVhY3QuRkM8UHJvcHMgJiBFZGl0UHJvcGVydHlQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkLCBJdGVtQ29tcG9uZW50IH0gPSBwcm9wc1xuICBjb25zdCBlcnJvciA9IHJlY29yZC5lcnJvcnMgJiYgcmVjb3JkLmVycm9yc1twcm9wZXJ0eS5uYW1lXVxuICByZXR1cm4gKFxuICAgIDxQcm9wZXJ0eUluRWRpdCBwcm9wZXJ0eT17cHJvcGVydHl9IGVycm9yPXtlcnJvcn0+XG4gICAgICA8U3R5bGVkU2VjdGlvbj5cbiAgICAgICAge3Byb3BlcnR5LnN1YlByb3BlcnRpZXMubWFwKHN1YlByb3BlcnR5ID0+IChcbiAgICAgICAgICA8SXRlbUNvbXBvbmVudFxuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAga2V5PXtzdWJQcm9wZXJ0eS5uYW1lfVxuICAgICAgICAgICAgcHJvcGVydHk9e3sgLi4uc3ViUHJvcGVydHksIG5hbWU6IGAke3Byb3BlcnR5Lm5hbWV9LiR7c3ViUHJvcGVydHkubmFtZX1gIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICA8L1N0eWxlZFNlY3Rpb24+XG4gICAgPC9Qcm9wZXJ0eUluRWRpdD5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBFZGl0XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCBQcm9wZXJ0eUluU2hvdyBmcm9tICcuLi8uLi91aS9wcm9wZXJ0eS1pbi1zaG93J1xuaW1wb3J0IFN0eWxlZFNlY3Rpb24gZnJvbSAnLi4vLi4vdWkvc3R5bGVkLXNlY3Rpb24nXG5pbXBvcnQgeyBCYXNlUHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIEl0ZW1Db21wb25lbnQ6IHR5cGVvZiBSZWFjdC5Db21wb25lbnQ7XG59XG5cbmNvbnN0IFNob3c6IFJlYWN0LkZDPFByb3BzICYgQmFzZVByb3BlcnR5UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcHJvcGVydHksIEl0ZW1Db21wb25lbnQgfSA9IHByb3BzXG4gIHJldHVybiAoXG4gICAgPFByb3BlcnR5SW5TaG93IHByb3BlcnR5PXtwcm9wZXJ0eX0+XG4gICAgICA8U3R5bGVkU2VjdGlvbj5cbiAgICAgICAge3Byb3BlcnR5LnN1YlByb3BlcnRpZXMubWFwKHN1YlByb3BlcnR5ID0+IChcbiAgICAgICAgICA8SXRlbUNvbXBvbmVudFxuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAga2V5PXtzdWJQcm9wZXJ0eS5uYW1lfVxuICAgICAgICAgICAgcHJvcGVydHk9e3sgLi4uc3ViUHJvcGVydHksIG5hbWU6IGAke3Byb3BlcnR5Lm5hbWV9LiR7c3ViUHJvcGVydHkubmFtZX1gIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICA8L1N0eWxlZFNlY3Rpb24+XG4gICAgPC9Qcm9wZXJ0eUluU2hvdz5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaG93XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuaW1wb3J0IFZpZXdIZWxwZXJzIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzJ1xuaW1wb3J0IExhYmVsIGZyb20gJy4uLy4uL3VpL2xhYmVsJ1xuaW1wb3J0IHsgRWRpdFByb3BlcnR5UHJvcHMgfSBmcm9tICcuLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBJdGVtQ29tcG9uZW50OiB0eXBlb2YgUmVhY3QuQ29tcG9uZW50O1xufVxuXG4vLyBUT0RPIGRlZmluZSBJdGVtQ29tcG9uZW50IGludGVyZmFjZVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxQcm9wcyAmIEVkaXRQcm9wZXJ0eVByb3BzPiB7XG4gIHJlbmRlckl0ZW1zKCk6IFJlYWN0LlJlYWN0Q2hpbGQge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIEl0ZW1Db21wb25lbnQgfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKFxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICB7cHJvcGVydHkuc3ViUHJvcGVydGllcy5tYXAoc3ViUHJvcGVydHkgPT4gKFxuICAgICAgICAgIDxkaXYga2V5PXtzdWJQcm9wZXJ0eS5uYW1lfT5cbiAgICAgICAgICAgIDxMYWJlbCBzdHlsZT17eyBkaXNwbGF5OiAnaW5saW5lJyB9fT57YCR7c3ViUHJvcGVydHkubGFiZWx9OiBgfTwvTGFiZWw+XG4gICAgICAgICAgICA8SXRlbUNvbXBvbmVudFxuICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgICAgICAgICAga2V5PXtzdWJQcm9wZXJ0eS5uYW1lfVxuICAgICAgICAgICAgICBwcm9wZXJ0eT17eyAuLi5zdWJQcm9wZXJ0eSwgbmFtZTogYCR7cHJvcGVydHkubmFtZX0uJHtzdWJQcm9wZXJ0eS5uYW1lfWAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApXG4gIH1cblxuICByZW5kZXIoKTogUmVhY3QuUmVhY3RDaGlsZCB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkLCByZXNvdXJjZSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHNob3dBY3Rpb24gPSByZWNvcmQucmVjb3JkQWN0aW9ucy5maW5kKGEgPT4gYS5uYW1lID09PSAnc2hvdycpXG5cbiAgICBpZiAocmVzb3VyY2UudGl0bGVQcm9wZXJ0eS5uYW1lID09PSBwcm9wZXJ0eS5uYW1lICYmIHNob3dBY3Rpb24pIHtcbiAgICAgIGNvbnN0IGggPSBuZXcgVmlld0hlbHBlcnMoKVxuICAgICAgY29uc3QgaHJlZiA9IGgucmVjb3JkQWN0aW9uVXJsKHtcbiAgICAgICAgcmVzb3VyY2VJZDogcmVzb3VyY2UuaWQsIHJlY29yZElkOiByZWNvcmQuaWQsIGFjdGlvbk5hbWU6ICdzaG93JyxcbiAgICAgIH0pXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TGluayB0bz17aHJlZn0+e3RoaXMucmVuZGVySXRlbXMoKX08L0xpbms+XG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlbmRlckl0ZW1zKClcbiAgfVxufVxuIiwiLy8gaW1wb3J0IFNob3cgZnJvbSAnLi9zaG93J1xuaW1wb3J0IEVkaXQgZnJvbSAnLi9lZGl0J1xuaW1wb3J0IFNob3cgZnJvbSAnLi9zaG93J1xuaW1wb3J0IExpc3QgZnJvbSAnLi9saXN0J1xuXG5leHBvcnQge1xuICBTaG93IGFzIHNob3csXG4gIEVkaXQgYXMgZWRpdCxcbiAgTGlzdCBhcyBsaXN0LFxufVxuIiwiXG5pbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBQcm9wZXJ0eUluU2hvdyBmcm9tICcuLi8uLi91aS9wcm9wZXJ0eS1pbi1zaG93J1xuaW1wb3J0IHsgU2hvd1Byb3BlcnR5UHJvcHMgfSBmcm9tICcuLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaG93IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxTaG93UHJvcGVydHlQcm9wcz4ge1xuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQgfSA9IHRoaXMucHJvcHNcblxuICAgIGNvbnN0IHZhbHVlID0gcmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5uYW1lXVxuXG4gICAgY29uc3QgY2xhc3NOYW1lID0gcHJvcGVydHkuYXZhaWxhYmxlVmFsdWVzID8gJ3RhZycgOiAnJ1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQcm9wZXJ0eUluU2hvdyBwcm9wZXJ0eT17cHJvcGVydHl9PlxuICAgICAgICB7dHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJyA/IChcbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+e3ZhbHVlfTwvc3Bhbj5cbiAgICAgICAgKSA6ICcnfVxuICAgICAgPC9Qcm9wZXJ0eUluU2hvdz5cbiAgICApXG4gIH1cbn1cbiIsImZ1bmN0aW9uIGFyZUlucHV0c0VxdWFsKG5ld0lucHV0cywgbGFzdElucHV0cykge1xuICAgIGlmIChuZXdJbnB1dHMubGVuZ3RoICE9PSBsYXN0SW5wdXRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3SW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChuZXdJbnB1dHNbaV0gIT09IGxhc3RJbnB1dHNbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWVtb2l6ZU9uZShyZXN1bHRGbiwgaXNFcXVhbCkge1xuICAgIGlmIChpc0VxdWFsID09PSB2b2lkIDApIHsgaXNFcXVhbCA9IGFyZUlucHV0c0VxdWFsOyB9XG4gICAgdmFyIGxhc3RUaGlzO1xuICAgIHZhciBsYXN0QXJncyA9IFtdO1xuICAgIHZhciBsYXN0UmVzdWx0O1xuICAgIHZhciBjYWxsZWRPbmNlID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gbWVtb2l6ZWQoKSB7XG4gICAgICAgIHZhciBuZXdBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBuZXdBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxlZE9uY2UgJiYgbGFzdFRoaXMgPT09IHRoaXMgJiYgaXNFcXVhbChuZXdBcmdzLCBsYXN0QXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGxhc3RSZXN1bHQgPSByZXN1bHRGbi5hcHBseSh0aGlzLCBuZXdBcmdzKTtcbiAgICAgICAgY2FsbGVkT25jZSA9IHRydWU7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdEFyZ3MgPSBuZXdBcmdzO1xuICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplT25lO1xuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgZm9udFdlaWdodDogMSxcbiAgbGluZUhlaWdodDogMSxcbiAgb3BhY2l0eTogMSxcbiAgb3JkZXI6IDEsXG4gIG9ycGhhbnM6IDEsXG4gIHRhYlNpemU6IDEsXG4gIHdpZG93czogMSxcbiAgekluZGV4OiAxLFxuICB6b29tOiAxLFxuICBXZWJraXRMaW5lQ2xhbXA6IDEsXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IDEsXG4gIGZsb29kT3BhY2l0eTogMSxcbiAgc3RvcE9wYWNpdHk6IDEsXG4gIHN0cm9rZURhc2hhcnJheTogMSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMSxcbiAgc3Ryb2tlT3BhY2l0eTogMSxcbiAgc3Ryb2tlV2lkdGg6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaXRsZXNzS2V5cztcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBtdXJtdXJoYXNoMiB2aWEgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzL2Jsb2IvbWFzdGVyL211cm11cmhhc2gyX2djLmpzXG5mdW5jdGlvbiBtdXJtdXJoYXNoMl8zMl9nYyhzdHIpIHtcbiAgdmFyIGwgPSBzdHIubGVuZ3RoLFxuICAgICAgaCA9IGwgXiBsLFxuICAgICAgaSA9IDAsXG4gICAgICBrO1xuXG4gIHdoaWxlIChsID49IDQpIHtcbiAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG4gICAgayA9IChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKChrID4+PiAxNikgKiAweDViZDFlOTk1ICYgMHhmZmZmKSA8PCAxNik7XG4gICAgayBePSBrID4+PiAyNDtcbiAgICBrID0gKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGsgPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcbiAgICBoID0gKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KSBeIGs7XG4gICAgbCAtPSA0O1xuICAgICsraTtcbiAgfVxuXG4gIHN3aXRjaCAobCkge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZikgPDwgODtcblxuICAgIGNhc2UgMTpcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgICAgaCA9IChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKChoID4+PiAxNikgKiAweDViZDFlOTk1ICYgMHhmZmZmKSA8PCAxNik7XG4gIH1cblxuICBoIF49IGggPj4+IDEzO1xuICBoID0gKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcbiAgaCBePSBoID4+PiAxNTtcbiAgcmV0dXJuIChoID4+PiAwKS50b1N0cmluZygzNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG11cm11cmhhc2gyXzMyX2djO1xuIiwiZnVuY3Rpb24gc3R5bGlzX21pbiAoVykge1xuICBmdW5jdGlvbiBNKGQsIGMsIGUsIGgsIGEpIHtcbiAgICBmb3IgKHZhciBtID0gMCwgYiA9IDAsIHYgPSAwLCBuID0gMCwgcSwgZywgeCA9IDAsIEsgPSAwLCBrLCB1ID0gayA9IHEgPSAwLCBsID0gMCwgciA9IDAsIEkgPSAwLCB0ID0gMCwgQiA9IGUubGVuZ3RoLCBKID0gQiAtIDEsIHksIGYgPSAnJywgcCA9ICcnLCBGID0gJycsIEcgPSAnJywgQzsgbCA8IEI7KSB7XG4gICAgICBnID0gZS5jaGFyQ29kZUF0KGwpO1xuICAgICAgbCA9PT0gSiAmJiAwICE9PSBiICsgbiArIHYgKyBtICYmICgwICE9PSBiICYmIChnID0gNDcgPT09IGIgPyAxMCA6IDQ3KSwgbiA9IHYgPSBtID0gMCwgQisrLCBKKyspO1xuXG4gICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICBpZiAobCA9PT0gSiAmJiAoMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKSwgMCA8IGYudHJpbSgpLmxlbmd0aCkpIHtcbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBmICs9IGUuY2hhckF0KGwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGcgPSA1OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgZiA9IGYudHJpbSgpO1xuICAgICAgICAgICAgcSA9IGYuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIGsgPSAxO1xuXG4gICAgICAgICAgICBmb3IgKHQgPSArK2w7IGwgPCBCOykge1xuICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICBrLS07XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh1ID0gbCArIDE7IHUgPCBKOyArK3UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmNoYXJDb2RlQXQodSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQyID09PSBnICYmIDQyID09PSBlLmNoYXJDb2RlQXQodSAtIDEpICYmIGwgKyAyICE9PSB1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQ3ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1O1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgZysrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgZm9yICg7IGwrKyA8IEogJiYgZS5jaGFyQ29kZUF0KGwpICE9PSBnOykge1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoMCA9PT0gaykgYnJlYWs7XG4gICAgICAgICAgICAgIGwrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgayA9IGUuc3Vic3RyaW5nKHQsIGwpO1xuICAgICAgICAgICAgMCA9PT0gcSAmJiAocSA9IChmID0gZi5yZXBsYWNlKGNhLCAnJykudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgICAgICAgICAgc3dpdGNoIChxKSB7XG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKTtcbiAgICAgICAgICAgICAgICBnID0gZi5jaGFyQ29kZUF0KDEpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgICAgICByID0gYztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBPO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGsgPSBNKGMsIHIsIGssIGcsIGEgKyAxKTtcbiAgICAgICAgICAgICAgICB0ID0gay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgMCA8IEEgJiYgKHIgPSBYKE8sIGYsIEkpLCBDID0gSCgzLCBrLCByLCBjLCBELCB6LCB0LCBnLCBhLCBoKSwgZiA9IHIuam9pbignJyksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAodCA9IChrID0gQy50cmltKCkpLmxlbmd0aCkgJiYgKGcgPSAwLCBrID0gJycpKTtcbiAgICAgICAgICAgICAgICBpZiAoMCA8IHQpIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZGEsIGVhKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgJ3snICsgayArICd9JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5yZXBsYWNlKGZhLCAnJDEgJDInKTtcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBrID0gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoJ0AnICsgaywgMykgPyAnQC13ZWJraXQtJyArIGsgKyAnQCcgKyBrIDogJ0AnICsgaztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgaywgMTEyID09PSBoICYmIChrID0gKHAgKz0gaywgJycpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgayA9ICcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgayA9IE0oYywgWChjLCBmLCBJKSwgaywgaCwgYSArIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGICs9IGs7XG4gICAgICAgICAgICBrID0gSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBmID0gKDAgPCByID8gZi5yZXBsYWNlKE4sICcnKSA6IGYpLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICgxIDwgKHQgPSBmLmxlbmd0aCkpIHN3aXRjaCAoMCA9PT0gdSAmJiAocSA9IGYuY2hhckNvZGVBdCgwKSwgNDUgPT09IHEgfHwgOTYgPCBxICYmIDEyMyA+IHEpICYmICh0ID0gKGYgPSBmLnJlcGxhY2UoJyAnLCAnOicpKS5sZW5ndGgpLCAwIDwgQSAmJiB2b2lkIDAgIT09IChDID0gSCgxLCBmLCBjLCBkLCBELCB6LCBwLmxlbmd0aCwgaCwgYSwgaCkpICYmIDAgPT09ICh0ID0gKGYgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZiA9ICdcXHgwMFxceDAwJyksIHEgPSBmLmNoYXJDb2RlQXQoMCksIGcgPSBmLmNoYXJDb2RlQXQoMSksIHEpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgaWYgKDEwNSA9PT0gZyB8fCA5OSA9PT0gZykge1xuICAgICAgICAgICAgICAgICAgRyArPSBmICsgZS5jaGFyQXQobCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICA1OCAhPT0gZi5jaGFyQ29kZUF0KHQgLSAxKSAmJiAocCArPSBQKGYsIHEsIGcsIGYuY2hhckNvZGVBdCgyKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgNDcgPT09IGIgPyBiID0gMCA6IDAgPT09IDEgKyBxICYmIDEwNyAhPT0gaCAmJiAwIDwgZi5sZW5ndGggJiYgKHIgPSAxLCBmICs9ICdcXHgwMCcpO1xuICAgICAgICAgIDAgPCBBICogWSAmJiBIKDAsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKTtcbiAgICAgICAgICB6ID0gMTtcbiAgICAgICAgICBEKys7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgaWYgKDAgPT09IGIgKyBuICsgdiArIG0pIHtcbiAgICAgICAgICAgIHorKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHorKztcbiAgICAgICAgICB5ID0gZS5jaGFyQXQobCk7XG5cbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgbSArIGIpIHN3aXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgIHkgPSAnJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIDMyICE9PSBnICYmICh5ID0gJyAnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFwwJztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXGYnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcdic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHIgPSBJID0gMSwgeSA9ICdcXGYnICsgeSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSArIEUgJiYgMCA8IHUpIHN3aXRjaCAobCAtIHUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAxMTIgPT09IHggJiYgNTggPT09IGUuY2hhckNvZGVBdChsIC0gMykgJiYgKEUgPSB4KTtcblxuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgIDExMSA9PT0gSyAmJiAoRSA9IEspO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHUgPSBsKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gJiYgKHIgPSAxLCB5ICs9ICdcXHInKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAwID09PSBiICYmIChuID0gbiA9PT0gZyA/IDAgOiAwID09PSBuID8gZyA6IG4pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0rKztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTM6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgdiAmJiBtLS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgdi0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBxKSBzd2l0Y2ggKDIgKiB4ICsgMyAqIEspIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgNTMzOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHYrKztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAwID09PSBiICsgdiArIG4gKyBtICsgdSArIGsgJiYgKGsgPSAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICBpZiAoISgwIDwgbiArIG0gKyB2KSkgc3dpdGNoIChiKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgc3dpdGNoICgyICogZyArIDMgKiBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjM1OlxuICAgICAgICAgICAgICAgICAgICAgIGIgPSA0NztcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgICAgICAgICAgICB0ID0gbCwgYiA9IDQyO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICA0NyA9PT0gZyAmJiA0MiA9PT0geCAmJiB0ICsgMiAhPT0gbCAmJiAoMzMgPT09IGUuY2hhckNvZGVBdCh0ICsgMikgJiYgKHAgKz0gZS5zdWJzdHJpbmcodCwgbCArIDEpKSwgeSA9ICcnLCBiID0gMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAwID09PSBiICYmIChmICs9IHkpO1xuICAgICAgfVxuXG4gICAgICBLID0geDtcbiAgICAgIHggPSBnO1xuICAgICAgbCsrO1xuICAgIH1cblxuICAgIHQgPSBwLmxlbmd0aDtcblxuICAgIGlmICgwIDwgdCkge1xuICAgICAgciA9IGM7XG4gICAgICBpZiAoMCA8IEEgJiYgKEMgPSBIKDIsIHAsIHIsIGQsIEQsIHosIHQsIGgsIGEsIGgpLCB2b2lkIDAgIT09IEMgJiYgMCA9PT0gKHAgPSBDKS5sZW5ndGgpKSByZXR1cm4gRyArIHAgKyBGO1xuICAgICAgcCA9IHIuam9pbignLCcpICsgJ3snICsgcCArICd9JztcblxuICAgICAgaWYgKDAgIT09IHcgKiBFKSB7XG4gICAgICAgIDIgIT09IHcgfHwgTChwLCAyKSB8fCAoRSA9IDApO1xuXG4gICAgICAgIHN3aXRjaCAoRSkge1xuICAgICAgICAgIGNhc2UgMTExOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShoYSwgJzotbW96LSQxJykgKyBwO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHAgPSBwLnJlcGxhY2UoUSwgJzo6LXdlYmtpdC1pbnB1dC0kMScpICsgcC5yZXBsYWNlKFEsICc6Oi1tb3otJDEnKSArIHAucmVwbGFjZShRLCAnOi1tcy1pbnB1dC0kMScpICsgcDtcbiAgICAgICAgfVxuXG4gICAgICAgIEUgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBHICsgcCArIEY7XG4gIH1cblxuICBmdW5jdGlvbiBYKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMudHJpbSgpLnNwbGl0KGlhKTtcbiAgICBjID0gaDtcbiAgICB2YXIgYSA9IGgubGVuZ3RoLFxuICAgICAgICBtID0gZC5sZW5ndGg7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdmFyIGIgPSAwO1xuXG4gICAgICAgIGZvciAoZCA9IDAgPT09IG0gPyAnJyA6IGRbMF0gKyAnICc7IGIgPCBhOyArK2IpIHtcbiAgICAgICAgICBjW2JdID0gWihkLCBjW2JdLCBlLCBtKS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIHYgPSBiID0gMDtcblxuICAgICAgICBmb3IgKGMgPSBbXTsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgbTsgKytuKSB7XG4gICAgICAgICAgICBjW3YrK10gPSBaKGRbbl0gKyAnICcsIGhbYl0sIGUsIG0pLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gWihkLCBjLCBlKSB7XG4gICAgdmFyIGggPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgMzMgPiBoICYmIChoID0gKGMgPSBjLnRyaW0oKSkuY2hhckNvZGVBdCgwKSk7XG5cbiAgICBzd2l0Y2ggKGgpIHtcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIHJldHVybiBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgY2FzZSA1ODpcbiAgICAgICAgcmV0dXJuIGQudHJpbSgpICsgYy5yZXBsYWNlKEYsICckMScgKyBkLnRyaW0oKSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICgwIDwgMSAqIGUgJiYgMCA8IGMuaW5kZXhPZignXFxmJykpIHJldHVybiBjLnJlcGxhY2UoRiwgKDU4ID09PSBkLmNoYXJDb2RlQXQoMCkgPyAnJyA6ICckMScpICsgZC50cmltKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBkICsgYztcbiAgfVxuXG4gIGZ1bmN0aW9uIFAoZCwgYywgZSwgaCkge1xuICAgIHZhciBhID0gZCArICc7JyxcbiAgICAgICAgbSA9IDIgKiBjICsgMyAqIGUgKyA0ICogaDtcblxuICAgIGlmICg5NDQgPT09IG0pIHtcbiAgICAgIGQgPSBhLmluZGV4T2YoJzonLCA5KSArIDE7XG4gICAgICB2YXIgYiA9IGEuc3Vic3RyaW5nKGQsIGEubGVuZ3RoIC0gMSkudHJpbSgpO1xuICAgICAgYiA9IGEuc3Vic3RyaW5nKDAsIGQpLnRyaW0oKSArIGIgKyAnOyc7XG4gICAgICByZXR1cm4gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoYiwgMSkgPyAnLXdlYmtpdC0nICsgYiArIGIgOiBiO1xuICAgIH1cblxuICAgIGlmICgwID09PSB3IHx8IDIgPT09IHcgJiYgIUwoYSwgMSkpIHJldHVybiBhO1xuXG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIDEwMTU6XG4gICAgICAgIHJldHVybiA5NyA9PT0gYS5jaGFyQ29kZUF0KDEwKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTUxOlxuICAgICAgICByZXR1cm4gMTE2ID09PSBhLmNoYXJDb2RlQXQoMykgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk2MzpcbiAgICAgICAgcmV0dXJuIDExMCA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSAxMDA5OlxuICAgICAgICBpZiAoMTAwICE9PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2OTpcbiAgICAgIGNhc2UgOTQyOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk3ODpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDEwMTk6XG4gICAgICBjYXNlIDk4MzpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA4ODM6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDgpKSByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuICAgICAgICBpZiAoMCA8IGEuaW5kZXhPZignaW1hZ2Utc2V0KCcsIDExKSkgcmV0dXJuIGEucmVwbGFjZShqYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTMyOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg0KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNSkpIHtcbiAgICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC1ib3gtJyArIGEucmVwbGFjZSgnLWdyb3cnLCAnJykgKyAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnZ3JvdycsICdwb3NpdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIGE7XG5cbiAgICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdiYXNpcycsICdwcmVmZXJyZWQtc2l6ZScpICsgYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA5NjQ6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAyMzpcbiAgICAgICAgaWYgKDk5ICE9PSBhLmNoYXJDb2RlQXQoOCkpIGJyZWFrO1xuICAgICAgICBiID0gYS5zdWJzdHJpbmcoYS5pbmRleE9mKCc6JywgMTUpKS5yZXBsYWNlKCdmbGV4LScsICcnKS5yZXBsYWNlKCdzcGFjZS1iZXR3ZWVuJywgJ2p1c3RpZnknKTtcbiAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC1wYWNrJyArIGIgKyAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1wYWNrJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMDU6XG4gICAgICAgIHJldHVybiBrYS50ZXN0KGEpID8gYS5yZXBsYWNlKGFhLCAnOi13ZWJraXQtJykgKyBhLnJlcGxhY2UoYWEsICc6LW1vei0nKSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDFlMzpcbiAgICAgICAgYiA9IGEuc3Vic3RyaW5nKDEzKS50cmltKCk7XG4gICAgICAgIGMgPSBiLmluZGV4T2YoJy0nKSArIDE7XG5cbiAgICAgICAgc3dpdGNoIChiLmNoYXJDb2RlQXQoMCkgKyBiLmNoYXJDb2RlQXQoYykpIHtcbiAgICAgICAgICBjYXNlIDIyNjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ3RiJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjMyOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGItcmwnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICdscicpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBiICsgYTtcblxuICAgICAgY2FzZSAxMDE3OlxuICAgICAgICBpZiAoLTEgPT09IGEuaW5kZXhPZignc3RpY2t5JywgOSkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3NTpcbiAgICAgICAgYyA9IChhID0gZCkubGVuZ3RoIC0gMTA7XG4gICAgICAgIGIgPSAoMzMgPT09IGEuY2hhckNvZGVBdChjKSA/IGEuc3Vic3RyaW5nKDAsIGMpIDogYSkuc3Vic3RyaW5nKGQuaW5kZXhPZignOicsIDcpICsgMSkudHJpbSgpO1xuXG4gICAgICAgIHN3aXRjaCAobSA9IGIuY2hhckNvZGVBdCgwKSArIChiLmNoYXJDb2RlQXQoNykgfCAwKSkge1xuICAgICAgICAgIGNhc2UgMjAzOlxuICAgICAgICAgICAgaWYgKDExMSA+IGIuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgJzsnICsgYTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMDc6XG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyAoMTAyIDwgbSA/ICdpbmxpbmUtJyA6ICcnKSArICdib3gnKSArICc7JyArIGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhLnJlcGxhY2UoYiwgJy1tcy0nICsgYiArICdib3gnKSArICc7JyArIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYSArICc7JztcblxuICAgICAgY2FzZSA5Mzg6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDUpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg2KSkge1xuICAgICAgICAgIGNhc2UgMTA1OlxuICAgICAgICAgICAgcmV0dXJuIGIgPSBhLnJlcGxhY2UoJy1pdGVtcycsICcnKSwgJy13ZWJraXQtJyArIGEgKyAnLXdlYmtpdC1ib3gtJyArIGIgKyAnLW1zLWZsZXgtJyArIGIgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtaXRlbS0nICsgYS5yZXBsYWNlKGJhLCAnJykgKyBhO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1saW5lLXBhY2snICsgYS5yZXBsYWNlKCdhbGlnbi1jb250ZW50JywgJycpLnJlcGxhY2UoYmEsICcnKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTczOlxuICAgICAgY2FzZSA5ODk6XG4gICAgICAgIGlmICg0NSAhPT0gYS5jaGFyQ29kZUF0KDMpIHx8IDEyMiA9PT0gYS5jaGFyQ29kZUF0KDQpKSBicmVhaztcblxuICAgICAgY2FzZSA5MzE6XG4gICAgICBjYXNlIDk1MzpcbiAgICAgICAgaWYgKCEwID09PSBsYS50ZXN0KGQpKSByZXR1cm4gMTE1ID09PSAoYiA9IGQuc3Vic3RyaW5nKGQuaW5kZXhPZignOicpICsgMSkpLmNoYXJDb2RlQXQoMCkgPyBQKGQucmVwbGFjZSgnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBjLCBlLCBoKS5yZXBsYWNlKCc6ZmlsbC1hdmFpbGFibGUnLCAnOnN0cmV0Y2gnKSA6IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyBhLnJlcGxhY2UoYiwgJy1tb3otJyArIGIucmVwbGFjZSgnZmlsbC0nLCAnJykpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTYyOlxuICAgICAgICBpZiAoYSA9ICctd2Via2l0LScgKyBhICsgKDEwMiA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy1tcy0nICsgYSA6ICcnKSArIGEsIDIxMSA9PT0gZSArIGggJiYgMTA1ID09PSBhLmNoYXJDb2RlQXQoMTMpICYmIDAgPCBhLmluZGV4T2YoJ3RyYW5zZm9ybScsIDEwKSkgcmV0dXJuIGEuc3Vic3RyaW5nKDAsIGEuaW5kZXhPZignOycsIDI3KSArIDEpLnJlcGxhY2UobWEsICckMS13ZWJraXQtJDInKSArIGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICBmdW5jdGlvbiBMKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQuaW5kZXhPZigxID09PSBjID8gJzonIDogJ3snKSxcbiAgICAgICAgaCA9IGQuc3Vic3RyaW5nKDAsIDMgIT09IGMgPyBlIDogMTApO1xuICAgIGUgPSBkLnN1YnN0cmluZyhlICsgMSwgZC5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gUigyICE9PSBjID8gaCA6IGgucmVwbGFjZShuYSwgJyQxJyksIGUsIGMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZWEoZCwgYykge1xuICAgIHZhciBlID0gUChjLCBjLmNoYXJDb2RlQXQoMCksIGMuY2hhckNvZGVBdCgxKSwgYy5jaGFyQ29kZUF0KDIpKTtcbiAgICByZXR1cm4gZSAhPT0gYyArICc7JyA/IGUucmVwbGFjZShvYSwgJyBvciAoJDEpJykuc3Vic3RyaW5nKDQpIDogJygnICsgYyArICcpJztcbiAgfVxuXG4gIGZ1bmN0aW9uIEgoZCwgYywgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkge1xuICAgIGZvciAodmFyIGcgPSAwLCB4ID0gYywgdzsgZyA8IEE7ICsrZykge1xuICAgICAgc3dpdGNoICh3ID0gU1tnXS5jYWxsKEIsIGQsIHgsIGUsIGgsIGEsIG0sIGIsIHYsIG4sIHEpKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgICBjYXNlICExOlxuICAgICAgICBjYXNlICEwOlxuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB4ID0gdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoeCAhPT0gYykgcmV0dXJuIHg7XG4gIH1cblxuICBmdW5jdGlvbiBUKGQpIHtcbiAgICBzd2l0Y2ggKGQpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgY2FzZSBudWxsOlxuICAgICAgICBBID0gUy5sZW5ndGggPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc3dpdGNoIChkLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgY2FzZSBBcnJheTpcbiAgICAgICAgICAgIGZvciAodmFyIGMgPSAwLCBlID0gZC5sZW5ndGg7IGMgPCBlOyArK2MpIHtcbiAgICAgICAgICAgICAgVChkW2NdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIEZ1bmN0aW9uOlxuICAgICAgICAgICAgU1tBKytdID0gZDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgICAgICAgWSA9ICEhZCB8IDA7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBUO1xuICB9XG5cbiAgZnVuY3Rpb24gVShkKSB7XG4gICAgZCA9IGQucHJlZml4O1xuICAgIHZvaWQgMCAhPT0gZCAmJiAoUiA9IG51bGwsIGQgPyAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZCA/IHcgPSAxIDogKHcgPSAyLCBSID0gZCkgOiB3ID0gMCk7XG4gICAgcmV0dXJuIFU7XG4gIH1cblxuICBmdW5jdGlvbiBCKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQ7XG4gICAgMzMgPiBlLmNoYXJDb2RlQXQoMCkgJiYgKGUgPSBlLnRyaW0oKSk7XG4gICAgViA9IGU7XG4gICAgZSA9IFtWXTtcblxuICAgIGlmICgwIDwgQSkge1xuICAgICAgdmFyIGggPSBIKC0xLCBjLCBlLCBlLCBELCB6LCAwLCAwLCAwLCAwKTtcbiAgICAgIHZvaWQgMCAhPT0gaCAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGggJiYgKGMgPSBoKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IE0oTywgZSwgYywgMCwgMCk7XG4gICAgMCA8IEEgJiYgKGggPSBIKC0yLCBhLCBlLCBlLCBELCB6LCBhLmxlbmd0aCwgMCwgMCwgMCksIHZvaWQgMCAhPT0gaCAmJiAoYSA9IGgpKTtcbiAgICBWID0gJyc7XG4gICAgRSA9IDA7XG4gICAgeiA9IEQgPSAxO1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgdmFyIGNhID0gL15cXDArL2csXG4gICAgICBOID0gL1tcXDBcXHJcXGZdL2csXG4gICAgICBhYSA9IC86ICovZyxcbiAgICAgIGthID0gL3pvb3xncmEvLFxuICAgICAgbWEgPSAvKFssOiBdKSh0cmFuc2Zvcm0pL2csXG4gICAgICBpYSA9IC8sXFxyKz8vZyxcbiAgICAgIEYgPSAvKFtcXHRcXHJcXG4gXSkqXFxmPyYvZyxcbiAgICAgIGZhID0gL0Aoa1xcdyspXFxzKihcXFMqKVxccyovLFxuICAgICAgUSA9IC86OihwbGFjZSkvZyxcbiAgICAgIGhhID0gLzoocmVhZC1vbmx5KS9nLFxuICAgICAgRyA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIGRhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgb2EgPSAvKFtcXHNcXFNdKj8pOy9nLFxuICAgICAgYmEgPSAvLXNlbGZ8ZmxleC0vZyxcbiAgICAgIG5hID0gL1teXSo/KDpbcnBdW2VsXWFbXFx3LV0rKVteXSovLFxuICAgICAgbGEgPSAvc3RyZXRjaHw6XFxzKlxcdytcXC0oPzpjb250ZXxhdmFpbCkvLFxuICAgICAgamEgPSAvKFteLV0pKGltYWdlLXNldFxcKCkvLFxuICAgICAgeiA9IDEsXG4gICAgICBEID0gMSxcbiAgICAgIEUgPSAwLFxuICAgICAgdyA9IDEsXG4gICAgICBPID0gW10sXG4gICAgICBTID0gW10sXG4gICAgICBBID0gMCxcbiAgICAgIFIgPSBudWxsLFxuICAgICAgWSA9IDAsXG4gICAgICBWID0gJyc7XG4gIEIudXNlID0gVDtcbiAgQi5zZXQgPSBVO1xuICB2b2lkIDAgIT09IFcgJiYgVShXKTtcbiAgcmV0dXJuIEI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxpc19taW47XG4iLCIoZnVuY3Rpb24gKGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gKG1vZHVsZVsnZXhwb3J0cyddID0gZmFjdG9yeSgpKSA6XG5cdFx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddID8gZGVmaW5lKGZhY3RvcnkoKSkgOlxuXHRcdFx0KHdpbmRvd1snc3R5bGlzUnVsZVNoZWV0J10gPSBmYWN0b3J5KCkpXG59KGZ1bmN0aW9uICgpIHtcblxuXHQndXNlIHN0cmljdCdcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluc2VydFJ1bGUpIHtcblx0XHR2YXIgZGVsaW1pdGVyID0gJy8qfCovJ1xuXHRcdHZhciBuZWVkbGUgPSBkZWxpbWl0ZXIrJ30nXG5cblx0XHRmdW5jdGlvbiB0b1NoZWV0IChibG9jaykge1xuXHRcdFx0aWYgKGJsb2NrKVxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGluc2VydFJ1bGUoYmxvY2sgKyAnfScpXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJ1bGVTaGVldCAoY29udGV4dCwgY29udGVudCwgc2VsZWN0b3JzLCBwYXJlbnRzLCBsaW5lLCBjb2x1bW4sIGxlbmd0aCwgbnMsIGRlcHRoLCBhdCkge1xuXHRcdFx0c3dpdGNoIChjb250ZXh0KSB7XG5cdFx0XHRcdC8vIHByb3BlcnR5XG5cdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHQvLyBAaW1wb3J0XG5cdFx0XHRcdFx0aWYgKGRlcHRoID09PSAwICYmIGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gNjQpXG5cdFx0XHRcdFx0XHRyZXR1cm4gaW5zZXJ0UnVsZShjb250ZW50Kyc7JyksICcnXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Ly8gc2VsZWN0b3Jcblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdGlmIChucyA9PT0gMClcblx0XHRcdFx0XHRcdHJldHVybiBjb250ZW50ICsgZGVsaW1pdGVyXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Ly8gYXQtcnVsZVxuXHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0c3dpdGNoIChucykge1xuXHRcdFx0XHRcdFx0Ly8gQGZvbnQtZmFjZSwgQHBhZ2Vcblx0XHRcdFx0XHRcdGNhc2UgMTAyOlxuXHRcdFx0XHRcdFx0Y2FzZSAxMTI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbnNlcnRSdWxlKHNlbGVjdG9yc1swXStjb250ZW50KSwgJydcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBjb250ZW50ICsgKGF0ID09PSAwID8gZGVsaW1pdGVyIDogJycpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRjYXNlIC0yOlxuXHRcdFx0XHRcdGNvbnRlbnQuc3BsaXQobmVlZGxlKS5mb3JFYWNoKHRvU2hlZXQpXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KSlcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCBoYXNoU3RyaW5nIGZyb20gJ0BlbW90aW9uL2hhc2gnO1xuaW1wb3J0IFN0eWxpcyBmcm9tICdAZW1vdGlvbi9zdHlsaXMnO1xuaW1wb3J0IHN0eWxpc1J1bGVTaGVldCBmcm9tICdzdHlsaXMtcnVsZS1zaGVldCc7XG5cbnZhciBoeXBoZW5hdGVSZWdleCA9IC9bQS1aXXxebXMvZztcbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gbWVtb2l6ZShmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gIHJldHVybiBzdHlsZU5hbWUucmVwbGFjZShoeXBoZW5hdGVSZWdleCwgJy0kJicpLnRvTG93ZXJDYXNlKCk7XG59KTtcbnZhciBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAodW5pdGxlc3Nba2V5XSAhPT0gMSAmJiBrZXkuY2hhckNvZGVBdCgxKSAhPT0gNDUgJiYgLy8gY3VzdG9tIHByb3BlcnRpZXNcbiAgIWlzTmFOKHZhbHVlKSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgY29udGVudFZhbHVlUGF0dGVybiA9IC8oYXR0cnxjYWxjfGNvdW50ZXJzP3x1cmwpXFwoLztcbiAgdmFyIGNvbnRlbnRWYWx1ZXMgPSBbJ25vcm1hbCcsICdub25lJywgJ2NvdW50ZXInLCAnb3Blbi1xdW90ZScsICdjbG9zZS1xdW90ZScsICduby1vcGVuLXF1b3RlJywgJ25vLWNsb3NlLXF1b3RlJywgJ2luaXRpYWwnLCAnaW5oZXJpdCcsICd1bnNldCddO1xuICB2YXIgb2xkUHJvY2Vzc1N0eWxlVmFsdWUgPSBwcm9jZXNzU3R5bGVWYWx1ZTtcblxuICBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IGNvbnRlbnRWYWx1ZXMuaW5kZXhPZih2YWx1ZSkgPT09IC0xICYmICFjb250ZW50VmFsdWVQYXR0ZXJuLnRlc3QodmFsdWUpICYmICh2YWx1ZS5jaGFyQXQoMCkgIT09IHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSB8fCB2YWx1ZS5jaGFyQXQoMCkgIT09ICdcIicgJiYgdmFsdWUuY2hhckF0KDApICE9PSBcIidcIikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSBzZWVtIHRvIGJlIHVzaW5nIGEgdmFsdWUgZm9yICdjb250ZW50JyB3aXRob3V0IHF1b3RlcywgdHJ5IHJlcGxhY2luZyBpdCB3aXRoIGBjb250ZW50OiAnXFxcIlwiICsgdmFsdWUgKyBcIlxcXCInYFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2xkUHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSk7XG4gIH07XG59XG5cbnZhciBjbGFzc25hbWVzID0gZnVuY3Rpb24gY2xhc3NuYW1lcyhhcmdzKSB7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgY2xzID0gJyc7XG5cbiAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBhcmcgPSBhcmdzW2ldO1xuICAgIGlmIChhcmcgPT0gbnVsbCkgY29udGludWU7XG4gICAgdmFyIHRvQWRkID0gdm9pZCAwO1xuXG4gICAgc3dpdGNoICh0eXBlb2YgYXJnKSB7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdQYXNzaW5nIGZ1bmN0aW9ucyB0byBjeCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBFbW90aW9uLlxcbicgKyAnUGxlYXNlIGNhbGwgdGhlIGZ1bmN0aW9uIGJlZm9yZSBwYXNzaW5nIGl0IHRvIGN4LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKFthcmcoKV0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIHRvQWRkID0gY2xhc3NuYW1lcyhhcmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b0FkZCA9ICcnO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGFyZykge1xuICAgICAgICAgICAgICBpZiAoYXJnW2tdICYmIGspIHtcbiAgICAgICAgICAgICAgICB0b0FkZCAmJiAodG9BZGQgKz0gJyAnKTtcbiAgICAgICAgICAgICAgICB0b0FkZCArPSBrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIHRvQWRkID0gYXJnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRvQWRkKSB7XG4gICAgICBjbHMgJiYgKGNscyArPSAnICcpO1xuICAgICAgY2xzICs9IHRvQWRkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbHM7XG59O1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qXG5cbmhpZ2ggcGVyZm9ybWFuY2UgU3R5bGVTaGVldCBmb3IgY3NzLWluLWpzIHN5c3RlbXNcblxuLSB1c2VzIG11bHRpcGxlIHN0eWxlIHRhZ3MgYmVoaW5kIHRoZSBzY2VuZXMgZm9yIG1pbGxpb25zIG9mIHJ1bGVzXG4tIHVzZXMgYGluc2VydFJ1bGVgIGZvciBhcHBlbmRpbmcgaW4gcHJvZHVjdGlvbiBmb3IgKm11Y2gqIGZhc3RlciBwZXJmb3JtYW5jZVxuLSAncG9seWZpbGxzJyBvbiBzZXJ2ZXIgc2lkZVxuXG4vLyB1c2FnZVxuXG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICdnbGFtb3IvbGliL3NoZWV0J1xubGV0IHN0eWxlU2hlZXQgPSBuZXcgU3R5bGVTaGVldCgpXG5cbnN0eWxlU2hlZXQuaW5qZWN0KClcbi0gJ2luamVjdHMnIHRoZSBzdHlsZXNoZWV0IGludG8gdGhlIHBhZ2UgKG9yIGludG8gbWVtb3J5IGlmIG9uIHNlcnZlcilcblxuc3R5bGVTaGVldC5pbnNlcnQoJyNib3ggeyBib3JkZXI6IDFweCBzb2xpZCByZWQ7IH0nKVxuLSBhcHBlbmRzIGEgY3NzIHJ1bGUgaW50byB0aGUgc3R5bGVzaGVldFxuXG5zdHlsZVNoZWV0LmZsdXNoKClcbi0gZW1wdGllcyB0aGUgc3R5bGVzaGVldCBvZiBhbGwgaXRzIGNvbnRlbnRzXG5cbiovXG4vLyAkRmxvd0ZpeE1lXG5mdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gdGFnLnNoZWV0O1xuICB9IC8vIHRoaXMgd2VpcmRuZXNzIGJyb3VnaHQgdG8geW91IGJ5IGZpcmVmb3hcblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ub3duZXJOb2RlID09PSB0YWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZVN0eWxlVGFnKG9wdHMpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIG9wdHMua2V5IHx8ICcnKTtcblxuICBpZiAob3B0cy5ub25jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGFnLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBvcHRzLm5vbmNlKTtcbiAgfVxuXG4gIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykpIC8vICRGbG93Rml4TWVcbiAgO1xuICAob3B0cy5jb250YWluZXIgIT09IHVuZGVmaW5lZCA/IG9wdHMuY29udGFpbmVyIDogZG9jdW1lbnQuaGVhZCkuYXBwZW5kQ2hpbGQodGFnKTtcbiAgcmV0dXJuIHRhZztcbn1cblxudmFyIFN0eWxlU2hlZXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KG9wdGlvbnMpIHtcbiAgICB0aGlzLmlzU3BlZWR5ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJzsgLy8gdGhlIGJpZyBkcmF3YmFjayBoZXJlIGlzIHRoYXQgdGhlIGNzcyB3b24ndCBiZSBlZGl0YWJsZSBpbiBkZXZ0b29sc1xuXG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuICAgIHRoaXMub3B0cyA9IG9wdGlvbnM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3R5bGVTaGVldC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmluamVjdCA9IGZ1bmN0aW9uIGluamVjdCgpIHtcbiAgICBpZiAodGhpcy5pbmplY3RlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdhbHJlYWR5IGluamVjdGVkIScpO1xuICAgIH1cblxuICAgIHRoaXMudGFnc1swXSA9IG1ha2VTdHlsZVRhZyh0aGlzLm9wdHMpO1xuICAgIHRoaXMuaW5qZWN0ZWQgPSB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5zcGVlZHkgPSBmdW5jdGlvbiBzcGVlZHkoYm9vbCkge1xuICAgIGlmICh0aGlzLmN0ciAhPT0gMCkge1xuICAgICAgLy8gY2Fubm90IGNoYW5nZSBzcGVlZHkgbW9kZSBhZnRlciBpbnNlcnRpbmcgYW55IHJ1bGUgdG8gc2hlZXQuIEVpdGhlciBjYWxsIHNwZWVkeSgke2Jvb2x9KSBlYXJsaWVyIGluIHlvdXIgYXBwLCBvciBjYWxsIGZsdXNoKCkgYmVmb3JlIHNwZWVkeSgke2Jvb2x9KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IGNoYW5nZSBzcGVlZHkgbm93XCIpO1xuICAgIH1cblxuICAgIHRoaXMuaXNTcGVlZHkgPSAhIWJvb2w7XG4gIH07XG5cbiAgX3Byb3RvLmluc2VydCA9IGZ1bmN0aW9uIGluc2VydChydWxlLCBzb3VyY2VNYXApIHtcbiAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgaWYgKHRoaXMuaXNTcGVlZHkpIHtcbiAgICAgIHZhciB0YWcgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdO1xuICAgICAgdmFyIHNoZWV0ID0gc2hlZXRGb3JUYWcodGFnKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShydWxlLCBzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUud2FybignaWxsZWdhbCBydWxlJywgcnVsZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfdGFnID0gbWFrZVN0eWxlVGFnKHRoaXMub3B0cyk7XG5cbiAgICAgIHRoaXMudGFncy5wdXNoKF90YWcpO1xuXG4gICAgICBfdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUgKyAoc291cmNlTWFwIHx8ICcnKSkpO1xuICAgIH1cblxuICAgIHRoaXMuY3RyKys7XG5cbiAgICBpZiAodGhpcy5jdHIgJSA2NTAwMCA9PT0gMCkge1xuICAgICAgdGhpcy50YWdzLnB1c2gobWFrZVN0eWxlVGFnKHRoaXMub3B0cykpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgdGhpcy50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgcmV0dXJuIHRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhZyk7XG4gICAgfSk7XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwOyAvLyB0b2RvIC0gbG9vayBmb3IgcmVtbmFudHMgaW4gZG9jdW1lbnQuc3R5bGVTaGVldHNcblxuICAgIHRoaXMuaW5qZWN0ZWQgPSBmYWxzZTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxuZnVuY3Rpb24gY3JlYXRlRW1vdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gIGlmIChjb250ZXh0Ll9fU0VDUkVUX0VNT1RJT05fXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNvbnRleHQuX19TRUNSRVRfRU1PVElPTl9fO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5ID0gb3B0aW9ucy5rZXkgfHwgJ2Nzcyc7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoL1teYS16LV0vLnRlc3Qoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1vdGlvbiBrZXkgbXVzdCBvbmx5IGNvbnRhaW4gbG93ZXIgY2FzZSBhbHBoYWJldGljYWwgY2hhcmFjdGVycyBhbmQgLSBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwYXNzZWRcIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGN1cnJlbnQ7XG5cbiAgZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgY3VycmVudCArPSBydWxlO1xuXG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgc2hlZXQuaW5zZXJ0KHJ1bGUsIGN1cnJlbnRTb3VyY2VNYXApO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbnNlcnRpb25QbHVnaW4gPSBzdHlsaXNSdWxlU2hlZXQoaW5zZXJ0UnVsZSk7XG4gIHZhciBzdHlsaXNPcHRpb25zO1xuXG4gIGlmIChvcHRpb25zLnByZWZpeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3R5bGlzT3B0aW9ucyA9IHtcbiAgICAgIHByZWZpeDogb3B0aW9ucy5wcmVmaXhcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNhY2hlcyA9IHtcbiAgICByZWdpc3RlcmVkOiB7fSxcbiAgICBpbnNlcnRlZDoge30sXG4gICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAga2V5OiBrZXlcbiAgfTtcbiAgdmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQob3B0aW9ucyk7XG5cbiAgaWYgKGlzQnJvd3Nlcikge1xuICAgIC8vIPCfmoBcbiAgICBzaGVldC5pbmplY3QoKTtcbiAgfVxuXG4gIHZhciBzdHlsaXMgPSBuZXcgU3R5bGlzKHN0eWxpc09wdGlvbnMpO1xuICBzdHlsaXMudXNlKG9wdGlvbnMuc3R5bGlzUGx1Z2lucykoaW5zZXJ0aW9uUGx1Z2luKTtcbiAgdmFyIGN1cnJlbnRTb3VyY2VNYXAgPSAnJztcblxuICBmdW5jdGlvbiBoYW5kbGVJbnRlcnBvbGF0aW9uKGludGVycG9sYXRpb24sIGNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24pIHtcbiAgICBpZiAoaW50ZXJwb2xhdGlvbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0eXBlb2YgaW50ZXJwb2xhdGlvbikge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiAnJztcblxuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBpbnRlcnBvbGF0aW9uLnRvU3RyaW5nKCk7XG5cbiAgICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYmFiZWwtcGx1Z2luLWVtb3Rpb24uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHNlbGVjdG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMgPT09IHVuZGVmaW5lZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignSW50ZXJwb2xhdGluZyBmdW5jdGlvbnMgaW4gY3NzIGNhbGxzIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIEVtb3Rpb24uXFxuJyArICdJZiB5b3Ugd2FudCB0byBoYXZlIGEgY3NzIGNhbGwgYmFzZWQgb24gcHJvcHMsIGNyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNzcyBjYWxsIGxpa2UgdGhpc1xcbicgKyAnbGV0IGR5bmFtaWNTdHlsZSA9IChwcm9wcykgPT4gY3NzYGNvbG9yOiAke3Byb3BzLmNvbG9yfWBcXG4nICsgJ0l0IGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgd2l0aCBwcm9wcyBvciBpbnRlcnBvbGF0ZWQgaW4gYSBzdHlsZWQgY2FsbCBsaWtlIHRoaXNcXG4nICsgXCJsZXQgU29tZUNvbXBvbmVudCA9IHN0eWxlZCgnZGl2JylgJHtkeW5hbWljU3R5bGV9YFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgdGhpcyA9PT0gdW5kZWZpbmVkID8gaW50ZXJwb2xhdGlvbigpIDogLy8gJEZsb3dGaXhNZVxuICAgICAgICBpbnRlcnBvbGF0aW9uKHRoaXMubWVyZ2VkUHJvcHMsIHRoaXMuY29udGV4dCksIGNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24pO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICByZXR1cm4gY3JlYXRlU3RyaW5nRnJvbU9iamVjdC5jYWxsKHRoaXMsIGludGVycG9sYXRpb24pO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgY2FjaGVkID0gY2FjaGVzLnJlZ2lzdGVyZWRbaW50ZXJwb2xhdGlvbl07XG4gICAgICAgIHJldHVybiBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uID09PSBmYWxzZSAmJiBjYWNoZWQgIT09IHVuZGVmaW5lZCA/IGNhY2hlZCA6IGludGVycG9sYXRpb247XG4gICAgfVxuICB9XG5cbiAgdmFyIG9iamVjdFRvU3RyaW5nQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3Qob2JqKSB7XG4gICAgaWYgKG9iamVjdFRvU3RyaW5nQ2FjaGUuaGFzKG9iaikpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBvYmplY3RUb1N0cmluZ0NhY2hlLmdldChvYmopO1xuICAgIH1cblxuICAgIHZhciBzdHJpbmcgPSAnJztcblxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uIChpbnRlcnBvbGF0aW9uKSB7XG4gICAgICAgIHN0cmluZyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgaW50ZXJwb2xhdGlvbiwgZmFsc2UpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgaWYgKGNhY2hlcy5yZWdpc3RlcmVkW29ialtrZXldXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdHJpbmcgKz0ga2V5ICsgXCJ7XCIgKyBjYWNoZXMucmVnaXN0ZXJlZFtvYmpba2V5XV0gKyBcIn1cIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCBvYmpba2V5XSkgKyBcIjtcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBiYWJlbC1wbHVnaW4tZW1vdGlvbi4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmpba2V5XSkgJiYgdHlwZW9mIG9ialtrZXldWzBdID09PSAnc3RyaW5nJyAmJiBjYWNoZXMucmVnaXN0ZXJlZFtvYmpba2V5XVswXV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb2JqW2tleV0uZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkgKyBcIjtcIjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpbmcgKz0ga2V5ICsgXCJ7XCIgKyBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgb2JqW2tleV0sIGZhbHNlKSArIFwifVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuXG4gICAgb2JqZWN0VG9TdHJpbmdDYWNoZS5zZXQob2JqLCBzdHJpbmcpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuICB2YXIgbmFtZTtcbiAgdmFyIHN0eWxlc1dpdGhMYWJlbDtcbiAgdmFyIGxhYmVsUGF0dGVybiA9IC9sYWJlbDpcXHMqKFteXFxzO1xcbntdKylcXHMqOy9nO1xuXG4gIHZhciBjcmVhdGVDbGFzc05hbWUgPSBmdW5jdGlvbiBjcmVhdGVDbGFzc05hbWUoc3R5bGVzLCBpZGVudGlmaWVyTmFtZSkge1xuICAgIHJldHVybiBoYXNoU3RyaW5nKHN0eWxlcyArIGlkZW50aWZpZXJOYW1lKSArIGlkZW50aWZpZXJOYW1lO1xuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIG9sZENyZWF0ZUNsYXNzTmFtZSA9IGNyZWF0ZUNsYXNzTmFtZTtcbiAgICB2YXIgc291cmNlTWFwcGluZ1VybFBhdHRlcm4gPSAvXFwvXFwqI1xcc3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvblxcL2pzb247XFxTK1xccytcXCpcXC8vZztcblxuICAgIGNyZWF0ZUNsYXNzTmFtZSA9IGZ1bmN0aW9uIGNyZWF0ZUNsYXNzTmFtZShzdHlsZXMsIGlkZW50aWZpZXJOYW1lKSB7XG4gICAgICByZXR1cm4gb2xkQ3JlYXRlQ2xhc3NOYW1lKHN0eWxlcy5yZXBsYWNlKHNvdXJjZU1hcHBpbmdVcmxQYXR0ZXJuLCBmdW5jdGlvbiAoc291cmNlTWFwKSB7XG4gICAgICAgIGN1cnJlbnRTb3VyY2VNYXAgPSBzb3VyY2VNYXA7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pLCBpZGVudGlmaWVyTmFtZSk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjcmVhdGVTdHlsZXMgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZXMoc3RyaW5ncykge1xuICAgIHZhciBzdHJpbmdNb2RlID0gdHJ1ZTtcbiAgICB2YXIgc3R5bGVzID0gJyc7XG4gICAgdmFyIGlkZW50aWZpZXJOYW1lID0gJyc7XG5cbiAgICBpZiAoc3RyaW5ncyA9PSBudWxsIHx8IHN0cmluZ3MucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgc3RyaW5ncywgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1swXTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgaW50ZXJwb2xhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGludGVycG9sYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGludGVycG9sYXRpb24sIGkpIHtcbiAgICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgaW50ZXJwb2xhdGlvbiwgc3R5bGVzLmNoYXJDb2RlQXQoc3R5bGVzLmxlbmd0aCAtIDEpID09PSA0NiAvLyAuXG4gICAgICApO1xuXG4gICAgICBpZiAoc3RyaW5nTW9kZSA9PT0gdHJ1ZSAmJiBzdHJpbmdzW2kgKyAxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0eWxlcyArPSBzdHJpbmdzW2kgKyAxXTtcbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcbiAgICBzdHlsZXNXaXRoTGFiZWwgPSBzdHlsZXM7XG4gICAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2UobGFiZWxQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gsIHAxKSB7XG4gICAgICBpZGVudGlmaWVyTmFtZSArPSBcIi1cIiArIHAxO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICAgIG5hbWUgPSBjcmVhdGVDbGFzc05hbWUoc3R5bGVzLCBpZGVudGlmaWVyTmFtZSk7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBvbGRTdHlsaXMgPSBzdHlsaXM7XG5cbiAgICBzdHlsaXMgPSBmdW5jdGlvbiBzdHlsaXMoc2VsZWN0b3IsIHN0eWxlcykge1xuICAgICAgb2xkU3R5bGlzKHNlbGVjdG9yLCBzdHlsZXMpO1xuICAgICAgY3VycmVudFNvdXJjZU1hcCA9ICcnO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQoc2NvcGUsIHN0eWxlcykge1xuICAgIGlmIChjYWNoZXMuaW5zZXJ0ZWRbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY3VycmVudCA9ICcnO1xuICAgICAgc3R5bGlzKHNjb3BlLCBzdHlsZXMpO1xuICAgICAgY2FjaGVzLmluc2VydGVkW25hbWVdID0gY3VycmVudDtcbiAgICB9XG4gIH1cblxuICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgIHZhciBzdHlsZXMgPSBjcmVhdGVTdHlsZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB2YXIgc2VsZWN0b3IgPSBrZXkgKyBcIi1cIiArIG5hbWU7XG5cbiAgICBpZiAoY2FjaGVzLnJlZ2lzdGVyZWRbc2VsZWN0b3JdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhY2hlcy5yZWdpc3RlcmVkW3NlbGVjdG9yXSA9IHN0eWxlc1dpdGhMYWJlbDtcbiAgICB9XG5cbiAgICBpbnNlcnQoXCIuXCIgKyBzZWxlY3Rvciwgc3R5bGVzKTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH07XG5cbiAgdmFyIGtleWZyYW1lcyA9IGZ1bmN0aW9uIGtleWZyYW1lcygpIHtcbiAgICB2YXIgc3R5bGVzID0gY3JlYXRlU3R5bGVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdmFyIGFuaW1hdGlvbiA9IFwiYW5pbWF0aW9uLVwiICsgbmFtZTtcbiAgICBpbnNlcnQoJycsIFwiQGtleWZyYW1lcyBcIiArIGFuaW1hdGlvbiArIFwie1wiICsgc3R5bGVzICsgXCJ9XCIpO1xuICAgIHJldHVybiBhbmltYXRpb247XG4gIH07XG5cbiAgdmFyIGluamVjdEdsb2JhbCA9IGZ1bmN0aW9uIGluamVjdEdsb2JhbCgpIHtcbiAgICB2YXIgc3R5bGVzID0gY3JlYXRlU3R5bGVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaW5zZXJ0KCcnLCBzdHlsZXMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lcykge1xuICAgIHZhciByYXdDbGFzc05hbWUgPSAnJztcbiAgICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICBpZiAoY2FjaGVzLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRTdHlsZXMucHVzaChjbGFzc05hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmF3Q2xhc3NOYW1lICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByYXdDbGFzc05hbWU7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZShjbGFzc05hbWUsIHNvdXJjZU1hcCkge1xuICAgIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gICAgdmFyIHJhd0NsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lKTtcblxuICAgIGlmIChyZWdpc3RlcmVkU3R5bGVzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiBjbGFzc05hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NsYXNzTmFtZSArIGNzcyhyZWdpc3RlcmVkU3R5bGVzLCBzb3VyY2VNYXApO1xuICB9XG5cbiAgZnVuY3Rpb24gY3goKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc05hbWVzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBjbGFzc05hbWVzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlKGNsYXNzbmFtZXMoY2xhc3NOYW1lcykpO1xuICB9XG5cbiAgZnVuY3Rpb24gaHlkcmF0ZVNpbmdsZUlkKGlkKSB7XG4gICAgY2FjaGVzLmluc2VydGVkW2lkXSA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBoeWRyYXRlKGlkcykge1xuICAgIGlkcy5mb3JFYWNoKGh5ZHJhdGVTaW5nbGVJZCk7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgICAgc2hlZXQuaW5qZWN0KCk7XG4gICAgfVxuXG4gICAgY2FjaGVzLmluc2VydGVkID0ge307XG4gICAgY2FjaGVzLnJlZ2lzdGVyZWQgPSB7fTtcbiAgfVxuXG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICB2YXIgY2h1bmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWVtb3Rpb24tXCIgKyBrZXkgKyBcIl1cIik7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChjaHVua3MsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBzaGVldC50YWdzWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIHNoZWV0LnRhZ3NbMF0pOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1lbW90aW9uLVwiICsga2V5KS5zcGxpdCgnICcpLmZvckVhY2goaHlkcmF0ZVNpbmdsZUlkKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBlbW90aW9uID0ge1xuICAgIGZsdXNoOiBmbHVzaCxcbiAgICBoeWRyYXRlOiBoeWRyYXRlLFxuICAgIGN4OiBjeCxcbiAgICBtZXJnZTogbWVyZ2UsXG4gICAgZ2V0UmVnaXN0ZXJlZFN0eWxlczogZ2V0UmVnaXN0ZXJlZFN0eWxlcyxcbiAgICBpbmplY3RHbG9iYWw6IGluamVjdEdsb2JhbCxcbiAgICBrZXlmcmFtZXM6IGtleWZyYW1lcyxcbiAgICBjc3M6IGNzcyxcbiAgICBzaGVldDogc2hlZXQsXG4gICAgY2FjaGVzOiBjYWNoZXNcbiAgfTtcbiAgY29udGV4dC5fX1NFQ1JFVF9FTU9USU9OX18gPSBlbW90aW9uO1xuICByZXR1cm4gZW1vdGlvbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRW1vdGlvbjtcbiIsImltcG9ydCBjcmVhdGVFbW90aW9uIGZyb20gJ2NyZWF0ZS1lbW90aW9uJztcblxudmFyIGNvbnRleHQgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xuXG52YXIgX2NyZWF0ZUVtb3Rpb24gPSBjcmVhdGVFbW90aW9uKGNvbnRleHQpLFxuICAgIGZsdXNoID0gX2NyZWF0ZUVtb3Rpb24uZmx1c2gsXG4gICAgaHlkcmF0ZSA9IF9jcmVhdGVFbW90aW9uLmh5ZHJhdGUsXG4gICAgY3ggPSBfY3JlYXRlRW1vdGlvbi5jeCxcbiAgICBtZXJnZSA9IF9jcmVhdGVFbW90aW9uLm1lcmdlLFxuICAgIGdldFJlZ2lzdGVyZWRTdHlsZXMgPSBfY3JlYXRlRW1vdGlvbi5nZXRSZWdpc3RlcmVkU3R5bGVzLFxuICAgIGluamVjdEdsb2JhbCA9IF9jcmVhdGVFbW90aW9uLmluamVjdEdsb2JhbCxcbiAgICBrZXlmcmFtZXMgPSBfY3JlYXRlRW1vdGlvbi5rZXlmcmFtZXMsXG4gICAgY3NzID0gX2NyZWF0ZUVtb3Rpb24uY3NzLFxuICAgIHNoZWV0ID0gX2NyZWF0ZUVtb3Rpb24uc2hlZXQsXG4gICAgY2FjaGVzID0gX2NyZWF0ZUVtb3Rpb24uY2FjaGVzO1xuXG5leHBvcnQgeyBmbHVzaCwgaHlkcmF0ZSwgY3gsIG1lcmdlLCBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbmplY3RHbG9iYWwsIGtleWZyYW1lcywgY3NzLCBzaGVldCwgY2FjaGVzIH07XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuMlxuKGZ1bmN0aW9uKCkge1xuICB2YXIgZ2V0TmFub1NlY29uZHMsIGhydGltZSwgbG9hZFRpbWUsIG1vZHVsZUxvYWRUaW1lLCBub2RlTG9hZFRpbWUsIHVwVGltZTtcblxuICBpZiAoKHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwZXJmb3JtYW5jZSAhPT0gbnVsbCkgJiYgcGVyZm9ybWFuY2Uubm93KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9O1xuICB9IGVsc2UgaWYgKCh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzICE9PSBudWxsKSAmJiBwcm9jZXNzLmhydGltZSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKGdldE5hbm9TZWNvbmRzKCkgLSBub2RlTG9hZFRpbWUpIC8gMWU2O1xuICAgIH07XG4gICAgaHJ0aW1lID0gcHJvY2Vzcy5ocnRpbWU7XG4gICAgZ2V0TmFub1NlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBocjtcbiAgICAgIGhyID0gaHJ0aW1lKCk7XG4gICAgICByZXR1cm4gaHJbMF0gKiAxZTkgKyBoclsxXTtcbiAgICB9O1xuICAgIG1vZHVsZUxvYWRUaW1lID0gZ2V0TmFub1NlY29uZHMoKTtcbiAgICB1cFRpbWUgPSBwcm9jZXNzLnVwdGltZSgpICogMWU5O1xuICAgIG5vZGVMb2FkVGltZSA9IG1vZHVsZUxvYWRUaW1lIC0gdXBUaW1lO1xuICB9IGVsc2UgaWYgKERhdGUubm93KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBEYXRlLm5vdygpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IERhdGUubm93KCk7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGxvYWRUaW1lO1xuICAgIH07XG4gICAgbG9hZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfVxuXG59KS5jYWxsKHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wZXJmb3JtYW5jZS1ub3cuanMubWFwXG4iLCJ2YXIgbm93ID0gcmVxdWlyZSgncGVyZm9ybWFuY2Utbm93JylcbiAgLCByb290ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3dcbiAgLCB2ZW5kb3JzID0gWydtb3onLCAnd2Via2l0J11cbiAgLCBzdWZmaXggPSAnQW5pbWF0aW9uRnJhbWUnXG4gICwgcmFmID0gcm9vdFsncmVxdWVzdCcgKyBzdWZmaXhdXG4gICwgY2FmID0gcm9vdFsnY2FuY2VsJyArIHN1ZmZpeF0gfHwgcm9vdFsnY2FuY2VsUmVxdWVzdCcgKyBzdWZmaXhdXG5cbmZvcih2YXIgaSA9IDA7ICFyYWYgJiYgaSA8IHZlbmRvcnMubGVuZ3RoOyBpKyspIHtcbiAgcmFmID0gcm9vdFt2ZW5kb3JzW2ldICsgJ1JlcXVlc3QnICsgc3VmZml4XVxuICBjYWYgPSByb290W3ZlbmRvcnNbaV0gKyAnQ2FuY2VsJyArIHN1ZmZpeF1cbiAgICAgIHx8IHJvb3RbdmVuZG9yc1tpXSArICdDYW5jZWxSZXF1ZXN0JyArIHN1ZmZpeF1cbn1cblxuLy8gU29tZSB2ZXJzaW9ucyBvZiBGRiBoYXZlIHJBRiBidXQgbm90IGNBRlxuaWYoIXJhZiB8fCAhY2FmKSB7XG4gIHZhciBsYXN0ID0gMFxuICAgICwgaWQgPSAwXG4gICAgLCBxdWV1ZSA9IFtdXG4gICAgLCBmcmFtZUR1cmF0aW9uID0gMTAwMCAvIDYwXG5cbiAgcmFmID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBpZihxdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHZhciBfbm93ID0gbm93KClcbiAgICAgICAgLCBuZXh0ID0gTWF0aC5tYXgoMCwgZnJhbWVEdXJhdGlvbiAtIChfbm93IC0gbGFzdCkpXG4gICAgICBsYXN0ID0gbmV4dCArIF9ub3dcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjcCA9IHF1ZXVlLnNsaWNlKDApXG4gICAgICAgIC8vIENsZWFyIHF1ZXVlIGhlcmUgdG8gcHJldmVudFxuICAgICAgICAvLyBjYWxsYmFja3MgZnJvbSBhcHBlbmRpbmcgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRvIHRoZSBjdXJyZW50IGZyYW1lJ3MgcXVldWVcbiAgICAgICAgcXVldWUubGVuZ3RoID0gMFxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgY3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZighY3BbaV0uY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgIGNwW2ldLmNhbGxiYWNrKGxhc3QpXG4gICAgICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgdGhyb3cgZSB9LCAwKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgTWF0aC5yb3VuZChuZXh0KSlcbiAgICB9XG4gICAgcXVldWUucHVzaCh7XG4gICAgICBoYW5kbGU6ICsraWQsXG4gICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICBjYW5jZWxsZWQ6IGZhbHNlXG4gICAgfSlcbiAgICByZXR1cm4gaWRcbiAgfVxuXG4gIGNhZiA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYocXVldWVbaV0uaGFuZGxlID09PSBoYW5kbGUpIHtcbiAgICAgICAgcXVldWVbaV0uY2FuY2VsbGVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuKSB7XG4gIC8vIFdyYXAgaW4gYSBuZXcgZnVuY3Rpb24gdG8gcHJldmVudFxuICAvLyBgY2FuY2VsYCBwb3RlbnRpYWxseSBiZWluZyBhc3NpZ25lZFxuICAvLyB0byB0aGUgbmF0aXZlIHJBRiBmdW5jdGlvblxuICByZXR1cm4gcmFmLmNhbGwocm9vdCwgZm4pXG59XG5tb2R1bGUuZXhwb3J0cy5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgY2FmLmFwcGx5KHJvb3QsIGFyZ3VtZW50cylcbn1cbm1vZHVsZS5leHBvcnRzLnBvbHlmaWxsID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmICghb2JqZWN0KSB7XG4gICAgb2JqZWN0ID0gcm9vdDtcbiAgfVxuICBvYmplY3QucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gcmFmXG4gIG9iamVjdC5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNhZlxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIHNpemVyU3R5bGUgPSB7XG5cdHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuXHR0b3A6IDAsXG5cdGxlZnQ6IDAsXG5cdHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuXHRoZWlnaHQ6IDAsXG5cdG92ZXJmbG93OiAnc2Nyb2xsJyxcblx0d2hpdGVTcGFjZTogJ3ByZSdcbn07XG5cbnZhciBJTlBVVF9QUk9QU19CTEFDS0xJU1QgPSBbJ2V4dHJhV2lkdGgnLCAnaW5qZWN0U3R5bGVzJywgJ2lucHV0Q2xhc3NOYW1lJywgJ2lucHV0UmVmJywgJ2lucHV0U3R5bGUnLCAnbWluV2lkdGgnLCAnb25BdXRvc2l6ZScsICdwbGFjZWhvbGRlcklzTWluV2lkdGgnXTtcblxudmFyIGNsZWFuSW5wdXRQcm9wcyA9IGZ1bmN0aW9uIGNsZWFuSW5wdXRQcm9wcyhpbnB1dFByb3BzKSB7XG5cdElOUFVUX1BST1BTX0JMQUNLTElTVC5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuXHRcdHJldHVybiBkZWxldGUgaW5wdXRQcm9wc1tmaWVsZF07XG5cdH0pO1xuXHRyZXR1cm4gaW5wdXRQcm9wcztcbn07XG5cbnZhciBjb3B5U3R5bGVzID0gZnVuY3Rpb24gY29weVN0eWxlcyhzdHlsZXMsIG5vZGUpIHtcblx0bm9kZS5zdHlsZS5mb250U2l6ZSA9IHN0eWxlcy5mb250U2l6ZTtcblx0bm9kZS5zdHlsZS5mb250RmFtaWx5ID0gc3R5bGVzLmZvbnRGYW1pbHk7XG5cdG5vZGUuc3R5bGUuZm9udFdlaWdodCA9IHN0eWxlcy5mb250V2VpZ2h0O1xuXHRub2RlLnN0eWxlLmZvbnRTdHlsZSA9IHN0eWxlcy5mb250U3R5bGU7XG5cdG5vZGUuc3R5bGUubGV0dGVyU3BhY2luZyA9IHN0eWxlcy5sZXR0ZXJTcGFjaW5nO1xuXHRub2RlLnN0eWxlLnRleHRUcmFuc2Zvcm0gPSBzdHlsZXMudGV4dFRyYW5zZm9ybTtcbn07XG5cbnZhciBpc0lFID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm5hdmlnYXRvciA/IC9NU0lFIHxUcmlkZW50XFwvfEVkZ2VcXC8vLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpIDogZmFsc2U7XG5cbnZhciBnZW5lcmF0ZUlkID0gZnVuY3Rpb24gZ2VuZXJhdGVJZCgpIHtcblx0Ly8gd2Ugb25seSBuZWVkIGFuIGF1dG8tZ2VuZXJhdGVkIElEIGZvciBzdHlsZXNoZWV0IGluamVjdGlvbiwgd2hpY2ggaXMgb25seVxuXHQvLyB1c2VkIGZvciBJRS4gc28gaWYgdGhlIGJyb3dzZXIgaXMgbm90IElFLCB0aGlzIHNob3VsZCByZXR1cm4gdW5kZWZpbmVkLlxuXHRyZXR1cm4gaXNJRSA/ICdfJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCAxMikgOiB1bmRlZmluZWQ7XG59O1xuXG52YXIgQXV0b3NpemVJbnB1dCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG5cdF9pbmhlcml0cyhBdXRvc2l6ZUlucHV0LCBfQ29tcG9uZW50KTtcblxuXHRmdW5jdGlvbiBBdXRvc2l6ZUlucHV0KHByb3BzKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIEF1dG9zaXplSW5wdXQpO1xuXG5cdFx0dmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEF1dG9zaXplSW5wdXQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihBdXRvc2l6ZUlucHV0KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG5cdFx0X3RoaXMuaW5wdXRSZWYgPSBmdW5jdGlvbiAoZWwpIHtcblx0XHRcdF90aGlzLmlucHV0ID0gZWw7XG5cdFx0XHRpZiAodHlwZW9mIF90aGlzLnByb3BzLmlucHV0UmVmID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdF90aGlzLnByb3BzLmlucHV0UmVmKGVsKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0X3RoaXMucGxhY2VIb2xkZXJTaXplclJlZiA9IGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0X3RoaXMucGxhY2VIb2xkZXJTaXplciA9IGVsO1xuXHRcdH07XG5cblx0XHRfdGhpcy5zaXplclJlZiA9IGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0X3RoaXMuc2l6ZXIgPSBlbDtcblx0XHR9O1xuXG5cdFx0X3RoaXMuc3RhdGUgPSB7XG5cdFx0XHRpbnB1dFdpZHRoOiBwcm9wcy5taW5XaWR0aCxcblx0XHRcdGlucHV0SWQ6IHByb3BzLmlkIHx8IGdlbmVyYXRlSWQoKVxuXHRcdH07XG5cdFx0cmV0dXJuIF90aGlzO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKEF1dG9zaXplSW5wdXQsIFt7XG5cdFx0a2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0XHRcdHRoaXMubW91bnRlZCA9IHRydWU7XG5cdFx0XHR0aGlzLmNvcHlJbnB1dFN0eWxlcygpO1xuXHRcdFx0dGhpcy51cGRhdGVJbnB1dFdpZHRoKCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcblx0XHRcdHZhciBpZCA9IG5leHRQcm9wcy5pZDtcblxuXHRcdFx0aWYgKGlkICE9PSB0aGlzLnByb3BzLmlkKSB7XG5cdFx0XHRcdHRoaXMuc2V0U3RhdGUoeyBpbnB1dElkOiBpZCB8fCBnZW5lcmF0ZUlkKCkgfSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG5cdFx0XHRpZiAocHJldlN0YXRlLmlucHV0V2lkdGggIT09IHRoaXMuc3RhdGUuaW5wdXRXaWR0aCkge1xuXHRcdFx0XHRpZiAodHlwZW9mIHRoaXMucHJvcHMub25BdXRvc2l6ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdHRoaXMucHJvcHMub25BdXRvc2l6ZSh0aGlzLnN0YXRlLmlucHV0V2lkdGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnVwZGF0ZUlucHV0V2lkdGgoKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuXHRcdFx0dGhpcy5tb3VudGVkID0gZmFsc2U7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnY29weUlucHV0U3R5bGVzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY29weUlucHV0U3R5bGVzKCkge1xuXHRcdFx0aWYgKCF0aGlzLm1vdW50ZWQgfHwgIXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHZhciBpbnB1dFN0eWxlcyA9IHRoaXMuaW5wdXQgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5pbnB1dCk7XG5cdFx0XHRpZiAoIWlucHV0U3R5bGVzKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGNvcHlTdHlsZXMoaW5wdXRTdHlsZXMsIHRoaXMuc2l6ZXIpO1xuXHRcdFx0aWYgKHRoaXMucGxhY2VIb2xkZXJTaXplcikge1xuXHRcdFx0XHRjb3B5U3R5bGVzKGlucHV0U3R5bGVzLCB0aGlzLnBsYWNlSG9sZGVyU2l6ZXIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3VwZGF0ZUlucHV0V2lkdGgnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJbnB1dFdpZHRoKCkge1xuXHRcdFx0aWYgKCF0aGlzLm1vdW50ZWQgfHwgIXRoaXMuc2l6ZXIgfHwgdHlwZW9mIHRoaXMuc2l6ZXIuc2Nyb2xsV2lkdGggPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHZhciBuZXdJbnB1dFdpZHRoID0gdm9pZCAwO1xuXHRcdFx0aWYgKHRoaXMucHJvcHMucGxhY2Vob2xkZXIgJiYgKCF0aGlzLnByb3BzLnZhbHVlIHx8IHRoaXMucHJvcHMudmFsdWUgJiYgdGhpcy5wcm9wcy5wbGFjZWhvbGRlcklzTWluV2lkdGgpKSB7XG5cdFx0XHRcdG5ld0lucHV0V2lkdGggPSBNYXRoLm1heCh0aGlzLnNpemVyLnNjcm9sbFdpZHRoLCB0aGlzLnBsYWNlSG9sZGVyU2l6ZXIuc2Nyb2xsV2lkdGgpICsgMjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5ld0lucHV0V2lkdGggPSB0aGlzLnNpemVyLnNjcm9sbFdpZHRoICsgMjtcblx0XHRcdH1cblx0XHRcdC8vIGFkZCBleHRyYVdpZHRoIHRvIHRoZSBkZXRlY3RlZCB3aWR0aC4gZm9yIG51bWJlciB0eXBlcywgdGhpcyBkZWZhdWx0cyB0byAxNiB0byBhbGxvdyBmb3IgdGhlIHN0ZXBwZXIgVUlcblx0XHRcdHZhciBleHRyYVdpZHRoID0gdGhpcy5wcm9wcy50eXBlID09PSAnbnVtYmVyJyAmJiB0aGlzLnByb3BzLmV4dHJhV2lkdGggPT09IHVuZGVmaW5lZCA/IDE2IDogcGFyc2VJbnQodGhpcy5wcm9wcy5leHRyYVdpZHRoKSB8fCAwO1xuXHRcdFx0bmV3SW5wdXRXaWR0aCArPSBleHRyYVdpZHRoO1xuXHRcdFx0aWYgKG5ld0lucHV0V2lkdGggPCB0aGlzLnByb3BzLm1pbldpZHRoKSB7XG5cdFx0XHRcdG5ld0lucHV0V2lkdGggPSB0aGlzLnByb3BzLm1pbldpZHRoO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG5ld0lucHV0V2lkdGggIT09IHRoaXMuc3RhdGUuaW5wdXRXaWR0aCkge1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRpbnB1dFdpZHRoOiBuZXdJbnB1dFdpZHRoXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2dldElucHV0Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0SW5wdXQoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5pbnB1dDtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdmb2N1cycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGZvY3VzKCkge1xuXHRcdFx0dGhpcy5pbnB1dC5mb2N1cygpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2JsdXInLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBibHVyKCkge1xuXHRcdFx0dGhpcy5pbnB1dC5ibHVyKCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnc2VsZWN0Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2VsZWN0KCkge1xuXHRcdFx0dGhpcy5pbnB1dC5zZWxlY3QoKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdyZW5kZXJTdHlsZXMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiByZW5kZXJTdHlsZXMoKSB7XG5cdFx0XHQvLyB0aGlzIG1ldGhvZCBpbmplY3RzIHN0eWxlcyB0byBoaWRlIElFJ3MgY2xlYXIgaW5kaWNhdG9yLCB3aGljaCBtZXNzZXNcblx0XHRcdC8vIHdpdGggaW5wdXQgc2l6ZSBkZXRlY3Rpb24uIHRoZSBzdHlsZXNoZWV0IGlzIG9ubHkgaW5qZWN0ZWQgd2hlbiB0aGVcblx0XHRcdC8vIGJyb3dzZXIgaXMgSUUsIGFuZCBjYW4gYWxzbyBiZSBkaXNhYmxlZCBieSB0aGUgYGluamVjdFN0eWxlc2AgcHJvcC5cblx0XHRcdHZhciBpbmplY3RTdHlsZXMgPSB0aGlzLnByb3BzLmluamVjdFN0eWxlcztcblxuXHRcdFx0cmV0dXJuIGlzSUUgJiYgaW5qZWN0U3R5bGVzID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJywgeyBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuXHRcdFx0XHRcdF9faHRtbDogJ2lucHV0IycgKyB0aGlzLnN0YXRlLmlucHV0SWQgKyAnOjotbXMtY2xlYXIge2Rpc3BsYXk6IG5vbmU7fSdcblx0XHRcdFx0fSB9KSA6IG51bGw7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAncmVuZGVyJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdFx0dmFyIHNpemVyVmFsdWUgPSBbdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUsIHRoaXMucHJvcHMudmFsdWUsICcnXS5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRWYWx1ZSkge1xuXHRcdFx0XHRpZiAocHJldmlvdXNWYWx1ZSAhPT0gbnVsbCAmJiBwcmV2aW91c1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJldmlvdXNWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gY3VycmVudFZhbHVlO1xuXHRcdFx0fSk7XG5cblx0XHRcdHZhciB3cmFwcGVyU3R5bGUgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcy5zdHlsZSk7XG5cdFx0XHRpZiAoIXdyYXBwZXJTdHlsZS5kaXNwbGF5KSB3cmFwcGVyU3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuXG5cdFx0XHR2YXIgaW5wdXRTdHlsZSA9IF9leHRlbmRzKHtcblx0XHRcdFx0Ym94U2l6aW5nOiAnY29udGVudC1ib3gnLFxuXHRcdFx0XHR3aWR0aDogdGhpcy5zdGF0ZS5pbnB1dFdpZHRoICsgJ3B4J1xuXHRcdFx0fSwgdGhpcy5wcm9wcy5pbnB1dFN0eWxlKTtcblxuXHRcdFx0dmFyIGlucHV0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXModGhpcy5wcm9wcywgW10pO1xuXG5cdFx0XHRjbGVhbklucHV0UHJvcHMoaW5wdXRQcm9wcyk7XG5cdFx0XHRpbnB1dFByb3BzLmNsYXNzTmFtZSA9IHRoaXMucHJvcHMuaW5wdXRDbGFzc05hbWU7XG5cdFx0XHRpbnB1dFByb3BzLmlkID0gdGhpcy5zdGF0ZS5pbnB1dElkO1xuXHRcdFx0aW5wdXRQcm9wcy5zdHlsZSA9IGlucHV0U3R5bGU7XG5cblx0XHRcdHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0J2RpdicsXG5cdFx0XHRcdHsgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSwgc3R5bGU6IHdyYXBwZXJTdHlsZSB9LFxuXHRcdFx0XHR0aGlzLnJlbmRlclN0eWxlcygpLFxuXHRcdFx0XHRfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCBfZXh0ZW5kcyh7fSwgaW5wdXRQcm9wcywgeyByZWY6IHRoaXMuaW5wdXRSZWYgfSkpLFxuXHRcdFx0XHRfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0XHR7IHJlZjogdGhpcy5zaXplclJlZiwgc3R5bGU6IHNpemVyU3R5bGUgfSxcblx0XHRcdFx0XHRzaXplclZhbHVlXG5cdFx0XHRcdCksXG5cdFx0XHRcdHRoaXMucHJvcHMucGxhY2Vob2xkZXIgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0XHR7IHJlZjogdGhpcy5wbGFjZUhvbGRlclNpemVyUmVmLCBzdHlsZTogc2l6ZXJTdHlsZSB9LFxuXHRcdFx0XHRcdHRoaXMucHJvcHMucGxhY2Vob2xkZXJcblx0XHRcdFx0KSA6IG51bGxcblx0XHRcdCk7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIEF1dG9zaXplSW5wdXQ7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5BdXRvc2l6ZUlucHV0LnByb3BUeXBlcyA9IHtcblx0Y2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgLy8gY2xhc3NOYW1lIGZvciB0aGUgb3V0ZXIgZWxlbWVudFxuXHRkZWZhdWx0VmFsdWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55LCAvLyBkZWZhdWx0IGZpZWxkIHZhbHVlXG5cdGV4dHJhV2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFsvLyBhZGRpdGlvbmFsIHdpZHRoIGZvciBpbnB1dCBlbGVtZW50XG5cdF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ10pLFxuXHRpZDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIC8vIGlkIHRvIHVzZSBmb3IgdGhlIGlucHV0LCBjYW4gYmUgc2V0IGZvciBjb25zaXN0ZW50IHNuYXBzaG90c1xuXHRpbmplY3RTdHlsZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCwgLy8gaW5qZWN0IHRoZSBjdXN0b20gc3R5bGVzaGVldCB0byBoaWRlIGNsZWFyIFVJLCBkZWZhdWx0cyB0byB0cnVlXG5cdGlucHV0Q2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgLy8gY2xhc3NOYW1lIGZvciB0aGUgaW5wdXQgZWxlbWVudFxuXHRpbnB1dFJlZjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLCAvLyByZWYgY2FsbGJhY2sgZm9yIHRoZSBpbnB1dCBlbGVtZW50XG5cdGlucHV0U3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LCAvLyBjc3Mgc3R5bGVzIGZvciB0aGUgaW5wdXQgZWxlbWVudFxuXHRtaW5XaWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoWy8vIG1pbmltdW0gd2lkdGggZm9yIGlucHV0IGVsZW1lbnRcblx0X3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXSksXG5cdG9uQXV0b3NpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYywgLy8gb25BdXRvc2l6ZSBoYW5kbGVyOiBmdW5jdGlvbihuZXdXaWR0aCkge31cblx0b25DaGFuZ2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYywgLy8gb25DaGFuZ2UgaGFuZGxlcjogZnVuY3Rpb24oZXZlbnQpIHt9XG5cdHBsYWNlaG9sZGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgLy8gcGxhY2Vob2xkZXIgdGV4dFxuXHRwbGFjZWhvbGRlcklzTWluV2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCwgLy8gZG9uJ3QgY29sbGFwc2Ugc2l6ZSB0byBsZXNzIHRoYW4gdGhlIHBsYWNlaG9sZGVyXG5cdHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCwgLy8gY3NzIHN0eWxlcyBmb3IgdGhlIG91dGVyIGVsZW1lbnRcblx0dmFsdWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55IC8vIGZpZWxkIHZhbHVlXG59O1xuQXV0b3NpemVJbnB1dC5kZWZhdWx0UHJvcHMgPSB7XG5cdG1pbldpZHRoOiAxLFxuXHRpbmplY3RTdHlsZXM6IHRydWVcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEF1dG9zaXplSW5wdXQ7IiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGhhc0NsYXNzO1xuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSByZXR1cm4gISFjbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtlbHNlIHJldHVybiAoXCIgXCIgKyAoZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCBlbGVtZW50LmNsYXNzTmFtZSkgKyBcIiBcIikuaW5kZXhPZihcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiKSAhPT0gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkQ2xhc3M7XG5cbnZhciBfaGFzQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hhc0NsYXNzXCIpKTtcblxuZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7ZWxzZSBpZiAoISgwLCBfaGFzQ2xhc3MuZGVmYXVsdCkoZWxlbWVudCwgY2xhc3NOYW1lKSkgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUgKyAnICcgKyBjbGFzc05hbWU7ZWxzZSBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJykgKyAnICcgKyBjbGFzc05hbWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gcmVwbGFjZUNsYXNzTmFtZShvcmlnQ2xhc3MsIGNsYXNzVG9SZW1vdmUpIHtcbiAgcmV0dXJuIG9yaWdDbGFzcy5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBjbGFzc1RvUmVtb3ZlICsgJyg/OlxcXFxzfCQpJywgJ2cnKSwgJyQxJykucmVwbGFjZSgvXFxzKy9nLCAnICcpLnJlcGxhY2UoL15cXHMqfFxccyokL2csICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtlbHNlIGlmICh0eXBlb2YgZWxlbWVudC5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSBlbGVtZW50LmNsYXNzTmFtZSA9IHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUsIGNsYXNzTmFtZSk7ZWxzZSBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCByZXBsYWNlQ2xhc3NOYW1lKGVsZW1lbnQuY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NOYW1lLmJhc2VWYWwgfHwgJycsIGNsYXNzTmFtZSkpO1xufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuXG4gIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICBpZiAoc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICAvLyBVc2UgdGhlIHNldFN0YXRlKCkgdXBkYXRlciB0byBlbnN1cmUgc3RhdGUgaXNuJ3Qgc3RhbGUgaW4gY2VydGFpbiBlZGdlIGNhc2VzLlxuICBmdW5jdGlvbiB1cGRhdGVyKHByZXZTdGF0ZSkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKTtcbiAgICByZXR1cm4gc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCA/IHN0YXRlIDogbnVsbDtcbiAgfVxuICAvLyBCaW5kaW5nIFwidGhpc1wiIGlzIGltcG9ydGFudCBmb3Igc2hhbGxvdyByZW5kZXJlciBzdXBwb3J0LlxuICB0aGlzLnNldFN0YXRlKHVwZGF0ZXIuYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcHJldlByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgcHJldlN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnByb3BzID0gbmV4dFByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgPSB0cnVlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3QgPSB0aGlzLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0aGlzLnByb3BzID0gcHJldlByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBwcmV2U3RhdGU7XG4gIH1cbn1cblxuLy8gUmVhY3QgbWF5IHdhcm4gYWJvdXQgY1dNL2NXUlAvY1dVIG1ldGhvZHMgYmVpbmcgZGVwcmVjYXRlZC5cbi8vIEFkZCBhIGZsYWcgdG8gc3VwcHJlc3MgdGhlc2Ugd2FybmluZ3MgZm9yIHRoaXMgc3BlY2lhbCBjYXNlLlxuY29tcG9uZW50V2lsbE1vdW50Ll9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcy5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxVcGRhdGUuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5cbmZ1bmN0aW9uIHBvbHlmaWxsKENvbXBvbmVudCkge1xuICB2YXIgcHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcblxuICBpZiAoIXByb3RvdHlwZSB8fCAhcHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBvbmx5IHBvbHlmaWxsIGNsYXNzIGNvbXBvbmVudHMnKTtcbiAgfVxuXG4gIGlmIChcbiAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbiAgfVxuXG4gIC8vIElmIG5ldyBjb21wb25lbnQgQVBJcyBhcmUgZGVmaW5lZCwgXCJ1bnNhZmVcIiBsaWZlY3ljbGVzIHdvbid0IGJlIGNhbGxlZC5cbiAgLy8gRXJyb3IgaWYgYW55IG9mIHRoZXNlIGxpZmVjeWNsZXMgYXJlIHByZXNlbnQsXG4gIC8vIEJlY2F1c2UgdGhleSB3b3VsZCB3b3JrIGRpZmZlcmVudGx5IGJldHdlZW4gb2xkZXIgYW5kIG5ld2VyICgxNi4zKykgdmVyc2lvbnMgb2YgUmVhY3QuXG4gIHZhciBmb3VuZFdpbGxNb3VudE5hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9IG51bGw7XG4gIHZhciBmb3VuZFdpbGxVcGRhdGVOYW1lID0gbnVsbDtcbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ2NvbXBvbmVudFdpbGxNb3VudCc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsTW91bnQnO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdjb21wb25lbnRXaWxsVXBkYXRlJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH1cbiAgaWYgKFxuICAgIGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCB8fFxuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsXG4gICkge1xuICAgIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lO1xuICAgIHZhciBuZXdBcGlOYW1lID1cbiAgICAgIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpJ1xuICAgICAgICA6ICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpJztcblxuICAgIHRocm93IEVycm9yKFxuICAgICAgJ1Vuc2FmZSBsZWdhY3kgbGlmZWN5Y2xlcyB3aWxsIG5vdCBiZSBjYWxsZWQgZm9yIGNvbXBvbmVudHMgdXNpbmcgbmV3IGNvbXBvbmVudCBBUElzLlxcblxcbicgK1xuICAgICAgICBjb21wb25lbnROYW1lICtcbiAgICAgICAgJyB1c2VzICcgK1xuICAgICAgICBuZXdBcGlOYW1lICtcbiAgICAgICAgJyBidXQgYWxzbyBjb250YWlucyB0aGUgZm9sbG93aW5nIGxlZ2FjeSBsaWZlY3ljbGVzOicgK1xuICAgICAgICAoZm91bmRXaWxsTW91bnROYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbE1vdW50TmFtZSA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsXG4gICAgICAgICAgPyAnXFxuICAnICsgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZVxuICAgICAgICAgIDogJycpICtcbiAgICAgICAgKGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsVXBkYXRlTmFtZSA6ICcnKSArXG4gICAgICAgICdcXG5cXG5UaGUgYWJvdmUgbGlmZWN5Y2xlcyBzaG91bGQgYmUgcmVtb3ZlZC4gTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTpcXG4nICtcbiAgICAgICAgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rcydcbiAgICApO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXTSBhbmQgY1dSUCB0byBpbnZva2UgdGhlIG5ldyBzdGF0aWMgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGVzZSBsaWZlY3ljbGVzIGlmIGdEU0ZQIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGNvbXBvbmVudFdpbGxNb3VudDtcbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM7XG4gIH1cblxuICAvLyBSZWFjdCA8PSAxNi4yIGRvZXMgbm90IHN1cHBvcnQgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXVSB0byBpbnZva2UgdGhlIG5ldyBsaWZlY3ljbGUuXG4gIC8vIE5ld2VyIHZlcnNpb25zIG9mIFJlYWN0IHdpbGwgaWdub3JlIHRoYXQgbGlmZWN5Y2xlIGlmIGdTQlUgZXhpc3RzLlxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IHBvbHlmaWxsIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkgZm9yIGNvbXBvbmVudHMgdGhhdCBkbyBub3QgZGVmaW5lIGNvbXBvbmVudERpZFVwZGF0ZSgpIG9uIHRoZSBwcm90b3R5cGUnXG4gICAgICApO1xuICAgIH1cblxuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gY29tcG9uZW50V2lsbFVwZGF0ZTtcblxuICAgIHZhciBjb21wb25lbnREaWRVcGRhdGUgPSBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlO1xuXG4gICAgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZVBvbHlmaWxsKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlLFxuICAgICAgbWF5YmVTbmFwc2hvdFxuICAgICkge1xuICAgICAgLy8gMTYuMysgd2lsbCBub3QgZXhlY3V0ZSBvdXIgd2lsbC11cGRhdGUgbWV0aG9kO1xuICAgICAgLy8gSXQgd2lsbCBwYXNzIGEgc25hcHNob3QgdmFsdWUgdG8gZGlkLXVwZGF0ZSB0aG91Z2guXG4gICAgICAvLyBPbGRlciB2ZXJzaW9ucyB3aWxsIHJlcXVpcmUgb3VyIHBvbHlmaWxsZWQgd2lsbC11cGRhdGUgdmFsdWUuXG4gICAgICAvLyBXZSBuZWVkIHRvIGhhbmRsZSBib3RoIGNhc2VzLCBidXQgY2FuJ3QganVzdCBjaGVjayBmb3IgdGhlIHByZXNlbmNlIG9mIFwibWF5YmVTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBmb3IgPD0gMTUueCB2ZXJzaW9ucyB0aGlzIG1pZ2h0IGJlIGEgXCJwcmV2Q29udGV4dFwiIG9iamVjdC5cbiAgICAgIC8vIFdlIGFsc28gY2FuJ3QganVzdCBjaGVjayBcIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XCIsXG4gICAgICAvLyBCZWNhdXNlIGdldC1zbmFwc2hvdCBtaWdodCByZXR1cm4gYSBmYWxzeSB2YWx1ZS5cbiAgICAgIC8vIFNvIGNoZWNrIGZvciB0aGUgZXhwbGljaXQgX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnIGZsYWcgdG8gZGV0ZXJtaW5lIGJlaGF2aW9yLlxuICAgICAgdmFyIHNuYXBzaG90ID0gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWdcbiAgICAgICAgPyB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XG4gICAgICAgIDogbWF5YmVTbmFwc2hvdDtcblxuICAgICAgY29tcG9uZW50RGlkVXBkYXRlLmNhbGwodGhpcywgcHJldlByb3BzLCBwcmV2U3RhdGUsIHNuYXBzaG90KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn1cblxuZXhwb3J0IHsgcG9seWZpbGwgfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jbGFzc05hbWVzU2hhcGUgPSBleHBvcnRzLnRpbWVvdXRzU2hhcGUgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB0aW1lb3V0c1NoYXBlID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICBhcHBlYXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbn0pLmlzUmVxdWlyZWRdKSA6IG51bGw7XG5leHBvcnRzLnRpbWVvdXRzU2hhcGUgPSB0aW1lb3V0c1NoYXBlO1xudmFyIGNsYXNzTmFtZXNTaGFwZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgYWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59KSwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGVudGVyRG9uZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZW50ZXJBY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXREb25lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0QWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59KV0pIDogbnVsbDtcbmV4cG9ydHMuY2xhc3NOYW1lc1NoYXBlID0gY2xhc3NOYW1lc1NoYXBlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5FWElUSU5HID0gZXhwb3J0cy5FTlRFUkVEID0gZXhwb3J0cy5FTlRFUklORyA9IGV4cG9ydHMuRVhJVEVEID0gZXhwb3J0cy5VTk1PVU5URUQgPSB2b2lkIDA7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKFwiLi91dGlscy9Qcm9wVHlwZXNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xuZXhwb3J0cy5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG52YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnRzLkVYSVRFRCA9IEVYSVRFRDtcbnZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnRzLkVOVEVSSU5HID0gRU5URVJJTkc7XG52YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydHMuRU5URVJFRCA9IEVOVEVSRUQ7XG52YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAwIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbmV4cG9ydHMuRVhJVElORyA9IEVYSVRJTkc7XG5cbnZhciBUcmFuc2l0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0LnRyYW5zaXRpb25Hcm91cDsgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnNcblxuICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyO1xuICAgIHZhciBpbml0aWFsU3RhdHVzO1xuICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJvcHMuaW4pIHtcbiAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gRU5URVJJTkc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRU5URVJFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnVubW91bnRPbkV4aXQgfHwgcHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBVTk1PVU5URUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RhdHVzOiBpbml0aWFsU3RhdHVzXG4gICAgfTtcbiAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2l0aW9uR3JvdXA6IG51bGwgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcblxuICAgIH07XG4gIH07XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuXG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICB2YXIgbm9kZSA9IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdChub2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQudHJhbnNpdGlvbkdyb3VwID8gdGhpcy5jb250ZXh0LnRyYW5zaXRpb25Hcm91cC5pc01vdW50aW5nIDogbW91bnRpbmc7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlcikge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhub2RlLCBhcHBlYXJpbmcpO1xuXG4gICAgICBfdGhpczIub25UcmFuc2l0aW9uRW5kKG5vZGUsIGVudGVyVGltZW91dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdChub2RlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgZXhpdCA9IHRoaXMucHJvcHMuZXhpdDtcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgc3RhdHVzOiBFWElUSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGluZyhub2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiXSk7IC8vIGZpbHRlciBwcm9wcyBmb3IgVHJhbnN0aXRpb25cblxuXG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuaW47XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMubW91bnRPbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnVubW91bnRPbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMudGltZW91dDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5hZGRFbmRMaXN0ZW5lcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmVkO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXRpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0ZWQ7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuVHJhbnNpdGlvbi5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBmdW5jdGlvbiB0cmFuc2l0aW9uR3JvdXAoKSB7fVxufTtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCwgYCd1bm1vdW50ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5vcm1hbGx5IGEgY29tcG9uZW50IGlzIG5vdCB0cmFuc2l0aW9uZWQgaWYgaXQgaXMgc2hvd24gd2hlbiB0aGUgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50IG1vdW50cy5cbiAgICogSWYgeW91IHdhbnQgdG8gdHJhbnNpdGlvbiBvbiB0aGUgZmlyc3QgbW91bnQgc2V0IGBhcHBlYXJgIHRvIGB0cnVlYCwgYW5kIHRoZVxuICAgKiBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluIGFzIHNvb24gYXMgdGhlIGA8VHJhbnNpdGlvbj5gIG1vdW50cy5cbiAgICpcbiAgICogPiBOb3RlOiB0aGVyZSBhcmUgbm8gc3BlY2lmaWMgXCJhcHBlYXJcIiBzdGF0ZXMuIGBhcHBlYXJgIG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGBlbnRlcmAgdHJhbnNpdGlvbi5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGVudGVyIHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBleGl0IHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBSZXF1aXJlZCB1bmxlc3MgYGFkZEVuZExpc3RlbmVyYCBpcyBwcm92aWRlZC5cbiAgICpcbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9uczpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9ezUwMH1cbiAgICogYGBgXG4gICAqXG4gICAqIG9yIGluZGl2aWR1YWxseTpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9e3tcbiAgICogIGFwcGVhcjogNTAwLFxuICAgKiAgZW50ZXI6IDMwMCxcbiAgICogIGV4aXQ6IDUwMCxcbiAgICogfX1cbiAgICogYGBgXG4gICAqXG4gICAqIC0gYGFwcGVhcmAgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIG9mIGBlbnRlcmBcbiAgICogLSBgZW50ZXJgIGRlZmF1bHRzIHRvIGAwYFxuICAgKiAtIGBleGl0YCBkZWZhdWx0cyB0byBgMGBcbiAgICpcbiAgICogQHR5cGUge251bWJlciB8IHsgZW50ZXI/OiBudW1iZXIsIGV4aXQ/OiBudW1iZXIsIGFwcGVhcj86IG51bWJlciB9fVxuICAgKi9cbiAgdGltZW91dDogZnVuY3Rpb24gdGltZW91dChwcm9wcykge1xuICAgIHZhciBwdCA9IF9Qcm9wVHlwZXMudGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuICoqTm90ZToqKiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogYWRkRW5kTGlzdGVuZXI9eyhub2RlLCBkb25lKSA9PiB7XG4gICAqICAgLy8gdXNlIHRoZSBjc3MgdHJhbnNpdGlvbmVuZCBldmVudCB0byBtYXJrIHRoZSBmaW5pc2ggb2YgYSB0cmFuc2l0aW9uXG4gICAqICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZG9uZSwgZmFsc2UpO1xuICAgKiB9fVxuICAgKiBgYGBcbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jIC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxufSA6IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuVHJhbnNpdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2UsXG4gIGVudGVyOiB0cnVlLFxuICBleGl0OiB0cnVlLFxuICBvbkVudGVyOiBub29wLFxuICBvbkVudGVyaW5nOiBub29wLFxuICBvbkVudGVyZWQ6IG5vb3AsXG4gIG9uRXhpdDogbm9vcCxcbiAgb25FeGl0aW5nOiBub29wLFxuICBvbkV4aXRlZDogbm9vcFxufTtcblRyYW5zaXRpb24uVU5NT1VOVEVEID0gMDtcblRyYW5zaXRpb24uRVhJVEVEID0gMTtcblRyYW5zaXRpb24uRU5URVJJTkcgPSAyO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gMztcblRyYW5zaXRpb24uRVhJVElORyA9IDQ7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShUcmFuc2l0aW9uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfYWRkQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9jbGFzcy9hZGRDbGFzc1wiKSk7XG5cbnZhciBfcmVtb3ZlQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9jbGFzcy9yZW1vdmVDbGFzc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfVHJhbnNpdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVHJhbnNpdGlvblwiKSk7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZShcIi4vdXRpbHMvUHJvcFR5cGVzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbiBhZGRDbGFzcyhub2RlLCBjbGFzc2VzKSB7XG4gIHJldHVybiBub2RlICYmIGNsYXNzZXMgJiYgY2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gKDAsIF9hZGRDbGFzcy5kZWZhdWx0KShub2RlLCBjKTtcbiAgfSk7XG59O1xuXG52YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhub2RlLCBjbGFzc2VzKSB7XG4gIHJldHVybiBub2RlICYmIGNsYXNzZXMgJiYgY2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gKDAsIF9yZW1vdmVDbGFzcy5kZWZhdWx0KShub2RlLCBjKTtcbiAgfSk7XG59O1xuLyoqXG4gKiBBIHRyYW5zaXRpb24gY29tcG9uZW50IGluc3BpcmVkIGJ5IHRoZSBleGNlbGxlbnRcbiAqIFtuZy1hbmltYXRlXShodHRwOi8vd3d3Lm5nYW5pbWF0ZS5vcmcvKSBsaWJyYXJ5LCB5b3Ugc2hvdWxkIHVzZSBpdCBpZiB5b3UncmVcbiAqIHVzaW5nIENTUyB0cmFuc2l0aW9ucyBvciBhbmltYXRpb25zLiBJdCdzIGJ1aWx0IHVwb24gdGhlXG4gKiBbYFRyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3RyYW5zaXRpb24pXG4gKiBjb21wb25lbnQsIHNvIGl0IGluaGVyaXRzIGFsbCBvZiBpdHMgcHJvcHMuXG4gKlxuICogYENTU1RyYW5zaXRpb25gIGFwcGxpZXMgYSBwYWlyIG9mIGNsYXNzIG5hbWVzIGR1cmluZyB0aGUgYGFwcGVhcmAsIGBlbnRlcmAsXG4gKiBhbmQgYGV4aXRgIHN0YXRlcyBvZiB0aGUgdHJhbnNpdGlvbi4gVGhlIGZpcnN0IGNsYXNzIGlzIGFwcGxpZWQgYW5kIHRoZW4gYVxuICogc2Vjb25kIGAqLWFjdGl2ZWAgY2xhc3MgaW4gb3JkZXIgdG8gYWN0aXZhdGUgdGhlIENTU1MgdHJhbnNpdGlvbi4gQWZ0ZXIgdGhlXG4gKiB0cmFuc2l0aW9uLCBtYXRjaGluZyBgKi1kb25lYCBjbGFzcyBuYW1lcyBhcmUgYXBwbGllZCB0byBwZXJzaXN0IHRoZVxuICogdHJhbnNpdGlvbiBzdGF0ZS5cbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPENTU1RyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17MjAwfSBjbGFzc05hbWVzPVwibXktbm9kZVwiPlxuICogICAgICAgICA8ZGl2PlxuICogICAgICAgICAgIHtcIkknbGwgcmVjZWl2ZSBteS1ub2RlLSogY2xhc3Nlc1wifVxuICogICAgICAgICA8L2Rpdj5cbiAqICAgICAgIDwvQ1NTVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IHNldEluUHJvcCh0cnVlKX0+XG4gKiAgICAgICAgIENsaWNrIHRvIEVudGVyXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGBpbmAgcHJvcCBpcyBzZXQgdG8gYHRydWVgLCB0aGUgY2hpbGQgY29tcG9uZW50IHdpbGwgZmlyc3QgcmVjZWl2ZVxuICogdGhlIGNsYXNzIGBleGFtcGxlLWVudGVyYCwgdGhlbiB0aGUgYGV4YW1wbGUtZW50ZXItYWN0aXZlYCB3aWxsIGJlIGFkZGVkIGluXG4gKiB0aGUgbmV4dCB0aWNrLiBgQ1NTVHJhbnNpdGlvbmAgW2ZvcmNlcyBhXG4gKiByZWZsb3ddKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvYmxvYi81MDA3MzAzZTcyOWE3NGJlNjZhMjFjM2UyMjA1ZTQ5MTY4MjE1MjRiL3NyYy9DU1NUcmFuc2l0aW9uLmpzI0wyMDgtTDIxNSlcbiAqIGJldHdlZW4gYmVmb3JlIGFkZGluZyB0aGUgYGV4YW1wbGUtZW50ZXItYWN0aXZlYC4gVGhpcyBpcyBhbiBpbXBvcnRhbnQgdHJpY2tcbiAqIGJlY2F1c2UgaXQgYWxsb3dzIHVzIHRvIHRyYW5zaXRpb24gYmV0d2VlbiBgZXhhbXBsZS1lbnRlcmAgYW5kXG4gKiBgZXhhbXBsZS1lbnRlci1hY3RpdmVgIGV2ZW4gdGhvdWdoIHRoZXkgd2VyZSBhZGRlZCBpbW1lZGlhdGVseSBvbmUgYWZ0ZXJcbiAqIGFub3RoZXIuIE1vc3Qgbm90YWJseSwgdGhpcyBpcyB3aGF0IG1ha2VzIGl0IHBvc3NpYmxlIGZvciB1cyB0byBhbmltYXRlXG4gKiBfYXBwZWFyYW5jZV8uXG4gKlxuICogYGBgY3NzXG4gKiAubXktbm9kZS1lbnRlciB7XG4gKiAgIG9wYWNpdHk6IDA7XG4gKiB9XG4gKiAubXktbm9kZS1lbnRlci1hY3RpdmUge1xuICogICBvcGFjaXR5OiAxO1xuICogICB0cmFuc2l0aW9uOiBvcGFjaXR5IDIwMG1zO1xuICogfVxuICogLm15LW5vZGUtZXhpdCB7XG4gKiAgIG9wYWNpdHk6IDE7XG4gKiB9XG4gKiAubXktbm9kZS1leGl0LWFjdGl2ZSB7XG4gKiAgIG9wYWNpdHk6IDA7XG4gKiAgIHRyYW5zaXRpb246IG9wYWNpdHk6IDIwMG1zO1xuICogfVxuICogYGBgXG4gKlxuICogYCotYWN0aXZlYCBjbGFzc2VzIHJlcHJlc2VudCB3aGljaCBzdHlsZXMgeW91IHdhbnQgdG8gYW5pbWF0ZSAqKnRvKiouXG4gKi9cblxuXG52YXIgQ1NTVHJhbnNpdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShDU1NUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDU1NUcmFuc2l0aW9uKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMub25FbnRlciA9IGZ1bmN0aW9uIChub2RlLCBhcHBlYXJpbmcpIHtcbiAgICAgIHZhciBfdGhpcyRnZXRDbGFzc05hbWVzID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcyhhcHBlYXJpbmcgPyAnYXBwZWFyJyA6ICdlbnRlcicpLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXMuY2xhc3NOYW1lO1xuXG4gICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdleGl0Jyk7XG5cbiAgICAgIGFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXIobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25FbnRlcmluZyA9IGZ1bmN0aW9uIChub2RlLCBhcHBlYXJpbmcpIHtcbiAgICAgIHZhciBfdGhpcyRnZXRDbGFzc05hbWVzMiA9IF90aGlzLmdldENsYXNzTmFtZXMoYXBwZWFyaW5nID8gJ2FwcGVhcicgOiAnZW50ZXInKSxcbiAgICAgICAgICBhY3RpdmVDbGFzc05hbWUgPSBfdGhpcyRnZXRDbGFzc05hbWVzMi5hY3RpdmVDbGFzc05hbWU7XG5cbiAgICAgIF90aGlzLnJlZmxvd0FuZEFkZENsYXNzKG5vZGUsIGFjdGl2ZUNsYXNzTmFtZSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyaW5nKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXJpbmcobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25FbnRlcmVkID0gZnVuY3Rpb24gKG5vZGUsIGFwcGVhcmluZykge1xuICAgICAgdmFyIGFwcGVhckNsYXNzTmFtZSA9IF90aGlzLmdldENsYXNzTmFtZXMoJ2FwcGVhcicpLmRvbmVDbGFzc05hbWU7XG5cbiAgICAgIHZhciBlbnRlckNsYXNzTmFtZSA9IF90aGlzLmdldENsYXNzTmFtZXMoJ2VudGVyJykuZG9uZUNsYXNzTmFtZTtcblxuICAgICAgdmFyIGRvbmVDbGFzc05hbWUgPSBhcHBlYXJpbmcgPyBhcHBlYXJDbGFzc05hbWUgKyBcIiBcIiArIGVudGVyQ2xhc3NOYW1lIDogZW50ZXJDbGFzc05hbWU7XG5cbiAgICAgIF90aGlzLnJlbW92ZUNsYXNzZXMobm9kZSwgYXBwZWFyaW5nID8gJ2FwcGVhcicgOiAnZW50ZXInKTtcblxuICAgICAgYWRkQ2xhc3Mobm9kZSwgZG9uZUNsYXNzTmFtZSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyZWQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FbnRlcmVkKG5vZGUsIGFwcGVhcmluZyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRXhpdCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgX3RoaXMkZ2V0Q2xhc3NOYW1lczMgPSBfdGhpcy5nZXRDbGFzc05hbWVzKCdleGl0JyksXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lczMuY2xhc3NOYW1lO1xuXG4gICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdhcHBlYXInKTtcblxuICAgICAgX3RoaXMucmVtb3ZlQ2xhc3Nlcyhub2RlLCAnZW50ZXInKTtcblxuICAgICAgYWRkQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXhpdCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRXhpdGluZyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgX3RoaXMkZ2V0Q2xhc3NOYW1lczQgPSBfdGhpcy5nZXRDbGFzc05hbWVzKCdleGl0JyksXG4gICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lczQuYWN0aXZlQ2xhc3NOYW1lO1xuXG4gICAgICBfdGhpcy5yZWZsb3dBbmRBZGRDbGFzcyhub2RlLCBhY3RpdmVDbGFzc05hbWUpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0aW5nKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRXhpdGluZyhub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25FeGl0ZWQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIF90aGlzJGdldENsYXNzTmFtZXM1ID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcygnZXhpdCcpLFxuICAgICAgICAgIGRvbmVDbGFzc05hbWUgPSBfdGhpcyRnZXRDbGFzc05hbWVzNS5kb25lQ2xhc3NOYW1lO1xuXG4gICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdleGl0Jyk7XG5cbiAgICAgIGFkZENsYXNzKG5vZGUsIGRvbmVDbGFzc05hbWUpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmdldENsYXNzTmFtZXMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgdmFyIGNsYXNzTmFtZXMgPSBfdGhpcy5wcm9wcy5jbGFzc05hbWVzO1xuICAgICAgdmFyIGlzU3RyaW5nQ2xhc3NOYW1lcyA9IHR5cGVvZiBjbGFzc05hbWVzID09PSAnc3RyaW5nJztcbiAgICAgIHZhciBwcmVmaXggPSBpc1N0cmluZ0NsYXNzTmFtZXMgJiYgY2xhc3NOYW1lcyA/IGNsYXNzTmFtZXMgKyAnLScgOiAnJztcbiAgICAgIHZhciBjbGFzc05hbWUgPSBpc1N0cmluZ0NsYXNzTmFtZXMgPyBwcmVmaXggKyB0eXBlIDogY2xhc3NOYW1lc1t0eXBlXTtcbiAgICAgIHZhciBhY3RpdmVDbGFzc05hbWUgPSBpc1N0cmluZ0NsYXNzTmFtZXMgPyBjbGFzc05hbWUgKyAnLWFjdGl2ZScgOiBjbGFzc05hbWVzW3R5cGUgKyAnQWN0aXZlJ107XG4gICAgICB2YXIgZG9uZUNsYXNzTmFtZSA9IGlzU3RyaW5nQ2xhc3NOYW1lcyA/IGNsYXNzTmFtZSArICctZG9uZScgOiBjbGFzc05hbWVzW3R5cGUgKyAnRG9uZSddO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIGFjdGl2ZUNsYXNzTmFtZTogYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgICBkb25lQ2xhc3NOYW1lOiBkb25lQ2xhc3NOYW1lXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ1NTVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbW92ZUNsYXNzZXMgPSBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKG5vZGUsIHR5cGUpIHtcbiAgICB2YXIgX3RoaXMkZ2V0Q2xhc3NOYW1lczYgPSB0aGlzLmdldENsYXNzTmFtZXModHlwZSksXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXM2LmNsYXNzTmFtZSxcbiAgICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lczYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgICBkb25lQ2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lczYuZG9uZUNsYXNzTmFtZTtcblxuICAgIGNsYXNzTmFtZSAmJiByZW1vdmVDbGFzcyhub2RlLCBjbGFzc05hbWUpO1xuICAgIGFjdGl2ZUNsYXNzTmFtZSAmJiByZW1vdmVDbGFzcyhub2RlLCBhY3RpdmVDbGFzc05hbWUpO1xuICAgIGRvbmVDbGFzc05hbWUgJiYgcmVtb3ZlQ2xhc3Mobm9kZSwgZG9uZUNsYXNzTmFtZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlZmxvd0FuZEFkZENsYXNzID0gZnVuY3Rpb24gcmVmbG93QW5kQWRkQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKSB7XG4gICAgLy8gVGhpcyBpcyBmb3IgdG8gZm9yY2UgYSByZXBhaW50LFxuICAgIC8vIHdoaWNoIGlzIG5lY2Vzc2FyeSBpbiBvcmRlciB0byB0cmFuc2l0aW9uIHN0eWxlcyB3aGVuIGFkZGluZyBhIGNsYXNzIG5hbWUuXG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gICAgICBub2RlICYmIG5vZGUuc2Nyb2xsVG9wO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cblxuICAgICAgYWRkQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcyk7XG5cbiAgICBkZWxldGUgcHJvcHMuY2xhc3NOYW1lcztcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHJhbnNpdGlvbi5kZWZhdWx0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIG9uRW50ZXI6IHRoaXMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZDogdGhpcy5vbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nOiB0aGlzLm9uRW50ZXJpbmcsXG4gICAgICBvbkV4aXQ6IHRoaXMub25FeGl0LFxuICAgICAgb25FeGl0aW5nOiB0aGlzLm9uRXhpdGluZyxcbiAgICAgIG9uRXhpdGVkOiB0aGlzLm9uRXhpdGVkXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDU1NUcmFuc2l0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5DU1NUcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lczogJydcbn07XG5DU1NUcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IF9leHRlbmRzKHt9LCBfVHJhbnNpdGlvbi5kZWZhdWx0LnByb3BUeXBlcywge1xuICAvKipcbiAgICogVGhlIGFuaW1hdGlvbiBjbGFzc05hbWVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudCBhcyBpdCBlbnRlcnMsIGV4aXRzIG9yXG4gICAqIGhhcyBmaW5pc2hlZCB0aGUgdHJhbnNpdGlvbi4gQSBzaW5nbGUgbmFtZSBjYW4gYmUgcHJvdmlkZWQgYW5kIGl0IHdpbGwgYmVcbiAgICogc3VmZml4ZWQgZm9yIGVhY2ggc3RhZ2U6IGUuZy5cbiAgICpcbiAgICogYGNsYXNzTmFtZXM9XCJmYWRlXCJgIGFwcGxpZXMgYGZhZGUtZW50ZXJgLCBgZmFkZS1lbnRlci1hY3RpdmVgLFxuICAgKiBgZmFkZS1lbnRlci1kb25lYCwgYGZhZGUtZXhpdGAsIGBmYWRlLWV4aXQtYWN0aXZlYCwgYGZhZGUtZXhpdC1kb25lYCxcbiAgICogYGZhZGUtYXBwZWFyYCwgYGZhZGUtYXBwZWFyLWFjdGl2ZWAsIGFuZCBgZmFkZS1hcHBlYXItZG9uZWAuXG4gICAqXG4gICAqICoqTm90ZSoqOiBgZmFkZS1hcHBlYXItZG9uZWAgYW5kIGBmYWRlLWVudGVyLWRvbmVgIHdpbGwgX2JvdGhfIGJlIGFwcGxpZWQuXG4gICAqIFRoaXMgYWxsb3dzIHlvdSB0byBkZWZpbmUgZGlmZmVyZW50IGJlaGF2aW9yIGZvciB3aGVuIGFwcGVhcmluZyBpcyBkb25lIGFuZFxuICAgKiB3aGVuIHJlZ3VsYXIgZW50ZXJpbmcgaXMgZG9uZSwgdXNpbmcgc2VsZWN0b3JzIGxpa2VcbiAgICogYC5mYWRlLWVudGVyLWRvbmU6bm90KC5mYWRlLWFwcGVhci1kb25lKWAuIEZvciBleGFtcGxlLCB5b3UgY291bGQgYXBwbHkgYW5cbiAgICogZXBpYyBlbnRyYW5jZSBhbmltYXRpb24gd2hlbiBlbGVtZW50IGZpcnN0IGFwcGVhcnMgaW4gdGhlIERPTSB1c2luZ1xuICAgKiBbQW5pbWF0ZS5jc3NdKGh0dHBzOi8vZGFuZWRlbi5naXRodWIuaW8vYW5pbWF0ZS5jc3MvKS4gT3RoZXJ3aXNlIHlvdSBjYW5cbiAgICogc2ltcGx5IHVzZSBgZmFkZS1lbnRlci1kb25lYCBmb3IgZGVmaW5pbmcgYm90aCBjYXNlcy5cbiAgICpcbiAgICogRWFjaCBpbmRpdmlkdWFsIGNsYXNzTmFtZXMgY2FuIGFsc28gYmUgc3BlY2lmaWVkIGluZGVwZW5kZW50bHkgbGlrZTpcbiAgICpcbiAgICogYGBganNcbiAgICogY2xhc3NOYW1lcz17e1xuICAgKiAgYXBwZWFyOiAnbXktYXBwZWFyJyxcbiAgICogIGFwcGVhckFjdGl2ZTogJ215LWFjdGl2ZS1hcHBlYXInLFxuICAgKiAgYXBwZWFyRG9uZTogJ215LWRvbmUtYXBwZWFyJyxcbiAgICogIGVudGVyOiAnbXktZW50ZXInLFxuICAgKiAgZW50ZXJBY3RpdmU6ICdteS1hY3RpdmUtZW50ZXInLFxuICAgKiAgZW50ZXJEb25lOiAnbXktZG9uZS1lbnRlcicsXG4gICAqICBleGl0OiAnbXktZXhpdCcsXG4gICAqICBleGl0QWN0aXZlOiAnbXktYWN0aXZlLWV4aXQnLFxuICAgKiAgZXhpdERvbmU6ICdteS1kb25lLWV4aXQnLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogSWYgeW91IHdhbnQgdG8gc2V0IHRoZXNlIGNsYXNzZXMgdXNpbmcgQ1NTIE1vZHVsZXM6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMuY3NzJztcbiAgICogYGBgXG4gICAqXG4gICAqIHlvdSBtaWdodCB3YW50IHRvIHVzZSBjYW1lbENhc2UgaW4geW91ciBDU1MgZmlsZSwgdGhhdCB3YXkgY291bGQgc2ltcGx5XG4gICAqIHNwcmVhZCB0aGVtIGluc3RlYWQgb2YgbGlzdGluZyB0aGVtIG9uZSBieSBvbmU6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGNsYXNzTmFtZXM9e3sgLi4uc3R5bGVzIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nIHwge1xuICAgKiAgYXBwZWFyPzogc3RyaW5nLFxuICAgKiAgYXBwZWFyQWN0aXZlPzogc3RyaW5nLFxuICAgKiAgYXBwZWFyRG9uZT86IHN0cmluZyxcbiAgICogIGVudGVyPzogc3RyaW5nLFxuICAgKiAgZW50ZXJBY3RpdmU/OiBzdHJpbmcsXG4gICAqICBlbnRlckRvbmU/OiBzdHJpbmcsXG4gICAqICBleGl0Pzogc3RyaW5nLFxuICAgKiAgZXhpdEFjdGl2ZT86IHN0cmluZyxcbiAgICogIGV4aXREb25lPzogc3RyaW5nLFxuICAgKiB9fVxuICAgKi9cbiAgY2xhc3NOYW1lczogX1Byb3BUeXBlcy5jbGFzc05hbWVzU2hhcGUsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdlbnRlcicgb3IgJ2FwcGVhcicgY2xhc3MgaXNcbiAgICogYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdlbnRlci1hY3RpdmUnIG9yXG4gICAqICdhcHBlYXItYWN0aXZlJyBjbGFzcyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBgPFRyYW5zaXRpb24+YCBjYWxsYmFjayBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgJ2VudGVyJyBvclxuICAgKiAnYXBwZWFyJyBjbGFzc2VzIGFyZSAqKnJlbW92ZWQqKiBhbmQgdGhlIGBkb25lYCBjbGFzcyBpcyBhZGRlZCB0byB0aGUgRE9NIG5vZGUuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdleGl0JyBjbGFzcyBpc1xuICAgKiBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudClcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdleGl0LWFjdGl2ZScgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZXhpdCcgY2xhc3Nlc1xuICAgKiBhcmUgKipyZW1vdmVkKiogYW5kIHRoZSBgZXhpdC1kb25lYCBjbGFzcyBpcyBhZGRlZCB0byB0aGUgRE9NIG5vZGUuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59KSA6IHt9O1xudmFyIF9kZWZhdWx0ID0gQ1NTVHJhbnNpdGlvbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZ2V0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nO1xuZXhwb3J0cy5tZXJnZUNoaWxkTWFwcGluZ3MgPSBtZXJnZUNoaWxkTWFwcGluZ3M7XG5leHBvcnRzLmdldEluaXRpYWxDaGlsZE1hcHBpbmcgPSBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nO1xuZXhwb3J0cy5nZXROZXh0Q2hpbGRNYXBwaW5nID0gZ2V0TmV4dENoaWxkTWFwcGluZztcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuXG4gKlxuICogQHBhcmFtIHsqfSBjaGlsZHJlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmBcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nKGNoaWxkcmVuLCBtYXBGbikge1xuICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gbWFwcGVyKGNoaWxkKSB7XG4gICAgcmV0dXJuIG1hcEZuICYmICgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKGNoaWxkKSA/IG1hcEZuKGNoaWxkKSA6IGNoaWxkO1xuICB9O1xuXG4gIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoY2hpbGRyZW4pIF9yZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGM7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgLy8gcnVuIHRoZSBtYXAgZnVuY3Rpb24gaGVyZSBpbnN0ZWFkIHNvIHRoYXQgdGhlIGtleSBpcyB0aGUgY29tcHV0ZWQgb25lXG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBtYXBwZXIoY2hpbGQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIG5leHQgPyBuZXh0W2tleV0gOiBwcmV2W2tleV07XG4gIH0gLy8gRm9yIGVhY2gga2V5IG9mIGBuZXh0YCwgdGhlIGxpc3Qgb2Yga2V5cyB0byBpbnNlcnQgYmVmb3JlIHRoYXQga2V5IGluXG4gIC8vIHRoZSBjb21iaW5lZCBsaXN0XG5cblxuICB2YXIgbmV4dEtleXNQZW5kaW5nID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG5cbiAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgaWYgKHByZXZLZXkgaW4gbmV4dCkge1xuICAgICAgaWYgKHBlbmRpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgICBuZXh0S2V5c1BlbmRpbmdbcHJldktleV0gPSBwZW5kaW5nS2V5cztcbiAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaTtcbiAgdmFyIGNoaWxkTWFwcGluZyA9IHt9O1xuXG4gIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dCkge1xuICAgIGlmIChuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0pIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBlbmRpbmdOZXh0S2V5ID0gbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldO1xuICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfSAvLyBGaW5hbGx5LCBhZGQgdGhlIGtleXMgd2hpY2ggZGlkbid0IGFwcGVhciBiZWZvcmUgYW55IGtleSBpbiBgbmV4dGBcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBwZW5kaW5nS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNoaWxkTWFwcGluZ1twZW5kaW5nS2V5c1tpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nS2V5c1tpXSk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRNYXBwaW5nO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wKGNoaWxkLCBwcm9wLCBwcm9wcykge1xuICByZXR1cm4gcHJvcHNbcHJvcF0gIT0gbnVsbCA/IHByb3BzW3Byb3BdIDogY2hpbGQucHJvcHNbcHJvcF07XG59XG5cbmZ1bmN0aW9uIGdldEluaXRpYWxDaGlsZE1hcHBpbmcocHJvcHMsIG9uRXhpdGVkKSB7XG4gIHJldHVybiBnZXRDaGlsZE1hcHBpbmcocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHtcbiAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgIGluOiB0cnVlLFxuICAgICAgYXBwZWFyOiBnZXRQcm9wKGNoaWxkLCAnYXBwZWFyJywgcHJvcHMpLFxuICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIHByb3BzKSxcbiAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgcHJvcHMpXG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgb25FeGl0ZWQpIHtcbiAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcobmV4dFByb3BzLmNoaWxkcmVuKTtcbiAgdmFyIGNoaWxkcmVuID0gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpO1xuICBPYmplY3Qua2V5cyhjaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5ba2V5XTtcbiAgICBpZiAoISgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKGNoaWxkKSkgcmV0dXJuO1xuICAgIHZhciBoYXNQcmV2ID0ga2V5IGluIHByZXZDaGlsZE1hcHBpbmc7XG4gICAgdmFyIGhhc05leHQgPSBrZXkgaW4gbmV4dENoaWxkTWFwcGluZztcbiAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkTWFwcGluZ1trZXldO1xuICAgIHZhciBpc0xlYXZpbmcgPSAoMCwgX3JlYWN0LmlzVmFsaWRFbGVtZW50KShwcmV2Q2hpbGQpICYmICFwcmV2Q2hpbGQucHJvcHMuaW47IC8vIGl0ZW0gaXMgbmV3IChlbnRlcmluZylcblxuICAgIGlmIChoYXNOZXh0ICYmICghaGFzUHJldiB8fCBpc0xlYXZpbmcpKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygnZW50ZXJpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHRydWUsXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIWhhc05leHQgJiYgaGFzUHJldiAmJiAhaXNMZWF2aW5nKSB7XG4gICAgICAvLyBpdGVtIGlzIG9sZCAoZXhpdGluZylcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdsZWF2aW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgICBpbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaGFzTmV4dCAmJiBoYXNQcmV2ICYmICgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKHByZXZDaGlsZCkpIHtcbiAgICAgIC8vIGl0ZW0gaGFzbid0IGNoYW5nZWQgdHJhbnNpdGlvbiBzdGF0ZXNcbiAgICAgIC8vIGNvcHkgb3ZlciB0aGUgbGFzdCB0cmFuc2l0aW9uIHByb3BzO1xuICAgICAgLy8gY29uc29sZS5sb2coJ3VuY2hhbmdlZCcsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogcHJldkNoaWxkLnByb3BzLmluLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hpbGRyZW47XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0ID0gcmVxdWlyZShcInJlYWN0LWxpZmVjeWNsZXMtY29tcGF0XCIpO1xuXG52YXIgX0NoaWxkTWFwcGluZyA9IHJlcXVpcmUoXCIuL3V0aWxzL0NoaWxkTWFwcGluZ1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuICAvKipcbiAgICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgdHJhbnNpdGlvbiBjb21wb25lbnRzXG4gICAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudHMsIGA8VHJhbnNpdGlvbkdyb3VwPmAgaXMgYSBzdGF0ZSBtYWNoaW5lIGZvciBtYW5hZ2luZyB0aGUgbW91bnRpbmdcbiAgICogYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyIHRpbWUuXG4gICAqXG4gICAqIENvbnNpZGVyIHRoZSBleGFtcGxlIGJlbG93LiBBcyBpdGVtcyBhcmUgcmVtb3ZlZCBvciBhZGRlZCB0byB0aGUgVG9kb0xpc3QgdGhlXG4gICAqIGBpbmAgcHJvcCBpcyB0b2dnbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBgPFRyYW5zaXRpb25Hcm91cD5gICBkb2VzIG5vdCBkZWZpbmUgYW55IGFuaW1hdGlvbiBiZWhhdmlvciFcbiAgICogRXhhY3RseSBfaG93XyBhIGxpc3QgaXRlbSBhbmltYXRlcyBpcyB1cCB0byB0aGUgaW5kaXZpZHVhbCB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAgICogaXRlbXMuXG4gICAqL1xuXG59O1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICB2YXIgaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpOyAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBoYW5kbGVFeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICAgIGZpcnN0UmVuZGVyOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2l0aW9uR3JvdXA6IHtcbiAgICAgICAgaXNNb3VudGluZzogIXRoaXMuYXBwZWFyZWRcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuYXBwZWFyZWQgPSB0cnVlO1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIF9yZWYpIHtcbiAgICB2YXIgcHJldkNoaWxkTWFwcGluZyA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICAgIGhhbmRsZUV4aXRlZCA9IF9yZWYuaGFuZGxlRXhpdGVkLFxuICAgICAgICBmaXJzdFJlbmRlciA9IF9yZWYuZmlyc3RSZW5kZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBmaXJzdFJlbmRlciA/ICgwLCBfQ2hpbGRNYXBwaW5nLmdldEluaXRpYWxDaGlsZE1hcHBpbmcpKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6ICgwLCBfQ2hpbGRNYXBwaW5nLmdldE5leHRDaGlsZE1hcHBpbmcpKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICBpZiAoY2hpbGQua2V5IGluIGN1cnJlbnRDaGlsZE1hcHBpbmcpIHJldHVybjtcblxuICAgIGlmIChjaGlsZC5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgY2hpbGQucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gX2V4dGVuZHMoe30sIHN0YXRlLmNoaWxkcmVuKTtcblxuICAgICAgICBkZWxldGUgY2hpbGRyZW5bY2hpbGQua2V5XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgY2hpbGRGYWN0b3J5ID0gX3RoaXMkcHJvcHMuY2hpbGRGYWN0b3J5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRcIiwgXCJjaGlsZEZhY3RvcnlcIl0pO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMsIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHRyYW5zaXRpb25Hcm91cDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIGA8VHJhbnNpdGlvbkdyb3VwPmAgcmVuZGVycyBhIGA8ZGl2PmAgYnkgZGVmYXVsdC4gWW91IGNhbiBjaGFuZ2UgdGhpc1xuICAgKiBiZWhhdmlvciBieSBwcm92aWRpbmcgYSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBJZiB5b3UgdXNlIFJlYWN0IHYxNisgYW5kIHdvdWxkIGxpa2UgdG8gYXZvaWQgYSB3cmFwcGluZyBgPGRpdj5gIGVsZW1lbnRcbiAgICogeW91IGNhbiBwYXNzIGluIGBjb21wb25lbnQ9e251bGx9YC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIHdyYXBwaW5nIGRpdlxuICAgKiBib3JrcyB5b3VyIGNzcyBzdHlsZXMuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnksXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudHMsIHRoYXQgYXJlIHRvZ2dsZWQgYGluYCBhbmQgb3V0IGFzIHRoZXlcbiAgICogbGVhdmUuIHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIHdpbGwgaW5qZWN0IHNwZWNpZmljIHRyYW5zaXRpb24gcHJvcHMsIHNvXG4gICAqIHJlbWVtYmVyIHRvIHNwcmVhZCB0aGVtIHRocm91Z2ggaWYgeW91IGFyZSB3cmFwcGluZyB0aGUgYDxUcmFuc2l0aW9uPmAgYXNcbiAgICogd2l0aCBvdXIgYDxGYWRlPmAgZXhhbXBsZS5cbiAgICpcbiAgICogV2hpbGUgdGhpcyBjb21wb25lbnQgaXMgbWVhbnQgZm9yIG11bHRpcGxlIGBUcmFuc2l0aW9uYCBvciBgQ1NTVHJhbnNpdGlvbmBcbiAgICogY2hpbGRyZW4sIHNvbWV0aW1lcyB5b3UgbWF5IHdhbnQgdG8gaGF2ZSBhIHNpbmdsZSB0cmFuc2l0aW9uIGNoaWxkIHdpdGhcbiAgICogY29udGVudCB0aGF0IHlvdSB3YW50IHRvIGJlIHRyYW5zaXRpb25lZCBvdXQgYW5kIGluIHdoZW4geW91IGNoYW5nZSBpdFxuICAgKiAoZS5nLiByb3V0ZXMsIGltYWdlcyBldGMuKSBJbiB0aGF0IGNhc2UgeW91IGNhbiBjaGFuZ2UgdGhlIGBrZXlgIHByb3Agb2ZcbiAgICogdGhlIHRyYW5zaXRpb24gY2hpbGQgYXMgeW91IGNoYW5nZSBpdHMgY29udGVudCwgdGhpcyB3aWxsIGNhdXNlXG4gICAqIGBUcmFuc2l0aW9uR3JvdXBgIHRvIHRyYW5zaXRpb24gdGhlIGNoaWxkIG91dCBhbmQgYmFjayBpbi5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBhcHBlYXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgYXBwZWFyOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBlbnRlciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZXhpdCBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogWW91IG1heSBuZWVkIHRvIGFwcGx5IHJlYWN0aXZlIHVwZGF0ZXMgdG8gYSBjaGlsZCBhcyBpdCBpcyBleGl0aW5nLlxuICAgKiBUaGlzIGlzIGdlbmVyYWxseSBkb25lIGJ5IHVzaW5nIGBjbG9uZUVsZW1lbnRgIGhvd2V2ZXIgaW4gdGhlIGNhc2Ugb2YgYW4gZXhpdGluZ1xuICAgKiBjaGlsZCB0aGUgZWxlbWVudCBoYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWQgYW5kIG5vdCBhY2Nlc3NpYmxlIHRvIHRoZSBjb25zdW1lci5cbiAgICpcbiAgICogSWYgeW91IGRvIG5lZWQgdG8gdXBkYXRlIGEgY2hpbGQgYXMgaXQgbGVhdmVzIHlvdSBjYW4gcHJvdmlkZSBhIGBjaGlsZEZhY3RvcnlgXG4gICAqIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmUgbGVhdmluZy5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24oY2hpbGQ6IFJlYWN0RWxlbWVudCkgLT4gUmVhY3RFbGVtZW50XG4gICAqL1xuICBjaGlsZEZhY3Rvcnk6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXG59IDoge307XG5UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoVHJhbnNpdGlvbkdyb3VwKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RyYW5zaXRpb25Hcm91cFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIGA8UmVwbGFjZVRyYW5zaXRpb24+YCBjb21wb25lbnQgaXMgYSBzcGVjaWFsaXplZCBgVHJhbnNpdGlvbmAgY29tcG9uZW50XG4gKiB0aGF0IGFuaW1hdGVzIGJldHdlZW4gdHdvIGNoaWxkcmVuLlxuICpcbiAqIGBgYGpzeFxuICogPFJlcGxhY2VUcmFuc2l0aW9uIGluPlxuICogICA8RmFkZT48ZGl2PkkgYXBwZWFyIGZpcnN0PC9kaXY+PC9GYWRlPlxuICogICA8RmFkZT48ZGl2PkkgcmVwbGFjZSB0aGUgYWJvdmU8L2Rpdj48L0ZhZGU+XG4gKiA8L1JlcGxhY2VUcmFuc2l0aW9uPlxuICogYGBgXG4gKi9cbnZhciBSZXBsYWNlVHJhbnNpdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSZXBsYWNlVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVwbGFjZVRyYW5zaXRpb24oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF9hcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgX2FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChfYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVFbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVMaWZlY3ljbGUoJ29uRW50ZXInLCAwLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMuaGFuZGxlTGlmZWN5Y2xlKCdvbkVudGVyaW5nJywgMCwgYXJncyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMuaGFuZGxlTGlmZWN5Y2xlKCdvbkVudGVyZWQnLCAwLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRXhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVMaWZlY3ljbGUoJ29uRXhpdCcsIDEsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFeGl0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW42KSwgX2tleTYgPSAwOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZUxpZmVjeWNsZSgnb25FeGl0aW5nJywgMSwgYXJncyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNyksIF9rZXk3ID0gMDsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgICAgICBhcmdzW19rZXk3XSA9IGFyZ3VtZW50c1tfa2V5N107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVMaWZlY3ljbGUoJ29uRXhpdGVkJywgMSwgYXJncyk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZXBsYWNlVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZUxpZmVjeWNsZSA9IGZ1bmN0aW9uIGhhbmRsZUxpZmVjeWNsZShoYW5kbGVyLCBpZHgsIG9yaWdpbmFsQXJncykge1xuICAgIHZhciBfY2hpbGQkcHJvcHM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIGNoaWxkID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbilbaWR4XTtcblxuICAgIGlmIChjaGlsZC5wcm9wc1toYW5kbGVyXSkgKF9jaGlsZCRwcm9wcyA9IGNoaWxkLnByb3BzKVtoYW5kbGVyXS5hcHBseShfY2hpbGQkcHJvcHMsIG9yaWdpbmFsQXJncyk7XG4gICAgaWYgKHRoaXMucHJvcHNbaGFuZGxlcl0pIHRoaXMucHJvcHNbaGFuZGxlcl0oKDAsIF9yZWFjdERvbS5maW5kRE9NTm9kZSkodGhpcykpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgaW5Qcm9wID0gX3RoaXMkcHJvcHMuaW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiaW5cIl0pO1xuXG4gICAgdmFyIF9SZWFjdCRDaGlsZHJlbiR0b0FyciA9IF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pLFxuICAgICAgICBmaXJzdCA9IF9SZWFjdCRDaGlsZHJlbiR0b0FyclswXSxcbiAgICAgICAgc2Vjb25kID0gX1JlYWN0JENoaWxkcmVuJHRvQXJyWzFdO1xuXG4gICAgZGVsZXRlIHByb3BzLm9uRW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLm9uRW50ZXJpbmc7XG4gICAgZGVsZXRlIHByb3BzLm9uRW50ZXJlZDtcbiAgICBkZWxldGUgcHJvcHMub25FeGl0O1xuICAgIGRlbGV0ZSBwcm9wcy5vbkV4aXRpbmc7XG4gICAgZGVsZXRlIHByb3BzLm9uRXhpdGVkO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdCwgcHJvcHMsIGluUHJvcCA/IF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChmaXJzdCwge1xuICAgICAga2V5OiAnZmlyc3QnLFxuICAgICAgb25FbnRlcjogdGhpcy5oYW5kbGVFbnRlcixcbiAgICAgIG9uRW50ZXJpbmc6IHRoaXMuaGFuZGxlRW50ZXJpbmcsXG4gICAgICBvbkVudGVyZWQ6IHRoaXMuaGFuZGxlRW50ZXJlZFxuICAgIH0pIDogX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KHNlY29uZCwge1xuICAgICAga2V5OiAnc2Vjb25kJyxcbiAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRXhpdCxcbiAgICAgIG9uRW50ZXJpbmc6IHRoaXMuaGFuZGxlRXhpdGluZyxcbiAgICAgIG9uRW50ZXJlZDogdGhpcy5oYW5kbGVFeGl0ZWRcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJlcGxhY2VUcmFuc2l0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5SZXBsYWNlVHJhbnNpdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGluOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4ocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgaWYgKF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmNvdW50KHByb3BzW3Byb3BOYW1lXSkgIT09IDIpIHJldHVybiBuZXcgRXJyb3IoXCJcXFwiXCIgKyBwcm9wTmFtZSArIFwiXFxcIiBtdXN0IGJlIGV4YWN0bHkgdHdvIHRyYW5zaXRpb24gY29tcG9uZW50cy5cIik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn0gOiB7fTtcbnZhciBfZGVmYXVsdCA9IFJlcGxhY2VUcmFuc2l0aW9uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX0NTU1RyYW5zaXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NTU1RyYW5zaXRpb25cIikpO1xuXG52YXIgX1JlcGxhY2VUcmFuc2l0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SZXBsYWNlVHJhbnNpdGlvblwiKSk7XG5cbnZhciBfVHJhbnNpdGlvbkdyb3VwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UcmFuc2l0aW9uR3JvdXBcIikpO1xuXG52YXIgX1RyYW5zaXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RyYW5zaXRpb25cIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVHJhbnNpdGlvbjogX1RyYW5zaXRpb24uZGVmYXVsdCxcbiAgVHJhbnNpdGlvbkdyb3VwOiBfVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHQsXG4gIFJlcGxhY2VUcmFuc2l0aW9uOiBfUmVwbGFjZVRyYW5zaXRpb24uZGVmYXVsdCxcbiAgQ1NTVHJhbnNpdGlvbjogX0NTU1RyYW5zaXRpb24uZGVmYXVsdFxufTsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IG1lbW9pemVPbmUgZnJvbSAnbWVtb2l6ZS1vbmUnO1xuaW1wb3J0IHsgY3NzLCBpbmplY3RHbG9iYWwgfSBmcm9tICdlbW90aW9uJztcbmltcG9ydCB7IGNyZWF0ZVBvcnRhbCwgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCByYWYgZnJvbSAncmFmJztcbmltcG9ydCBBdXRvc2l6ZUlucHV0IGZyb20gJ3JlYWN0LWlucHV0LWF1dG9zaXplJztcbmltcG9ydCB7IFRyYW5zaXRpb24sIFRyYW5zaXRpb25Hcm91cCB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIE5PIE9QXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuLy8gQ2xhc3MgTmFtZSBQcmVmaXhlclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBjb21wb25lbnQgc3RhdGUgZm9yIHN0eWxpbmcgd2l0aCBjbGFzcyBuYW1lcy5cblxuIEV4cGVjdHMgYW4gYXJyYXkgb2Ygc3RyaW5ncyBPUiBhIHN0cmluZy9vYmplY3QgcGFpcjpcbiAtIGNsYXNzTmFtZShbJ2NvbXAnLCAnY29tcC1hcmcnLCAnY29tcC1hcmctMiddKVxuICAgQHJldHVybnMgJ3JlYWN0LXNlbGVjdF9fY29tcCByZWFjdC1zZWxlY3RfX2NvbXAtYXJnIHJlYWN0LXNlbGVjdF9fY29tcC1hcmctMidcbiAtIGNsYXNzTmFtZSgnY29tcCcsIHsgc29tZTogdHJ1ZSwgc3RhdGU6IGZhbHNlIH0pXG4gICBAcmV0dXJucyAncmVhY3Qtc2VsZWN0X19jb21wIHJlYWN0LXNlbGVjdF9fY29tcC0tc29tZSdcbiovXG5cbmZ1bmN0aW9uIGFwcGx5UHJlZml4VG9OYW1lKHByZWZpeCwgbmFtZSkge1xuICBpZiAoIW5hbWUpIHtcbiAgICByZXR1cm4gcHJlZml4O1xuICB9IGVsc2UgaWYgKG5hbWVbMF0gPT09ICctJykge1xuICAgIHJldHVybiBwcmVmaXggKyBuYW1lO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmVmaXggKyAnX18nICsgbmFtZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbGFzc05hbWVzKHByZWZpeCwgY3NzS2V5LCBzdGF0ZSwgY2xhc3NOYW1lKSB7XG4gIHZhciBhcnIgPSBbY3NzS2V5LCBjbGFzc05hbWVdO1xuXG4gIGlmIChzdGF0ZSAmJiBwcmVmaXgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gc3RhdGUpIHtcbiAgICAgIGlmIChzdGF0ZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHN0YXRlW2tleV0pIHtcbiAgICAgICAgYXJyLnB1c2goXCJcIi5jb25jYXQoYXBwbHlQcmVmaXhUb05hbWUocHJlZml4LCBrZXkpKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfSkubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIFN0cmluZyhpKS50cmltKCk7XG4gIH0pLmpvaW4oJyAnKTtcbn0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBDbGVhbiBWYWx1ZVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciBjbGVhblZhbHVlID0gZnVuY3Rpb24gY2xlYW5WYWx1ZSh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybiB2YWx1ZS5maWx0ZXIoQm9vbGVhbik7XG4gIGlmIChfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwpIHJldHVybiBbdmFsdWVdO1xuICByZXR1cm4gW107XG59OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEhhbmRsZSBJbnB1dCBDaGFuZ2Vcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBoYW5kbGVJbnB1dENoYW5nZShpbnB1dFZhbHVlLCBhY3Rpb25NZXRhLCBvbklucHV0Q2hhbmdlKSB7XG4gIGlmIChvbklucHV0Q2hhbmdlKSB7XG4gICAgdmFyIG5ld1ZhbHVlID0gb25JbnB1dENoYW5nZShpbnB1dFZhbHVlLCBhY3Rpb25NZXRhKTtcbiAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09PSAnc3RyaW5nJykgcmV0dXJuIG5ld1ZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGlucHV0VmFsdWU7XG59IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gU2Nyb2xsIEhlbHBlcnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBpc0RvY3VtZW50RWxlbWVudChlbCkge1xuICByZXR1cm4gW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgZG9jdW1lbnQuYm9keSwgd2luZG93XS5pbmRleE9mKGVsKSA+IC0xO1xufSAvLyBOb3JtYWxpemVkIFNjcm9sbCBUb3Bcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBnZXRTY3JvbGxUb3AoZWwpIHtcbiAgaWYgKGlzRG9jdW1lbnRFbGVtZW50KGVsKSkge1xuICAgIHJldHVybiB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gIH1cblxuICByZXR1cm4gZWwuc2Nyb2xsVG9wO1xufVxuZnVuY3Rpb24gc2Nyb2xsVG8oZWwsIHRvcCkge1xuICAvLyB3aXRoIGEgc2Nyb2xsIGRpc3RhbmNlLCB3ZSBwZXJmb3JtIHNjcm9sbCBvbiB0aGUgZWxlbWVudFxuICBpZiAoaXNEb2N1bWVudEVsZW1lbnQoZWwpKSB7XG4gICAgd2luZG93LnNjcm9sbFRvKDAsIHRvcCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZWwuc2Nyb2xsVG9wID0gdG9wO1xufSAvLyBHZXQgU2Nyb2xsIFBhcmVudFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciBleGNsdWRlU3RhdGljUGFyZW50ID0gc3R5bGUucG9zaXRpb24gPT09ICdhYnNvbHV0ZSc7XG4gIHZhciBvdmVyZmxvd1J4ID0gLyhhdXRvfHNjcm9sbCkvO1xuICB2YXIgZG9jRWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IC8vIHN1Y2sgaXQsIGZsb3cuLi5cblxuICBpZiAoc3R5bGUucG9zaXRpb24gPT09ICdmaXhlZCcpIHJldHVybiBkb2NFbDtcblxuICBmb3IgKHZhciBwYXJlbnQgPSBlbGVtZW50OyBwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudDspIHtcbiAgICBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUocGFyZW50KTtcblxuICAgIGlmIChleGNsdWRlU3RhdGljUGFyZW50ICYmIHN0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG92ZXJmbG93UngudGVzdChzdHlsZS5vdmVyZmxvdyArIHN0eWxlLm92ZXJmbG93WSArIHN0eWxlLm92ZXJmbG93WCkpIHtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRvY0VsO1xufSAvLyBBbmltYXRlZCBTY3JvbGwgVG9cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAgQHBhcmFtIHQ6IHRpbWUgKGVsYXBzZWQpXG4gIEBwYXJhbSBiOiBpbml0aWFsIHZhbHVlXG4gIEBwYXJhbSBjOiBhbW91bnQgb2YgY2hhbmdlXG4gIEBwYXJhbSBkOiBkdXJhdGlvblxuKi9cblxuZnVuY3Rpb24gZWFzZU91dEN1YmljKHQsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKyAxKSArIGI7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGVkU2Nyb2xsVG8oZWxlbWVudCwgdG8pIHtcbiAgdmFyIGR1cmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAyMDA7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbm9vcDtcbiAgdmFyIHN0YXJ0ID0gZ2V0U2Nyb2xsVG9wKGVsZW1lbnQpO1xuICB2YXIgY2hhbmdlID0gdG8gLSBzdGFydDtcbiAgdmFyIGluY3JlbWVudCA9IDEwO1xuICB2YXIgY3VycmVudFRpbWUgPSAwO1xuXG4gIGZ1bmN0aW9uIGFuaW1hdGVTY3JvbGwoKSB7XG4gICAgY3VycmVudFRpbWUgKz0gaW5jcmVtZW50O1xuICAgIHZhciB2YWwgPSBlYXNlT3V0Q3ViaWMoY3VycmVudFRpbWUsIHN0YXJ0LCBjaGFuZ2UsIGR1cmF0aW9uKTtcbiAgICBzY3JvbGxUbyhlbGVtZW50LCB2YWwpO1xuXG4gICAgaWYgKGN1cnJlbnRUaW1lIDwgZHVyYXRpb24pIHtcbiAgICAgIHJhZihhbmltYXRlU2Nyb2xsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soZWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgYW5pbWF0ZVNjcm9sbCgpO1xufSAvLyBTY3JvbGwgSW50byBWaWV3XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gc2Nyb2xsSW50b1ZpZXcobWVudUVsLCBmb2N1c2VkRWwpIHtcbiAgdmFyIG1lbnVSZWN0ID0gbWVudUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgZm9jdXNlZFJlY3QgPSBmb2N1c2VkRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBvdmVyU2Nyb2xsID0gZm9jdXNlZEVsLm9mZnNldEhlaWdodCAvIDM7XG5cbiAgaWYgKGZvY3VzZWRSZWN0LmJvdHRvbSArIG92ZXJTY3JvbGwgPiBtZW51UmVjdC5ib3R0b20pIHtcbiAgICBzY3JvbGxUbyhtZW51RWwsIE1hdGgubWluKGZvY3VzZWRFbC5vZmZzZXRUb3AgKyBmb2N1c2VkRWwuY2xpZW50SGVpZ2h0IC0gbWVudUVsLm9mZnNldEhlaWdodCArIG92ZXJTY3JvbGwsIG1lbnVFbC5zY3JvbGxIZWlnaHQpKTtcbiAgfSBlbHNlIGlmIChmb2N1c2VkUmVjdC50b3AgLSBvdmVyU2Nyb2xsIDwgbWVudVJlY3QudG9wKSB7XG4gICAgc2Nyb2xsVG8obWVudUVsLCBNYXRoLm1heChmb2N1c2VkRWwub2Zmc2V0VG9wIC0gb3ZlclNjcm9sbCwgMCkpO1xuICB9XG59IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gR2V0IGJvdW5kaW5nIGNsaWVudCBvYmplY3Rcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gY2Fubm90IGdldCBrZXlzIHVzaW5nIGFycmF5IG5vdGF0aW9uIHdpdGggRE9NUmVjdFxuXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudE9iaihlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHtcbiAgICBib3R0b206IHJlY3QuYm90dG9tLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHJpZ2h0OiByZWN0LnJpZ2h0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgd2lkdGg6IHJlY3Qud2lkdGhcbiAgfTtcbn1cbi8vIFRvdWNoIENhcGFiaWxpdHkgRGV0ZWN0b3Jcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBpc1RvdWNoQ2FwYWJsZSgpIHtcbiAgdHJ5IHtcbiAgICBkb2N1bWVudC5jcmVhdGVFdmVudCgnVG91Y2hFdmVudCcpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTW9iaWxlIERldmljZSBEZXRlY3RvclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIGlzTW9iaWxlRGV2aWNlKCkge1xuICB0cnkge1xuICAgIHJldHVybiAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TWVudVBsYWNlbWVudChfcmVmKSB7XG4gIHZhciBtYXhIZWlnaHQgPSBfcmVmLm1heEhlaWdodCxcbiAgICAgIG1lbnVFbCA9IF9yZWYubWVudUVsLFxuICAgICAgbWluSGVpZ2h0ID0gX3JlZi5taW5IZWlnaHQsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudCxcbiAgICAgIHNob3VsZFNjcm9sbCA9IF9yZWYuc2hvdWxkU2Nyb2xsLFxuICAgICAgaXNGaXhlZFBvc2l0aW9uID0gX3JlZi5pc0ZpeGVkUG9zaXRpb24sXG4gICAgICB0aGVtZSA9IF9yZWYudGhlbWU7XG4gIHZhciBzcGFjaW5nID0gdGhlbWUuc3BhY2luZztcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChtZW51RWwpO1xuICB2YXIgZGVmYXVsdFN0YXRlID0ge1xuICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHRcbiAgfTsgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmcsIHJldHVybiBkZWZhdWx0IHN0YXRlXG5cbiAgaWYgKCFtZW51RWwgfHwgIW1lbnVFbC5vZmZzZXRQYXJlbnQpIHJldHVybiBkZWZhdWx0U3RhdGU7IC8vIHdlIGNhbid0IHRydXN0IGBzY3JvbGxQYXJlbnQuc2Nyb2xsSGVpZ2h0YCAtLT4gaXQgbWF5IGluY3JlYXNlIHdoZW5cbiAgLy8gdGhlIG1lbnUgaXMgcmVuZGVyZWRcblxuICB2YXIgX3Njcm9sbFBhcmVudCRnZXRCb3VuID0gc2Nyb2xsUGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgc2Nyb2xsSGVpZ2h0ID0gX3Njcm9sbFBhcmVudCRnZXRCb3VuLmhlaWdodDtcblxuICB2YXIgX21lbnVFbCRnZXRCb3VuZGluZ0NsID0gbWVudUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgbWVudUJvdHRvbSA9IF9tZW51RWwkZ2V0Qm91bmRpbmdDbC5ib3R0b20sXG4gICAgICBtZW51SGVpZ2h0ID0gX21lbnVFbCRnZXRCb3VuZGluZ0NsLmhlaWdodCxcbiAgICAgIG1lbnVUb3AgPSBfbWVudUVsJGdldEJvdW5kaW5nQ2wudG9wO1xuXG4gIHZhciBfbWVudUVsJG9mZnNldFBhcmVudCQgPSBtZW51RWwub2Zmc2V0UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgY29udGFpbmVyVG9wID0gX21lbnVFbCRvZmZzZXRQYXJlbnQkLnRvcDtcblxuICB2YXIgdmlld0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbFRvcChzY3JvbGxQYXJlbnQpO1xuICB2YXIgbWFyZ2luQm90dG9tID0gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZShtZW51RWwpLm1hcmdpbkJvdHRvbSwgMTApO1xuICB2YXIgbWFyZ2luVG9wID0gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZShtZW51RWwpLm1hcmdpblRvcCwgMTApO1xuICB2YXIgdmlld1NwYWNlQWJvdmUgPSBjb250YWluZXJUb3AgLSBtYXJnaW5Ub3A7XG4gIHZhciB2aWV3U3BhY2VCZWxvdyA9IHZpZXdIZWlnaHQgLSBtZW51VG9wO1xuICB2YXIgc2Nyb2xsU3BhY2VBYm92ZSA9IHZpZXdTcGFjZUFib3ZlICsgc2Nyb2xsVG9wO1xuICB2YXIgc2Nyb2xsU3BhY2VCZWxvdyA9IHNjcm9sbEhlaWdodCAtIHNjcm9sbFRvcCAtIG1lbnVUb3A7XG4gIHZhciBzY3JvbGxEb3duID0gbWVudUJvdHRvbSAtIHZpZXdIZWlnaHQgKyBzY3JvbGxUb3AgKyBtYXJnaW5Cb3R0b207XG4gIHZhciBzY3JvbGxVcCA9IHNjcm9sbFRvcCArIG1lbnVUb3AgLSBtYXJnaW5Ub3A7XG4gIHZhciBzY3JvbGxEdXJhdGlvbiA9IDE2MDtcblxuICBzd2l0Y2ggKHBsYWNlbWVudCkge1xuICAgIGNhc2UgJ2F1dG8nOlxuICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAvLyAxOiB0aGUgbWVudSB3aWxsIGZpdCwgZG8gbm90aGluZ1xuICAgICAgaWYgKHZpZXdTcGFjZUJlbG93ID49IG1lbnVIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9IC8vIDI6IHRoZSBtZW51IHdpbGwgZml0LCBpZiBzY3JvbGxlZFxuXG5cbiAgICAgIGlmIChzY3JvbGxTcGFjZUJlbG93ID49IG1lbnVIZWlnaHQgJiYgIWlzRml4ZWRQb3NpdGlvbikge1xuICAgICAgICBpZiAoc2hvdWxkU2Nyb2xsKSB7XG4gICAgICAgICAgYW5pbWF0ZWRTY3JvbGxUbyhzY3JvbGxQYXJlbnQsIHNjcm9sbERvd24sIHNjcm9sbER1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodFxuICAgICAgICB9O1xuICAgICAgfSAvLyAzOiB0aGUgbWVudSB3aWxsIGZpdCwgaWYgY29uc3RyYWluZWRcblxuXG4gICAgICBpZiAoIWlzRml4ZWRQb3NpdGlvbiAmJiBzY3JvbGxTcGFjZUJlbG93ID49IG1pbkhlaWdodCB8fCBpc0ZpeGVkUG9zaXRpb24gJiYgdmlld1NwYWNlQmVsb3cgPj0gbWluSGVpZ2h0KSB7XG4gICAgICAgIGlmIChzaG91bGRTY3JvbGwpIHtcbiAgICAgICAgICBhbmltYXRlZFNjcm9sbFRvKHNjcm9sbFBhcmVudCwgc2Nyb2xsRG93biwgc2Nyb2xsRHVyYXRpb24pO1xuICAgICAgICB9IC8vIHdlIHdhbnQgdG8gcHJvdmlkZSBhcyBtdWNoIG9mIHRoZSBtZW51IGFzIHBvc3NpYmxlIHRvIHRoZSB1c2VyLFxuICAgICAgICAvLyBzbyBnaXZlIHRoZW0gd2hhdGV2ZXIgaXMgYXZhaWxhYmxlIGJlbG93IHJhdGhlciB0aGFuIHRoZSBtaW5IZWlnaHQuXG5cblxuICAgICAgICB2YXIgY29uc3RyYWluZWRIZWlnaHQgPSBpc0ZpeGVkUG9zaXRpb24gPyB2aWV3U3BhY2VCZWxvdyAtIG1hcmdpbkJvdHRvbSA6IHNjcm9sbFNwYWNlQmVsb3cgLSBtYXJnaW5Cb3R0b207XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IGNvbnN0cmFpbmVkSGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9IC8vIDQuIEZvcmtlZCBiZXZpb3VyIHdoZW4gdGhlcmUgaXNuJ3QgZW5vdWdoIHNwYWNlIGJlbG93XG4gICAgICAvLyBBVVRPOiBmbGlwIHRoZSBtZW51LCByZW5kZXIgYWJvdmVcblxuXG4gICAgICBpZiAocGxhY2VtZW50ID09PSAnYXV0bycgfHwgaXNGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgIC8vIG1heSBuZWVkIHRvIGJlIGNvbnN0cmFpbmVkIGFmdGVyIGZsaXBwaW5nXG4gICAgICAgIHZhciBfY29uc3RyYWluZWRIZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgICAgIHZhciBzcGFjZUFib3ZlID0gaXNGaXhlZFBvc2l0aW9uID8gdmlld1NwYWNlQWJvdmUgOiBzY3JvbGxTcGFjZUFib3ZlO1xuXG4gICAgICAgIGlmIChzcGFjZUFib3ZlID49IG1pbkhlaWdodCkge1xuICAgICAgICAgIF9jb25zdHJhaW5lZEhlaWdodCA9IE1hdGgubWluKHNwYWNlQWJvdmUgLSBtYXJnaW5Cb3R0b20gLSBzcGFjaW5nLmNvbnRyb2xIZWlnaHQsIG1heEhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBfY29uc3RyYWluZWRIZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gQk9UVE9NOiBhbGxvdyBicm93c2VyIHRvIGluY3JlYXNlIHNjcm9sbGFibGUgYXJlYSBhbmQgaW1tZWRpYXRlbHkgc2V0IHNjcm9sbFxuXG5cbiAgICAgIGlmIChwbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgICAgIHNjcm9sbFRvKHNjcm9sbFBhcmVudCwgc2Nyb2xsRG93bik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RvcCc6XG4gICAgICAvLyAxOiB0aGUgbWVudSB3aWxsIGZpdCwgZG8gbm90aGluZ1xuICAgICAgaWYgKHZpZXdTcGFjZUFib3ZlID49IG1lbnVIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgICAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9IC8vIDI6IHRoZSBtZW51IHdpbGwgZml0LCBpZiBzY3JvbGxlZFxuXG5cbiAgICAgIGlmIChzY3JvbGxTcGFjZUFib3ZlID49IG1lbnVIZWlnaHQgJiYgIWlzRml4ZWRQb3NpdGlvbikge1xuICAgICAgICBpZiAoc2hvdWxkU2Nyb2xsKSB7XG4gICAgICAgICAgYW5pbWF0ZWRTY3JvbGxUbyhzY3JvbGxQYXJlbnQsIHNjcm9sbFVwLCBzY3JvbGxEdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gMzogdGhlIG1lbnUgd2lsbCBmaXQsIGlmIGNvbnN0cmFpbmVkXG5cblxuICAgICAgaWYgKCFpc0ZpeGVkUG9zaXRpb24gJiYgc2Nyb2xsU3BhY2VBYm92ZSA+PSBtaW5IZWlnaHQgfHwgaXNGaXhlZFBvc2l0aW9uICYmIHZpZXdTcGFjZUFib3ZlID49IG1pbkhlaWdodCkge1xuICAgICAgICB2YXIgX2NvbnN0cmFpbmVkSGVpZ2h0MiA9IG1heEhlaWdodDsgLy8gd2Ugd2FudCB0byBwcm92aWRlIGFzIG11Y2ggb2YgdGhlIG1lbnUgYXMgcG9zc2libGUgdG8gdGhlIHVzZXIsXG4gICAgICAgIC8vIHNvIGdpdmUgdGhlbSB3aGF0ZXZlciBpcyBhdmFpbGFibGUgYmVsb3cgcmF0aGVyIHRoYW4gdGhlIG1pbkhlaWdodC5cblxuICAgICAgICBpZiAoIWlzRml4ZWRQb3NpdGlvbiAmJiBzY3JvbGxTcGFjZUFib3ZlID49IG1pbkhlaWdodCB8fCBpc0ZpeGVkUG9zaXRpb24gJiYgdmlld1NwYWNlQWJvdmUgPj0gbWluSGVpZ2h0KSB7XG4gICAgICAgICAgX2NvbnN0cmFpbmVkSGVpZ2h0MiA9IGlzRml4ZWRQb3NpdGlvbiA/IHZpZXdTcGFjZUFib3ZlIC0gbWFyZ2luVG9wIDogc2Nyb2xsU3BhY2VBYm92ZSAtIG1hcmdpblRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaG91bGRTY3JvbGwpIHtcbiAgICAgICAgICBhbmltYXRlZFNjcm9sbFRvKHNjcm9sbFBhcmVudCwgc2Nyb2xsVXAsIHNjcm9sbER1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IF9jb25zdHJhaW5lZEhlaWdodDJcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gNC4gbm90IGVub3VnaCBzcGFjZSwgdGhlIGJyb3dzZXIgV0lMTCBOT1QgaW5jcmVhc2Ugc2Nyb2xsYWJsZSBhcmVhIHdoZW5cbiAgICAgIC8vIGFic29sdXRlbHkgcG9zaXRpb25lZCBlbGVtZW50IHJlbmRlcmVkIGFib3ZlIHRoZSB2aWV3cG9ydCAob25seSBiZWxvdykuXG4gICAgICAvLyBGbGlwIHRoZSBtZW51LCByZW5kZXIgYmVsb3dcblxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodFxuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBsYWNlbWVudCBwcm92aWRlZCBcXFwiXCIuY29uY2F0KHBsYWNlbWVudCwgXCJcXFwiLlwiKSk7XG4gIH0gLy8gZnVsZmlsIGNvbnRyYWN0IHdpdGggZmxvdzogaW1wbGljaXQgcmV0dXJuIHZhbHVlIG9mIHVuZGVmaW5lZFxuXG5cbiAgcmV0dXJuIGRlZmF1bHRTdGF0ZTtcbn0gLy8gTWVudSBDb21wb25lbnRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBhbGlnblRvQ29udHJvbChwbGFjZW1lbnQpIHtcbiAgdmFyIHBsYWNlbWVudFRvQ1NTUHJvcCA9IHtcbiAgICBib3R0b206ICd0b3AnLFxuICAgIHRvcDogJ2JvdHRvbSdcbiAgfTtcbiAgcmV0dXJuIHBsYWNlbWVudCA/IHBsYWNlbWVudFRvQ1NTUHJvcFtwbGFjZW1lbnRdIDogJ2JvdHRvbSc7XG59XG5cbnZhciBjb2VyY2VQbGFjZW1lbnQgPSBmdW5jdGlvbiBjb2VyY2VQbGFjZW1lbnQocCkge1xuICByZXR1cm4gcCA9PT0gJ2F1dG8nID8gJ2JvdHRvbScgOiBwO1xufTtcblxudmFyIG1lbnVDU1MgPSBmdW5jdGlvbiBtZW51Q1NTKF9yZWYyKSB7XG4gIHZhciBfcmVmMztcblxuICB2YXIgcGxhY2VtZW50ID0gX3JlZjIucGxhY2VtZW50LFxuICAgICAgX3JlZjIkdGhlbWUgPSBfcmVmMi50aGVtZSxcbiAgICAgIGJvcmRlclJhZGl1cyA9IF9yZWYyJHRoZW1lLmJvcmRlclJhZGl1cyxcbiAgICAgIHNwYWNpbmcgPSBfcmVmMiR0aGVtZS5zcGFjaW5nLFxuICAgICAgY29sb3JzID0gX3JlZjIkdGhlbWUuY29sb3JzO1xuICByZXR1cm4gX3JlZjMgPSB7XG4gICAgbGFiZWw6ICdtZW51J1xuICB9LCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIGFsaWduVG9Db250cm9sKHBsYWNlbWVudCksICcxMDAlJyksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgXCJiYWNrZ3JvdW5kQ29sb3JcIiwgY29sb3JzLm5ldXRyYWwwKSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBcImJvcmRlclJhZGl1c1wiLCBib3JkZXJSYWRpdXMpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFwiYm94U2hhZG93XCIsICcwIDAgMCAxcHggaHNsYSgwLCAwJSwgMCUsIDAuMSksIDAgNHB4IDExcHggaHNsYSgwLCAwJSwgMCUsIDAuMSknKSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBcIm1hcmdpbkJvdHRvbVwiLCBzcGFjaW5nLm1lbnVHdXR0ZXIpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFwibWFyZ2luVG9wXCIsIHNwYWNpbmcubWVudUd1dHRlciksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgXCJwb3NpdGlvblwiLCAnYWJzb2x1dGUnKSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBcIndpZHRoXCIsICcxMDAlJyksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgXCJ6SW5kZXhcIiwgMSksIF9yZWYzO1xufTsgLy8gTk9URTogaW50ZXJuYWwgb25seVxuXG52YXIgTWVudVBsYWNlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWVudVBsYWNlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVudVBsYWNlcigpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW51UGxhY2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKE1lbnVQbGFjZXIpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBtYXhIZWlnaHQ6IF90aGlzLnByb3BzLm1heE1lbnVIZWlnaHQsXG4gICAgICBwbGFjZW1lbnQ6IG51bGxcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRQbGFjZW1lbnRcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgbWluTWVudUhlaWdodCA9IF90aGlzJHByb3BzLm1pbk1lbnVIZWlnaHQsXG4gICAgICAgICAgbWF4TWVudUhlaWdodCA9IF90aGlzJHByb3BzLm1heE1lbnVIZWlnaHQsXG4gICAgICAgICAgbWVudVBsYWNlbWVudCA9IF90aGlzJHByb3BzLm1lbnVQbGFjZW1lbnQsXG4gICAgICAgICAgbWVudVBvc2l0aW9uID0gX3RoaXMkcHJvcHMubWVudVBvc2l0aW9uLFxuICAgICAgICAgIG1lbnVTaG91bGRTY3JvbGxJbnRvVmlldyA9IF90aGlzJHByb3BzLm1lbnVTaG91bGRTY3JvbGxJbnRvVmlldyxcbiAgICAgICAgICB0aGVtZSA9IF90aGlzJHByb3BzLnRoZW1lO1xuICAgICAgdmFyIGdldFBvcnRhbFBsYWNlbWVudCA9IF90aGlzLmNvbnRleHQuZ2V0UG9ydGFsUGxhY2VtZW50O1xuICAgICAgaWYgKCFyZWYpIHJldHVybjsgLy8gRE8gTk9UIHNjcm9sbCBpZiBwb3NpdGlvbiBpcyBmaXhlZFxuXG4gICAgICB2YXIgaXNGaXhlZFBvc2l0aW9uID0gbWVudVBvc2l0aW9uID09PSAnZml4ZWQnO1xuICAgICAgdmFyIHNob3VsZFNjcm9sbCA9IG1lbnVTaG91bGRTY3JvbGxJbnRvVmlldyAmJiAhaXNGaXhlZFBvc2l0aW9uO1xuICAgICAgdmFyIHN0YXRlID0gZ2V0TWVudVBsYWNlbWVudCh7XG4gICAgICAgIG1heEhlaWdodDogbWF4TWVudUhlaWdodCxcbiAgICAgICAgbWVudUVsOiByZWYsXG4gICAgICAgIG1pbkhlaWdodDogbWluTWVudUhlaWdodCxcbiAgICAgICAgcGxhY2VtZW50OiBtZW51UGxhY2VtZW50LFxuICAgICAgICBzaG91bGRTY3JvbGw6IHNob3VsZFNjcm9sbCxcbiAgICAgICAgaXNGaXhlZFBvc2l0aW9uOiBpc0ZpeGVkUG9zaXRpb24sXG4gICAgICAgIHRoZW1lOiB0aGVtZVxuICAgICAgfSk7XG4gICAgICBpZiAoZ2V0UG9ydGFsUGxhY2VtZW50KSBnZXRQb3J0YWxQbGFjZW1lbnQoc3RhdGUpO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0VXBkYXRlZFByb3BzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBtZW51UGxhY2VtZW50ID0gX3RoaXMucHJvcHMubWVudVBsYWNlbWVudDtcbiAgICAgIHZhciBwbGFjZW1lbnQgPSBfdGhpcy5zdGF0ZS5wbGFjZW1lbnQgfHwgY29lcmNlUGxhY2VtZW50KG1lbnVQbGFjZW1lbnQpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7XG4gICAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgICBtYXhIZWlnaHQ6IF90aGlzLnN0YXRlLm1heEhlaWdodFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTWVudVBsYWNlciwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgICByZXR1cm4gY2hpbGRyZW4oe1xuICAgICAgICByZWY6IHRoaXMuZ2V0UGxhY2VtZW50LFxuICAgICAgICBwbGFjZXJQcm9wczogdGhpcy5nZXRVcGRhdGVkUHJvcHMoKVxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1lbnVQbGFjZXI7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShNZW51UGxhY2VyLCBcImNvbnRleHRUeXBlc1wiLCB7XG4gIGdldFBvcnRhbFBsYWNlbWVudDogUHJvcFR5cGVzLmZ1bmNcbn0pO1xuXG52YXIgTWVudSA9IGZ1bmN0aW9uIE1lbnUocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZixcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzO1xuICB2YXIgY24gPSBjeChcbiAgLyojX19QVVJFX18qL1xuICBjc3MoZ2V0U3R5bGVzKCdtZW51JywgcHJvcHMpKSwge1xuICAgIG1lbnU6IHRydWVcbiAgfSwgY2xhc3NOYW1lKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY25cbiAgfSwgaW5uZXJQcm9wcywge1xuICAgIHJlZjogaW5uZXJSZWZcbiAgfSksIGNoaWxkcmVuKTtcbn07XG4vLyBNZW51IExpc3Rcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgbWVudUxpc3RDU1MgPSBmdW5jdGlvbiBtZW51TGlzdENTUyhfcmVmNCkge1xuICB2YXIgbWF4SGVpZ2h0ID0gX3JlZjQubWF4SGVpZ2h0LFxuICAgICAgYmFzZVVuaXQgPSBfcmVmNC50aGVtZS5zcGFjaW5nLmJhc2VVbml0O1xuICByZXR1cm4ge1xuICAgIG1heEhlaWdodDogbWF4SGVpZ2h0LFxuICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgIHBhZGRpbmdCb3R0b206IGJhc2VVbml0LFxuICAgIHBhZGRpbmdUb3A6IGJhc2VVbml0LFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIC8vIHJlcXVpcmVkIGZvciBvZmZzZXRbSGVpZ2h0LCBUb3BdID4ga2V5Ym9hcmQgc2Nyb2xsXG4gICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCdcbiAgfTtcbn07XG52YXIgTWVudUxpc3QgPSBmdW5jdGlvbiBNZW51TGlzdChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpc011bHRpID0gcHJvcHMuaXNNdWx0aSxcbiAgICAgIGlubmVyUmVmID0gcHJvcHMuaW5uZXJSZWY7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3MoZ2V0U3R5bGVzKCdtZW51TGlzdCcsIHByb3BzKSksIHtcbiAgICAgICdtZW51LWxpc3QnOiB0cnVlLFxuICAgICAgJ21lbnUtbGlzdC0taXMtbXVsdGknOiBpc011bHRpXG4gICAgfSwgY2xhc3NOYW1lKSxcbiAgICByZWY6IGlubmVyUmVmXG4gIH0sIGNoaWxkcmVuKTtcbn07IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTWVudSBOb3RpY2VzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxudmFyIG5vdGljZUNTUyA9IGZ1bmN0aW9uIG5vdGljZUNTUyhfcmVmNSkge1xuICB2YXIgX3JlZjUkdGhlbWUgPSBfcmVmNS50aGVtZSxcbiAgICAgIGJhc2VVbml0ID0gX3JlZjUkdGhlbWUuc3BhY2luZy5iYXNlVW5pdCxcbiAgICAgIGNvbG9ycyA9IF9yZWY1JHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIHtcbiAgICBjb2xvcjogY29sb3JzLm5ldXRyYWw0MCxcbiAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdChiYXNlVW5pdCAqIDIsIFwicHggXCIpLmNvbmNhdChiYXNlVW5pdCAqIDMsIFwicHhcIiksXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICB9O1xufTtcblxudmFyIG5vT3B0aW9uc01lc3NhZ2VDU1MgPSBub3RpY2VDU1M7XG52YXIgbG9hZGluZ01lc3NhZ2VDU1MgPSBub3RpY2VDU1M7XG52YXIgTm9PcHRpb25zTWVzc2FnZSA9IGZ1bmN0aW9uIE5vT3B0aW9uc01lc3NhZ2UocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3MoZ2V0U3R5bGVzKCdub09wdGlvbnNNZXNzYWdlJywgcHJvcHMpKSwge1xuICAgICAgJ21lbnUtbm90aWNlJzogdHJ1ZSxcbiAgICAgICdtZW51LW5vdGljZS0tbm8tb3B0aW9ucyc6IHRydWVcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0sIGlubmVyUHJvcHMpLCBjaGlsZHJlbik7XG59O1xuTm9PcHRpb25zTWVzc2FnZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNoaWxkcmVuOiAnTm8gb3B0aW9ucydcbn07XG52YXIgTG9hZGluZ01lc3NhZ2UgPSBmdW5jdGlvbiBMb2FkaW5nTWVzc2FnZShwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpbm5lclByb3BzID0gcHJvcHMuaW5uZXJQcm9wcztcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgIGNzcyhnZXRTdHlsZXMoJ2xvYWRpbmdNZXNzYWdlJywgcHJvcHMpKSwge1xuICAgICAgJ21lbnUtbm90aWNlJzogdHJ1ZSxcbiAgICAgICdtZW51LW5vdGljZS0tbG9hZGluZyc6IHRydWVcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0sIGlubmVyUHJvcHMpLCBjaGlsZHJlbik7XG59O1xuTG9hZGluZ01lc3NhZ2UuZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogJ0xvYWRpbmcuLi4nXG59OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIE1lbnUgUG9ydGFsXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxudmFyIG1lbnVQb3J0YWxDU1MgPSBmdW5jdGlvbiBtZW51UG9ydGFsQ1NTKF9yZWY2KSB7XG4gIHZhciByZWN0ID0gX3JlZjYucmVjdCxcbiAgICAgIG9mZnNldCA9IF9yZWY2Lm9mZnNldCxcbiAgICAgIHBvc2l0aW9uID0gX3JlZjYucG9zaXRpb247XG4gIHJldHVybiB7XG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICB0b3A6IG9mZnNldCxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICB6SW5kZXg6IDFcbiAgfTtcbn07XG52YXIgTWVudVBvcnRhbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgX2luaGVyaXRzKE1lbnVQb3J0YWwsIF9Db21wb25lbnQyKTtcblxuICBmdW5jdGlvbiBNZW51UG9ydGFsKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YzO1xuXG4gICAgdmFyIF90aGlzMjtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW51UG9ydGFsKTtcblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YzID0gX2dldFByb3RvdHlwZU9mKE1lbnVQb3J0YWwpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjMsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSksIFwic3RhdGVcIiwge1xuICAgICAgcGxhY2VtZW50OiBudWxsXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMikpLCBcImdldFBvcnRhbFBsYWNlbWVudFwiLCBmdW5jdGlvbiAoX3JlZjcpIHtcbiAgICAgIHZhciBwbGFjZW1lbnQgPSBfcmVmNy5wbGFjZW1lbnQ7XG4gICAgICB2YXIgaW5pdGlhbFBsYWNlbWVudCA9IGNvZXJjZVBsYWNlbWVudChfdGhpczIucHJvcHMubWVudVBsYWNlbWVudCk7IC8vIGF2b2lkIHJlLXJlbmRlcnMgaWYgdGhlIHBsYWNlbWVudCBoYXMgbm90IGNoYW5nZWRcblxuICAgICAgaWYgKHBsYWNlbWVudCAhPT0gaW5pdGlhbFBsYWNlbWVudCkge1xuICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzMjtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNZW51UG9ydGFsLCBbe1xuICAgIGtleTogXCJnZXRDaGlsZENvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0UG9ydGFsUGxhY2VtZW50OiB0aGlzLmdldFBvcnRhbFBsYWNlbWVudFxuICAgICAgfTtcbiAgICB9IC8vIGNhbGxiYWNrIGZvciBvY2Nhc3Npb25zIHdoZXJlIHRoZSBtZW51IG11c3QgXCJmbGlwXCJcblxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhcHBlbmRUbyA9IF90aGlzJHByb3BzMi5hcHBlbmRUbyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgICBjb250cm9sRWxlbWVudCA9IF90aGlzJHByb3BzMi5jb250cm9sRWxlbWVudCxcbiAgICAgICAgICBtZW51UGxhY2VtZW50ID0gX3RoaXMkcHJvcHMyLm1lbnVQbGFjZW1lbnQsXG4gICAgICAgICAgcG9zaXRpb24gPSBfdGhpcyRwcm9wczIubWVudVBvc2l0aW9uLFxuICAgICAgICAgIGdldFN0eWxlcyA9IF90aGlzJHByb3BzMi5nZXRTdHlsZXM7XG4gICAgICB2YXIgaXNGaXhlZCA9IHBvc2l0aW9uID09PSAnZml4ZWQnOyAvLyBiYWlsIGVhcmx5IGlmIHJlcXVpcmVkIGVsZW1lbnRzIGFyZW4ndCBwcmVzZW50XG5cbiAgICAgIGlmICghYXBwZW5kVG8gJiYgIWlzRml4ZWQgfHwgIWNvbnRyb2xFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGxhY2VtZW50ID0gdGhpcy5zdGF0ZS5wbGFjZW1lbnQgfHwgY29lcmNlUGxhY2VtZW50KG1lbnVQbGFjZW1lbnQpO1xuICAgICAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudE9iaihjb250cm9sRWxlbWVudCk7XG4gICAgICB2YXIgc2Nyb2xsRGlzdGFuY2UgPSBpc0ZpeGVkID8gMCA6IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgIHZhciBvZmZzZXQgPSByZWN0W3BsYWNlbWVudF0gKyBzY3JvbGxEaXN0YW5jZTtcbiAgICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICAgICAgcmVjdDogcmVjdFxuICAgICAgfTsgLy8gc2FtZSB3cmFwcGVyIGVsZW1lbnQgd2hldGhlciBmaXhlZCBvciBwb3J0YWxsZWRcblxuICAgICAgdmFyIG1lbnVXcmFwcGVyID0gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTpcbiAgICAgICAgLyojX19QVVJFX18qL1xuXG4gICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgY3NzKGdldFN0eWxlcygnbWVudVBvcnRhbCcsIHN0YXRlKSlcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICAgIHJldHVybiBhcHBlbmRUbyA/IGNyZWF0ZVBvcnRhbChtZW51V3JhcHBlciwgYXBwZW5kVG8pIDogbWVudVdyYXBwZXI7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1lbnVQb3J0YWw7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShNZW51UG9ydGFsLCBcImNoaWxkQ29udGV4dFR5cGVzXCIsIHtcbiAgZ2V0UG9ydGFsUGxhY2VtZW50OiBQcm9wVHlwZXMuZnVuY1xufSk7XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBrZXlMaXN0ID0gT2JqZWN0LmtleXM7XG52YXIgaGFzUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGVxdWFsKGEsIGIpIHtcbiAgLy8gZmFzdC1kZWVwLWVxdWFsIGluZGV4LmpzIDIuMC4xXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSAmJiBiICYmIF90eXBlb2YoYSkgPT0gJ29iamVjdCcgJiYgX3R5cGVvZihiKSA9PSAnb2JqZWN0Jykge1xuICAgIHZhciBhcnJBID0gaXNBcnJheShhKSxcbiAgICAgICAgYXJyQiA9IGlzQXJyYXkoYiksXG4gICAgICAgIGksXG4gICAgICAgIGxlbmd0aCxcbiAgICAgICAga2V5O1xuXG4gICAgaWYgKGFyckEgJiYgYXJyQikge1xuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOykge1xuICAgICAgICBpZiAoIWVxdWFsKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhcnJBICE9IGFyckIpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgZGF0ZUEgPSBhIGluc3RhbmNlb2YgRGF0ZSxcbiAgICAgICAgZGF0ZUIgPSBiIGluc3RhbmNlb2YgRGF0ZTtcbiAgICBpZiAoZGF0ZUEgIT0gZGF0ZUIpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZGF0ZUEgJiYgZGF0ZUIpIHJldHVybiBhLmdldFRpbWUoKSA9PSBiLmdldFRpbWUoKTtcbiAgICB2YXIgcmVnZXhwQSA9IGEgaW5zdGFuY2VvZiBSZWdFeHAsXG4gICAgICAgIHJlZ2V4cEIgPSBiIGluc3RhbmNlb2YgUmVnRXhwO1xuICAgIGlmIChyZWdleHBBICE9IHJlZ2V4cEIpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocmVnZXhwQSAmJiByZWdleHBCKSByZXR1cm4gYS50b1N0cmluZygpID09IGIudG9TdHJpbmcoKTtcbiAgICB2YXIga2V5cyA9IGtleUxpc3QoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG5cbiAgICBpZiAobGVuZ3RoICE9PSBrZXlMaXN0KGIpLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOykge1xuICAgICAgaWYgKCFoYXNQcm9wLmNhbGwoYiwga2V5c1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIGVuZCBmYXN0LWRlZXAtZXF1YWxcbiAgICAvLyBDdXN0b20gaGFuZGxpbmcgZm9yIFJlYWN0XG5cblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKGtleSA9PT0gJ19vd25lcicgJiYgYS4kJHR5cGVvZikge1xuICAgICAgICAvLyBSZWFjdC1zcGVjaWZpYzogYXZvaWQgdHJhdmVyc2luZyBSZWFjdCBlbGVtZW50cycgX293bmVyLlxuICAgICAgICAvLyAgX293bmVyIGNvbnRhaW5zIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAgICAgICAgLy8gYW5kIGlzIG5vdCBuZWVkZWQgd2hlbiBjb21wYXJpbmcgdGhlIGFjdHVhbCBlbGVtZW50cyAoYW5kIG5vdCB0aGVpciBvd25lcnMpXG4gICAgICAgIC8vIC4kJHR5cGVvZiBhbmQgLl9zdG9yZSBvbiBqdXN0IHJlYXNvbmFibGUgbWFya2VycyBvZiBhIHJlYWN0IGVsZW1lbnRcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBhbGwgb3RoZXIgcHJvcGVydGllcyBzaG91bGQgYmUgdHJhdmVyc2VkIGFzIHVzdWFsXG4gICAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSAvLyBmYXN0LWRlZXAtZXF1YWwgaW5kZXguanMgMi4wLjFcblxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gYSAhPT0gYSAmJiBiICE9PSBiO1xufSAvLyBlbmQgZmFzdC1kZWVwLWVxdWFsXG5cblxuZnVuY3Rpb24gZXhwb3J0ZWRFcXVhbChhLCBiKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVxdWFsKGEsIGIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvci5tZXNzYWdlICYmIGVycm9yLm1lc3NhZ2UubWF0Y2goL3N0YWNrfHJlY3Vyc2lvbi9pKSkge1xuICAgICAgLy8gd2FybiBvbiBjaXJjdWxhciByZWZlcmVuY2VzLCBkb24ndCBjcmFzaFxuICAgICAgLy8gYnJvd3NlcnMgZ2l2ZSB0aGlzIGRpZmZlcmVudCBlcnJvcnMgbmFtZSBhbmQgbWVzc2FnZXM6XG4gICAgICAvLyBjaHJvbWUvc2FmYXJpOiBcIlJhbmdlRXJyb3JcIiwgXCJNYXhpbXVtIGNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiXG4gICAgICAvLyBmaXJlZm94OiBcIkludGVybmFsRXJyb3JcIiwgdG9vIG11Y2ggcmVjdXJzaW9uXCJcbiAgICAgIC8vIGVkZ2U6IFwiRXJyb3JcIiwgXCJPdXQgb2Ygc3RhY2sgc3BhY2VcIlxuICAgICAgY29uc29sZS53YXJuKCdXYXJuaW5nOiByZWFjdC1mYXN0LWNvbXBhcmUgZG9lcyBub3QgaGFuZGxlIGNpcmN1bGFyIHJlZmVyZW5jZXMuJywgZXJyb3IubmFtZSwgZXJyb3IubWVzc2FnZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBzb21lIG90aGVyIGVycm9yLiB3ZSBzaG91bGQgZGVmaW5pdGVseSBrbm93IGFib3V0IHRoZXNlXG5cblxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbnZhciBkaWFjcml0aWNzID0gW3tcbiAgYmFzZTogJ0EnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNDFcXHUyNEI2XFx1RkYyMVxcdTAwQzBcXHUwMEMxXFx1MDBDMlxcdTFFQTZcXHUxRUE0XFx1MUVBQVxcdTFFQThcXHUwMEMzXFx1MDEwMFxcdTAxMDJcXHUxRUIwXFx1MUVBRVxcdTFFQjRcXHUxRUIyXFx1MDIyNlxcdTAxRTBcXHUwMEM0XFx1MDFERVxcdTFFQTJcXHUwMEM1XFx1MDFGQVxcdTAxQ0RcXHUwMjAwXFx1MDIwMlxcdTFFQTBcXHUxRUFDXFx1MUVCNlxcdTFFMDBcXHUwMTA0XFx1MDIzQVxcdTJDNkZdL2dcbn0sIHtcbiAgYmFzZTogJ0FBJyxcbiAgbGV0dGVyczogL1tcXHVBNzMyXS9nXG59LCB7XG4gIGJhc2U6ICdBRScsXG4gIGxldHRlcnM6IC9bXFx1MDBDNlxcdTAxRkNcXHUwMUUyXS9nXG59LCB7XG4gIGJhc2U6ICdBTycsXG4gIGxldHRlcnM6IC9bXFx1QTczNF0vZ1xufSwge1xuICBiYXNlOiAnQVUnLFxuICBsZXR0ZXJzOiAvW1xcdUE3MzZdL2dcbn0sIHtcbiAgYmFzZTogJ0FWJyxcbiAgbGV0dGVyczogL1tcXHVBNzM4XFx1QTczQV0vZ1xufSwge1xuICBiYXNlOiAnQVknLFxuICBsZXR0ZXJzOiAvW1xcdUE3M0NdL2dcbn0sIHtcbiAgYmFzZTogJ0InLFxuICBsZXR0ZXJzOiAvW1xcdTAwNDJcXHUyNEI3XFx1RkYyMlxcdTFFMDJcXHUxRTA0XFx1MUUwNlxcdTAyNDNcXHUwMTgyXFx1MDE4MV0vZ1xufSwge1xuICBiYXNlOiAnQycsXG4gIGxldHRlcnM6IC9bXFx1MDA0M1xcdTI0QjhcXHVGRjIzXFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAwQzdcXHUxRTA4XFx1MDE4N1xcdTAyM0JcXHVBNzNFXS9nXG59LCB7XG4gIGJhc2U6ICdEJyxcbiAgbGV0dGVyczogL1tcXHUwMDQ0XFx1MjRCOVxcdUZGMjRcXHUxRTBBXFx1MDEwRVxcdTFFMENcXHUxRTEwXFx1MUUxMlxcdTFFMEVcXHUwMTEwXFx1MDE4QlxcdTAxOEFcXHUwMTg5XFx1QTc3OV0vZ1xufSwge1xuICBiYXNlOiAnRFonLFxuICBsZXR0ZXJzOiAvW1xcdTAxRjFcXHUwMUM0XS9nXG59LCB7XG4gIGJhc2U6ICdEeicsXG4gIGxldHRlcnM6IC9bXFx1MDFGMlxcdTAxQzVdL2dcbn0sIHtcbiAgYmFzZTogJ0UnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNDVcXHUyNEJBXFx1RkYyNVxcdTAwQzhcXHUwMEM5XFx1MDBDQVxcdTFFQzBcXHUxRUJFXFx1MUVDNFxcdTFFQzJcXHUxRUJDXFx1MDExMlxcdTFFMTRcXHUxRTE2XFx1MDExNFxcdTAxMTZcXHUwMENCXFx1MUVCQVxcdTAxMUFcXHUwMjA0XFx1MDIwNlxcdTFFQjhcXHUxRUM2XFx1MDIyOFxcdTFFMUNcXHUwMTE4XFx1MUUxOFxcdTFFMUFcXHUwMTkwXFx1MDE4RV0vZ1xufSwge1xuICBiYXNlOiAnRicsXG4gIGxldHRlcnM6IC9bXFx1MDA0NlxcdTI0QkJcXHVGRjI2XFx1MUUxRVxcdTAxOTFcXHVBNzdCXS9nXG59LCB7XG4gIGJhc2U6ICdHJyxcbiAgbGV0dGVyczogL1tcXHUwMDQ3XFx1MjRCQ1xcdUZGMjdcXHUwMUY0XFx1MDExQ1xcdTFFMjBcXHUwMTFFXFx1MDEyMFxcdTAxRTZcXHUwMTIyXFx1MDFFNFxcdTAxOTNcXHVBN0EwXFx1QTc3RFxcdUE3N0VdL2dcbn0sIHtcbiAgYmFzZTogJ0gnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNDhcXHUyNEJEXFx1RkYyOFxcdTAxMjRcXHUxRTIyXFx1MUUyNlxcdTAyMUVcXHUxRTI0XFx1MUUyOFxcdTFFMkFcXHUwMTI2XFx1MkM2N1xcdTJDNzVcXHVBNzhEXS9nXG59LCB7XG4gIGJhc2U6ICdJJyxcbiAgbGV0dGVyczogL1tcXHUwMDQ5XFx1MjRCRVxcdUZGMjlcXHUwMENDXFx1MDBDRFxcdTAwQ0VcXHUwMTI4XFx1MDEyQVxcdTAxMkNcXHUwMTMwXFx1MDBDRlxcdTFFMkVcXHUxRUM4XFx1MDFDRlxcdTAyMDhcXHUwMjBBXFx1MUVDQVxcdTAxMkVcXHUxRTJDXFx1MDE5N10vZ1xufSwge1xuICBiYXNlOiAnSicsXG4gIGxldHRlcnM6IC9bXFx1MDA0QVxcdTI0QkZcXHVGRjJBXFx1MDEzNFxcdTAyNDhdL2dcbn0sIHtcbiAgYmFzZTogJ0snLFxuICBsZXR0ZXJzOiAvW1xcdTAwNEJcXHUyNEMwXFx1RkYyQlxcdTFFMzBcXHUwMUU4XFx1MUUzMlxcdTAxMzZcXHUxRTM0XFx1MDE5OFxcdTJDNjlcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBN0EyXS9nXG59LCB7XG4gIGJhc2U6ICdMJyxcbiAgbGV0dGVyczogL1tcXHUwMDRDXFx1MjRDMVxcdUZGMkNcXHUwMTNGXFx1MDEzOVxcdTAxM0RcXHUxRTM2XFx1MUUzOFxcdTAxM0JcXHUxRTNDXFx1MUUzQVxcdTAxNDFcXHUwMjNEXFx1MkM2MlxcdTJDNjBcXHVBNzQ4XFx1QTc0NlxcdUE3ODBdL2dcbn0sIHtcbiAgYmFzZTogJ0xKJyxcbiAgbGV0dGVyczogL1tcXHUwMUM3XS9nXG59LCB7XG4gIGJhc2U6ICdMaicsXG4gIGxldHRlcnM6IC9bXFx1MDFDOF0vZ1xufSwge1xuICBiYXNlOiAnTScsXG4gIGxldHRlcnM6IC9bXFx1MDA0RFxcdTI0QzJcXHVGRjJEXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MkM2RVxcdTAxOUNdL2dcbn0sIHtcbiAgYmFzZTogJ04nLFxuICBsZXR0ZXJzOiAvW1xcdTAwNEVcXHUyNEMzXFx1RkYyRVxcdTAxRjhcXHUwMTQzXFx1MDBEMVxcdTFFNDRcXHUwMTQ3XFx1MUU0NlxcdTAxNDVcXHUxRTRBXFx1MUU0OFxcdTAyMjBcXHUwMTlEXFx1QTc5MFxcdUE3QTRdL2dcbn0sIHtcbiAgYmFzZTogJ05KJyxcbiAgbGV0dGVyczogL1tcXHUwMUNBXS9nXG59LCB7XG4gIGJhc2U6ICdOaicsXG4gIGxldHRlcnM6IC9bXFx1MDFDQl0vZ1xufSwge1xuICBiYXNlOiAnTycsXG4gIGxldHRlcnM6IC9bXFx1MDA0RlxcdTI0QzRcXHVGRjJGXFx1MDBEMlxcdTAwRDNcXHUwMEQ0XFx1MUVEMlxcdTFFRDBcXHUxRUQ2XFx1MUVENFxcdTAwRDVcXHUxRTRDXFx1MDIyQ1xcdTFFNEVcXHUwMTRDXFx1MUU1MFxcdTFFNTJcXHUwMTRFXFx1MDIyRVxcdTAyMzBcXHUwMEQ2XFx1MDIyQVxcdTFFQ0VcXHUwMTUwXFx1MDFEMVxcdTAyMENcXHUwMjBFXFx1MDFBMFxcdTFFRENcXHUxRURBXFx1MUVFMFxcdTFFREVcXHUxRUUyXFx1MUVDQ1xcdTFFRDhcXHUwMUVBXFx1MDFFQ1xcdTAwRDhcXHUwMUZFXFx1MDE4NlxcdTAxOUZcXHVBNzRBXFx1QTc0Q10vZ1xufSwge1xuICBiYXNlOiAnT0knLFxuICBsZXR0ZXJzOiAvW1xcdTAxQTJdL2dcbn0sIHtcbiAgYmFzZTogJ09PJyxcbiAgbGV0dGVyczogL1tcXHVBNzRFXS9nXG59LCB7XG4gIGJhc2U6ICdPVScsXG4gIGxldHRlcnM6IC9bXFx1MDIyMl0vZ1xufSwge1xuICBiYXNlOiAnUCcsXG4gIGxldHRlcnM6IC9bXFx1MDA1MFxcdTI0QzVcXHVGRjMwXFx1MUU1NFxcdTFFNTZcXHUwMUE0XFx1MkM2M1xcdUE3NTBcXHVBNzUyXFx1QTc1NF0vZ1xufSwge1xuICBiYXNlOiAnUScsXG4gIGxldHRlcnM6IC9bXFx1MDA1MVxcdTI0QzZcXHVGRjMxXFx1QTc1NlxcdUE3NThcXHUwMjRBXS9nXG59LCB7XG4gIGJhc2U6ICdSJyxcbiAgbGV0dGVyczogL1tcXHUwMDUyXFx1MjRDN1xcdUZGMzJcXHUwMTU0XFx1MUU1OFxcdTAxNThcXHUwMjEwXFx1MDIxMlxcdTFFNUFcXHUxRTVDXFx1MDE1NlxcdTFFNUVcXHUwMjRDXFx1MkM2NFxcdUE3NUFcXHVBN0E2XFx1QTc4Ml0vZ1xufSwge1xuICBiYXNlOiAnUycsXG4gIGxldHRlcnM6IC9bXFx1MDA1M1xcdTI0QzhcXHVGRjMzXFx1MUU5RVxcdTAxNUFcXHUxRTY0XFx1MDE1Q1xcdTFFNjBcXHUwMTYwXFx1MUU2NlxcdTFFNjJcXHUxRTY4XFx1MDIxOFxcdTAxNUVcXHUyQzdFXFx1QTdBOFxcdUE3ODRdL2dcbn0sIHtcbiAgYmFzZTogJ1QnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNTRcXHUyNEM5XFx1RkYzNFxcdTFFNkFcXHUwMTY0XFx1MUU2Q1xcdTAyMUFcXHUwMTYyXFx1MUU3MFxcdTFFNkVcXHUwMTY2XFx1MDFBQ1xcdTAxQUVcXHUwMjNFXFx1QTc4Nl0vZ1xufSwge1xuICBiYXNlOiAnVFonLFxuICBsZXR0ZXJzOiAvW1xcdUE3MjhdL2dcbn0sIHtcbiAgYmFzZTogJ1UnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNTVcXHUyNENBXFx1RkYzNVxcdTAwRDlcXHUwMERBXFx1MDBEQlxcdTAxNjhcXHUxRTc4XFx1MDE2QVxcdTFFN0FcXHUwMTZDXFx1MDBEQ1xcdTAxREJcXHUwMUQ3XFx1MDFENVxcdTAxRDlcXHUxRUU2XFx1MDE2RVxcdTAxNzBcXHUwMUQzXFx1MDIxNFxcdTAyMTZcXHUwMUFGXFx1MUVFQVxcdTFFRThcXHUxRUVFXFx1MUVFQ1xcdTFFRjBcXHUxRUU0XFx1MUU3MlxcdTAxNzJcXHUxRTc2XFx1MUU3NFxcdTAyNDRdL2dcbn0sIHtcbiAgYmFzZTogJ1YnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNTZcXHUyNENCXFx1RkYzNlxcdTFFN0NcXHUxRTdFXFx1MDFCMlxcdUE3NUVcXHUwMjQ1XS9nXG59LCB7XG4gIGJhc2U6ICdWWScsXG4gIGxldHRlcnM6IC9bXFx1QTc2MF0vZ1xufSwge1xuICBiYXNlOiAnVycsXG4gIGxldHRlcnM6IC9bXFx1MDA1N1xcdTI0Q0NcXHVGRjM3XFx1MUU4MFxcdTFFODJcXHUwMTc0XFx1MUU4NlxcdTFFODRcXHUxRTg4XFx1MkM3Ml0vZ1xufSwge1xuICBiYXNlOiAnWCcsXG4gIGxldHRlcnM6IC9bXFx1MDA1OFxcdTI0Q0RcXHVGRjM4XFx1MUU4QVxcdTFFOENdL2dcbn0sIHtcbiAgYmFzZTogJ1knLFxuICBsZXR0ZXJzOiAvW1xcdTAwNTlcXHUyNENFXFx1RkYzOVxcdTFFRjJcXHUwMEREXFx1MDE3NlxcdTFFRjhcXHUwMjMyXFx1MUU4RVxcdTAxNzhcXHUxRUY2XFx1MUVGNFxcdTAxQjNcXHUwMjRFXFx1MUVGRV0vZ1xufSwge1xuICBiYXNlOiAnWicsXG4gIGxldHRlcnM6IC9bXFx1MDA1QVxcdTI0Q0ZcXHVGRjNBXFx1MDE3OVxcdTFFOTBcXHUwMTdCXFx1MDE3RFxcdTFFOTJcXHUxRTk0XFx1MDFCNVxcdTAyMjRcXHUyQzdGXFx1MkM2QlxcdUE3NjJdL2dcbn0sIHtcbiAgYmFzZTogJ2EnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjFcXHUyNEQwXFx1RkY0MVxcdTFFOUFcXHUwMEUwXFx1MDBFMVxcdTAwRTJcXHUxRUE3XFx1MUVBNVxcdTFFQUJcXHUxRUE5XFx1MDBFM1xcdTAxMDFcXHUwMTAzXFx1MUVCMVxcdTFFQUZcXHUxRUI1XFx1MUVCM1xcdTAyMjdcXHUwMUUxXFx1MDBFNFxcdTAxREZcXHUxRUEzXFx1MDBFNVxcdTAxRkJcXHUwMUNFXFx1MDIwMVxcdTAyMDNcXHUxRUExXFx1MUVBRFxcdTFFQjdcXHUxRTAxXFx1MDEwNVxcdTJDNjVcXHUwMjUwXS9nXG59LCB7XG4gIGJhc2U6ICdhYScsXG4gIGxldHRlcnM6IC9bXFx1QTczM10vZ1xufSwge1xuICBiYXNlOiAnYWUnLFxuICBsZXR0ZXJzOiAvW1xcdTAwRTZcXHUwMUZEXFx1MDFFM10vZ1xufSwge1xuICBiYXNlOiAnYW8nLFxuICBsZXR0ZXJzOiAvW1xcdUE3MzVdL2dcbn0sIHtcbiAgYmFzZTogJ2F1JyxcbiAgbGV0dGVyczogL1tcXHVBNzM3XS9nXG59LCB7XG4gIGJhc2U6ICdhdicsXG4gIGxldHRlcnM6IC9bXFx1QTczOVxcdUE3M0JdL2dcbn0sIHtcbiAgYmFzZTogJ2F5JyxcbiAgbGV0dGVyczogL1tcXHVBNzNEXS9nXG59LCB7XG4gIGJhc2U6ICdiJyxcbiAgbGV0dGVyczogL1tcXHUwMDYyXFx1MjREMVxcdUZGNDJcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUwMTgwXFx1MDE4M1xcdTAyNTNdL2dcbn0sIHtcbiAgYmFzZTogJ2MnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjNcXHUyNEQyXFx1RkY0M1xcdTAxMDdcXHUwMTA5XFx1MDEwQlxcdTAxMERcXHUwMEU3XFx1MUUwOVxcdTAxODhcXHUwMjNDXFx1QTczRlxcdTIxODRdL2dcbn0sIHtcbiAgYmFzZTogJ2QnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjRcXHUyNEQzXFx1RkY0NFxcdTFFMEJcXHUwMTBGXFx1MUUwRFxcdTFFMTFcXHUxRTEzXFx1MUUwRlxcdTAxMTFcXHUwMThDXFx1MDI1NlxcdTAyNTdcXHVBNzdBXS9nXG59LCB7XG4gIGJhc2U6ICdkeicsXG4gIGxldHRlcnM6IC9bXFx1MDFGM1xcdTAxQzZdL2dcbn0sIHtcbiAgYmFzZTogJ2UnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjVcXHUyNEQ0XFx1RkY0NVxcdTAwRThcXHUwMEU5XFx1MDBFQVxcdTFFQzFcXHUxRUJGXFx1MUVDNVxcdTFFQzNcXHUxRUJEXFx1MDExM1xcdTFFMTVcXHUxRTE3XFx1MDExNVxcdTAxMTdcXHUwMEVCXFx1MUVCQlxcdTAxMUJcXHUwMjA1XFx1MDIwN1xcdTFFQjlcXHUxRUM3XFx1MDIyOVxcdTFFMURcXHUwMTE5XFx1MUUxOVxcdTFFMUJcXHUwMjQ3XFx1MDI1QlxcdTAxRERdL2dcbn0sIHtcbiAgYmFzZTogJ2YnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjZcXHUyNEQ1XFx1RkY0NlxcdTFFMUZcXHUwMTkyXFx1QTc3Q10vZ1xufSwge1xuICBiYXNlOiAnZycsXG4gIGxldHRlcnM6IC9bXFx1MDA2N1xcdTI0RDZcXHVGRjQ3XFx1MDFGNVxcdTAxMURcXHUxRTIxXFx1MDExRlxcdTAxMjFcXHUwMUU3XFx1MDEyM1xcdTAxRTVcXHUwMjYwXFx1QTdBMVxcdTFENzlcXHVBNzdGXS9nXG59LCB7XG4gIGJhc2U6ICdoJyxcbiAgbGV0dGVyczogL1tcXHUwMDY4XFx1MjREN1xcdUZGNDhcXHUwMTI1XFx1MUUyM1xcdTFFMjdcXHUwMjFGXFx1MUUyNVxcdTFFMjlcXHUxRTJCXFx1MUU5NlxcdTAxMjdcXHUyQzY4XFx1MkM3NlxcdTAyNjVdL2dcbn0sIHtcbiAgYmFzZTogJ2h2JyxcbiAgbGV0dGVyczogL1tcXHUwMTk1XS9nXG59LCB7XG4gIGJhc2U6ICdpJyxcbiAgbGV0dGVyczogL1tcXHUwMDY5XFx1MjREOFxcdUZGNDlcXHUwMEVDXFx1MDBFRFxcdTAwRUVcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMEVGXFx1MUUyRlxcdTFFQzlcXHUwMUQwXFx1MDIwOVxcdTAyMEJcXHUxRUNCXFx1MDEyRlxcdTFFMkRcXHUwMjY4XFx1MDEzMV0vZ1xufSwge1xuICBiYXNlOiAnaicsXG4gIGxldHRlcnM6IC9bXFx1MDA2QVxcdTI0RDlcXHVGRjRBXFx1MDEzNVxcdTAxRjBcXHUwMjQ5XS9nXG59LCB7XG4gIGJhc2U6ICdrJyxcbiAgbGV0dGVyczogL1tcXHUwMDZCXFx1MjREQVxcdUZGNEJcXHUxRTMxXFx1MDFFOVxcdTFFMzNcXHUwMTM3XFx1MUUzNVxcdTAxOTlcXHUyQzZBXFx1QTc0MVxcdUE3NDNcXHVBNzQ1XFx1QTdBM10vZ1xufSwge1xuICBiYXNlOiAnbCcsXG4gIGxldHRlcnM6IC9bXFx1MDA2Q1xcdTI0REJcXHVGRjRDXFx1MDE0MFxcdTAxM0FcXHUwMTNFXFx1MUUzN1xcdTFFMzlcXHUwMTNDXFx1MUUzRFxcdTFFM0JcXHUwMTdGXFx1MDE0MlxcdTAxOUFcXHUwMjZCXFx1MkM2MVxcdUE3NDlcXHVBNzgxXFx1QTc0N10vZ1xufSwge1xuICBiYXNlOiAnbGonLFxuICBsZXR0ZXJzOiAvW1xcdTAxQzldL2dcbn0sIHtcbiAgYmFzZTogJ20nLFxuICBsZXR0ZXJzOiAvW1xcdTAwNkRcXHUyNERDXFx1RkY0RFxcdTFFM0ZcXHUxRTQxXFx1MUU0M1xcdTAyNzFcXHUwMjZGXS9nXG59LCB7XG4gIGJhc2U6ICduJyxcbiAgbGV0dGVyczogL1tcXHUwMDZFXFx1MjRERFxcdUZGNEVcXHUwMUY5XFx1MDE0NFxcdTAwRjFcXHUxRTQ1XFx1MDE0OFxcdTFFNDdcXHUwMTQ2XFx1MUU0QlxcdTFFNDlcXHUwMTlFXFx1MDI3MlxcdTAxNDlcXHVBNzkxXFx1QTdBNV0vZ1xufSwge1xuICBiYXNlOiAnbmonLFxuICBsZXR0ZXJzOiAvW1xcdTAxQ0NdL2dcbn0sIHtcbiAgYmFzZTogJ28nLFxuICBsZXR0ZXJzOiAvW1xcdTAwNkZcXHUyNERFXFx1RkY0RlxcdTAwRjJcXHUwMEYzXFx1MDBGNFxcdTFFRDNcXHUxRUQxXFx1MUVEN1xcdTFFRDVcXHUwMEY1XFx1MUU0RFxcdTAyMkRcXHUxRTRGXFx1MDE0RFxcdTFFNTFcXHUxRTUzXFx1MDE0RlxcdTAyMkZcXHUwMjMxXFx1MDBGNlxcdTAyMkJcXHUxRUNGXFx1MDE1MVxcdTAxRDJcXHUwMjBEXFx1MDIwRlxcdTAxQTFcXHUxRUREXFx1MUVEQlxcdTFFRTFcXHUxRURGXFx1MUVFM1xcdTFFQ0RcXHUxRUQ5XFx1MDFFQlxcdTAxRURcXHUwMEY4XFx1MDFGRlxcdTAyNTRcXHVBNzRCXFx1QTc0RFxcdTAyNzVdL2dcbn0sIHtcbiAgYmFzZTogJ29pJyxcbiAgbGV0dGVyczogL1tcXHUwMUEzXS9nXG59LCB7XG4gIGJhc2U6ICdvdScsXG4gIGxldHRlcnM6IC9bXFx1MDIyM10vZ1xufSwge1xuICBiYXNlOiAnb28nLFxuICBsZXR0ZXJzOiAvW1xcdUE3NEZdL2dcbn0sIHtcbiAgYmFzZTogJ3AnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNzBcXHUyNERGXFx1RkY1MFxcdTFFNTVcXHUxRTU3XFx1MDFBNVxcdTFEN0RcXHVBNzUxXFx1QTc1M1xcdUE3NTVdL2dcbn0sIHtcbiAgYmFzZTogJ3EnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNzFcXHUyNEUwXFx1RkY1MVxcdTAyNEJcXHVBNzU3XFx1QTc1OV0vZ1xufSwge1xuICBiYXNlOiAncicsXG4gIGxldHRlcnM6IC9bXFx1MDA3MlxcdTI0RTFcXHVGRjUyXFx1MDE1NVxcdTFFNTlcXHUwMTU5XFx1MDIxMVxcdTAyMTNcXHUxRTVCXFx1MUU1RFxcdTAxNTdcXHUxRTVGXFx1MDI0RFxcdTAyN0RcXHVBNzVCXFx1QTdBN1xcdUE3ODNdL2dcbn0sIHtcbiAgYmFzZTogJ3MnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNzNcXHUyNEUyXFx1RkY1M1xcdTAwREZcXHUwMTVCXFx1MUU2NVxcdTAxNURcXHUxRTYxXFx1MDE2MVxcdTFFNjdcXHUxRTYzXFx1MUU2OVxcdTAyMTlcXHUwMTVGXFx1MDIzRlxcdUE3QTlcXHVBNzg1XFx1MUU5Ql0vZ1xufSwge1xuICBiYXNlOiAndCcsXG4gIGxldHRlcnM6IC9bXFx1MDA3NFxcdTI0RTNcXHVGRjU0XFx1MUU2QlxcdTFFOTdcXHUwMTY1XFx1MUU2RFxcdTAyMUJcXHUwMTYzXFx1MUU3MVxcdTFFNkZcXHUwMTY3XFx1MDFBRFxcdTAyODhcXHUyQzY2XFx1QTc4N10vZ1xufSwge1xuICBiYXNlOiAndHonLFxuICBsZXR0ZXJzOiAvW1xcdUE3MjldL2dcbn0sIHtcbiAgYmFzZTogJ3UnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNzVcXHUyNEU0XFx1RkY1NVxcdTAwRjlcXHUwMEZBXFx1MDBGQlxcdTAxNjlcXHUxRTc5XFx1MDE2QlxcdTFFN0JcXHUwMTZEXFx1MDBGQ1xcdTAxRENcXHUwMUQ4XFx1MDFENlxcdTAxREFcXHUxRUU3XFx1MDE2RlxcdTAxNzFcXHUwMUQ0XFx1MDIxNVxcdTAyMTdcXHUwMUIwXFx1MUVFQlxcdTFFRTlcXHUxRUVGXFx1MUVFRFxcdTFFRjFcXHUxRUU1XFx1MUU3M1xcdTAxNzNcXHUxRTc3XFx1MUU3NVxcdTAyODldL2dcbn0sIHtcbiAgYmFzZTogJ3YnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNzZcXHUyNEU1XFx1RkY1NlxcdTFFN0RcXHUxRTdGXFx1MDI4QlxcdUE3NUZcXHUwMjhDXS9nXG59LCB7XG4gIGJhc2U6ICd2eScsXG4gIGxldHRlcnM6IC9bXFx1QTc2MV0vZ1xufSwge1xuICBiYXNlOiAndycsXG4gIGxldHRlcnM6IC9bXFx1MDA3N1xcdTI0RTZcXHVGRjU3XFx1MUU4MVxcdTFFODNcXHUwMTc1XFx1MUU4N1xcdTFFODVcXHUxRTk4XFx1MUU4OVxcdTJDNzNdL2dcbn0sIHtcbiAgYmFzZTogJ3gnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNzhcXHUyNEU3XFx1RkY1OFxcdTFFOEJcXHUxRThEXS9nXG59LCB7XG4gIGJhc2U6ICd5JyxcbiAgbGV0dGVyczogL1tcXHUwMDc5XFx1MjRFOFxcdUZGNTlcXHUxRUYzXFx1MDBGRFxcdTAxNzdcXHUxRUY5XFx1MDIzM1xcdTFFOEZcXHUwMEZGXFx1MUVGN1xcdTFFOTlcXHUxRUY1XFx1MDFCNFxcdTAyNEZcXHUxRUZGXS9nXG59LCB7XG4gIGJhc2U6ICd6JyxcbiAgbGV0dGVyczogL1tcXHUwMDdBXFx1MjRFOVxcdUZGNUFcXHUwMTdBXFx1MUU5MVxcdTAxN0NcXHUwMTdFXFx1MUU5M1xcdTFFOTVcXHUwMUI2XFx1MDIyNVxcdTAyNDBcXHUyQzZDXFx1QTc2M10vZ1xufV07XG52YXIgc3RyaXBEaWFjcml0aWNzID0gZnVuY3Rpb24gc3RyaXBEaWFjcml0aWNzKHN0cikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpYWNyaXRpY3MubGVuZ3RoOyBpKyspIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZShkaWFjcml0aWNzW2ldLmxldHRlcnMsIGRpYWNyaXRpY3NbaV0uYmFzZSk7XG4gIH1cblxuICByZXR1cm4gc3RyO1xufTtcblxudmFyIHRyaW1TdHJpbmcgPSBmdW5jdGlvbiB0cmltU3RyaW5nKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn07XG5cbnZhciBkZWZhdWx0U3RyaW5naWZ5ID0gZnVuY3Rpb24gZGVmYXVsdFN0cmluZ2lmeShvcHRpb24pIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KG9wdGlvbi5sYWJlbCwgXCIgXCIpLmNvbmNhdChvcHRpb24udmFsdWUpO1xufTtcblxudmFyIGNyZWF0ZUZpbHRlciA9IGZ1bmN0aW9uIGNyZWF0ZUZpbHRlcihjb25maWcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvcHRpb24sIHJhd0lucHV0KSB7XG4gICAgdmFyIF9pZ25vcmVDYXNlJGlnbm9yZUFjYyA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgaWdub3JlQ2FzZTogdHJ1ZSxcbiAgICAgIGlnbm9yZUFjY2VudHM6IHRydWUsXG4gICAgICBzdHJpbmdpZnk6IGRlZmF1bHRTdHJpbmdpZnksXG4gICAgICB0cmltOiB0cnVlLFxuICAgICAgbWF0Y2hGcm9tOiAnYW55J1xuICAgIH0sIGNvbmZpZyksXG4gICAgICAgIGlnbm9yZUNhc2UgPSBfaWdub3JlQ2FzZSRpZ25vcmVBY2MuaWdub3JlQ2FzZSxcbiAgICAgICAgaWdub3JlQWNjZW50cyA9IF9pZ25vcmVDYXNlJGlnbm9yZUFjYy5pZ25vcmVBY2NlbnRzLFxuICAgICAgICBzdHJpbmdpZnkgPSBfaWdub3JlQ2FzZSRpZ25vcmVBY2Muc3RyaW5naWZ5LFxuICAgICAgICB0cmltID0gX2lnbm9yZUNhc2UkaWdub3JlQWNjLnRyaW0sXG4gICAgICAgIG1hdGNoRnJvbSA9IF9pZ25vcmVDYXNlJGlnbm9yZUFjYy5tYXRjaEZyb207XG5cbiAgICB2YXIgaW5wdXQgPSB0cmltID8gdHJpbVN0cmluZyhyYXdJbnB1dCkgOiByYXdJbnB1dDtcbiAgICB2YXIgY2FuZGlkYXRlID0gdHJpbSA/IHRyaW1TdHJpbmcoc3RyaW5naWZ5KG9wdGlvbikpIDogc3RyaW5naWZ5KG9wdGlvbik7XG5cbiAgICBpZiAoaWdub3JlQ2FzZSkge1xuICAgICAgaW5wdXQgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FuZGlkYXRlID0gY2FuZGlkYXRlLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKGlnbm9yZUFjY2VudHMpIHtcbiAgICAgIGlucHV0ID0gc3RyaXBEaWFjcml0aWNzKGlucHV0KTtcbiAgICAgIGNhbmRpZGF0ZSA9IHN0cmlwRGlhY3JpdGljcyhjYW5kaWRhdGUpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaEZyb20gPT09ICdzdGFydCcgPyBjYW5kaWRhdGUuc3Vic3RyKDAsIGlucHV0Lmxlbmd0aCkgPT09IGlucHV0IDogY2FuZGlkYXRlLmluZGV4T2YoaW5wdXQpID4gLTE7XG4gIH07XG59O1xuXG52YXIgQTExeVRleHQgPSBmdW5jdGlvbiBBMTF5VGV4dChwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTpcbiAgICAvKiNfX1BVUkVfXyovXG5cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgY3NzKHtcbiAgICAgIGxhYmVsOiAnYTExeVRleHQnLFxuICAgICAgekluZGV4OiA5OTk5LFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAncmVkJyxcbiAgICAgIGNvbG9yOiAnYmx1ZSdcbiAgICB9KVxuICB9LCBwcm9wcykpO1xufTtcblxudmFyIER1bW15SW5wdXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKER1bW15SW5wdXQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIER1bW15SW5wdXQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIER1bW15SW5wdXQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEdW1teUlucHV0KS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEdW1teUlucHV0LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpblByb3AgPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgICBvdXQgPSBfdGhpcyRwcm9wcy5vdXQsXG4gICAgICAgICAgb25FeGl0ZWQgPSBfdGhpcyRwcm9wcy5vbkV4aXRlZCxcbiAgICAgICAgICBhcHBlYXIgPSBfdGhpcyRwcm9wcy5hcHBlYXIsXG4gICAgICAgICAgZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgICBleGl0ID0gX3RoaXMkcHJvcHMuZXhpdCxcbiAgICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzLmlubmVyUmVmLFxuICAgICAgICAgIGVtb3Rpb24gPSBfdGhpcyRwcm9wcy5lbW90aW9uLFxuICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzLCBbXCJpblwiLCBcIm91dFwiLCBcIm9uRXhpdGVkXCIsIFwiYXBwZWFyXCIsIFwiZW50ZXJcIiwgXCJleGl0XCIsIFwiaW5uZXJSZWZcIiwgXCJlbW90aW9uXCJdKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogaW5uZXJSZWZcbiAgICAgIH0sIHByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTpcbiAgICAgICAgLyojX19QVVJFX18qL1xuXG4gICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgY3NzKHtcbiAgICAgICAgICBsYWJlbDogJ2R1bW15SW5wdXQnLFxuICAgICAgICAgIC8vIGdldCByaWQgb2YgYW55IGRlZmF1bHQgc3R5bGVzXG4gICAgICAgICAgYmFja2dyb3VuZDogMCxcbiAgICAgICAgICBib3JkZXI6IDAsXG4gICAgICAgICAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgICAgICAgICBvdXRsaW5lOiAwLFxuICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgLy8gaW1wb3J0YW50ISB3aXRob3V0IGB3aWR0aGAgYnJvd3NlcnMgd29uJ3QgYWxsb3cgZm9jdXNcbiAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAvLyByZW1vdmUgY3Vyc29yIG9uIGRlc2t0b3BcbiAgICAgICAgICBjb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAvLyByZW1vdmUgY3Vyc29yIG9uIG1vYmlsZSB3aGlsc3QgbWFpbnRhaW5pbmcgXCJzY3JvbGwgaW50byB2aWV3XCIgYmVoYXZpb3VyXG4gICAgICAgICAgbGVmdDogLTEwMCxcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJ1xuICAgICAgICB9KVxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEdW1teUlucHV0O1xufShDb21wb25lbnQpO1xuXG52YXIgTm9kZVJlc29sdmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhOb2RlUmVzb2x2ZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5vZGVSZXNvbHZlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9kZVJlc29sdmVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTm9kZVJlc29sdmVyKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhOb2RlUmVzb2x2ZXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5wcm9wcy5pbm5lclJlZihmaW5kRE9NTm9kZSh0aGlzKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5wcm9wcy5pbm5lclJlZihudWxsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBOb2RlUmVzb2x2ZXI7XG59KENvbXBvbmVudCk7XG5cbnZhciBTVFlMRV9LRVlTID0gWydib3hTaXppbmcnLCAnaGVpZ2h0JywgJ292ZXJmbG93JywgJ3BhZGRpbmdSaWdodCcsICdwb3NpdGlvbiddO1xudmFyIExPQ0tfU1RZTEVTID0ge1xuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgLy8gYWNjb3VudCBmb3IgcG9zc2libGUgZGVjbGFyYXRpb24gYHdpZHRoOiAxMDAlO2Agb24gYm9keVxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBoZWlnaHQ6ICcxMDAlJ1xufTtcblxuZnVuY3Rpb24gcHJldmVudFRvdWNoTW92ZShlKSB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbn1cbmZ1bmN0aW9uIGFsbG93VG91Y2hNb3ZlKGUpIHtcbiAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbn1cbmZ1bmN0aW9uIHByZXZlbnRJbmVydGlhU2Nyb2xsKCkge1xuICB2YXIgdG9wID0gdGhpcy5zY3JvbGxUb3A7XG4gIHZhciB0b3RhbFNjcm9sbCA9IHRoaXMuc2Nyb2xsSGVpZ2h0O1xuICB2YXIgY3VycmVudFNjcm9sbCA9IHRvcCArIHRoaXMub2Zmc2V0SGVpZ2h0O1xuXG4gIGlmICh0b3AgPT09IDApIHtcbiAgICB0aGlzLnNjcm9sbFRvcCA9IDE7XG4gIH0gZWxzZSBpZiAoY3VycmVudFNjcm9sbCA9PT0gdG90YWxTY3JvbGwpIHtcbiAgICB0aGlzLnNjcm9sbFRvcCA9IHRvcCAtIDE7XG4gIH1cbn0gLy8gYG9udG91Y2hzdGFydGAgY2hlY2sgd29ya3Mgb24gbW9zdCBicm93c2Vyc1xuLy8gYG1heFRvdWNoUG9pbnRzYCB3b3JrcyBvbiBJRTEwLzExIGFuZCBTdXJmYWNlXG5cbmZ1bmN0aW9uIGlzVG91Y2hEZXZpY2UoKSB7XG4gIHJldHVybiAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzO1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbnZhciBhY3RpdmVTY3JvbGxMb2NrcyA9IDA7XG5cbnZhciBTY3JvbGxMb2NrID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTY3JvbGxMb2NrLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTY3JvbGxMb2NrKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbExvY2spO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoU2Nyb2xsTG9jaykpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9yaWdpbmFsU3R5bGVzXCIsIHt9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJsaXN0ZW5lck9wdGlvbnNcIiwge1xuICAgICAgY2FwdHVyZTogZmFsc2UsXG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNjcm9sbExvY2ssIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICghY2FuVXNlRE9NKSByZXR1cm47XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFjY291bnRGb3JTY3JvbGxiYXJzID0gX3RoaXMkcHJvcHMuYWNjb3VudEZvclNjcm9sbGJhcnMsXG4gICAgICAgICAgdG91Y2hTY3JvbGxUYXJnZXQgPSBfdGhpcyRwcm9wcy50b3VjaFNjcm9sbFRhcmdldDtcbiAgICAgIHZhciB0YXJnZXQgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgdmFyIHRhcmdldFN0eWxlID0gdGFyZ2V0ICYmIHRhcmdldC5zdHlsZTtcblxuICAgICAgaWYgKGFjY291bnRGb3JTY3JvbGxiYXJzKSB7XG4gICAgICAgIC8vIHN0b3JlIGFueSBzdHlsZXMgYWxyZWFkeSBhcHBsaWVkIHRvIHRoZSBib2R5XG4gICAgICAgIFNUWUxFX0tFWVMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgdmFyIHZhbCA9IHRhcmdldFN0eWxlICYmIHRhcmdldFN0eWxlW2tleV07XG4gICAgICAgICAgX3RoaXMyLm9yaWdpbmFsU3R5bGVzW2tleV0gPSB2YWw7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBhcHBseSB0aGUgbG9jayBzdHlsZXMgYW5kIHBhZGRpbmcgaWYgdGhpcyBpcyB0aGUgZmlyc3Qgc2Nyb2xsIGxvY2tcblxuXG4gICAgICBpZiAoYWNjb3VudEZvclNjcm9sbGJhcnMgJiYgYWN0aXZlU2Nyb2xsTG9ja3MgPCAxKSB7XG4gICAgICAgIHZhciBjdXJyZW50UGFkZGluZyA9IHBhcnNlSW50KHRoaXMub3JpZ2luYWxTdHlsZXMucGFkZGluZ1JpZ2h0LCAxMCkgfHwgMDtcbiAgICAgICAgdmFyIGNsaWVudFdpZHRoID0gZG9jdW1lbnQuYm9keSA/IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggOiAwO1xuICAgICAgICB2YXIgYWRqdXN0ZWRQYWRkaW5nID0gd2luZG93LmlubmVyV2lkdGggLSBjbGllbnRXaWR0aCArIGN1cnJlbnRQYWRkaW5nIHx8IDA7XG4gICAgICAgIE9iamVjdC5rZXlzKExPQ0tfU1RZTEVTKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICB2YXIgdmFsID0gTE9DS19TVFlMRVNba2V5XTtcblxuICAgICAgICAgIGlmICh0YXJnZXRTdHlsZSkge1xuICAgICAgICAgICAgdGFyZ2V0U3R5bGVba2V5XSA9IHZhbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0YXJnZXRTdHlsZSkge1xuICAgICAgICAgIHRhcmdldFN0eWxlLnBhZGRpbmdSaWdodCA9IFwiXCIuY29uY2F0KGFkanVzdGVkUGFkZGluZywgXCJweFwiKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBhY2NvdW50IGZvciB0b3VjaCBkZXZpY2VzXG5cblxuICAgICAgaWYgKHRhcmdldCAmJiBpc1RvdWNoRGV2aWNlKCkpIHtcbiAgICAgICAgLy8gTW9iaWxlIFNhZmFyaSBpZ25vcmVzIHsgb3ZlcmZsb3c6IGhpZGRlbiB9IGRlY2xhcmF0aW9uIG9uIHRoZSBib2R5LlxuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgcHJldmVudFRvdWNoTW92ZSwgdGhpcy5saXN0ZW5lck9wdGlvbnMpOyAvLyBBbGxvdyBzY3JvbGwgb24gcHJvdmlkZWQgdGFyZ2V0XG5cbiAgICAgICAgaWYgKHRvdWNoU2Nyb2xsVGFyZ2V0KSB7XG4gICAgICAgICAgdG91Y2hTY3JvbGxUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHByZXZlbnRJbmVydGlhU2Nyb2xsLCB0aGlzLmxpc3RlbmVyT3B0aW9ucyk7XG4gICAgICAgICAgdG91Y2hTY3JvbGxUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgYWxsb3dUb3VjaE1vdmUsIHRoaXMubGlzdGVuZXJPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBpbmNyZW1lbnQgYWN0aXZlIHNjcm9sbCBsb2Nrc1xuXG5cbiAgICAgIGFjdGl2ZVNjcm9sbExvY2tzICs9IDE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICghY2FuVXNlRE9NKSByZXR1cm47XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhY2NvdW50Rm9yU2Nyb2xsYmFycyA9IF90aGlzJHByb3BzMi5hY2NvdW50Rm9yU2Nyb2xsYmFycyxcbiAgICAgICAgICB0b3VjaFNjcm9sbFRhcmdldCA9IF90aGlzJHByb3BzMi50b3VjaFNjcm9sbFRhcmdldDtcbiAgICAgIHZhciB0YXJnZXQgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgdmFyIHRhcmdldFN0eWxlID0gdGFyZ2V0ICYmIHRhcmdldC5zdHlsZTsgLy8gc2FmZWx5IGRlY3JlbWVudCBhY3RpdmUgc2Nyb2xsIGxvY2tzXG5cbiAgICAgIGFjdGl2ZVNjcm9sbExvY2tzID0gTWF0aC5tYXgoYWN0aXZlU2Nyb2xsTG9ja3MgLSAxLCAwKTsgLy8gcmVhcHBseSBvcmlnaW5hbCBib2R5IHN0eWxlcywgaWYgYW55XG5cbiAgICAgIGlmIChhY2NvdW50Rm9yU2Nyb2xsYmFycyAmJiBhY3RpdmVTY3JvbGxMb2NrcyA8IDEpIHtcbiAgICAgICAgU1RZTEVfS0VZUy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICB2YXIgdmFsID0gX3RoaXMzLm9yaWdpbmFsU3R5bGVzW2tleV07XG5cbiAgICAgICAgICBpZiAodGFyZ2V0U3R5bGUpIHtcbiAgICAgICAgICAgIHRhcmdldFN0eWxlW2tleV0gPSB2YWw7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gLy8gcmVtb3ZlIHRvdWNoIGxpc3RlbmVyc1xuXG5cbiAgICAgIGlmICh0YXJnZXQgJiYgaXNUb3VjaERldmljZSgpKSB7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBwcmV2ZW50VG91Y2hNb3ZlLCB0aGlzLmxpc3RlbmVyT3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHRvdWNoU2Nyb2xsVGFyZ2V0KSB7XG4gICAgICAgICAgdG91Y2hTY3JvbGxUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHByZXZlbnRJbmVydGlhU2Nyb2xsLCB0aGlzLmxpc3RlbmVyT3B0aW9ucyk7XG4gICAgICAgICAgdG91Y2hTY3JvbGxUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgYWxsb3dUb3VjaE1vdmUsIHRoaXMubGlzdGVuZXJPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNjcm9sbExvY2s7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShTY3JvbGxMb2NrLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGFjY291bnRGb3JTY3JvbGxiYXJzOiB0cnVlXG59KTtcblxuLy8gTk9URTpcbi8vIFdlIHNob3VsZG4ndCBuZWVkIHRoaXMgYWZ0ZXIgdXBkYXRpbmcgdG8gUmVhY3QgdjE2LjMuMCwgd2hpY2ggaW50cm9kdWNlczpcbi8vIC0gY3JlYXRlUmVmKCkgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0Y3JlYXRlcmVmXG4vLyAtIGZvcndhcmRSZWYoKSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3Rmb3J3YXJkcmVmXG52YXIgU2Nyb2xsQmxvY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9QdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTY3JvbGxCbG9jaywgX1B1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbEJsb2NrKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbEJsb2NrKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFNjcm9sbEJsb2NrKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic3RhdGVcIiwge1xuICAgICAgdG91Y2hTY3JvbGxUYXJnZXQ6IG51bGxcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRTY3JvbGxUYXJnZXRcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgaWYgKHJlZiA9PT0gX3RoaXMuc3RhdGUudG91Y2hTY3JvbGxUYXJnZXQpIHJldHVybjtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB0b3VjaFNjcm9sbFRhcmdldDogcmVmXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJibHVyU2VsZWN0SW5wdXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2Nyb2xsQmxvY2ssIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgaXNFbmFibGVkID0gX3RoaXMkcHJvcHMuaXNFbmFibGVkO1xuICAgICAgdmFyIHRvdWNoU2Nyb2xsVGFyZ2V0ID0gdGhpcy5zdGF0ZS50b3VjaFNjcm9sbFRhcmdldDsgLy8gYmFpbCBlYXJseSBpZiBub3QgZW5hYmxlZFxuXG4gICAgICBpZiAoIWlzRW5hYmxlZCkgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgLypcbiAgICAgICAqIERpdlxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBibG9ja3Mgc2Nyb2xsaW5nIG9uIG5vbi1ib2R5IGVsZW1lbnRzIGJlaGluZCB0aGUgbWVudVxuICAgICAgICAqIE5vZGVSZXNvbHZlclxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiB3ZSBuZWVkIGEgcmVmZXJlbmNlIHRvIHRoZSBzY3JvbGxhYmxlIGVsZW1lbnQgdG8gXCJ1bmxvY2tcIiBzY3JvbGwgb25cbiAgICAgICAqIG1vYmlsZSBkZXZpY2VzXG4gICAgICAgICogU2Nyb2xsTG9ja1xuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBhY3R1YWxseSBkb2VzIHRoZSBzY3JvbGwgbG9ja2luZ1xuICAgICAgICovXG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBvbkNsaWNrOiB0aGlzLmJsdXJTZWxlY3RJbnB1dCxcbiAgICAgICAgY2xhc3NOYW1lOlxuICAgICAgICAvKiNfX1BVUkVfXyovXG5cbiAgICAgICAgLyojX19QVVJFX18qL1xuICAgICAgICBjc3Moe1xuICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgIHRvcDogMFxuICAgICAgICB9KVxuICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTm9kZVJlc29sdmVyLCB7XG4gICAgICAgIGlubmVyUmVmOiB0aGlzLmdldFNjcm9sbFRhcmdldFxuICAgICAgfSwgY2hpbGRyZW4pLCB0b3VjaFNjcm9sbFRhcmdldCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2Nyb2xsTG9jaywge1xuICAgICAgICB0b3VjaFNjcm9sbFRhcmdldDogdG91Y2hTY3JvbGxUYXJnZXRcbiAgICAgIH0pIDogbnVsbCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNjcm9sbEJsb2NrO1xufShQdXJlQ29tcG9uZW50KTtcblxudmFyIFNjcm9sbENhcHRvciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2Nyb2xsQ2FwdG9yLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTY3JvbGxDYXB0b3IoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2Nyb2xsQ2FwdG9yKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFNjcm9sbENhcHRvcikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImlzQm90dG9tXCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJpc1RvcFwiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2Nyb2xsVGFyZ2V0XCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwidG91Y2hTdGFydFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImNhbmNlbFNjcm9sbFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJoYW5kbGVFdmVudERlbHRhXCIsIGZ1bmN0aW9uIChldmVudCwgZGVsdGEpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG9uQm90dG9tQXJyaXZlID0gX3RoaXMkcHJvcHMub25Cb3R0b21BcnJpdmUsXG4gICAgICAgICAgb25Cb3R0b21MZWF2ZSA9IF90aGlzJHByb3BzLm9uQm90dG9tTGVhdmUsXG4gICAgICAgICAgb25Ub3BBcnJpdmUgPSBfdGhpcyRwcm9wcy5vblRvcEFycml2ZSxcbiAgICAgICAgICBvblRvcExlYXZlID0gX3RoaXMkcHJvcHMub25Ub3BMZWF2ZTtcbiAgICAgIHZhciBfdGhpcyRzY3JvbGxUYXJnZXQgPSBfdGhpcy5zY3JvbGxUYXJnZXQsXG4gICAgICAgICAgc2Nyb2xsVG9wID0gX3RoaXMkc2Nyb2xsVGFyZ2V0LnNjcm9sbFRvcCxcbiAgICAgICAgICBzY3JvbGxIZWlnaHQgPSBfdGhpcyRzY3JvbGxUYXJnZXQuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICAgIGNsaWVudEhlaWdodCA9IF90aGlzJHNjcm9sbFRhcmdldC5jbGllbnRIZWlnaHQ7XG4gICAgICB2YXIgdGFyZ2V0ID0gX3RoaXMuc2Nyb2xsVGFyZ2V0O1xuICAgICAgdmFyIGlzRGVsdGFQb3NpdGl2ZSA9IGRlbHRhID4gMDtcbiAgICAgIHZhciBhdmFpbGFibGVTY3JvbGwgPSBzY3JvbGxIZWlnaHQgLSBjbGllbnRIZWlnaHQgLSBzY3JvbGxUb3A7XG4gICAgICB2YXIgc2hvdWxkQ2FuY2VsU2Nyb2xsID0gZmFsc2U7IC8vIHJlc2V0IGJvdHRvbS90b3AgZmxhZ3NcblxuICAgICAgaWYgKGF2YWlsYWJsZVNjcm9sbCA+IGRlbHRhICYmIF90aGlzLmlzQm90dG9tKSB7XG4gICAgICAgIGlmIChvbkJvdHRvbUxlYXZlKSBvbkJvdHRvbUxlYXZlKGV2ZW50KTtcbiAgICAgICAgX3RoaXMuaXNCb3R0b20gPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGVsdGFQb3NpdGl2ZSAmJiBfdGhpcy5pc1RvcCkge1xuICAgICAgICBpZiAob25Ub3BMZWF2ZSkgb25Ub3BMZWF2ZShldmVudCk7XG4gICAgICAgIF90aGlzLmlzVG9wID0gZmFsc2U7XG4gICAgICB9IC8vIGJvdHRvbSBsaW1pdFxuXG5cbiAgICAgIGlmIChpc0RlbHRhUG9zaXRpdmUgJiYgZGVsdGEgPiBhdmFpbGFibGVTY3JvbGwpIHtcbiAgICAgICAgaWYgKG9uQm90dG9tQXJyaXZlICYmICFfdGhpcy5pc0JvdHRvbSkge1xuICAgICAgICAgIG9uQm90dG9tQXJyaXZlKGV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldC5zY3JvbGxUb3AgPSBzY3JvbGxIZWlnaHQ7XG4gICAgICAgIHNob3VsZENhbmNlbFNjcm9sbCA9IHRydWU7XG4gICAgICAgIF90aGlzLmlzQm90dG9tID0gdHJ1ZTsgLy8gdG9wIGxpbWl0XG4gICAgICB9IGVsc2UgaWYgKCFpc0RlbHRhUG9zaXRpdmUgJiYgLWRlbHRhID4gc2Nyb2xsVG9wKSB7XG4gICAgICAgIGlmIChvblRvcEFycml2ZSAmJiAhX3RoaXMuaXNUb3ApIHtcbiAgICAgICAgICBvblRvcEFycml2ZShldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgc2hvdWxkQ2FuY2VsU2Nyb2xsID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuaXNUb3AgPSB0cnVlO1xuICAgICAgfSAvLyBjYW5jZWwgc2Nyb2xsXG5cblxuICAgICAgaWYgKHNob3VsZENhbmNlbFNjcm9sbCkge1xuICAgICAgICBfdGhpcy5jYW5jZWxTY3JvbGwoZXZlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uV2hlZWxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5oYW5kbGVFdmVudERlbHRhKGV2ZW50LCBldmVudC5kZWx0YVkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uVG91Y2hTdGFydFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIHNldCB0b3VjaCBzdGFydCBzbyB3ZSBjYW4gY2FsY3VsYXRlIHRvdWNobW92ZSBkZWx0YVxuICAgICAgX3RoaXMudG91Y2hTdGFydCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Ub3VjaE1vdmVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgZGVsdGFZID0gX3RoaXMudG91Y2hTdGFydCAtIGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFk7XG5cbiAgICAgIF90aGlzLmhhbmRsZUV2ZW50RGVsdGEoZXZlbnQsIGRlbHRhWSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0U2Nyb2xsVGFyZ2V0XCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLnNjcm9sbFRhcmdldCA9IHJlZjtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTY3JvbGxDYXB0b3IsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5zdGFydExpc3RlbmluZyh0aGlzLnNjcm9sbFRhcmdldCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKHRoaXMuc2Nyb2xsVGFyZ2V0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRMaXN0ZW5pbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRMaXN0ZW5pbmcoZWwpIHtcbiAgICAgIC8vIGJhaWwgZWFybHkgaWYgbm8gc2Nyb2xsIGF2YWlsYWJsZVxuICAgICAgaWYgKCFlbCkgcmV0dXJuO1xuICAgICAgaWYgKGVsLnNjcm9sbEhlaWdodCA8PSBlbC5jbGllbnRIZWlnaHQpIHJldHVybjsgLy8gYWxsIHRoZSBpZiBzdGF0ZW1lbnRzIGFyZSB0byBhcHBlYXNlIEZsb3cg8J+YolxuXG4gICAgICBpZiAodHlwZW9mIGVsLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLm9uV2hlZWwsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlbC5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGVsLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vblRvdWNoTW92ZSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdG9wTGlzdGVuaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmcoZWwpIHtcbiAgICAgIC8vIGJhaWwgZWFybHkgaWYgbm8gc2Nyb2xsIGF2YWlsYWJsZVxuICAgICAgaWYgKGVsLnNjcm9sbEhlaWdodCA8PSBlbC5jbGllbnRIZWlnaHQpIHJldHVybjsgLy8gYWxsIHRoZSBpZiBzdGF0ZW1lbnRzIGFyZSB0byBhcHBlYXNlIEZsb3cg8J+YolxuXG4gICAgICBpZiAodHlwZW9mIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLm9uV2hlZWwsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlbC5yZW1vdmVFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vblRvdWNoTW92ZSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTm9kZVJlc29sdmVyLCB7XG4gICAgICAgIGlubmVyUmVmOiB0aGlzLmdldFNjcm9sbFRhcmdldFxuICAgICAgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNjcm9sbENhcHRvcjtcbn0oQ29tcG9uZW50KTtcblxudmFyIFNjcm9sbENhcHRvclN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgX2luaGVyaXRzKFNjcm9sbENhcHRvclN3aXRjaCwgX0NvbXBvbmVudDIpO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbENhcHRvclN3aXRjaCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2Nyb2xsQ2FwdG9yU3dpdGNoKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2Nyb2xsQ2FwdG9yU3dpdGNoKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTY3JvbGxDYXB0b3JTd2l0Y2gsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc0VuYWJsZWQgPSBfdGhpcyRwcm9wczIuaXNFbmFibGVkLFxuICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzMiwgW1wiaXNFbmFibGVkXCJdKTtcblxuICAgICAgcmV0dXJuIGlzRW5hYmxlZCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2Nyb2xsQ2FwdG9yLCBwcm9wcykgOiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTY3JvbGxDYXB0b3JTd2l0Y2g7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShTY3JvbGxDYXB0b3JTd2l0Y2gsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgaXNFbmFibGVkOiB0cnVlXG59KTtcblxudmFyIGluc3RydWN0aW9uc0FyaWFNZXNzYWdlID0gZnVuY3Rpb24gaW5zdHJ1Y3Rpb25zQXJpYU1lc3NhZ2UoZXZlbnQpIHtcbiAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgaXNTZWFyY2hhYmxlID0gY29udGV4dC5pc1NlYXJjaGFibGUsXG4gICAgICBpc011bHRpID0gY29udGV4dC5pc011bHRpLFxuICAgICAgbGFiZWwgPSBjb250ZXh0LmxhYmVsLFxuICAgICAgaXNEaXNhYmxlZCA9IGNvbnRleHQuaXNEaXNhYmxlZDtcblxuICBzd2l0Y2ggKGV2ZW50KSB7XG4gICAgY2FzZSAnbWVudSc6XG4gICAgICByZXR1cm4gXCJVc2UgVXAgYW5kIERvd24gdG8gY2hvb3NlIG9wdGlvbnNcIi5jb25jYXQoaXNEaXNhYmxlZCA/ICcnIDogJywgcHJlc3MgRW50ZXIgdG8gc2VsZWN0IHRoZSBjdXJyZW50bHkgZm9jdXNlZCBvcHRpb24nLCBcIiwgcHJlc3MgRXNjYXBlIHRvIGV4aXQgdGhlIG1lbnUsIHByZXNzIFRhYiB0byBzZWxlY3QgdGhlIG9wdGlvbiBhbmQgZXhpdCB0aGUgbWVudS5cIik7XG5cbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQobGFiZWwgPyBsYWJlbCA6ICdTZWxlY3QnLCBcIiBpcyBmb2N1c2VkIFwiKS5jb25jYXQoaXNTZWFyY2hhYmxlID8gJyx0eXBlIHRvIHJlZmluZSBsaXN0JyA6ICcnLCBcIiwgcHJlc3MgRG93biB0byBvcGVuIHRoZSBtZW51LCBcIikuY29uY2F0KGlzTXVsdGkgPyAnIHByZXNzIGxlZnQgdG8gZm9jdXMgc2VsZWN0ZWQgdmFsdWVzJyA6ICcnKTtcblxuICAgIGNhc2UgJ3ZhbHVlJzpcbiAgICAgIHJldHVybiAnVXNlIGxlZnQgYW5kIHJpZ2h0IHRvIHRvZ2dsZSBiZXR3ZWVuIGZvY3VzZWQgdmFsdWVzLCBwcmVzcyBCYWNrc3BhY2UgdG8gcmVtb3ZlIHRoZSBjdXJyZW50bHkgZm9jdXNlZCB2YWx1ZSc7XG4gIH1cbn07XG52YXIgdmFsdWVFdmVudEFyaWFNZXNzYWdlID0gZnVuY3Rpb24gdmFsdWVFdmVudEFyaWFNZXNzYWdlKGV2ZW50LCBjb250ZXh0KSB7XG4gIHZhciB2YWx1ZSA9IGNvbnRleHQudmFsdWUsXG4gICAgICBpc0Rpc2FibGVkID0gY29udGV4dC5pc0Rpc2FibGVkO1xuICBpZiAoIXZhbHVlKSByZXR1cm47XG5cbiAgc3dpdGNoIChldmVudCkge1xuICAgIGNhc2UgJ2Rlc2VsZWN0LW9wdGlvbic6XG4gICAgY2FzZSAncG9wLXZhbHVlJzpcbiAgICBjYXNlICdyZW1vdmUtdmFsdWUnOlxuICAgICAgcmV0dXJuIFwib3B0aW9uIFwiLmNvbmNhdCh2YWx1ZSwgXCIsIGRlc2VsZWN0ZWQuXCIpO1xuXG4gICAgY2FzZSAnc2VsZWN0LW9wdGlvbic6XG4gICAgICByZXR1cm4gaXNEaXNhYmxlZCA/IFwib3B0aW9uIFwiLmNvbmNhdCh2YWx1ZSwgXCIgaXMgZGlzYWJsZWQuIFNlbGVjdCBhbm90aGVyIG9wdGlvbi5cIikgOiBcIm9wdGlvbiBcIi5jb25jYXQodmFsdWUsIFwiLCBzZWxlY3RlZC5cIik7XG4gIH1cbn07XG52YXIgdmFsdWVGb2N1c0FyaWFNZXNzYWdlID0gZnVuY3Rpb24gdmFsdWVGb2N1c0FyaWFNZXNzYWdlKF9yZWYpIHtcbiAgdmFyIGZvY3VzZWRWYWx1ZSA9IF9yZWYuZm9jdXNlZFZhbHVlLFxuICAgICAgZ2V0T3B0aW9uTGFiZWwgPSBfcmVmLmdldE9wdGlvbkxhYmVsLFxuICAgICAgc2VsZWN0VmFsdWUgPSBfcmVmLnNlbGVjdFZhbHVlO1xuICByZXR1cm4gXCJ2YWx1ZSBcIi5jb25jYXQoZ2V0T3B0aW9uTGFiZWwoZm9jdXNlZFZhbHVlKSwgXCIgZm9jdXNlZCwgXCIpLmNvbmNhdChzZWxlY3RWYWx1ZS5pbmRleE9mKGZvY3VzZWRWYWx1ZSkgKyAxLCBcIiBvZiBcIikuY29uY2F0KHNlbGVjdFZhbHVlLmxlbmd0aCwgXCIuXCIpO1xufTtcbnZhciBvcHRpb25Gb2N1c0FyaWFNZXNzYWdlID0gZnVuY3Rpb24gb3B0aW9uRm9jdXNBcmlhTWVzc2FnZShfcmVmMikge1xuICB2YXIgZm9jdXNlZE9wdGlvbiA9IF9yZWYyLmZvY3VzZWRPcHRpb24sXG4gICAgICBnZXRPcHRpb25MYWJlbCA9IF9yZWYyLmdldE9wdGlvbkxhYmVsLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnM7XG4gIHJldHVybiBcIm9wdGlvbiBcIi5jb25jYXQoZ2V0T3B0aW9uTGFiZWwoZm9jdXNlZE9wdGlvbiksIFwiIGZvY3VzZWRcIikuY29uY2F0KGZvY3VzZWRPcHRpb24uaXNEaXNhYmxlZCA/ICcgZGlzYWJsZWQnIDogJycsIFwiLCBcIikuY29uY2F0KG9wdGlvbnMuaW5kZXhPZihmb2N1c2VkT3B0aW9uKSArIDEsIFwiIG9mIFwiKS5jb25jYXQob3B0aW9ucy5sZW5ndGgsIFwiLlwiKTtcbn07XG52YXIgcmVzdWx0c0FyaWFNZXNzYWdlID0gZnVuY3Rpb24gcmVzdWx0c0FyaWFNZXNzYWdlKF9yZWYzKSB7XG4gIHZhciBpbnB1dFZhbHVlID0gX3JlZjMuaW5wdXRWYWx1ZSxcbiAgICAgIHNjcmVlblJlYWRlck1lc3NhZ2UgPSBfcmVmMy5zY3JlZW5SZWFkZXJNZXNzYWdlO1xuICByZXR1cm4gXCJcIi5jb25jYXQoc2NyZWVuUmVhZGVyTWVzc2FnZSkuY29uY2F0KGlucHV0VmFsdWUgPyAnIGZvciBzZWFyY2ggdGVybSAnICsgaW5wdXRWYWx1ZSA6ICcnLCBcIi5cIik7XG59O1xuXG52YXIgZm9ybWF0R3JvdXBMYWJlbCA9IGZ1bmN0aW9uIGZvcm1hdEdyb3VwTGFiZWwoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLmxhYmVsO1xufTtcbnZhciBnZXRPcHRpb25MYWJlbCA9IGZ1bmN0aW9uIGdldE9wdGlvbkxhYmVsKG9wdGlvbikge1xuICByZXR1cm4gb3B0aW9uLmxhYmVsO1xufTtcbnZhciBnZXRPcHRpb25WYWx1ZSA9IGZ1bmN0aW9uIGdldE9wdGlvblZhbHVlKG9wdGlvbikge1xuICByZXR1cm4gb3B0aW9uLnZhbHVlO1xufTtcbnZhciBpc09wdGlvbkRpc2FibGVkID0gZnVuY3Rpb24gaXNPcHRpb25EaXNhYmxlZChvcHRpb24pIHtcbiAgcmV0dXJuICEhb3B0aW9uLmlzRGlzYWJsZWQ7XG59O1xuXG52YXIgY29udGFpbmVyQ1NTID0gZnVuY3Rpb24gY29udGFpbmVyQ1NTKF9yZWYpIHtcbiAgdmFyIGlzRGlzYWJsZWQgPSBfcmVmLmlzRGlzYWJsZWQsXG4gICAgICBpc1J0bCA9IF9yZWYuaXNSdGw7XG4gIHJldHVybiB7XG4gICAgbGFiZWw6ICdjb250YWluZXInLFxuICAgIGRpcmVjdGlvbjogaXNSdGwgPyAncnRsJyA6IG51bGwsXG4gICAgcG9pbnRlckV2ZW50czogaXNEaXNhYmxlZCA/ICdub25lJyA6IG51bGwsXG4gICAgLy8gY2FuY2VsIG1vdXNlIGV2ZW50cyB3aGVuIGRpc2FibGVkXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgfTtcbn07XG52YXIgU2VsZWN0Q29udGFpbmVyID0gZnVuY3Rpb24gU2VsZWN0Q29udGFpbmVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzLFxuICAgICAgaXNEaXNhYmxlZCA9IHByb3BzLmlzRGlzYWJsZWQsXG4gICAgICBpc1J0bCA9IHByb3BzLmlzUnRsO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjeChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgY3NzKGdldFN0eWxlcygnY29udGFpbmVyJywgcHJvcHMpKSwge1xuICAgICAgJy0taXMtZGlzYWJsZWQnOiBpc0Rpc2FibGVkLFxuICAgICAgJy0taXMtcnRsJzogaXNSdGxcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0sIGlubmVyUHJvcHMpLCBjaGlsZHJlbik7XG59OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFZhbHVlIENvbnRhaW5lclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciB2YWx1ZUNvbnRhaW5lckNTUyA9IGZ1bmN0aW9uIHZhbHVlQ29udGFpbmVyQ1NTKF9yZWYyKSB7XG4gIHZhciBzcGFjaW5nID0gX3JlZjIudGhlbWUuc3BhY2luZztcbiAgcmV0dXJuIHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleDogMSxcbiAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KHNwYWNpbmcuYmFzZVVuaXQgLyAyLCBcInB4IFwiKS5jb25jYXQoc3BhY2luZy5iYXNlVW5pdCAqIDIsIFwicHhcIiksXG4gICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH07XG59O1xudmFyIFZhbHVlQ29udGFpbmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhWYWx1ZUNvbnRhaW5lciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVmFsdWVDb250YWluZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZhbHVlQ29udGFpbmVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVmFsdWVDb250YWluZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFZhbHVlQ29udGFpbmVyLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjeCA9IF90aGlzJHByb3BzLmN4LFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wcy5pc011bHRpLFxuICAgICAgICAgIGdldFN0eWxlcyA9IF90aGlzJHByb3BzLmdldFN0eWxlcyxcbiAgICAgICAgICBoYXNWYWx1ZSA9IF90aGlzJHByb3BzLmhhc1ZhbHVlO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGN4KFxuICAgICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAgIGNzcyhnZXRTdHlsZXMoJ3ZhbHVlQ29udGFpbmVyJywgdGhpcy5wcm9wcykpLCB7XG4gICAgICAgICAgJ3ZhbHVlLWNvbnRhaW5lcic6IHRydWUsXG4gICAgICAgICAgJ3ZhbHVlLWNvbnRhaW5lci0taXMtbXVsdGknOiBpc011bHRpLFxuICAgICAgICAgICd2YWx1ZS1jb250YWluZXItLWhhcy12YWx1ZSc6IGhhc1ZhbHVlXG4gICAgICAgIH0sIGNsYXNzTmFtZSlcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVmFsdWVDb250YWluZXI7XG59KENvbXBvbmVudCk7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gSW5kaWNhdG9yIENvbnRhaW5lclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciBpbmRpY2F0b3JzQ29udGFpbmVyQ1NTID0gZnVuY3Rpb24gaW5kaWNhdG9yc0NvbnRhaW5lckNTUygpIHtcbiAgcmV0dXJuIHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBhbGlnblNlbGY6ICdzdHJldGNoJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleFNocmluazogMFxuICB9O1xufTtcbnZhciBJbmRpY2F0b3JzQ29udGFpbmVyID0gZnVuY3Rpb24gSW5kaWNhdG9yc0NvbnRhaW5lcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXM7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3MoZ2V0U3R5bGVzKCdpbmRpY2F0b3JzQ29udGFpbmVyJywgcHJvcHMpKSwge1xuICAgICAgJ2luZGljYXRvcnMnOiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9LCBjaGlsZHJlbik7XG59O1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERyb3Bkb3duICYgQ2xlYXIgSWNvbnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxudmFyIFN2ZyA9IGZ1bmN0aW9uIFN2ZyhfcmVmKSB7XG4gIHZhciBzaXplID0gX3JlZi5zaXplLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wic2l6ZVwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX2V4dGVuZHMoe1xuICAgIGhlaWdodDogc2l6ZSxcbiAgICB3aWR0aDogc2l6ZSxcbiAgICB2aWV3Qm94OiBcIjAgMCAyMCAyMFwiLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgY2xhc3NOYW1lOlxuICAgIC8qI19fUFVSRV9fKi9cblxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3Moe1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgIGxpbmVIZWlnaHQ6IDEsXG4gICAgICBzdHJva2U6ICdjdXJyZW50Q29sb3InLFxuICAgICAgc3Ryb2tlV2lkdGg6IDBcbiAgICB9KVxuICB9LCBwcm9wcykpO1xufTtcblxudmFyIENyb3NzSWNvbiA9IGZ1bmN0aW9uIENyb3NzSWNvbihwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTdmcsIF9leHRlbmRzKHtcbiAgICBzaXplOiAyMFxuICB9LCBwcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xNC4zNDggMTQuODQ5Yy0wLjQ2OSAwLjQ2OS0xLjIyOSAwLjQ2OS0xLjY5NyAwbC0yLjY1MS0zLjAzMC0yLjY1MSAzLjAyOWMtMC40NjkgMC40NjktMS4yMjkgMC40NjktMS42OTcgMC0wLjQ2OS0wLjQ2OS0wLjQ2OS0xLjIyOSAwLTEuNjk3bDIuNzU4LTMuMTUtMi43NTktMy4xNTJjLTAuNDY5LTAuNDY5LTAuNDY5LTEuMjI4IDAtMS42OTdzMS4yMjgtMC40NjkgMS42OTcgMGwyLjY1MiAzLjAzMSAyLjY1MS0zLjAzMWMwLjQ2OS0wLjQ2OSAxLjIyOC0wLjQ2OSAxLjY5NyAwczAuNDY5IDEuMjI5IDAgMS42OTdsLTIuNzU4IDMuMTUyIDIuNzU4IDMuMTVjMC40NjkgMC40NjkgMC40NjkgMS4yMjkgMCAxLjY5OHpcIlxuICB9KSk7XG59O1xudmFyIERvd25DaGV2cm9uID0gZnVuY3Rpb24gRG93bkNoZXZyb24ocHJvcHMpIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3ZnLCBfZXh0ZW5kcyh7XG4gICAgc2l6ZTogMjBcbiAgfSwgcHJvcHMpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNC41MTYgNy41NDhjMC40MzYtMC40NDYgMS4wNDMtMC40ODEgMS41NzYgMGwzLjkwOCAzLjc0NyAzLjkwOC0zLjc0N2MwLjUzMy0wLjQ4MSAxLjE0MS0wLjQ0NiAxLjU3NCAwIDAuNDM2IDAuNDQ1IDAuNDA4IDEuMTk3IDAgMS42MTUtMC40MDYgMC40MTgtNC42OTUgNC41MDItNC42OTUgNC41MDItMC4yMTcgMC4yMjMtMC41MDIgMC4zMzUtMC43ODcgMC4zMzVzLTAuNTctMC4xMTItMC43ODktMC4zMzVjMCAwLTQuMjg3LTQuMDg0LTQuNjk1LTQuNTAycy0wLjQzNi0xLjE3IDAtMS42MTV6XCJcbiAgfSkpO1xufTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBEcm9wZG93biAmIENsZWFyIEJ1dHRvbnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgYmFzZUNTUyA9IGZ1bmN0aW9uIGJhc2VDU1MoX3JlZjIpIHtcbiAgdmFyIGlzRm9jdXNlZCA9IF9yZWYyLmlzRm9jdXNlZCxcbiAgICAgIF9yZWYyJHRoZW1lID0gX3JlZjIudGhlbWUsXG4gICAgICBiYXNlVW5pdCA9IF9yZWYyJHRoZW1lLnNwYWNpbmcuYmFzZVVuaXQsXG4gICAgICBjb2xvcnMgPSBfcmVmMiR0aGVtZS5jb2xvcnM7XG4gIHJldHVybiB7XG4gICAgbGFiZWw6ICdpbmRpY2F0b3JDb250YWluZXInLFxuICAgIGNvbG9yOiBpc0ZvY3VzZWQgPyBjb2xvcnMubmV1dHJhbDYwIDogY29sb3JzLm5ldXRyYWwyMCxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgcGFkZGluZzogYmFzZVVuaXQgKiAyLFxuICAgIHRyYW5zaXRpb246ICdjb2xvciAxNTBtcycsXG4gICAgJzpob3Zlcic6IHtcbiAgICAgIGNvbG9yOiBpc0ZvY3VzZWQgPyBjb2xvcnMubmV1dHJhbDgwIDogY29sb3JzLm5ldXRyYWw0MFxuICAgIH1cbiAgfTtcbn07XG5cbnZhciBkcm9wZG93bkluZGljYXRvckNTUyA9IGJhc2VDU1M7XG52YXIgRHJvcGRvd25JbmRpY2F0b3IgPSBmdW5jdGlvbiBEcm9wZG93bkluZGljYXRvcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpbm5lclByb3BzID0gcHJvcHMuaW5uZXJQcm9wcztcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGlubmVyUHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3MoZ2V0U3R5bGVzKCdkcm9wZG93bkluZGljYXRvcicsIHByb3BzKSksIHtcbiAgICAgICdpbmRpY2F0b3InOiB0cnVlLFxuICAgICAgJ2Ryb3Bkb3duLWluZGljYXRvcic6IHRydWVcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0pLCBjaGlsZHJlbiB8fCBSZWFjdC5jcmVhdGVFbGVtZW50KERvd25DaGV2cm9uLCBudWxsKSk7XG59O1xudmFyIGNsZWFySW5kaWNhdG9yQ1NTID0gYmFzZUNTUztcbnZhciBDbGVhckluZGljYXRvciA9IGZ1bmN0aW9uIENsZWFySW5kaWNhdG9yKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgaW5uZXJQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgIGNzcyhnZXRTdHlsZXMoJ2NsZWFySW5kaWNhdG9yJywgcHJvcHMpKSwge1xuICAgICAgJ2luZGljYXRvcic6IHRydWUsXG4gICAgICAnY2xlYXItaW5kaWNhdG9yJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSksIGNoaWxkcmVuIHx8IFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ3Jvc3NJY29uLCBudWxsKSk7XG59OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFNlcGFyYXRvclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciBpbmRpY2F0b3JTZXBhcmF0b3JDU1MgPSBmdW5jdGlvbiBpbmRpY2F0b3JTZXBhcmF0b3JDU1MoX3JlZjMpIHtcbiAgdmFyIGlzRGlzYWJsZWQgPSBfcmVmMy5pc0Rpc2FibGVkLFxuICAgICAgX3JlZjMkdGhlbWUgPSBfcmVmMy50aGVtZSxcbiAgICAgIGJhc2VVbml0ID0gX3JlZjMkdGhlbWUuc3BhY2luZy5iYXNlVW5pdCxcbiAgICAgIGNvbG9ycyA9IF9yZWYzJHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ2luZGljYXRvclNlcGFyYXRvcicsXG4gICAgYWxpZ25TZWxmOiAnc3RyZXRjaCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWwxMCA6IGNvbG9ycy5uZXV0cmFsMjAsXG4gICAgbWFyZ2luQm90dG9tOiBiYXNlVW5pdCAqIDIsXG4gICAgbWFyZ2luVG9wOiBiYXNlVW5pdCAqIDIsXG4gICAgd2lkdGg6IDFcbiAgfTtcbn07XG52YXIgSW5kaWNhdG9yU2VwYXJhdG9yID0gZnVuY3Rpb24gSW5kaWNhdG9yU2VwYXJhdG9yKHByb3BzKSB7XG4gIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7fSwgaW5uZXJQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgIGNzcyhnZXRTdHlsZXMoJ2luZGljYXRvclNlcGFyYXRvcicsIHByb3BzKSksIHtcbiAgICAgICdpbmRpY2F0b3Itc2VwYXJhdG9yJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSkpO1xufTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBMb2FkaW5nXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxudmFyIGtleWZyYW1lc05hbWUgPSAncmVhY3Qtc2VsZWN0LWxvYWRpbmctaW5kaWNhdG9yJztcbnZhciBrZXlmcmFtZXNJbmplY3RlZCA9IGZhbHNlO1xudmFyIGxvYWRpbmdJbmRpY2F0b3JDU1MgPSBmdW5jdGlvbiBsb2FkaW5nSW5kaWNhdG9yQ1NTKF9yZWY0KSB7XG4gIHZhciBpc0ZvY3VzZWQgPSBfcmVmNC5pc0ZvY3VzZWQsXG4gICAgICBzaXplID0gX3JlZjQuc2l6ZSxcbiAgICAgIF9yZWY0JHRoZW1lID0gX3JlZjQudGhlbWUsXG4gICAgICBjb2xvcnMgPSBfcmVmNCR0aGVtZS5jb2xvcnMsXG4gICAgICBiYXNlVW5pdCA9IF9yZWY0JHRoZW1lLnNwYWNpbmcuYmFzZVVuaXQ7XG4gIHJldHVybiB7XG4gICAgbGFiZWw6ICdsb2FkaW5nSW5kaWNhdG9yJyxcbiAgICBjb2xvcjogaXNGb2N1c2VkID8gY29sb3JzLm5ldXRyYWw2MCA6IGNvbG9ycy5uZXV0cmFsMjAsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIHBhZGRpbmc6IGJhc2VVbml0ICogMixcbiAgICB0cmFuc2l0aW9uOiAnY29sb3IgMTUwbXMnLFxuICAgIGFsaWduU2VsZjogJ2NlbnRlcicsXG4gICAgZm9udFNpemU6IHNpemUsXG4gICAgbGluZUhlaWdodDogMSxcbiAgICBtYXJnaW5SaWdodDogc2l6ZSxcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnXG4gIH07XG59O1xuXG52YXIgTG9hZGluZ0RvdCA9IGZ1bmN0aW9uIExvYWRpbmdEb3QoX3JlZjUpIHtcbiAgdmFyIGNvbG9yID0gX3JlZjUuY29sb3IsXG4gICAgICBkZWxheSA9IF9yZWY1LmRlbGF5LFxuICAgICAgb2Zmc2V0ID0gX3JlZjUub2Zmc2V0O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTpcbiAgICAvKiNfX1BVUkVfXyovXG5cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgY3NzKHtcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnMXMnLFxuICAgICAgYW5pbWF0aW9uRGVsYXk6IFwiXCIuY29uY2F0KGRlbGF5LCBcIm1zXCIpLFxuICAgICAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ICdpbmZpbml0ZScsXG4gICAgICBhbmltYXRpb25OYW1lOiBrZXlmcmFtZXNOYW1lLFxuICAgICAgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb246ICdlYXNlLWluLW91dCcsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnMWVtJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgbWFyZ2luTGVmdDogb2Zmc2V0ID8gJzFlbScgOiBudWxsLFxuICAgICAgaGVpZ2h0OiAnMWVtJyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgd2lkdGg6ICcxZW0nXG4gICAgfSlcbiAgfSk7XG59O1xuXG52YXIgTG9hZGluZ0luZGljYXRvciA9IGZ1bmN0aW9uIExvYWRpbmdJbmRpY2F0b3IocHJvcHMpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpbm5lclByb3BzID0gcHJvcHMuaW5uZXJQcm9wcyxcbiAgICAgIGlzRm9jdXNlZCA9IHByb3BzLmlzRm9jdXNlZCxcbiAgICAgIGlzUnRsID0gcHJvcHMuaXNSdGwsXG4gICAgICBjb2xvcnMgPSBwcm9wcy50aGVtZS5jb2xvcnM7XG4gIHZhciBjb2xvciA9IGlzRm9jdXNlZCA/IGNvbG9ycy5uZXV0cmFsODAgOiBjb2xvcnMubmV1dHJhbDIwO1xuXG4gIGlmICgha2V5ZnJhbWVzSW5qZWN0ZWQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgaW5qZWN0R2xvYmFsKFwiQGtleWZyYW1lcyBcIiwga2V5ZnJhbWVzTmFtZSwgXCJ7MCUsODAlLDEwMCV7b3BhY2l0eTowO300MCV7b3BhY2l0eToxO319O1wiKTtcbiAgICBrZXlmcmFtZXNJbmplY3RlZCA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgaW5uZXJQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgIGNzcyhnZXRTdHlsZXMoJ2xvYWRpbmdJbmRpY2F0b3InLCBwcm9wcykpLCB7XG4gICAgICAnaW5kaWNhdG9yJzogdHJ1ZSxcbiAgICAgICdsb2FkaW5nLWluZGljYXRvcic6IHRydWVcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KExvYWRpbmdEb3QsIHtcbiAgICBjb2xvcjogY29sb3IsXG4gICAgZGVsYXk6IDAsXG4gICAgb2Zmc2V0OiBpc1J0bFxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChMb2FkaW5nRG90LCB7XG4gICAgY29sb3I6IGNvbG9yLFxuICAgIGRlbGF5OiAxNjAsXG4gICAgb2Zmc2V0OiB0cnVlXG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KExvYWRpbmdEb3QsIHtcbiAgICBjb2xvcjogY29sb3IsXG4gICAgZGVsYXk6IDMyMCxcbiAgICBvZmZzZXQ6ICFpc1J0bFxuICB9KSk7XG59O1xuTG9hZGluZ0luZGljYXRvci5kZWZhdWx0UHJvcHMgPSB7XG4gIHNpemU6IDRcbn07XG5cbnZhciBjc3MkMSA9IGZ1bmN0aW9uIGNzcyQkMShfcmVmKSB7XG4gIHZhciBpc0Rpc2FibGVkID0gX3JlZi5pc0Rpc2FibGVkLFxuICAgICAgaXNGb2N1c2VkID0gX3JlZi5pc0ZvY3VzZWQsXG4gICAgICBfcmVmJHRoZW1lID0gX3JlZi50aGVtZSxcbiAgICAgIGNvbG9ycyA9IF9yZWYkdGhlbWUuY29sb3JzLFxuICAgICAgYm9yZGVyUmFkaXVzID0gX3JlZiR0aGVtZS5ib3JkZXJSYWRpdXMsXG4gICAgICBzcGFjaW5nID0gX3JlZiR0aGVtZS5zcGFjaW5nO1xuICByZXR1cm4ge1xuICAgIGxhYmVsOiAnY29udHJvbCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgYmFja2dyb3VuZENvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWw1IDogY29sb3JzLm5ldXRyYWwwLFxuICAgIGJvcmRlckNvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWwxMCA6IGlzRm9jdXNlZCA/IGNvbG9ycy5wcmltYXJ5IDogY29sb3JzLm5ldXRyYWwyMCxcbiAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICBib3JkZXJXaWR0aDogMSxcbiAgICBib3hTaGFkb3c6IGlzRm9jdXNlZCA/IFwiMCAwIDAgMXB4IFwiLmNvbmNhdChjb2xvcnMucHJpbWFyeSkgOiBudWxsLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgbWluSGVpZ2h0OiBzcGFjaW5nLmNvbnRyb2xIZWlnaHQsXG4gICAgb3V0bGluZTogJzAgIWltcG9ydGFudCcsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgdHJhbnNpdGlvbjogJ2FsbCAxMDBtcycsXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBib3JkZXJDb2xvcjogaXNGb2N1c2VkID8gY29sb3JzLnByaW1hcnkgOiBjb2xvcnMubmV1dHJhbDMwXG4gICAgfVxuICB9O1xufTtcblxudmFyIENvbnRyb2wgPSBmdW5jdGlvbiBDb250cm9sKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGlzRGlzYWJsZWQgPSBwcm9wcy5pc0Rpc2FibGVkLFxuICAgICAgaXNGb2N1c2VkID0gcHJvcHMuaXNGb2N1c2VkLFxuICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZixcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzLFxuICAgICAgbWVudUlzT3BlbiA9IHByb3BzLm1lbnVJc09wZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgIGNzcyhnZXRTdHlsZXMoJ2NvbnRyb2wnLCBwcm9wcykpLCB7XG4gICAgICAnY29udHJvbCc6IHRydWUsXG4gICAgICAnY29udHJvbC0taXMtZGlzYWJsZWQnOiBpc0Rpc2FibGVkLFxuICAgICAgJ2NvbnRyb2wtLWlzLWZvY3VzZWQnOiBpc0ZvY3VzZWQsXG4gICAgICAnY29udHJvbC0tbWVudS1pcy1vcGVuJzogbWVudUlzT3BlblxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgaW5uZXJQcm9wcyksIGNoaWxkcmVuKTtcbn07XG5cbnZhciBncm91cENTUyA9IGZ1bmN0aW9uIGdyb3VwQ1NTKF9yZWYpIHtcbiAgdmFyIHNwYWNpbmcgPSBfcmVmLnRoZW1lLnNwYWNpbmc7XG4gIHJldHVybiB7XG4gICAgcGFkZGluZ0JvdHRvbTogc3BhY2luZy5iYXNlVW5pdCAqIDIsXG4gICAgcGFkZGluZ1RvcDogc3BhY2luZy5iYXNlVW5pdCAqIDJcbiAgfTtcbn07XG5cbnZhciBHcm91cCA9IGZ1bmN0aW9uIEdyb3VwKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIEhlYWRpbmcgPSBwcm9wcy5IZWFkaW5nLFxuICAgICAgaGVhZGluZ1Byb3BzID0gcHJvcHMuaGVhZGluZ1Byb3BzLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIHRoZW1lID0gcHJvcHMudGhlbWUsXG4gICAgICBzZWxlY3RQcm9wcyA9IHByb3BzLnNlbGVjdFByb3BzO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjeChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgY3NzKGdldFN0eWxlcygnZ3JvdXAnLCBwcm9wcykpLCB7XG4gICAgICAnZ3JvdXAnOiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEhlYWRpbmcsIF9leHRlbmRzKHt9LCBoZWFkaW5nUHJvcHMsIHtcbiAgICBzZWxlY3RQcm9wczogc2VsZWN0UHJvcHMsXG4gICAgdGhlbWU6IHRoZW1lLFxuICAgIGdldFN0eWxlczogZ2V0U3R5bGVzLFxuICAgIGN4OiBjeFxuICB9KSwgbGFiZWwpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIGNoaWxkcmVuKSk7XG59O1xuXG52YXIgZ3JvdXBIZWFkaW5nQ1NTID0gZnVuY3Rpb24gZ3JvdXBIZWFkaW5nQ1NTKF9yZWYyKSB7XG4gIHZhciBzcGFjaW5nID0gX3JlZjIudGhlbWUuc3BhY2luZztcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ2dyb3VwJyxcbiAgICBjb2xvcjogJyM5OTknLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgZm9udFNpemU6ICc3NSUnLFxuICAgIGZvbnRXZWlnaHQ6ICc1MDAnLFxuICAgIG1hcmdpbkJvdHRvbTogJzAuMjVlbScsXG4gICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcuYmFzZVVuaXQgKiAzLFxuICAgIHBhZGRpbmdSaWdodDogc3BhY2luZy5iYXNlVW5pdCAqIDMsXG4gICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbiAgfTtcbn07XG52YXIgR3JvdXBIZWFkaW5nID0gZnVuY3Rpb24gR3JvdXBIZWFkaW5nKHByb3BzKSB7XG4gIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgdGhlbWUgPSBwcm9wcy50aGVtZSxcbiAgICAgIHNlbGVjdFByb3BzID0gcHJvcHMuc2VsZWN0UHJvcHMsXG4gICAgICBjbGVhblByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc05hbWVcIiwgXCJjeFwiLCBcImdldFN0eWxlc1wiLCBcInRoZW1lXCIsIFwic2VsZWN0UHJvcHNcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3MoZ2V0U3R5bGVzKCdncm91cEhlYWRpbmcnLCBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIHRoZW1lOiB0aGVtZVxuICAgIH0sIGNsZWFuUHJvcHMpKSksIHtcbiAgICAgICdncm91cC1oZWFkaW5nJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgY2xlYW5Qcm9wcykpO1xufTtcblxudmFyIGlucHV0Q1NTID0gZnVuY3Rpb24gaW5wdXRDU1MoX3JlZikge1xuICB2YXIgaXNEaXNhYmxlZCA9IF9yZWYuaXNEaXNhYmxlZCxcbiAgICAgIF9yZWYkdGhlbWUgPSBfcmVmLnRoZW1lLFxuICAgICAgc3BhY2luZyA9IF9yZWYkdGhlbWUuc3BhY2luZyxcbiAgICAgIGNvbG9ycyA9IF9yZWYkdGhlbWUuY29sb3JzO1xuICByZXR1cm4ge1xuICAgIG1hcmdpbjogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgcGFkZGluZ0JvdHRvbTogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgcGFkZGluZ1RvcDogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgdmlzaWJpbGl0eTogaXNEaXNhYmxlZCA/ICdoaWRkZW4nIDogJ3Zpc2libGUnLFxuICAgIGNvbG9yOiBjb2xvcnMubmV1dHJhbDgwXG4gIH07XG59O1xuXG52YXIgaW5wdXRTdHlsZSA9IGZ1bmN0aW9uIGlucHV0U3R5bGUoaXNIaWRkZW4pIHtcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ2lucHV0JyxcbiAgICBiYWNrZ3JvdW5kOiAwLFxuICAgIGJvcmRlcjogMCxcbiAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgIG9wYWNpdHk6IGlzSGlkZGVuID8gMCA6IDEsXG4gICAgb3V0bGluZTogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgfTtcbn07XG5cbnZhciBJbnB1dCA9IGZ1bmN0aW9uIElucHV0KF9yZWYyKSB7XG4gIHZhciBjbGFzc05hbWUgPSBfcmVmMi5jbGFzc05hbWUsXG4gICAgICBjeCA9IF9yZWYyLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gX3JlZjIuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmMi5pbm5lclJlZixcbiAgICAgIGlzSGlkZGVuID0gX3JlZjIuaXNIaWRkZW4sXG4gICAgICBpc0Rpc2FibGVkID0gX3JlZjIuaXNEaXNhYmxlZCxcbiAgICAgIHRoZW1lID0gX3JlZjIudGhlbWUsXG4gICAgICBzZWxlY3RQcm9wcyA9IF9yZWYyLnNlbGVjdFByb3BzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFtcImNsYXNzTmFtZVwiLCBcImN4XCIsIFwiZ2V0U3R5bGVzXCIsIFwiaW5uZXJSZWZcIiwgXCJpc0hpZGRlblwiLCBcImlzRGlzYWJsZWRcIiwgXCJ0aGVtZVwiLCBcInNlbGVjdFByb3BzXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOlxuICAgIC8qI19fUFVSRV9fKi9cblxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3MoZ2V0U3R5bGVzKCdpbnB1dCcsIF9vYmplY3RTcHJlYWQoe1xuICAgICAgdGhlbWU6IHRoZW1lXG4gICAgfSwgcHJvcHMpKSlcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChBdXRvc2l6ZUlucHV0LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjeChudWxsLCB7XG4gICAgICAnaW5wdXQnOiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKSxcbiAgICBpbnB1dFJlZjogaW5uZXJSZWYsXG4gICAgaW5wdXRTdHlsZTogaW5wdXRTdHlsZShpc0hpZGRlbiksXG4gICAgZGlzYWJsZWQ6IGlzRGlzYWJsZWRcbiAgfSwgcHJvcHMpKSk7XG59O1xuXG52YXIgbXVsdGlWYWx1ZUNTUyA9IGZ1bmN0aW9uIG11bHRpVmFsdWVDU1MoX3JlZikge1xuICB2YXIgX3JlZiR0aGVtZSA9IF9yZWYudGhlbWUsXG4gICAgICBzcGFjaW5nID0gX3JlZiR0aGVtZS5zcGFjaW5nLFxuICAgICAgYm9yZGVyUmFkaXVzID0gX3JlZiR0aGVtZS5ib3JkZXJSYWRpdXMsXG4gICAgICBjb2xvcnMgPSBfcmVmJHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ211bHRpVmFsdWUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLm5ldXRyYWwxMCxcbiAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyAvIDIsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIG1hcmdpbjogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgbWluV2lkdGg6IDAgLy8gcmVzb2x2ZXMgZmxleC90ZXh0LW92ZXJmbG93IGJ1Z1xuXG4gIH07XG59O1xudmFyIG11bHRpVmFsdWVMYWJlbENTUyA9IGZ1bmN0aW9uIG11bHRpVmFsdWVMYWJlbENTUyhfcmVmMikge1xuICB2YXIgX3JlZjIkdGhlbWUgPSBfcmVmMi50aGVtZSxcbiAgICAgIGJvcmRlclJhZGl1cyA9IF9yZWYyJHRoZW1lLmJvcmRlclJhZGl1cyxcbiAgICAgIGNvbG9ycyA9IF9yZWYyJHRoZW1lLmNvbG9ycyxcbiAgICAgIGNyb3BXaXRoRWxsaXBzaXMgPSBfcmVmMi5jcm9wV2l0aEVsbGlwc2lzO1xuICByZXR1cm4ge1xuICAgIGJvcmRlclJhZGl1czogYm9yZGVyUmFkaXVzIC8gMixcbiAgICBjb2xvcjogY29sb3JzLm5ldXRyYWw4MCxcbiAgICBmb250U2l6ZTogJzg1JScsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIHBhZGRpbmc6IDMsXG4gICAgcGFkZGluZ0xlZnQ6IDYsXG4gICAgdGV4dE92ZXJmbG93OiBjcm9wV2l0aEVsbGlwc2lzID8gJ2VsbGlwc2lzJyA6IG51bGwsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgfTtcbn07XG52YXIgbXVsdGlWYWx1ZVJlbW92ZUNTUyA9IGZ1bmN0aW9uIG11bHRpVmFsdWVSZW1vdmVDU1MoX3JlZjMpIHtcbiAgdmFyIF9yZWYzJHRoZW1lID0gX3JlZjMudGhlbWUsXG4gICAgICBzcGFjaW5nID0gX3JlZjMkdGhlbWUuc3BhY2luZyxcbiAgICAgIGJvcmRlclJhZGl1cyA9IF9yZWYzJHRoZW1lLmJvcmRlclJhZGl1cyxcbiAgICAgIGNvbG9ycyA9IF9yZWYzJHRoZW1lLmNvbG9ycyxcbiAgICAgIGlzRm9jdXNlZCA9IF9yZWYzLmlzRm9jdXNlZDtcbiAgcmV0dXJuIHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyAvIDIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBpc0ZvY3VzZWQgJiYgY29sb3JzLmRhbmdlckxpZ2h0LFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBwYWRkaW5nTGVmdDogc3BhY2luZy5iYXNlVW5pdCxcbiAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcuYmFzZVVuaXQsXG4gICAgJzpob3Zlcic6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLmRhbmdlckxpZ2h0LFxuICAgICAgY29sb3I6IGNvbG9ycy5kYW5nZXJcbiAgICB9XG4gIH07XG59O1xudmFyIE11bHRpVmFsdWVHZW5lcmljID0gZnVuY3Rpb24gTXVsdGlWYWx1ZUdlbmVyaWMoX3JlZjQpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZjQuY2hpbGRyZW4sXG4gICAgICBpbm5lclByb3BzID0gX3JlZjQuaW5uZXJQcm9wcztcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgaW5uZXJQcm9wcywgY2hpbGRyZW4pO1xufTtcbnZhciBNdWx0aVZhbHVlQ29udGFpbmVyID0gTXVsdGlWYWx1ZUdlbmVyaWM7XG52YXIgTXVsdGlWYWx1ZUxhYmVsID0gTXVsdGlWYWx1ZUdlbmVyaWM7XG52YXIgTXVsdGlWYWx1ZVJlbW92ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTXVsdGlWYWx1ZVJlbW92ZSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTXVsdGlWYWx1ZVJlbW92ZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTXVsdGlWYWx1ZVJlbW92ZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE11bHRpVmFsdWVSZW1vdmUpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE11bHRpVmFsdWVSZW1vdmUsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgaW5uZXJQcm9wcyA9IF90aGlzJHByb3BzLmlubmVyUHJvcHM7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBpbm5lclByb3BzLCBjaGlsZHJlbiB8fCBSZWFjdC5jcmVhdGVFbGVtZW50KENyb3NzSWNvbiwge1xuICAgICAgICBzaXplOiAxNFxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNdWx0aVZhbHVlUmVtb3ZlO1xufShDb21wb25lbnQpO1xuXG52YXIgTXVsdGlWYWx1ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgX2luaGVyaXRzKE11bHRpVmFsdWUsIF9Db21wb25lbnQyKTtcblxuICBmdW5jdGlvbiBNdWx0aVZhbHVlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNdWx0aVZhbHVlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTXVsdGlWYWx1ZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTXVsdGlWYWx1ZSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWUsXG4gICAgICAgICAgY29tcG9uZW50cyA9IF90aGlzJHByb3BzMi5jb21wb25lbnRzLFxuICAgICAgICAgIGN4ID0gX3RoaXMkcHJvcHMyLmN4LFxuICAgICAgICAgIGRhdGEgPSBfdGhpcyRwcm9wczIuZGF0YSxcbiAgICAgICAgICBnZXRTdHlsZXMgPSBfdGhpcyRwcm9wczIuZ2V0U3R5bGVzLFxuICAgICAgICAgIGlubmVyUHJvcHMgPSBfdGhpcyRwcm9wczIuaW5uZXJQcm9wcyxcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMyLmlzRGlzYWJsZWQsXG4gICAgICAgICAgcmVtb3ZlUHJvcHMgPSBfdGhpcyRwcm9wczIucmVtb3ZlUHJvcHMsXG4gICAgICAgICAgc2VsZWN0UHJvcHMgPSBfdGhpcyRwcm9wczIuc2VsZWN0UHJvcHM7XG4gICAgICB2YXIgQ29udGFpbmVyID0gY29tcG9uZW50cy5Db250YWluZXIsXG4gICAgICAgICAgTGFiZWwgPSBjb21wb25lbnRzLkxhYmVsLFxuICAgICAgICAgIFJlbW92ZSA9IGNvbXBvbmVudHMuUmVtb3ZlO1xuXG4gICAgICB2YXIgY29udGFpbmVySW5uZXJQcm9wcyA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBjbGFzc05hbWU6IGN4KFxuICAgICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAgIGNzcyhnZXRTdHlsZXMoJ211bHRpVmFsdWUnLCB0aGlzLnByb3BzKSksIHtcbiAgICAgICAgICAnbXVsdGktdmFsdWUnOiB0cnVlLFxuICAgICAgICAgICdtdWx0aS12YWx1ZS0taXMtZGlzYWJsZWQnOiBpc0Rpc2FibGVkXG4gICAgICAgIH0sIGNsYXNzTmFtZSlcbiAgICAgIH0sIGlubmVyUHJvcHMpO1xuXG4gICAgICB2YXIgbGFiZWxJbm5lclByb3BzID0ge1xuICAgICAgICBjbGFzc05hbWU6IGN4KFxuICAgICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAgIGNzcyhnZXRTdHlsZXMoJ211bHRpVmFsdWVMYWJlbCcsIHRoaXMucHJvcHMpKSwge1xuICAgICAgICAgICdtdWx0aS12YWx1ZV9fbGFiZWwnOiB0cnVlXG4gICAgICAgIH0sIGNsYXNzTmFtZSlcbiAgICAgIH07XG5cbiAgICAgIHZhciByZW1vdmVJbm5lclByb3BzID0gX29iamVjdFNwcmVhZCh7XG4gICAgICAgIGNsYXNzTmFtZTogY3goXG4gICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgY3NzKGdldFN0eWxlcygnbXVsdGlWYWx1ZVJlbW92ZScsIHRoaXMucHJvcHMpKSwge1xuICAgICAgICAgICdtdWx0aS12YWx1ZV9fcmVtb3ZlJzogdHJ1ZVxuICAgICAgICB9LCBjbGFzc05hbWUpXG4gICAgICB9LCByZW1vdmVQcm9wcyk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRhaW5lciwge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBpbm5lclByb3BzOiBjb250YWluZXJJbm5lclByb3BzLFxuICAgICAgICBzZWxlY3RQcm9wczogc2VsZWN0UHJvcHNcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGFiZWwsIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgaW5uZXJQcm9wczogbGFiZWxJbm5lclByb3BzLFxuICAgICAgICBzZWxlY3RQcm9wczogc2VsZWN0UHJvcHNcbiAgICAgIH0sIGNoaWxkcmVuKSwgUmVhY3QuY3JlYXRlRWxlbWVudChSZW1vdmUsIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgaW5uZXJQcm9wczogcmVtb3ZlSW5uZXJQcm9wcyxcbiAgICAgICAgc2VsZWN0UHJvcHM6IHNlbGVjdFByb3BzXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE11bHRpVmFsdWU7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShNdWx0aVZhbHVlLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNyb3BXaXRoRWxsaXBzaXM6IHRydWVcbn0pO1xuXG52YXIgb3B0aW9uQ1NTID0gZnVuY3Rpb24gb3B0aW9uQ1NTKF9yZWYpIHtcbiAgdmFyIGlzRGlzYWJsZWQgPSBfcmVmLmlzRGlzYWJsZWQsXG4gICAgICBpc0ZvY3VzZWQgPSBfcmVmLmlzRm9jdXNlZCxcbiAgICAgIGlzU2VsZWN0ZWQgPSBfcmVmLmlzU2VsZWN0ZWQsXG4gICAgICBfcmVmJHRoZW1lID0gX3JlZi50aGVtZSxcbiAgICAgIHNwYWNpbmcgPSBfcmVmJHRoZW1lLnNwYWNpbmcsXG4gICAgICBjb2xvcnMgPSBfcmVmJHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ29wdGlvbicsXG4gICAgYmFja2dyb3VuZENvbG9yOiBpc1NlbGVjdGVkID8gY29sb3JzLnByaW1hcnkgOiBpc0ZvY3VzZWQgPyBjb2xvcnMucHJpbWFyeTI1IDogJ3RyYW5zcGFyZW50JyxcbiAgICBjb2xvcjogaXNEaXNhYmxlZCA/IGNvbG9ycy5uZXV0cmFsMjAgOiBpc1NlbGVjdGVkID8gY29sb3JzLm5ldXRyYWwwIDogJ2luaGVyaXQnLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdChzcGFjaW5nLmJhc2VVbml0ICogMiwgXCJweCBcIikuY29uY2F0KHNwYWNpbmcuYmFzZVVuaXQgKiAzLCBcInB4XCIpLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLCAwLCAwLCAwKScsXG4gICAgLy8gcHJvdmlkZSBzb21lIGFmZm9yZGFuY2Ugb24gdG91Y2ggZGV2aWNlc1xuICAgICc6YWN0aXZlJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAhaXNEaXNhYmxlZCAmJiAoaXNTZWxlY3RlZCA/IGNvbG9ycy5wcmltYXJ5IDogY29sb3JzLnByaW1hcnk1MClcbiAgICB9XG4gIH07XG59O1xuXG52YXIgT3B0aW9uID0gZnVuY3Rpb24gT3B0aW9uKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlzRGlzYWJsZWQgPSBwcm9wcy5pc0Rpc2FibGVkLFxuICAgICAgaXNGb2N1c2VkID0gcHJvcHMuaXNGb2N1c2VkLFxuICAgICAgaXNTZWxlY3RlZCA9IHByb3BzLmlzU2VsZWN0ZWQsXG4gICAgICBpbm5lclJlZiA9IHByb3BzLmlubmVyUmVmLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgIGNzcyhnZXRTdHlsZXMoJ29wdGlvbicsIHByb3BzKSksIHtcbiAgICAgICdvcHRpb24nOiB0cnVlLFxuICAgICAgJ29wdGlvbi0taXMtZGlzYWJsZWQnOiBpc0Rpc2FibGVkLFxuICAgICAgJ29wdGlvbi0taXMtZm9jdXNlZCc6IGlzRm9jdXNlZCxcbiAgICAgICdvcHRpb24tLWlzLXNlbGVjdGVkJzogaXNTZWxlY3RlZFxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgaW5uZXJQcm9wcyksIGNoaWxkcmVuKTtcbn07XG5cbnZhciBwbGFjZWhvbGRlckNTUyA9IGZ1bmN0aW9uIHBsYWNlaG9sZGVyQ1NTKF9yZWYpIHtcbiAgdmFyIF9yZWYkdGhlbWUgPSBfcmVmLnRoZW1lLFxuICAgICAgc3BhY2luZyA9IF9yZWYkdGhlbWUuc3BhY2luZyxcbiAgICAgIGNvbG9ycyA9IF9yZWYkdGhlbWUuY29sb3JzO1xuICByZXR1cm4ge1xuICAgIGxhYmVsOiAncGxhY2Vob2xkZXInLFxuICAgIGNvbG9yOiBjb2xvcnMubmV1dHJhbDUwLFxuICAgIG1hcmdpbkxlZnQ6IHNwYWNpbmcuYmFzZVVuaXQgLyAyLFxuICAgIG1hcmdpblJpZ2h0OiBzcGFjaW5nLmJhc2VVbml0IC8gMixcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6ICc1MCUnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSknXG4gIH07XG59O1xuXG52YXIgUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiBQbGFjZWhvbGRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpbm5lclByb3BzID0gcHJvcHMuaW5uZXJQcm9wcztcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgIGNzcyhnZXRTdHlsZXMoJ3BsYWNlaG9sZGVyJywgcHJvcHMpKSwge1xuICAgICAgJ3BsYWNlaG9sZGVyJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgaW5uZXJQcm9wcyksIGNoaWxkcmVuKTtcbn07XG5cbnZhciBjc3MkMiA9IGZ1bmN0aW9uIGNzcyQkMShfcmVmKSB7XG4gIHZhciBpc0Rpc2FibGVkID0gX3JlZi5pc0Rpc2FibGVkLFxuICAgICAgX3JlZiR0aGVtZSA9IF9yZWYudGhlbWUsXG4gICAgICBzcGFjaW5nID0gX3JlZiR0aGVtZS5zcGFjaW5nLFxuICAgICAgY29sb3JzID0gX3JlZiR0aGVtZS5jb2xvcnM7XG4gIHJldHVybiB7XG4gICAgbGFiZWw6ICdzaW5nbGVWYWx1ZScsXG4gICAgY29sb3I6IGlzRGlzYWJsZWQgPyBjb2xvcnMubmV1dHJhbDQwIDogY29sb3JzLm5ldXRyYWw4MCxcbiAgICBtYXJnaW5MZWZ0OiBzcGFjaW5nLmJhc2VVbml0IC8gMixcbiAgICBtYXJnaW5SaWdodDogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgbWF4V2lkdGg6IFwiY2FsYygxMDAlIC0gXCIuY29uY2F0KHNwYWNpbmcuYmFzZVVuaXQgKiAyLCBcInB4KVwiKSxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIHRvcDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSdcbiAgfTtcbn07XG5cbnZhciBTaW5nbGVWYWx1ZSA9IGZ1bmN0aW9uIFNpbmdsZVZhbHVlKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlzRGlzYWJsZWQgPSBwcm9wcy5pc0Rpc2FibGVkLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3MoZ2V0U3R5bGVzKCdzaW5nbGVWYWx1ZScsIHByb3BzKSksIHtcbiAgICAgICdzaW5nbGUtdmFsdWUnOiB0cnVlLFxuICAgICAgJ3NpbmdsZS12YWx1ZS0taXMtZGlzYWJsZWQnOiBpc0Rpc2FibGVkXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9LCBpbm5lclByb3BzKSwgY2hpbGRyZW4pO1xufTtcblxudmFyIGNvbXBvbmVudHMgPSB7XG4gIENsZWFySW5kaWNhdG9yOiBDbGVhckluZGljYXRvcixcbiAgQ29udHJvbDogQ29udHJvbCxcbiAgRHJvcGRvd25JbmRpY2F0b3I6IERyb3Bkb3duSW5kaWNhdG9yLFxuICBEb3duQ2hldnJvbjogRG93bkNoZXZyb24sXG4gIENyb3NzSWNvbjogQ3Jvc3NJY29uLFxuICBHcm91cDogR3JvdXAsXG4gIEdyb3VwSGVhZGluZzogR3JvdXBIZWFkaW5nLFxuICBJbmRpY2F0b3JzQ29udGFpbmVyOiBJbmRpY2F0b3JzQ29udGFpbmVyLFxuICBJbmRpY2F0b3JTZXBhcmF0b3I6IEluZGljYXRvclNlcGFyYXRvcixcbiAgSW5wdXQ6IElucHV0LFxuICBMb2FkaW5nSW5kaWNhdG9yOiBMb2FkaW5nSW5kaWNhdG9yLFxuICBNZW51OiBNZW51LFxuICBNZW51TGlzdDogTWVudUxpc3QsXG4gIE1lbnVQb3J0YWw6IE1lbnVQb3J0YWwsXG4gIExvYWRpbmdNZXNzYWdlOiBMb2FkaW5nTWVzc2FnZSxcbiAgTm9PcHRpb25zTWVzc2FnZTogTm9PcHRpb25zTWVzc2FnZSxcbiAgTXVsdGlWYWx1ZTogTXVsdGlWYWx1ZSxcbiAgTXVsdGlWYWx1ZUNvbnRhaW5lcjogTXVsdGlWYWx1ZUNvbnRhaW5lcixcbiAgTXVsdGlWYWx1ZUxhYmVsOiBNdWx0aVZhbHVlTGFiZWwsXG4gIE11bHRpVmFsdWVSZW1vdmU6IE11bHRpVmFsdWVSZW1vdmUsXG4gIE9wdGlvbjogT3B0aW9uLFxuICBQbGFjZWhvbGRlcjogUGxhY2Vob2xkZXIsXG4gIFNlbGVjdENvbnRhaW5lcjogU2VsZWN0Q29udGFpbmVyLFxuICBTaW5nbGVWYWx1ZTogU2luZ2xlVmFsdWUsXG4gIFZhbHVlQ29udGFpbmVyOiBWYWx1ZUNvbnRhaW5lclxufTtcbnZhciBkZWZhdWx0Q29tcG9uZW50cyA9IGZ1bmN0aW9uIGRlZmF1bHRDb21wb25lbnRzKHByb3BzKSB7XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBjb21wb25lbnRzLCBwcm9wcy5jb21wb25lbnRzKTtcbn07XG5cbnZhciBkZWZhdWx0U3R5bGVzID0ge1xuICBjbGVhckluZGljYXRvcjogY2xlYXJJbmRpY2F0b3JDU1MsXG4gIGNvbnRhaW5lcjogY29udGFpbmVyQ1NTLFxuICBjb250cm9sOiBjc3MkMSxcbiAgZHJvcGRvd25JbmRpY2F0b3I6IGRyb3Bkb3duSW5kaWNhdG9yQ1NTLFxuICBncm91cDogZ3JvdXBDU1MsXG4gIGdyb3VwSGVhZGluZzogZ3JvdXBIZWFkaW5nQ1NTLFxuICBpbmRpY2F0b3JzQ29udGFpbmVyOiBpbmRpY2F0b3JzQ29udGFpbmVyQ1NTLFxuICBpbmRpY2F0b3JTZXBhcmF0b3I6IGluZGljYXRvclNlcGFyYXRvckNTUyxcbiAgaW5wdXQ6IGlucHV0Q1NTLFxuICBsb2FkaW5nSW5kaWNhdG9yOiBsb2FkaW5nSW5kaWNhdG9yQ1NTLFxuICBsb2FkaW5nTWVzc2FnZTogbG9hZGluZ01lc3NhZ2VDU1MsXG4gIG1lbnU6IG1lbnVDU1MsXG4gIG1lbnVMaXN0OiBtZW51TGlzdENTUyxcbiAgbWVudVBvcnRhbDogbWVudVBvcnRhbENTUyxcbiAgbXVsdGlWYWx1ZTogbXVsdGlWYWx1ZUNTUyxcbiAgbXVsdGlWYWx1ZUxhYmVsOiBtdWx0aVZhbHVlTGFiZWxDU1MsXG4gIG11bHRpVmFsdWVSZW1vdmU6IG11bHRpVmFsdWVSZW1vdmVDU1MsXG4gIG5vT3B0aW9uc01lc3NhZ2U6IG5vT3B0aW9uc01lc3NhZ2VDU1MsXG4gIG9wdGlvbjogb3B0aW9uQ1NTLFxuICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXJDU1MsXG4gIHNpbmdsZVZhbHVlOiBjc3MkMixcbiAgdmFsdWVDb250YWluZXI6IHZhbHVlQ29udGFpbmVyQ1NTXG59OyAvLyBNZXJnZSBVdGlsaXR5XG4vLyBBbGxvd3MgY29uc3VtZXJzIHRvIGV4dGVuZCBhIGJhc2UgU2VsZWN0IHdpdGggYWRkaXRpb25hbCBzdHlsZXNcblxuZnVuY3Rpb24gbWVyZ2VTdHlsZXMoc291cmNlKSB7XG4gIHZhciB0YXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIC8vIGluaXRpYWxpemUgd2l0aCBzb3VyY2Ugc3R5bGVzXG4gIHZhciBzdHlsZXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBzb3VyY2UpOyAvLyBtYXNzYWdlIGluIHRhcmdldCBzdHlsZXNcblxuXG4gIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKHNvdXJjZVtrZXldKSB7XG4gICAgICBzdHlsZXNba2V5XSA9IGZ1bmN0aW9uIChyc0NzcywgcHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldKHNvdXJjZVtrZXldKHJzQ3NzLCBwcm9wcyksIHByb3BzKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc1trZXldID0gdGFyZ2V0W2tleV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHN0eWxlcztcbn1cblxudmFyIGNvbG9ycyA9IHtcbiAgcHJpbWFyeTogJyMyNjg0RkYnLFxuICBwcmltYXJ5NzU6ICcjNEM5QUZGJyxcbiAgcHJpbWFyeTUwOiAnI0IyRDRGRicsXG4gIHByaW1hcnkyNTogJyNERUVCRkYnLFxuICBkYW5nZXI6ICcjREUzNTBCJyxcbiAgZGFuZ2VyTGlnaHQ6ICcjRkZCREFEJyxcbiAgbmV1dHJhbDA6ICdoc2woMCwgMCUsIDEwMCUpJyxcbiAgbmV1dHJhbDU6ICdoc2woMCwgMCUsIDk1JSknLFxuICBuZXV0cmFsMTA6ICdoc2woMCwgMCUsIDkwJSknLFxuICBuZXV0cmFsMjA6ICdoc2woMCwgMCUsIDgwJSknLFxuICBuZXV0cmFsMzA6ICdoc2woMCwgMCUsIDcwJSknLFxuICBuZXV0cmFsNDA6ICdoc2woMCwgMCUsIDYwJSknLFxuICBuZXV0cmFsNTA6ICdoc2woMCwgMCUsIDUwJSknLFxuICBuZXV0cmFsNjA6ICdoc2woMCwgMCUsIDQwJSknLFxuICBuZXV0cmFsNzA6ICdoc2woMCwgMCUsIDMwJSknLFxuICBuZXV0cmFsODA6ICdoc2woMCwgMCUsIDIwJSknLFxuICBuZXV0cmFsOTA6ICdoc2woMCwgMCUsIDEwJSknXG59O1xudmFyIGJvcmRlclJhZGl1cyA9IDQ7XG52YXIgYmFzZVVuaXQgPSA0O1xuLyogVXNlZCB0byBjYWxjdWxhdGUgY29uc2lzdGVudCBtYXJnaW4vcGFkZGluZyBvbiBlbGVtZW50cyAqL1xuXG52YXIgY29udHJvbEhlaWdodCA9IDM4O1xuLyogVGhlIG1pbmltdW0gaGVpZ2h0IG9mIHRoZSBjb250cm9sICovXG5cbnZhciBtZW51R3V0dGVyID0gYmFzZVVuaXQgKiAyO1xuLyogVGhlIGFtb3VudCBvZiBzcGFjZSBiZXR3ZWVuIHRoZSBjb250cm9sIGFuZCBtZW51ICovXG5cbnZhciBzcGFjaW5nID0ge1xuICBiYXNlVW5pdDogYmFzZVVuaXQsXG4gIGNvbnRyb2xIZWlnaHQ6IGNvbnRyb2xIZWlnaHQsXG4gIG1lbnVHdXR0ZXI6IG1lbnVHdXR0ZXJcbn07XG52YXIgZGVmYXVsdFRoZW1lID0ge1xuICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgY29sb3JzOiBjb2xvcnMsXG4gIHNwYWNpbmc6IHNwYWNpbmdcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGJhY2tzcGFjZVJlbW92ZXNWYWx1ZTogdHJ1ZSxcbiAgYmx1cklucHV0T25TZWxlY3Q6IGlzVG91Y2hDYXBhYmxlKCksXG4gIGNhcHR1cmVNZW51U2Nyb2xsOiAhaXNUb3VjaENhcGFibGUoKSxcbiAgY2xvc2VNZW51T25TZWxlY3Q6IHRydWUsXG4gIGNsb3NlTWVudU9uU2Nyb2xsOiBmYWxzZSxcbiAgY29tcG9uZW50czoge30sXG4gIGNvbnRyb2xTaG91bGRSZW5kZXJWYWx1ZTogdHJ1ZSxcbiAgZXNjYXBlQ2xlYXJzVmFsdWU6IGZhbHNlLFxuICBmaWx0ZXJPcHRpb246IGNyZWF0ZUZpbHRlcigpLFxuICBmb3JtYXRHcm91cExhYmVsOiBmb3JtYXRHcm91cExhYmVsLFxuICBnZXRPcHRpb25MYWJlbDogZ2V0T3B0aW9uTGFiZWwsXG4gIGdldE9wdGlvblZhbHVlOiBnZXRPcHRpb25WYWx1ZSxcbiAgaXNEaXNhYmxlZDogZmFsc2UsXG4gIGlzTG9hZGluZzogZmFsc2UsXG4gIGlzTXVsdGk6IGZhbHNlLFxuICBpc1J0bDogZmFsc2UsXG4gIGlzU2VhcmNoYWJsZTogdHJ1ZSxcbiAgaXNPcHRpb25EaXNhYmxlZDogaXNPcHRpb25EaXNhYmxlZCxcbiAgbG9hZGluZ01lc3NhZ2U6IGZ1bmN0aW9uIGxvYWRpbmdNZXNzYWdlKCkge1xuICAgIHJldHVybiAnTG9hZGluZy4uLic7XG4gIH0sXG4gIG1heE1lbnVIZWlnaHQ6IDMwMCxcbiAgbWluTWVudUhlaWdodDogMTQwLFxuICBtZW51SXNPcGVuOiBmYWxzZSxcbiAgbWVudVBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1lbnVQb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbWVudVNob3VsZEJsb2NrU2Nyb2xsOiBmYWxzZSxcbiAgbWVudVNob3VsZFNjcm9sbEludG9WaWV3OiAhaXNNb2JpbGVEZXZpY2UoKSxcbiAgbm9PcHRpb25zTWVzc2FnZTogZnVuY3Rpb24gbm9PcHRpb25zTWVzc2FnZSgpIHtcbiAgICByZXR1cm4gJ05vIG9wdGlvbnMnO1xuICB9LFxuICBvcGVuTWVudU9uRm9jdXM6IGZhbHNlLFxuICBvcGVuTWVudU9uQ2xpY2s6IHRydWUsXG4gIG9wdGlvbnM6IFtdLFxuICBwYWdlU2l6ZTogNSxcbiAgcGxhY2Vob2xkZXI6ICdTZWxlY3QuLi4nLFxuICBzY3JlZW5SZWFkZXJTdGF0dXM6IGZ1bmN0aW9uIHNjcmVlblJlYWRlclN0YXR1cyhfcmVmKSB7XG4gICAgdmFyIGNvdW50ID0gX3JlZi5jb3VudDtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoY291bnQsIFwiIHJlc3VsdFwiKS5jb25jYXQoY291bnQgIT09IDEgPyAncycgOiAnJywgXCIgYXZhaWxhYmxlXCIpO1xuICB9LFxuICBzdHlsZXM6IHt9LFxuICB0YWJJbmRleDogJzAnLFxuICB0YWJTZWxlY3RzVmFsdWU6IHRydWVcbn07XG52YXIgaW5zdGFuY2VJZCA9IDE7XG5cbnZhciBTZWxlY3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNlbGVjdCwgX0NvbXBvbmVudCk7XG5cbiAgLy8gTWlzYy4gSW5zdGFuY2UgUHJvcGVydGllc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gVE9ET1xuICAvLyBSZWZzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBMaWZlY3ljbGVcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGZ1bmN0aW9uIFNlbGVjdChfcHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VsZWN0KTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFNlbGVjdCkuY2FsbCh0aGlzLCBfcHJvcHMpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBhcmlhTGl2ZVNlbGVjdGlvbjogJycsXG4gICAgICBhcmlhTGl2ZUNvbnRleHQ6ICcnLFxuICAgICAgZm9jdXNlZE9wdGlvbjogbnVsbCxcbiAgICAgIGZvY3VzZWRWYWx1ZTogbnVsbCxcbiAgICAgIGlucHV0SXNIaWRkZW46IGZhbHNlLFxuICAgICAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgICAgIG1lbnVPcHRpb25zOiB7XG4gICAgICAgIHJlbmRlcjogW10sXG4gICAgICAgIGZvY3VzYWJsZTogW11cbiAgICAgIH0sXG4gICAgICBzZWxlY3RWYWx1ZTogW11cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJibG9ja09wdGlvbkhvdmVyXCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJpc0NvbXBvc2luZ1wiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiY2xlYXJGb2N1c1ZhbHVlT25VcGRhdGVcIiwgZmFsc2UpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImNvbW1vblByb3BzXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiY29tcG9uZW50c1wiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImhhc0dyb3Vwc1wiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaW5pdGlhbFRvdWNoWFwiLCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJpbml0aWFsVG91Y2hZXCIsIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImluc3RhbmNlUHJlZml4XCIsICcnKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvcGVuQWZ0ZXJGb2N1c1wiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2Nyb2xsVG9Gb2N1c2VkT3B0aW9uT25VcGRhdGVcIiwgZmFsc2UpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInVzZXJJc0RyYWdnaW5nXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiY29udHJvbFJlZlwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRDb250cm9sUmVmXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLmNvbnRyb2xSZWYgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZm9jdXNlZE9wdGlvblJlZlwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRGb2N1c2VkT3B0aW9uUmVmXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLmZvY3VzZWRPcHRpb25SZWYgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwibWVudUxpc3RSZWZcIiwgbnVsbCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0TWVudUxpc3RSZWZcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMubWVudUxpc3RSZWYgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaW5wdXRSZWZcIiwgbnVsbCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0SW5wdXRSZWZcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMuaW5wdXRSZWYgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiY2FjaGVDb21wb25lbnRzXCIsIGZ1bmN0aW9uIChjb21wb25lbnRzJCQxKSB7XG4gICAgICBfdGhpcy5jb21wb25lbnRzID0gZGVmYXVsdENvbXBvbmVudHMoe1xuICAgICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzJCQxXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJmb2N1c1wiLCBfdGhpcy5mb2N1c0lucHV0KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJibHVyXCIsIF90aGlzLmJsdXJJbnB1dCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25DaGFuZ2VcIiwgZnVuY3Rpb24gKG5ld1ZhbHVlLCBhY3Rpb25NZXRhKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkNoYW5nZSA9IF90aGlzJHByb3BzLm9uQ2hhbmdlLFxuICAgICAgICAgIG5hbWUgPSBfdGhpcyRwcm9wcy5uYW1lO1xuICAgICAgb25DaGFuZ2UobmV3VmFsdWUsIF9vYmplY3RTcHJlYWQoe30sIGFjdGlvbk1ldGEsIHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInNldFZhbHVlXCIsIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3NldC12YWx1ZSc7XG4gICAgICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2xvc2VNZW51T25TZWxlY3QgPSBfdGhpcyRwcm9wczIuY2xvc2VNZW51T25TZWxlY3QsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzMi5pc011bHRpO1xuXG4gICAgICBfdGhpcy5vbklucHV0Q2hhbmdlKCcnLCB7XG4gICAgICAgIGFjdGlvbjogJ3NldC12YWx1ZSdcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY2xvc2VNZW51T25TZWxlY3QpIHtcbiAgICAgICAgX3RoaXMuaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlID0gIWlzTXVsdGk7XG5cbiAgICAgICAgX3RoaXMub25NZW51Q2xvc2UoKTtcbiAgICAgIH0gLy8gd2hlbiB0aGUgc2VsZWN0IHZhbHVlIHNob3VsZCBjaGFuZ2UsIHdlIHNob3VsZCByZXNldCBmb2N1c2VkVmFsdWVcblxuXG4gICAgICBfdGhpcy5jbGVhckZvY3VzVmFsdWVPblVwZGF0ZSA9IHRydWU7XG5cbiAgICAgIF90aGlzLm9uQ2hhbmdlKG5ld1ZhbHVlLCB7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBvcHRpb246IG9wdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2VsZWN0T3B0aW9uXCIsIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJsdXJJbnB1dE9uU2VsZWN0ID0gX3RoaXMkcHJvcHMzLmJsdXJJbnB1dE9uU2VsZWN0LFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczMuaXNNdWx0aTtcbiAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IF90aGlzLnN0YXRlLnNlbGVjdFZhbHVlO1xuXG4gICAgICBpZiAoaXNNdWx0aSkge1xuICAgICAgICBpZiAoX3RoaXMuaXNPcHRpb25TZWxlY3RlZChuZXdWYWx1ZSwgc2VsZWN0VmFsdWUpKSB7XG4gICAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IF90aGlzLmdldE9wdGlvblZhbHVlKG5ld1ZhbHVlKTtcblxuICAgICAgICAgIF90aGlzLnNldFZhbHVlKHNlbGVjdFZhbHVlLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmdldE9wdGlvblZhbHVlKGkpICE9PSBjYW5kaWRhdGU7XG4gICAgICAgICAgfSksICdkZXNlbGVjdC1vcHRpb24nLCBuZXdWYWx1ZSk7XG5cbiAgICAgICAgICBfdGhpcy5hbm5vdW5jZUFyaWFMaXZlU2VsZWN0aW9uKHtcbiAgICAgICAgICAgIGV2ZW50OiAnZGVzZWxlY3Qtb3B0aW9uJyxcbiAgICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmdldE9wdGlvbkxhYmVsKG5ld1ZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghX3RoaXMuaXNPcHRpb25EaXNhYmxlZChuZXdWYWx1ZSwgc2VsZWN0VmFsdWUpKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRWYWx1ZShbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHNlbGVjdFZhbHVlKSwgW25ld1ZhbHVlXSksICdzZWxlY3Qtb3B0aW9uJywgbmV3VmFsdWUpO1xuXG4gICAgICAgICAgICBfdGhpcy5hbm5vdW5jZUFyaWFMaXZlU2VsZWN0aW9uKHtcbiAgICAgICAgICAgICAgZXZlbnQ6ICdzZWxlY3Qtb3B0aW9uJyxcbiAgICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5nZXRPcHRpb25MYWJlbChuZXdWYWx1ZSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGFubm91bmNlIHRoYXQgb3B0aW9uIGlzIGRpc2FibGVkXG4gICAgICAgICAgICBfdGhpcy5hbm5vdW5jZUFyaWFMaXZlU2VsZWN0aW9uKHtcbiAgICAgICAgICAgICAgZXZlbnQ6ICdzZWxlY3Qtb3B0aW9uJyxcbiAgICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5nZXRPcHRpb25MYWJlbChuZXdWYWx1ZSksXG4gICAgICAgICAgICAgICAgaXNEaXNhYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghX3RoaXMuaXNPcHRpb25EaXNhYmxlZChuZXdWYWx1ZSwgc2VsZWN0VmFsdWUpKSB7XG4gICAgICAgICAgX3RoaXMuc2V0VmFsdWUobmV3VmFsdWUsICdzZWxlY3Qtb3B0aW9uJyk7XG5cbiAgICAgICAgICBfdGhpcy5hbm5vdW5jZUFyaWFMaXZlU2VsZWN0aW9uKHtcbiAgICAgICAgICAgIGV2ZW50OiAnc2VsZWN0LW9wdGlvbicsXG4gICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5nZXRPcHRpb25MYWJlbChuZXdWYWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBhbm5vdW5jZSB0aGF0IG9wdGlvbiBpcyBkaXNhYmxlZFxuICAgICAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICAgICAgZXZlbnQ6ICdzZWxlY3Qtb3B0aW9uJyxcbiAgICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmdldE9wdGlvbkxhYmVsKG5ld1ZhbHVlKSxcbiAgICAgICAgICAgICAgaXNEaXNhYmxlZDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChibHVySW5wdXRPblNlbGVjdCkge1xuICAgICAgICBfdGhpcy5ibHVySW5wdXQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJyZW1vdmVWYWx1ZVwiLCBmdW5jdGlvbiAocmVtb3ZlZFZhbHVlKSB7XG4gICAgICB2YXIgc2VsZWN0VmFsdWUgPSBfdGhpcy5zdGF0ZS5zZWxlY3RWYWx1ZTtcblxuICAgICAgdmFyIGNhbmRpZGF0ZSA9IF90aGlzLmdldE9wdGlvblZhbHVlKHJlbW92ZWRWYWx1ZSk7XG5cbiAgICAgIF90aGlzLm9uQ2hhbmdlKHNlbGVjdFZhbHVlLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuZ2V0T3B0aW9uVmFsdWUoaSkgIT09IGNhbmRpZGF0ZTtcbiAgICAgIH0pLCB7XG4gICAgICAgIGFjdGlvbjogJ3JlbW92ZS12YWx1ZScsXG4gICAgICAgIHJlbW92ZWRWYWx1ZTogcmVtb3ZlZFZhbHVlXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMuYW5ub3VuY2VBcmlhTGl2ZVNlbGVjdGlvbih7XG4gICAgICAgIGV2ZW50OiAncmVtb3ZlLXZhbHVlJyxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIHZhbHVlOiByZW1vdmVkVmFsdWUgPyBfdGhpcy5nZXRPcHRpb25MYWJlbChyZW1vdmVkVmFsdWUpIDogJydcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLmZvY3VzSW5wdXQoKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJjbGVhclZhbHVlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpc011bHRpID0gX3RoaXMucHJvcHMuaXNNdWx0aTtcblxuICAgICAgX3RoaXMub25DaGFuZ2UoaXNNdWx0aSA/IFtdIDogbnVsbCwge1xuICAgICAgICBhY3Rpb246ICdjbGVhcidcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInBvcFZhbHVlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IF90aGlzLnN0YXRlLnNlbGVjdFZhbHVlO1xuICAgICAgdmFyIGxhc3RTZWxlY3RlZFZhbHVlID0gc2VsZWN0VmFsdWVbc2VsZWN0VmFsdWUubGVuZ3RoIC0gMV07XG5cbiAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICBldmVudDogJ3BvcC12YWx1ZScsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICB2YWx1ZTogbGFzdFNlbGVjdGVkVmFsdWUgPyBfdGhpcy5nZXRPcHRpb25MYWJlbChsYXN0U2VsZWN0ZWRWYWx1ZSkgOiAnJ1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMub25DaGFuZ2Uoc2VsZWN0VmFsdWUuc2xpY2UoMCwgc2VsZWN0VmFsdWUubGVuZ3RoIC0gMSksIHtcbiAgICAgICAgYWN0aW9uOiAncG9wLXZhbHVlJyxcbiAgICAgICAgcmVtb3ZlZFZhbHVlOiBsYXN0U2VsZWN0ZWRWYWx1ZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0T3B0aW9uTGFiZWxcIiwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5nZXRPcHRpb25MYWJlbChkYXRhKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRPcHRpb25WYWx1ZVwiLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmdldE9wdGlvblZhbHVlKGRhdGEpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldFN0eWxlc1wiLCBmdW5jdGlvbiAoa2V5LCBwcm9wcykge1xuICAgICAgdmFyIGJhc2UgPSBkZWZhdWx0U3R5bGVzW2tleV0ocHJvcHMpO1xuICAgICAgYmFzZS5ib3hTaXppbmcgPSAnYm9yZGVyLWJveCc7XG4gICAgICB2YXIgY3VzdG9tID0gX3RoaXMucHJvcHMuc3R5bGVzW2tleV07XG4gICAgICByZXR1cm4gY3VzdG9tID8gY3VzdG9tKGJhc2UsIHByb3BzKSA6IGJhc2U7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0RWxlbWVudElkXCIsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoX3RoaXMuaW5zdGFuY2VQcmVmaXgsIFwiLVwiKS5jb25jYXQoZWxlbWVudCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0QWN0aXZlRGVzY2VuZGVudElkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBtZW51SXNPcGVuID0gX3RoaXMucHJvcHMubWVudUlzT3BlbjtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIG1lbnVPcHRpb25zID0gX3RoaXMkc3RhdGUubWVudU9wdGlvbnMsXG4gICAgICAgICAgZm9jdXNlZE9wdGlvbiA9IF90aGlzJHN0YXRlLmZvY3VzZWRPcHRpb247XG4gICAgICBpZiAoIWZvY3VzZWRPcHRpb24gfHwgIW1lbnVJc09wZW4pIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB2YXIgaW5kZXggPSBtZW51T3B0aW9ucy5mb2N1c2FibGUuaW5kZXhPZihmb2N1c2VkT3B0aW9uKTtcbiAgICAgIHZhciBvcHRpb24gPSBtZW51T3B0aW9ucy5yZW5kZXJbaW5kZXhdO1xuICAgICAgcmV0dXJuIG9wdGlvbiAmJiBvcHRpb24ua2V5O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb25cIiwgZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgZXZlbnQgPSBfcmVmMi5ldmVudCxcbiAgICAgICAgICBjb250ZXh0ID0gX3JlZjIuY29udGV4dDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhcmlhTGl2ZVNlbGVjdGlvbjogdmFsdWVFdmVudEFyaWFNZXNzYWdlKGV2ZW50LCBjb250ZXh0KVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiYW5ub3VuY2VBcmlhTGl2ZUNvbnRleHRcIiwgZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgZXZlbnQgPSBfcmVmMy5ldmVudCxcbiAgICAgICAgICBjb250ZXh0ID0gX3JlZjMuY29udGV4dDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhcmlhTGl2ZUNvbnRleHQ6IGluc3RydWN0aW9uc0FyaWFNZXNzYWdlKGV2ZW50LCBfb2JqZWN0U3ByZWFkKHt9LCBjb250ZXh0LCB7XG4gICAgICAgICAgbGFiZWw6IF90aGlzLnByb3BzWydhcmlhLWxhYmVsJ11cbiAgICAgICAgfSkpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbk1lbnVNb3VzZURvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBfdGhpcy5mb2N1c0lucHV0KCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25NZW51TW91c2VNb3ZlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuYmxvY2tPcHRpb25Ib3ZlciA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uQ29udHJvbE1vdXNlRG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBvcGVuTWVudU9uQ2xpY2sgPSBfdGhpcy5wcm9wcy5vcGVuTWVudU9uQ2xpY2s7XG5cbiAgICAgIGlmICghX3RoaXMuc3RhdGUuaXNGb2N1c2VkKSB7XG4gICAgICAgIGlmIChvcGVuTWVudU9uQ2xpY2spIHtcbiAgICAgICAgICBfdGhpcy5vcGVuQWZ0ZXJGb2N1cyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5mb2N1c0lucHV0KCk7XG4gICAgICB9IGVsc2UgaWYgKCFfdGhpcy5wcm9wcy5tZW51SXNPcGVuKSB7XG4gICAgICAgIGlmIChvcGVuTWVudU9uQ2xpY2spIHtcbiAgICAgICAgICBfdGhpcy5vcGVuTWVudSgnZmlyc3QnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8kRmxvd0ZpeE1lXG4gICAgICAgIGlmIChldmVudC50YXJnZXQudGFnTmFtZSAhPT0gJ0lOUFVUJykge1xuICAgICAgICAgIF90aGlzLm9uTWVudUNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8kRmxvd0ZpeE1lXG5cblxuICAgICAgaWYgKGV2ZW50LnRhcmdldC50YWdOYW1lICE9PSAnSU5QVVQnKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Ecm9wZG93bkluZGljYXRvck1vdXNlRG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIGlnbm9yZSBtb3VzZSBldmVudHMgdGhhdCB3ZXJlbid0IHRyaWdnZXJlZCBieSB0aGUgcHJpbWFyeSBidXR0b25cbiAgICAgIGlmIChldmVudCAmJiBldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuaXNEaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczQuaXNNdWx0aSxcbiAgICAgICAgICBtZW51SXNPcGVuID0gX3RoaXMkcHJvcHM0Lm1lbnVJc09wZW47XG5cbiAgICAgIF90aGlzLmZvY3VzSW5wdXQoKTtcblxuICAgICAgaWYgKG1lbnVJc09wZW4pIHtcbiAgICAgICAgX3RoaXMuaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlID0gIWlzTXVsdGk7XG5cbiAgICAgICAgX3RoaXMub25NZW51Q2xvc2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLm9wZW5NZW51KCdmaXJzdCcpO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25DbGVhckluZGljYXRvck1vdXNlRG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIGlnbm9yZSBtb3VzZSBldmVudHMgdGhhdCB3ZXJlbid0IHRyaWdnZXJlZCBieSB0aGUgcHJpbWFyeSBidXR0b25cbiAgICAgIGlmIChldmVudCAmJiBldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jbGVhclZhbHVlKCk7XG5cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgX3RoaXMub3BlbkFmdGVyRm9jdXMgPSBmYWxzZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuZm9jdXNJbnB1dCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25TY3JvbGxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAodHlwZW9mIF90aGlzLnByb3BzLmNsb3NlTWVudU9uU2Nyb2xsID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIGlzRG9jdW1lbnRFbGVtZW50KGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbk1lbnVDbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBfdGhpcy5wcm9wcy5jbG9zZU1lbnVPblNjcm9sbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMuY2xvc2VNZW51T25TY3JvbGwoZXZlbnQpKSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25NZW51Q2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uQ29tcG9zaXRpb25TdGFydFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5pc0NvbXBvc2luZyA9IHRydWU7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Db21wb3NpdGlvbkVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5pc0NvbXBvc2luZyA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uVG91Y2hTdGFydFwiLCBmdW5jdGlvbiAoX3JlZjQpIHtcbiAgICAgIHZhciB0b3VjaGVzID0gX3JlZjQudG91Y2hlcztcbiAgICAgIHZhciB0b3VjaCA9IHRvdWNoZXMuaXRlbSgwKTtcblxuICAgICAgaWYgKCF0b3VjaCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmluaXRpYWxUb3VjaFggPSB0b3VjaC5jbGllbnRYO1xuICAgICAgX3RoaXMuaW5pdGlhbFRvdWNoWSA9IHRvdWNoLmNsaWVudFk7XG4gICAgICBfdGhpcy51c2VySXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uVG91Y2hNb3ZlXCIsIGZ1bmN0aW9uIChfcmVmNSkge1xuICAgICAgdmFyIHRvdWNoZXMgPSBfcmVmNS50b3VjaGVzO1xuICAgICAgdmFyIHRvdWNoID0gdG91Y2hlcy5pdGVtKDApO1xuXG4gICAgICBpZiAoIXRvdWNoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlbHRhWCA9IE1hdGguYWJzKHRvdWNoLmNsaWVudFggLSBfdGhpcy5pbml0aWFsVG91Y2hYKTtcbiAgICAgIHZhciBkZWx0YVkgPSBNYXRoLmFicyh0b3VjaC5jbGllbnRZIC0gX3RoaXMuaW5pdGlhbFRvdWNoWSk7XG4gICAgICB2YXIgbW92ZVRocmVzaG9sZCA9IDU7XG4gICAgICBfdGhpcy51c2VySXNEcmFnZ2luZyA9IGRlbHRhWCA+IG1vdmVUaHJlc2hvbGQgfHwgZGVsdGFZID4gbW92ZVRocmVzaG9sZDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvblRvdWNoRW5kXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnVzZXJJc0RyYWdnaW5nKSByZXR1cm47IC8vIGNsb3NlIHRoZSBtZW51IGlmIHRoZSB1c2VyIHRhcHMgb3V0c2lkZVxuICAgICAgLy8gd2UncmUgY2hlY2tpbmcgb24gZXZlbnQudGFyZ2V0IGhlcmUgaW5zdGVhZCBvZiBldmVudC5jdXJyZW50VGFyZ2V0LCBiZWNhdXNlIHdlIHdhbnQgdG8gYXNzZXJ0IGluZm9ybWF0aW9uXG4gICAgICAvLyBvbiBldmVudHMgb24gY2hpbGQgZWxlbWVudHMsIG5vdCB0aGUgZG9jdW1lbnQgKHdoaWNoIHdlJ3ZlIGF0dGFjaGVkIHRoaXMgaGFuZGxlciB0bykuXG5cbiAgICAgIGlmIChfdGhpcy5jb250cm9sUmVmICYmICFfdGhpcy5jb250cm9sUmVmLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgX3RoaXMubWVudUxpc3RSZWYgJiYgIV90aGlzLm1lbnVMaXN0UmVmLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgX3RoaXMuYmx1cklucHV0KCk7XG4gICAgICB9IC8vIHJlc2V0IG1vdmUgdmFyc1xuXG5cbiAgICAgIF90aGlzLmluaXRpYWxUb3VjaFggPSAwO1xuICAgICAgX3RoaXMuaW5pdGlhbFRvdWNoWSA9IDA7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Db250cm9sVG91Y2hFbmRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMudXNlcklzRHJhZ2dpbmcpIHJldHVybjtcblxuICAgICAgX3RoaXMub25Db250cm9sTW91c2VEb3duKGV2ZW50KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkNsZWFySW5kaWNhdG9yVG91Y2hFbmRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMudXNlcklzRHJhZ2dpbmcpIHJldHVybjtcblxuICAgICAgX3RoaXMub25DbGVhckluZGljYXRvck1vdXNlRG93bihldmVudCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Ecm9wZG93bkluZGljYXRvclRvdWNoRW5kXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnVzZXJJc0RyYWdnaW5nKSByZXR1cm47XG5cbiAgICAgIF90aGlzLm9uRHJvcGRvd25JbmRpY2F0b3JNb3VzZURvd24oZXZlbnQpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImhhbmRsZUlucHV0Q2hhbmdlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGlucHV0VmFsdWUgPSBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlO1xuICAgICAgX3RoaXMuaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgIF90aGlzLm9uSW5wdXRDaGFuZ2UoaW5wdXRWYWx1ZSwge1xuICAgICAgICBhY3Rpb246ICdpbnB1dC1jaGFuZ2UnXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMub25NZW51T3BlbigpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uSW5wdXRGb2N1c1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczUgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc1NlYXJjaGFibGUgPSBfdGhpcyRwcm9wczUuaXNTZWFyY2hhYmxlLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczUuaXNNdWx0aTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRm9jdXMpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Gb2N1cyhldmVudCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICBfdGhpcy5hbm5vdW5jZUFyaWFMaXZlQ29udGV4dCh7XG4gICAgICAgIGV2ZW50OiAnaW5wdXQnLFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgaXNTZWFyY2hhYmxlOiBpc1NlYXJjaGFibGUsXG4gICAgICAgICAgaXNNdWx0aTogaXNNdWx0aVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0ZvY3VzZWQ6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMub3BlbkFmdGVyRm9jdXMgfHwgX3RoaXMucHJvcHMub3Blbk1lbnVPbkZvY3VzKSB7XG4gICAgICAgIF90aGlzLm9wZW5NZW51KCdmaXJzdCcpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5vcGVuQWZ0ZXJGb2N1cyA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uSW5wdXRCbHVyXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLm1lbnVMaXN0UmVmICYmIF90aGlzLm1lbnVMaXN0UmVmLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIF90aGlzLmlucHV0UmVmLmZvY3VzKCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25CbHVyKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQmx1cihldmVudCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLm9uSW5wdXRDaGFuZ2UoJycsIHtcbiAgICAgICAgYWN0aW9uOiAnaW5wdXQtYmx1cidcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5vbk1lbnVDbG9zZSgpO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWRWYWx1ZTogbnVsbCxcbiAgICAgICAgaXNGb2N1c2VkOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25PcHRpb25Ib3ZlclwiLCBmdW5jdGlvbiAoZm9jdXNlZE9wdGlvbikge1xuICAgICAgaWYgKF90aGlzLmJsb2NrT3B0aW9uSG92ZXIgfHwgX3RoaXMuc3RhdGUuZm9jdXNlZE9wdGlvbiA9PT0gZm9jdXNlZE9wdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZE9wdGlvbjogZm9jdXNlZE9wdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2hvdWxkSGlkZVNlbGVjdGVkT3B0aW9uc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM2ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgaGlkZVNlbGVjdGVkT3B0aW9ucyA9IF90aGlzJHByb3BzNi5oaWRlU2VsZWN0ZWRPcHRpb25zLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczYuaXNNdWx0aTtcbiAgICAgIGlmIChoaWRlU2VsZWN0ZWRPcHRpb25zID09PSB1bmRlZmluZWQpIHJldHVybiBpc011bHRpO1xuICAgICAgcmV0dXJuIGhpZGVTZWxlY3RlZE9wdGlvbnM7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25LZXlEb3duXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczcuaXNNdWx0aSxcbiAgICAgICAgICBiYWNrc3BhY2VSZW1vdmVzVmFsdWUgPSBfdGhpcyRwcm9wczcuYmFja3NwYWNlUmVtb3Zlc1ZhbHVlLFxuICAgICAgICAgIGVzY2FwZUNsZWFyc1ZhbHVlID0gX3RoaXMkcHJvcHM3LmVzY2FwZUNsZWFyc1ZhbHVlLFxuICAgICAgICAgIGlucHV0VmFsdWUgPSBfdGhpcyRwcm9wczcuaW5wdXRWYWx1ZSxcbiAgICAgICAgICBpc0NsZWFyYWJsZSA9IF90aGlzJHByb3BzNy5pc0NsZWFyYWJsZSxcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHM3LmlzRGlzYWJsZWQsXG4gICAgICAgICAgbWVudUlzT3BlbiA9IF90aGlzJHByb3BzNy5tZW51SXNPcGVuLFxuICAgICAgICAgIG9uS2V5RG93biA9IF90aGlzJHByb3BzNy5vbktleURvd24sXG4gICAgICAgICAgdGFiU2VsZWN0c1ZhbHVlID0gX3RoaXMkcHJvcHM3LnRhYlNlbGVjdHNWYWx1ZSxcbiAgICAgICAgICBvcGVuTWVudU9uRm9jdXMgPSBfdGhpcyRwcm9wczcub3Blbk1lbnVPbkZvY3VzO1xuICAgICAgdmFyIF90aGlzJHN0YXRlMiA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIGZvY3VzZWRPcHRpb24gPSBfdGhpcyRzdGF0ZTIuZm9jdXNlZE9wdGlvbixcbiAgICAgICAgICBmb2N1c2VkVmFsdWUgPSBfdGhpcyRzdGF0ZTIuZm9jdXNlZFZhbHVlLFxuICAgICAgICAgIHNlbGVjdFZhbHVlID0gX3RoaXMkc3RhdGUyLnNlbGVjdFZhbHVlO1xuICAgICAgaWYgKGlzRGlzYWJsZWQpIHJldHVybjtcblxuICAgICAgaWYgKHR5cGVvZiBvbktleURvd24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb25LZXlEb3duKGV2ZW50KTtcblxuICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSAvLyBCbG9jayBvcHRpb24gaG92ZXIgZXZlbnRzIHdoZW4gdGhlIHVzZXIgaGFzIGp1c3QgcHJlc3NlZCBhIGtleVxuXG5cbiAgICAgIF90aGlzLmJsb2NrT3B0aW9uSG92ZXIgPSB0cnVlO1xuXG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICAgIGlmICghaXNNdWx0aSB8fCBpbnB1dFZhbHVlKSByZXR1cm47XG5cbiAgICAgICAgICBfdGhpcy5mb2N1c1ZhbHVlKCdwcmV2aW91cycpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgICAgaWYgKCFpc011bHRpIHx8IGlucHV0VmFsdWUpIHJldHVybjtcblxuICAgICAgICAgIF90aGlzLmZvY3VzVmFsdWUoJ25leHQnKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0RlbGV0ZSc6XG4gICAgICAgIGNhc2UgJ0JhY2tzcGFjZSc6XG4gICAgICAgICAgaWYgKGlucHV0VmFsdWUpIHJldHVybjtcblxuICAgICAgICAgIGlmIChmb2N1c2VkVmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzLnJlbW92ZVZhbHVlKGZvY3VzZWRWYWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghYmFja3NwYWNlUmVtb3Zlc1ZhbHVlKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChpc011bHRpKSB7XG4gICAgICAgICAgICAgIF90aGlzLnBvcFZhbHVlKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQ2xlYXJhYmxlKSB7XG4gICAgICAgICAgICAgIF90aGlzLmNsZWFyVmFsdWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdUYWInOlxuICAgICAgICAgIGlmIChfdGhpcy5pc0NvbXBvc2luZykgcmV0dXJuO1xuXG4gICAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5IHx8ICFtZW51SXNPcGVuIHx8ICF0YWJTZWxlY3RzVmFsdWUgfHwgIWZvY3VzZWRPcHRpb24gfHwgLy8gZG9uJ3QgY2FwdHVyZSB0aGUgZXZlbnQgaWYgdGhlIG1lbnUgb3BlbnMgb24gZm9jdXMgYW5kIHRoZSBmb2N1c2VkXG4gICAgICAgICAgLy8gb3B0aW9uIGlzIGFscmVhZHkgc2VsZWN0ZWQ7IGl0IGJyZWFrcyB0aGUgZmxvdyBvZiBuYXZpZ2F0aW9uXG4gICAgICAgICAgb3Blbk1lbnVPbkZvY3VzICYmIF90aGlzLmlzT3B0aW9uU2VsZWN0ZWQoZm9jdXNlZE9wdGlvbiwgc2VsZWN0VmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMuc2VsZWN0T3B0aW9uKGZvY3VzZWRPcHRpb24pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAyMjkpIHtcbiAgICAgICAgICAgIC8vIGlnbm9yZSB0aGUga2V5ZG93biBldmVudCBmcm9tIGFuIElucHV0IE1ldGhvZCBFZGl0b3IoSU1FKVxuICAgICAgICAgICAgLy8gcmVmLiBodHRwczovL3d3dy53My5vcmcvVFIvdWlldmVudHMvI2RldGVybWluZS1rZXlkb3duLWtleXVwLWtleUNvZGVcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtZW51SXNPcGVuKSB7XG4gICAgICAgICAgICBpZiAoIWZvY3VzZWRPcHRpb24pIHJldHVybjtcbiAgICAgICAgICAgIGlmIChfdGhpcy5pc0NvbXBvc2luZykgcmV0dXJuO1xuXG4gICAgICAgICAgICBfdGhpcy5zZWxlY3RPcHRpb24oZm9jdXNlZE9wdGlvbik7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICAgIGlmIChtZW51SXNPcGVuKSB7XG4gICAgICAgICAgICBfdGhpcy5pbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICAgICAgX3RoaXMub25JbnB1dENoYW5nZSgnJywge1xuICAgICAgICAgICAgICBhY3Rpb246ICdtZW51LWNsb3NlJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF90aGlzLm9uTWVudUNsb3NlKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0NsZWFyYWJsZSAmJiBlc2NhcGVDbGVhcnNWYWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMuY2xlYXJWYWx1ZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJyAnOlxuICAgICAgICAgIC8vIHNwYWNlXG4gICAgICAgICAgaWYgKGlucHV0VmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIW1lbnVJc09wZW4pIHtcbiAgICAgICAgICAgIF90aGlzLm9wZW5NZW51KCdmaXJzdCcpO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWZvY3VzZWRPcHRpb24pIHJldHVybjtcblxuICAgICAgICAgIF90aGlzLnNlbGVjdE9wdGlvbihmb2N1c2VkT3B0aW9uKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgIGlmIChtZW51SXNPcGVuKSB7XG4gICAgICAgICAgICBfdGhpcy5mb2N1c09wdGlvbigndXAnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMub3Blbk1lbnUoJ2xhc3QnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgIGlmIChtZW51SXNPcGVuKSB7XG4gICAgICAgICAgICBfdGhpcy5mb2N1c09wdGlvbignZG93bicpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5vcGVuTWVudSgnZmlyc3QnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdQYWdlVXAnOlxuICAgICAgICAgIGlmICghbWVudUlzT3BlbikgcmV0dXJuO1xuXG4gICAgICAgICAgX3RoaXMuZm9jdXNPcHRpb24oJ3BhZ2V1cCcpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnUGFnZURvd24nOlxuICAgICAgICAgIGlmICghbWVudUlzT3BlbikgcmV0dXJuO1xuXG4gICAgICAgICAgX3RoaXMuZm9jdXNPcHRpb24oJ3BhZ2Vkb3duJyk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdIb21lJzpcbiAgICAgICAgICBpZiAoIW1lbnVJc09wZW4pIHJldHVybjtcblxuICAgICAgICAgIF90aGlzLmZvY3VzT3B0aW9uKCdmaXJzdCcpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnRW5kJzpcbiAgICAgICAgICBpZiAoIW1lbnVJc09wZW4pIHJldHVybjtcblxuICAgICAgICAgIF90aGlzLmZvY3VzT3B0aW9uKCdsYXN0Jyk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcblxuICAgIHZhciB2YWx1ZSA9IF9wcm9wcy52YWx1ZTtcbiAgICBfdGhpcy5jYWNoZUNvbXBvbmVudHMgPSBtZW1vaXplT25lKF90aGlzLmNhY2hlQ29tcG9uZW50cywgZXhwb3J0ZWRFcXVhbCkuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG5cbiAgICBfdGhpcy5jYWNoZUNvbXBvbmVudHMoX3Byb3BzLmNvbXBvbmVudHMpO1xuXG4gICAgX3RoaXMuaW5zdGFuY2VQcmVmaXggPSAncmVhY3Qtc2VsZWN0LScgKyAoX3RoaXMucHJvcHMuaW5zdGFuY2VJZCB8fCArK2luc3RhbmNlSWQpO1xuXG4gICAgdmFyIF9zZWxlY3RWYWx1ZSA9IGNsZWFuVmFsdWUodmFsdWUpO1xuXG4gICAgdmFyIF9tZW51T3B0aW9ucyA9IF90aGlzLmJ1aWxkTWVudU9wdGlvbnMoX3Byb3BzLCBfc2VsZWN0VmFsdWUpO1xuXG4gICAgX3RoaXMuc3RhdGUubWVudU9wdGlvbnMgPSBfbWVudU9wdGlvbnM7XG4gICAgX3RoaXMuc3RhdGUuc2VsZWN0VmFsdWUgPSBfc2VsZWN0VmFsdWU7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNlbGVjdCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnN0YXJ0TGlzdGVuaW5nQ29tcG9zaXRpb24oKTtcbiAgICAgIHRoaXMuc3RhcnRMaXN0ZW5pbmdUb1RvdWNoKCk7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmNsb3NlTWVudU9uU2Nyb2xsICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgLy8gTGlzdGVuIHRvIGFsbCBzY3JvbGwgZXZlbnRzLCBhbmQgZmlsdGVyIHRoZW0gb3V0IGluc2lkZSBvZiAnb25TY3JvbGwnXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgICAgdGhpcy5mb2N1c0lucHV0KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczggPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG9wdGlvbnMgPSBfdGhpcyRwcm9wczgub3B0aW9ucyxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzOC52YWx1ZSxcbiAgICAgICAgICBpbnB1dFZhbHVlID0gX3RoaXMkcHJvcHM4LmlucHV0VmFsdWU7IC8vIHJlLWNhY2hlIGN1c3RvbSBjb21wb25lbnRzXG5cbiAgICAgIHRoaXMuY2FjaGVDb21wb25lbnRzKG5leHRQcm9wcy5jb21wb25lbnRzKTsgLy8gcmVidWlsZCB0aGUgbWVudSBvcHRpb25zXG5cbiAgICAgIGlmIChuZXh0UHJvcHMudmFsdWUgIT09IHZhbHVlIHx8IG5leHRQcm9wcy5vcHRpb25zICE9PSBvcHRpb25zIHx8IG5leHRQcm9wcy5pbnB1dFZhbHVlICE9PSBpbnB1dFZhbHVlKSB7XG4gICAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IGNsZWFuVmFsdWUobmV4dFByb3BzLnZhbHVlKTtcbiAgICAgICAgdmFyIG1lbnVPcHRpb25zID0gdGhpcy5idWlsZE1lbnVPcHRpb25zKG5leHRQcm9wcywgc2VsZWN0VmFsdWUpO1xuICAgICAgICB2YXIgZm9jdXNlZFZhbHVlID0gdGhpcy5nZXROZXh0Rm9jdXNlZFZhbHVlKHNlbGVjdFZhbHVlKTtcbiAgICAgICAgdmFyIGZvY3VzZWRPcHRpb24gPSB0aGlzLmdldE5leHRGb2N1c2VkT3B0aW9uKG1lbnVPcHRpb25zLmZvY3VzYWJsZSk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG1lbnVPcHRpb25zOiBtZW51T3B0aW9ucyxcbiAgICAgICAgICBzZWxlY3RWYWx1ZTogc2VsZWN0VmFsdWUsXG4gICAgICAgICAgZm9jdXNlZE9wdGlvbjogZm9jdXNlZE9wdGlvbixcbiAgICAgICAgICBmb2N1c2VkVmFsdWU6IGZvY3VzZWRWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gLy8gc29tZSB1cGRhdGVzIHNob3VsZCB0b2dnbGUgdGhlIHN0YXRlIG9mIHRoZSBpbnB1dCB2aXNpYmlsaXR5XG5cblxuICAgICAgaWYgKHRoaXMuaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaW5wdXRJc0hpZGRlbjogdGhpcy5pbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGVcbiAgICAgICAgfSk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczkgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlzRGlzYWJsZWQgPSBfdGhpcyRwcm9wczkuaXNEaXNhYmxlZCxcbiAgICAgICAgICBtZW51SXNPcGVuID0gX3RoaXMkcHJvcHM5Lm1lbnVJc09wZW47XG4gICAgICB2YXIgaXNGb2N1c2VkID0gdGhpcy5zdGF0ZS5pc0ZvY3VzZWQ7XG5cbiAgICAgIGlmICggLy8gZW5zdXJlIGZvY3VzIGlzIHJlc3RvcmVkIGNvcnJlY3RseSB3aGVuIHRoZSBjb250cm9sIGJlY29tZXMgZW5hYmxlZFxuICAgICAgaXNGb2N1c2VkICYmICFpc0Rpc2FibGVkICYmIHByZXZQcm9wcy5pc0Rpc2FibGVkIHx8IC8vIGVuc3VyZSBmb2N1cyBpcyBvbiB0aGUgSW5wdXQgd2hlbiB0aGUgbWVudSBvcGVuc1xuICAgICAgaXNGb2N1c2VkICYmIG1lbnVJc09wZW4gJiYgIXByZXZQcm9wcy5tZW51SXNPcGVuKSB7XG4gICAgICAgIHRoaXMuZm9jdXNJbnB1dCgpO1xuICAgICAgfSAvLyBzY3JvbGwgdGhlIGZvY3VzZWQgb3B0aW9uIGludG8gdmlldyBpZiBuZWNlc3NhcnlcblxuXG4gICAgICBpZiAodGhpcy5tZW51TGlzdFJlZiAmJiB0aGlzLmZvY3VzZWRPcHRpb25SZWYgJiYgdGhpcy5zY3JvbGxUb0ZvY3VzZWRPcHRpb25PblVwZGF0ZSkge1xuICAgICAgICBzY3JvbGxJbnRvVmlldyh0aGlzLm1lbnVMaXN0UmVmLCB0aGlzLmZvY3VzZWRPcHRpb25SZWYpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNjcm9sbFRvRm9jdXNlZE9wdGlvbk9uVXBkYXRlID0gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nQ29tcG9zaXRpb24oKTtcbiAgICAgIHRoaXMuc3RvcExpc3RlbmluZ1RvVG91Y2goKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbk1lbnVPcGVuXCIsXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gQ29uc3VtZXIgSGFuZGxlcnNcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICB2YWx1ZTogZnVuY3Rpb24gb25NZW51T3BlbigpIHtcbiAgICAgIHRoaXMucHJvcHMub25NZW51T3BlbigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbk1lbnVDbG9zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk1lbnVDbG9zZSgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczEwID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc1NlYXJjaGFibGUgPSBfdGhpcyRwcm9wczEwLmlzU2VhcmNoYWJsZSxcbiAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHMxMC5pc011bHRpO1xuICAgICAgdGhpcy5hbm5vdW5jZUFyaWFMaXZlQ29udGV4dCh7XG4gICAgICAgIGV2ZW50OiAnaW5wdXQnLFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgaXNTZWFyY2hhYmxlOiBpc1NlYXJjaGFibGUsXG4gICAgICAgICAgaXNNdWx0aTogaXNNdWx0aVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMub25JbnB1dENoYW5nZSgnJywge1xuICAgICAgICBhY3Rpb246ICdtZW51LWNsb3NlJ1xuICAgICAgfSk7XG4gICAgICB0aGlzLnByb3BzLm9uTWVudUNsb3NlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uSW5wdXRDaGFuZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25JbnB1dENoYW5nZShuZXdWYWx1ZSwgYWN0aW9uTWV0YSkge1xuICAgICAgdGhpcy5wcm9wcy5vbklucHV0Q2hhbmdlKG5ld1ZhbHVlLCBhY3Rpb25NZXRhKTtcbiAgICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIE1ldGhvZHNcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB9LCB7XG4gICAga2V5OiBcImZvY3VzSW5wdXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXNJbnB1dCgpIHtcbiAgICAgIGlmICghdGhpcy5pbnB1dFJlZikgcmV0dXJuO1xuICAgICAgdGhpcy5pbnB1dFJlZi5mb2N1cygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJibHVySW5wdXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmx1cklucHV0KCkge1xuICAgICAgaWYgKCF0aGlzLmlucHV0UmVmKSByZXR1cm47XG4gICAgICB0aGlzLmlucHV0UmVmLmJsdXIoKTtcbiAgICB9IC8vIGFsaWFzZWQgZm9yIGNvbnN1bWVyc1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib3Blbk1lbnVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3Blbk1lbnUoZm9jdXNPcHRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTMgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIG1lbnVPcHRpb25zID0gX3RoaXMkc3RhdGUzLm1lbnVPcHRpb25zLFxuICAgICAgICAgIHNlbGVjdFZhbHVlID0gX3RoaXMkc3RhdGUzLnNlbGVjdFZhbHVlLFxuICAgICAgICAgIGlzRm9jdXNlZCA9IF90aGlzJHN0YXRlMy5pc0ZvY3VzZWQ7XG4gICAgICB2YXIgaXNNdWx0aSA9IHRoaXMucHJvcHMuaXNNdWx0aTtcbiAgICAgIHZhciBvcGVuQXRJbmRleCA9IGZvY3VzT3B0aW9uID09PSAnZmlyc3QnID8gMCA6IG1lbnVPcHRpb25zLmZvY3VzYWJsZS5sZW5ndGggLSAxO1xuXG4gICAgICBpZiAoIWlzTXVsdGkpIHtcbiAgICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSBtZW51T3B0aW9ucy5mb2N1c2FibGUuaW5kZXhPZihzZWxlY3RWYWx1ZVswXSk7XG5cbiAgICAgICAgaWYgKHNlbGVjdGVkSW5kZXggPiAtMSkge1xuICAgICAgICAgIG9wZW5BdEluZGV4ID0gc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgfVxuICAgICAgfSAvLyBvbmx5IHNjcm9sbCBpZiB0aGUgbWVudSBpc24ndCBhbHJlYWR5IG9wZW5cblxuXG4gICAgICB0aGlzLnNjcm9sbFRvRm9jdXNlZE9wdGlvbk9uVXBkYXRlID0gIShpc0ZvY3VzZWQgJiYgdGhpcy5tZW51TGlzdFJlZik7XG4gICAgICB0aGlzLmlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5vbk1lbnVPcGVuKCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZFZhbHVlOiBudWxsLFxuICAgICAgICBmb2N1c2VkT3B0aW9uOiBtZW51T3B0aW9ucy5mb2N1c2FibGVbb3BlbkF0SW5kZXhdXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYW5ub3VuY2VBcmlhTGl2ZUNvbnRleHQoe1xuICAgICAgICBldmVudDogJ21lbnUnXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9jdXNWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1c1ZhbHVlKGRpcmVjdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzMTEgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczExLmlzTXVsdGksXG4gICAgICAgICAgaXNTZWFyY2hhYmxlID0gX3RoaXMkcHJvcHMxMS5pc1NlYXJjaGFibGU7XG4gICAgICB2YXIgX3RoaXMkc3RhdGU0ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBzZWxlY3RWYWx1ZSA9IF90aGlzJHN0YXRlNC5zZWxlY3RWYWx1ZSxcbiAgICAgICAgICBmb2N1c2VkVmFsdWUgPSBfdGhpcyRzdGF0ZTQuZm9jdXNlZFZhbHVlOyAvLyBPbmx5IG11bHRpc2VsZWN0cyBzdXBwb3J0IHZhbHVlIGZvY3VzaW5nXG5cbiAgICAgIGlmICghaXNNdWx0aSkgcmV0dXJuO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWRPcHRpb246IG51bGxcbiAgICAgIH0pO1xuICAgICAgdmFyIGZvY3VzZWRJbmRleCA9IHNlbGVjdFZhbHVlLmluZGV4T2YoZm9jdXNlZFZhbHVlKTtcblxuICAgICAgaWYgKCFmb2N1c2VkVmFsdWUpIHtcbiAgICAgICAgZm9jdXNlZEluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuYW5ub3VuY2VBcmlhTGl2ZUNvbnRleHQoe1xuICAgICAgICAgIGV2ZW50OiAndmFsdWUnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGFzdEluZGV4ID0gc2VsZWN0VmFsdWUubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBuZXh0Rm9jdXMgPSAtMTtcbiAgICAgIGlmICghc2VsZWN0VmFsdWUubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcbiAgICAgICAgICBpZiAoZm9jdXNlZEluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAvLyBkb24ndCBjeWNsZSBmcm9tIHRoZSBzdGFydCB0byB0aGUgZW5kXG4gICAgICAgICAgICBuZXh0Rm9jdXMgPSAwO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZm9jdXNlZEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgLy8gaWYgbm90aGluZyBpcyBmb2N1c2VkLCBmb2N1cyB0aGUgbGFzdCB2YWx1ZSBmaXJzdFxuICAgICAgICAgICAgbmV4dEZvY3VzID0gbGFzdEluZGV4O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0Rm9jdXMgPSBmb2N1c2VkSW5kZXggLSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICAgIGlmIChmb2N1c2VkSW5kZXggPiAtMSAmJiBmb2N1c2VkSW5kZXggPCBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgIG5leHRGb2N1cyA9IGZvY3VzZWRJbmRleCArIDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0Rm9jdXMgPT09IC0xKSB7XG4gICAgICAgIHRoaXMuYW5ub3VuY2VBcmlhTGl2ZUNvbnRleHQoe1xuICAgICAgICAgIGV2ZW50OiAnaW5wdXQnLFxuICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIGlzU2VhcmNoYWJsZTogaXNTZWFyY2hhYmxlLFxuICAgICAgICAgICAgaXNNdWx0aTogaXNNdWx0aVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpbnB1dElzSGlkZGVuOiBuZXh0Rm9jdXMgPT09IC0xID8gZmFsc2UgOiB0cnVlLFxuICAgICAgICBmb2N1c2VkVmFsdWU6IHNlbGVjdFZhbHVlW25leHRGb2N1c11cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb2N1c09wdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1c09wdGlvbigpIHtcbiAgICAgIHZhciBkaXJlY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdmaXJzdCc7XG4gICAgICB2YXIgcGFnZVNpemUgPSB0aGlzLnByb3BzLnBhZ2VTaXplO1xuICAgICAgdmFyIF90aGlzJHN0YXRlNSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgZm9jdXNlZE9wdGlvbiA9IF90aGlzJHN0YXRlNS5mb2N1c2VkT3B0aW9uLFxuICAgICAgICAgIG1lbnVPcHRpb25zID0gX3RoaXMkc3RhdGU1Lm1lbnVPcHRpb25zO1xuICAgICAgdmFyIG9wdGlvbnMgPSBtZW51T3B0aW9ucy5mb2N1c2FibGU7XG4gICAgICBpZiAoIW9wdGlvbnMubGVuZ3RoKSByZXR1cm47XG4gICAgICB2YXIgbmV4dEZvY3VzID0gMDsgLy8gaGFuZGxlcyAnZmlyc3QnXG5cbiAgICAgIHZhciBmb2N1c2VkSW5kZXggPSBvcHRpb25zLmluZGV4T2YoZm9jdXNlZE9wdGlvbik7XG5cbiAgICAgIGlmICghZm9jdXNlZE9wdGlvbikge1xuICAgICAgICBmb2N1c2VkSW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5hbm5vdW5jZUFyaWFMaXZlQ29udGV4dCh7XG4gICAgICAgICAgZXZlbnQ6ICdtZW51J1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJykge1xuICAgICAgICBuZXh0Rm9jdXMgPSBmb2N1c2VkSW5kZXggPiAwID8gZm9jdXNlZEluZGV4IC0gMSA6IG9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZG93bicpIHtcbiAgICAgICAgbmV4dEZvY3VzID0gKGZvY3VzZWRJbmRleCArIDEpICUgb3B0aW9ucy5sZW5ndGg7XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3BhZ2V1cCcpIHtcbiAgICAgICAgbmV4dEZvY3VzID0gZm9jdXNlZEluZGV4IC0gcGFnZVNpemU7XG4gICAgICAgIGlmIChuZXh0Rm9jdXMgPCAwKSBuZXh0Rm9jdXMgPSAwO1xuICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdwYWdlZG93bicpIHtcbiAgICAgICAgbmV4dEZvY3VzID0gZm9jdXNlZEluZGV4ICsgcGFnZVNpemU7XG4gICAgICAgIGlmIChuZXh0Rm9jdXMgPiBvcHRpb25zLmxlbmd0aCAtIDEpIG5leHRGb2N1cyA9IG9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGFzdCcpIHtcbiAgICAgICAgbmV4dEZvY3VzID0gb3B0aW9ucy5sZW5ndGggLSAxO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNjcm9sbFRvRm9jdXNlZE9wdGlvbk9uVXBkYXRlID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkT3B0aW9uOiBvcHRpb25zW25leHRGb2N1c10sXG4gICAgICAgIGZvY3VzZWRWYWx1ZTogbnVsbFxuICAgICAgfSk7XG4gICAgICB0aGlzLmFubm91bmNlQXJpYUxpdmVDb250ZXh0KHtcbiAgICAgICAgZXZlbnQ6ICdtZW51JyxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIGlzRGlzYWJsZWQ6IGlzT3B0aW9uRGlzYWJsZWQob3B0aW9uc1tuZXh0Rm9jdXNdKVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VGhlbWVcIixcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBHZXR0ZXJzXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgICAgLy8gVXNlIHRoZSBkZWZhdWx0IHRoZW1lIGlmIHRoZXJlIGFyZSBubyBjdXN0b21pemF0aW9ucy5cbiAgICAgIGlmICghdGhpcy5wcm9wcy50aGVtZSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFRoZW1lO1xuICAgICAgfSAvLyBJZiB0aGUgdGhlbWUgcHJvcCBpcyBhIGZ1bmN0aW9uLCBhc3N1bWUgdGhlIGZ1bmN0aW9uXG4gICAgICAvLyBrbm93cyBob3cgdG8gbWVyZ2UgdGhlIHBhc3NlZC1pbiBkZWZhdWx0IHRoZW1lIHdpdGhcbiAgICAgIC8vIGl0cyBvd24gbW9kaWZpY2F0aW9ucy5cblxuXG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMudGhlbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgICAgIH0gLy8gT3RoZXJ3aXNlLCBpZiBhIHBsYWluIHRoZW1lIG9iamVjdCB3YXMgcGFzc2VkIGluLFxuICAgICAgLy8gb3ZlcmxheSBpdCB3aXRoIHRoZSBkZWZhdWx0IHRoZW1lLlxuXG5cbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0VGhlbWUsIHRoaXMucHJvcHMudGhlbWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRDb21tb25Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb21tb25Qcm9wcygpIHtcbiAgICAgIHZhciBjbGVhclZhbHVlID0gdGhpcy5jbGVhclZhbHVlLFxuICAgICAgICAgIGdldFN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzLFxuICAgICAgICAgIHNldFZhbHVlID0gdGhpcy5zZXRWYWx1ZSxcbiAgICAgICAgICBzZWxlY3RPcHRpb24gPSB0aGlzLnNlbGVjdE9wdGlvbixcbiAgICAgICAgICBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gcHJvcHMuY2xhc3NOYW1lUHJlZml4LFxuICAgICAgICAgIGlzTXVsdGkgPSBwcm9wcy5pc011bHRpLFxuICAgICAgICAgIGlzUnRsID0gcHJvcHMuaXNSdGwsXG4gICAgICAgICAgb3B0aW9ucyA9IHByb3BzLm9wdGlvbnM7XG4gICAgICB2YXIgc2VsZWN0VmFsdWUgPSB0aGlzLnN0YXRlLnNlbGVjdFZhbHVlO1xuICAgICAgdmFyIGhhc1ZhbHVlID0gdGhpcy5oYXNWYWx1ZSgpO1xuXG4gICAgICB2YXIgZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdFZhbHVlO1xuICAgICAgfTtcblxuICAgICAgdmFyIGN4ID0gY2xhc3NOYW1lcy5iaW5kKG51bGwsIGNsYXNzTmFtZVByZWZpeCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjeDogY3gsXG4gICAgICAgIGNsZWFyVmFsdWU6IGNsZWFyVmFsdWUsXG4gICAgICAgIGdldFN0eWxlczogZ2V0U3R5bGVzLFxuICAgICAgICBnZXRWYWx1ZTogZ2V0VmFsdWUsXG4gICAgICAgIGhhc1ZhbHVlOiBoYXNWYWx1ZSxcbiAgICAgICAgaXNNdWx0aTogaXNNdWx0aSxcbiAgICAgICAgaXNSdGw6IGlzUnRsLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICBzZWxlY3RPcHRpb246IHNlbGVjdE9wdGlvbixcbiAgICAgICAgc2V0VmFsdWU6IHNldFZhbHVlLFxuICAgICAgICBzZWxlY3RQcm9wczogcHJvcHMsXG4gICAgICAgIHRoZW1lOiB0aGlzLmdldFRoZW1lKClcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE5leHRGb2N1c2VkVmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TmV4dEZvY3VzZWRWYWx1ZShuZXh0U2VsZWN0VmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmNsZWFyRm9jdXNWYWx1ZU9uVXBkYXRlKSB7XG4gICAgICAgIHRoaXMuY2xlYXJGb2N1c1ZhbHVlT25VcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyRzdGF0ZTYgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGZvY3VzZWRWYWx1ZSA9IF90aGlzJHN0YXRlNi5mb2N1c2VkVmFsdWUsXG4gICAgICAgICAgbGFzdFNlbGVjdFZhbHVlID0gX3RoaXMkc3RhdGU2LnNlbGVjdFZhbHVlO1xuICAgICAgdmFyIGxhc3RGb2N1c2VkSW5kZXggPSBsYXN0U2VsZWN0VmFsdWUuaW5kZXhPZihmb2N1c2VkVmFsdWUpO1xuXG4gICAgICBpZiAobGFzdEZvY3VzZWRJbmRleCA+IC0xKSB7XG4gICAgICAgIHZhciBuZXh0Rm9jdXNlZEluZGV4ID0gbmV4dFNlbGVjdFZhbHVlLmluZGV4T2YoZm9jdXNlZFZhbHVlKTtcblxuICAgICAgICBpZiAobmV4dEZvY3VzZWRJbmRleCA+IC0xKSB7XG4gICAgICAgICAgLy8gdGhlIGZvY3VzZWQgdmFsdWUgaXMgc3RpbGwgaW4gdGhlIHNlbGVjdFZhbHVlLCByZXR1cm4gaXRcbiAgICAgICAgICByZXR1cm4gZm9jdXNlZFZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3RGb2N1c2VkSW5kZXggPCBuZXh0U2VsZWN0VmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdGhlIGZvY3VzZWRWYWx1ZSBpcyBub3QgcHJlc2VudCBpbiB0aGUgbmV4dCBzZWxlY3RWYWx1ZSBhcnJheSBieVxuICAgICAgICAgIC8vIHJlZmVyZW5jZSwgc28gcmV0dXJuIHRoZSBuZXcgdmFsdWUgYXQgdGhlIHNhbWUgaW5kZXhcbiAgICAgICAgICByZXR1cm4gbmV4dFNlbGVjdFZhbHVlW2xhc3RGb2N1c2VkSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXROZXh0Rm9jdXNlZE9wdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROZXh0Rm9jdXNlZE9wdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEZvY3VzZWRPcHRpb24gPSB0aGlzLnN0YXRlLmZvY3VzZWRPcHRpb247XG4gICAgICByZXR1cm4gbGFzdEZvY3VzZWRPcHRpb24gJiYgb3B0aW9ucy5pbmRleE9mKGxhc3RGb2N1c2VkT3B0aW9uKSA+IC0xID8gbGFzdEZvY3VzZWRPcHRpb24gOiBvcHRpb25zWzBdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJoYXNWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNWYWx1ZSgpIHtcbiAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IHRoaXMuc3RhdGUuc2VsZWN0VmFsdWU7XG4gICAgICByZXR1cm4gc2VsZWN0VmFsdWUubGVuZ3RoID4gMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzT3B0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNPcHRpb25zKCkge1xuICAgICAgcmV0dXJuICEhdGhpcy5zdGF0ZS5tZW51T3B0aW9ucy5yZW5kZXIubGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb3VudE9wdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY291bnRPcHRpb25zKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUubWVudU9wdGlvbnMuZm9jdXNhYmxlLmxlbmd0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNDbGVhcmFibGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNDbGVhcmFibGUoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNDbGVhcmFibGUgPSBfdGhpcyRwcm9wczEyLmlzQ2xlYXJhYmxlLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczEyLmlzTXVsdGk7IC8vIHNpbmdsZSBzZWxlY3QsIGJ5IGRlZmF1bHQsIElTIE5PVCBjbGVhcmFibGVcbiAgICAgIC8vIG11bHRpIHNlbGVjdCwgYnkgZGVmYXVsdCwgSVMgY2xlYXJhYmxlXG5cbiAgICAgIGlmIChpc0NsZWFyYWJsZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gaXNNdWx0aTtcbiAgICAgIHJldHVybiBpc0NsZWFyYWJsZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNPcHRpb25EaXNhYmxlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc09wdGlvbkRpc2FibGVkJCQxKG9wdGlvbiwgc2VsZWN0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5wcm9wcy5pc09wdGlvbkRpc2FibGVkID09PSAnZnVuY3Rpb24nID8gdGhpcy5wcm9wcy5pc09wdGlvbkRpc2FibGVkKG9wdGlvbiwgc2VsZWN0VmFsdWUpIDogZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzT3B0aW9uU2VsZWN0ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNPcHRpb25TZWxlY3RlZChvcHRpb24sIHNlbGVjdFZhbHVlKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHNlbGVjdFZhbHVlLmluZGV4T2Yob3B0aW9uKSA+IC0xKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLmlzT3B0aW9uU2VsZWN0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaXNPcHRpb25TZWxlY3RlZChvcHRpb24sIHNlbGVjdFZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbmRpZGF0ZSA9IHRoaXMuZ2V0T3B0aW9uVmFsdWUob3B0aW9uKTtcbiAgICAgIHJldHVybiBzZWxlY3RWYWx1ZS5zb21lKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuZ2V0T3B0aW9uVmFsdWUoaSkgPT09IGNhbmRpZGF0ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmaWx0ZXJPcHRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmlsdGVyT3B0aW9uKG9wdGlvbiwgaW5wdXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZmlsdGVyT3B0aW9uID8gdGhpcy5wcm9wcy5maWx0ZXJPcHRpb24ob3B0aW9uLCBpbnB1dFZhbHVlKSA6IHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvcm1hdE9wdGlvbkxhYmVsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdE9wdGlvbkxhYmVsKGRhdGEsIGNvbnRleHQpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5mb3JtYXRPcHRpb25MYWJlbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgaW5wdXRWYWx1ZSA9IHRoaXMucHJvcHMuaW5wdXRWYWx1ZTtcbiAgICAgICAgdmFyIHNlbGVjdFZhbHVlID0gdGhpcy5zdGF0ZS5zZWxlY3RWYWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZm9ybWF0T3B0aW9uTGFiZWwoZGF0YSwge1xuICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgICAgICBzZWxlY3RWYWx1ZTogc2VsZWN0VmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPcHRpb25MYWJlbChkYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0R3JvdXBMYWJlbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRHcm91cExhYmVsJCQxKGRhdGEpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmZvcm1hdEdyb3VwTGFiZWwoZGF0YSk7XG4gICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBNb3VzZSBIYW5kbGVyc1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRMaXN0ZW5pbmdDb21wb3NpdGlvblwiLFxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIENvbXBvc2l0aW9uIEhhbmRsZXJzXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0TGlzdGVuaW5nQ29tcG9zaXRpb24oKSB7XG4gICAgICBpZiAoZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0JywgdGhpcy5vbkNvbXBvc2l0aW9uU3RhcnQsIGZhbHNlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCB0aGlzLm9uQ29tcG9zaXRpb25FbmQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcExpc3RlbmluZ0NvbXBvc2l0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmdDb21wb3NpdGlvbigpIHtcbiAgICAgIGlmIChkb2N1bWVudCAmJiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCB0aGlzLm9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgdGhpcy5vbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRMaXN0ZW5pbmdUb1RvdWNoXCIsXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gVG91Y2ggSGFuZGxlcnNcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRMaXN0ZW5pbmdUb1RvdWNoKCkge1xuICAgICAgaWYgKGRvY3VtZW50ICYmIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUsIGZhbHNlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcExpc3RlbmluZ1RvVG91Y2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcExpc3RlbmluZ1RvVG91Y2goKSB7XG4gICAgICBpZiAoZG9jdW1lbnQgJiYgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hFbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJidWlsZE1lbnVPcHRpb25zXCIsXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gTWVudSBPcHRpb25zXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkTWVudU9wdGlvbnMocHJvcHMsIHNlbGVjdFZhbHVlKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyRpbnB1dFZhbHVlID0gcHJvcHMuaW5wdXRWYWx1ZSxcbiAgICAgICAgICBpbnB1dFZhbHVlID0gX3Byb3BzJGlucHV0VmFsdWUgPT09IHZvaWQgMCA/ICcnIDogX3Byb3BzJGlucHV0VmFsdWUsXG4gICAgICAgICAgb3B0aW9ucyA9IHByb3BzLm9wdGlvbnM7XG5cbiAgICAgIHZhciB0b09wdGlvbiA9IGZ1bmN0aW9uIHRvT3B0aW9uKG9wdGlvbiwgaWQpIHtcbiAgICAgICAgdmFyIGlzRGlzYWJsZWQgPSBfdGhpczMuaXNPcHRpb25EaXNhYmxlZChvcHRpb24sIHNlbGVjdFZhbHVlKTtcblxuICAgICAgICB2YXIgaXNTZWxlY3RlZCA9IF90aGlzMy5pc09wdGlvblNlbGVjdGVkKG9wdGlvbiwgc2VsZWN0VmFsdWUpO1xuXG4gICAgICAgIHZhciBsYWJlbCA9IF90aGlzMy5nZXRPcHRpb25MYWJlbChvcHRpb24pO1xuXG4gICAgICAgIHZhciB2YWx1ZSA9IF90aGlzMy5nZXRPcHRpb25WYWx1ZShvcHRpb24pO1xuXG4gICAgICAgIGlmIChfdGhpczMuc2hvdWxkSGlkZVNlbGVjdGVkT3B0aW9ucygpICYmIGlzU2VsZWN0ZWQgfHwgIV90aGlzMy5maWx0ZXJPcHRpb24oe1xuICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgZGF0YTogb3B0aW9uXG4gICAgICAgIH0sIGlucHV0VmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9uSG92ZXIgPSBpc0Rpc2FibGVkID8gdW5kZWZpbmVkIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMub25PcHRpb25Ib3ZlcihvcHRpb24pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgb25TZWxlY3QgPSBpc0Rpc2FibGVkID8gdW5kZWZpbmVkIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuc2VsZWN0T3B0aW9uKG9wdGlvbik7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvcHRpb25JZCA9IFwiXCIuY29uY2F0KF90aGlzMy5nZXRFbGVtZW50SWQoJ29wdGlvbicpLCBcIi1cIikuY29uY2F0KGlkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbm5lclByb3BzOiB7XG4gICAgICAgICAgICBpZDogb3B0aW9uSWQsXG4gICAgICAgICAgICBvbkNsaWNrOiBvblNlbGVjdCxcbiAgICAgICAgICAgIG9uTW91c2VNb3ZlOiBvbkhvdmVyLFxuICAgICAgICAgICAgb25Nb3VzZU92ZXI6IG9uSG92ZXIsXG4gICAgICAgICAgICB0YWJJbmRleDogLTFcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRhdGE6IG9wdGlvbixcbiAgICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICAgIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQsXG4gICAgICAgICAga2V5OiBvcHRpb25JZCxcbiAgICAgICAgICBsYWJlbDogbGFiZWwsXG4gICAgICAgICAgdHlwZTogJ29wdGlvbicsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gb3B0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgaXRlbSwgaXRlbUluZGV4KSB7XG4gICAgICAgIGlmIChpdGVtLm9wdGlvbnMpIHtcbiAgICAgICAgICAvLyBUT0RPIG5lZWRzIGEgdGlkaWVyIGltcGxlbWVudGF0aW9uXG4gICAgICAgICAgaWYgKCFfdGhpczMuaGFzR3JvdXBzKSBfdGhpczMuaGFzR3JvdXBzID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgaXRlbXMgPSBpdGVtLm9wdGlvbnM7XG4gICAgICAgICAgdmFyIGNoaWxkcmVuID0gaXRlbXMubWFwKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbiA9IHRvT3B0aW9uKGNoaWxkLCBcIlwiLmNvbmNhdChpdGVtSW5kZXgsIFwiLVwiKS5jb25jYXQoaSkpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbikgYWNjLmZvY3VzYWJsZS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb247XG4gICAgICAgICAgfSkuZmlsdGVyKEJvb2xlYW4pO1xuXG4gICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGdyb3VwSWQgPSBcIlwiLmNvbmNhdChfdGhpczMuZ2V0RWxlbWVudElkKCdncm91cCcpLCBcIi1cIikuY29uY2F0KGl0ZW1JbmRleCk7XG4gICAgICAgICAgICBhY2MucmVuZGVyLnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiAnZ3JvdXAnLFxuICAgICAgICAgICAgICBrZXk6IGdyb3VwSWQsXG4gICAgICAgICAgICAgIGRhdGE6IGl0ZW0sXG4gICAgICAgICAgICAgIG9wdGlvbnM6IGNoaWxkcmVuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9wdGlvbiA9IHRvT3B0aW9uKGl0ZW0sIFwiXCIuY29uY2F0KGl0ZW1JbmRleCkpO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbikge1xuICAgICAgICAgICAgYWNjLnJlbmRlci5wdXNoKG9wdGlvbik7XG4gICAgICAgICAgICBhY2MuZm9jdXNhYmxlLnB1c2goaXRlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHtcbiAgICAgICAgcmVuZGVyOiBbXSxcbiAgICAgICAgZm9jdXNhYmxlOiBbXVxuICAgICAgfSk7XG4gICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBSZW5kZXJlcnNcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB9LCB7XG4gICAga2V5OiBcImNvbnN0cnVjdEFyaWFMaXZlTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb25zdHJ1Y3RBcmlhTGl2ZU1lc3NhZ2UoKSB7XG4gICAgICB2YXIgX3RoaXMkc3RhdGU3ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBhcmlhTGl2ZUNvbnRleHQgPSBfdGhpcyRzdGF0ZTcuYXJpYUxpdmVDb250ZXh0LFxuICAgICAgICAgIHNlbGVjdFZhbHVlID0gX3RoaXMkc3RhdGU3LnNlbGVjdFZhbHVlLFxuICAgICAgICAgIGZvY3VzZWRWYWx1ZSA9IF90aGlzJHN0YXRlNy5mb2N1c2VkVmFsdWUsXG4gICAgICAgICAgZm9jdXNlZE9wdGlvbiA9IF90aGlzJHN0YXRlNy5mb2N1c2VkT3B0aW9uO1xuICAgICAgdmFyIF90aGlzJHByb3BzMTMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG9wdGlvbnMgPSBfdGhpcyRwcm9wczEzLm9wdGlvbnMsXG4gICAgICAgICAgbWVudUlzT3BlbiA9IF90aGlzJHByb3BzMTMubWVudUlzT3BlbixcbiAgICAgICAgICBpbnB1dFZhbHVlID0gX3RoaXMkcHJvcHMxMy5pbnB1dFZhbHVlLFxuICAgICAgICAgIHNjcmVlblJlYWRlclN0YXR1cyA9IF90aGlzJHByb3BzMTMuc2NyZWVuUmVhZGVyU3RhdHVzOyAvLyBBbiBhcmlhIGxpdmUgbWVzc2FnZSByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnRseSBmb2N1c2VkIHZhbHVlIGluIHRoZSBzZWxlY3QuXG5cbiAgICAgIHZhciBmb2N1c2VkVmFsdWVNc2cgPSBmb2N1c2VkVmFsdWUgPyB2YWx1ZUZvY3VzQXJpYU1lc3NhZ2Uoe1xuICAgICAgICBmb2N1c2VkVmFsdWU6IGZvY3VzZWRWYWx1ZSxcbiAgICAgICAgZ2V0T3B0aW9uTGFiZWw6IHRoaXMuZ2V0T3B0aW9uTGFiZWwsXG4gICAgICAgIHNlbGVjdFZhbHVlOiBzZWxlY3RWYWx1ZVxuICAgICAgfSkgOiAnJzsgLy8gQW4gYXJpYSBsaXZlIG1lc3NhZ2UgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50bHkgZm9jdXNlZCBvcHRpb24gaW4gdGhlIHNlbGVjdC5cblxuICAgICAgdmFyIGZvY3VzZWRPcHRpb25Nc2cgPSBmb2N1c2VkT3B0aW9uICYmIG1lbnVJc09wZW4gPyBvcHRpb25Gb2N1c0FyaWFNZXNzYWdlKHtcbiAgICAgICAgZm9jdXNlZE9wdGlvbjogZm9jdXNlZE9wdGlvbixcbiAgICAgICAgZ2V0T3B0aW9uTGFiZWw6IHRoaXMuZ2V0T3B0aW9uTGFiZWwsXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgIH0pIDogJyc7IC8vIEFuIGFyaWEgbGl2ZSBtZXNzYWdlIHJlcHJlc2VudGluZyB0aGUgc2V0IG9mIGZvY3VzYWJsZSByZXN1bHRzIGFuZCBjdXJyZW50IHNlYXJjaHRlcm0vaW5wdXR2YWx1ZS5cblxuICAgICAgdmFyIHJlc3VsdHNNc2cgPSByZXN1bHRzQXJpYU1lc3NhZ2Uoe1xuICAgICAgICBpbnB1dFZhbHVlOiBpbnB1dFZhbHVlLFxuICAgICAgICBzY3JlZW5SZWFkZXJNZXNzYWdlOiBzY3JlZW5SZWFkZXJTdGF0dXMoe1xuICAgICAgICAgIGNvdW50OiB0aGlzLmNvdW50T3B0aW9ucygpXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChmb2N1c2VkVmFsdWVNc2csIFwiIFwiKS5jb25jYXQoZm9jdXNlZE9wdGlvbk1zZywgXCIgXCIpLmNvbmNhdChyZXN1bHRzTXNnLCBcIiBcIikuY29uY2F0KGFyaWFMaXZlQ29udGV4dCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlcklucHV0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcklucHV0KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMTQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlzRGlzYWJsZWQgPSBfdGhpcyRwcm9wczE0LmlzRGlzYWJsZWQsXG4gICAgICAgICAgaXNTZWFyY2hhYmxlID0gX3RoaXMkcHJvcHMxNC5pc1NlYXJjaGFibGUsXG4gICAgICAgICAgaW5wdXRJZCA9IF90aGlzJHByb3BzMTQuaW5wdXRJZCxcbiAgICAgICAgICBpbnB1dFZhbHVlID0gX3RoaXMkcHJvcHMxNC5pbnB1dFZhbHVlLFxuICAgICAgICAgIHRhYkluZGV4ID0gX3RoaXMkcHJvcHMxNC50YWJJbmRleDtcbiAgICAgIHZhciBJbnB1dCA9IHRoaXMuY29tcG9uZW50cy5JbnB1dDtcbiAgICAgIHZhciBpbnB1dElzSGlkZGVuID0gdGhpcy5zdGF0ZS5pbnB1dElzSGlkZGVuO1xuICAgICAgdmFyIGlkID0gaW5wdXRJZCB8fCB0aGlzLmdldEVsZW1lbnRJZCgnaW5wdXQnKTtcblxuICAgICAgaWYgKCFpc1NlYXJjaGFibGUpIHtcbiAgICAgICAgLy8gdXNlIGEgZHVtbXkgaW5wdXQgdG8gbWFpbnRhaW4gZm9jdXMvYmx1ciBmdW5jdGlvbmFsaXR5XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KER1bW15SW5wdXQsIHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgaW5uZXJSZWY6IHRoaXMuZ2V0SW5wdXRSZWYsXG4gICAgICAgICAgb25CbHVyOiB0aGlzLm9uSW5wdXRCbHVyLFxuICAgICAgICAgIG9uQ2hhbmdlOiBub29wLFxuICAgICAgICAgIG9uRm9jdXM6IHRoaXMub25JbnB1dEZvY3VzLFxuICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgICAgICB2YWx1ZTogXCJcIlxuICAgICAgICB9KTtcbiAgICAgIH0gLy8gYXJpYSBhdHRyaWJ1dGVzIG1ha2VzIHRoZSBKU1ggXCJub2lzeVwiLCBzZXBhcmF0ZWQgZm9yIGNsYXJpdHlcblxuXG4gICAgICB2YXIgYXJpYUF0dHJpYnV0ZXMgPSB7XG4gICAgICAgICdhcmlhLWF1dG9jb21wbGV0ZSc6ICdsaXN0JyxcbiAgICAgICAgJ2FyaWEtbGFiZWwnOiB0aGlzLnByb3BzWydhcmlhLWxhYmVsJ10sXG4gICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiB0aGlzLnByb3BzWydhcmlhLWxhYmVsbGVkYnknXVxuICAgICAgfTtcbiAgICAgIHZhciBfdGhpcyRjb21tb25Qcm9wcyA9IHRoaXMuY29tbW9uUHJvcHMsXG4gICAgICAgICAgY3ggPSBfdGhpcyRjb21tb25Qcm9wcy5jeCxcbiAgICAgICAgICB0aGVtZSA9IF90aGlzJGNvbW1vblByb3BzLnRoZW1lLFxuICAgICAgICAgIHNlbGVjdFByb3BzID0gX3RoaXMkY29tbW9uUHJvcHMuc2VsZWN0UHJvcHM7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dCwgX2V4dGVuZHMoe1xuICAgICAgICBhdXRvQ2FwaXRhbGl6ZTogXCJub25lXCIsXG4gICAgICAgIGF1dG9Db21wbGV0ZTogXCJvZmZcIixcbiAgICAgICAgYXV0b0NvcnJlY3Q6IFwib2ZmXCIsXG4gICAgICAgIGN4OiBjeCxcbiAgICAgICAgZ2V0U3R5bGVzOiB0aGlzLmdldFN0eWxlcyxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBpbm5lclJlZjogdGhpcy5nZXRJbnB1dFJlZixcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgaXNIaWRkZW46IGlucHV0SXNIaWRkZW4sXG4gICAgICAgIG9uQmx1cjogdGhpcy5vbklucHV0Qmx1cixcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgICAgIG9uRm9jdXM6IHRoaXMub25JbnB1dEZvY3VzLFxuICAgICAgICBzZWxlY3RQcm9wczogc2VsZWN0UHJvcHMsXG4gICAgICAgIHNwZWxsQ2hlY2s6IFwiZmFsc2VcIixcbiAgICAgICAgdGFiSW5kZXg6IHRhYkluZGV4LFxuICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICB2YWx1ZTogaW5wdXRWYWx1ZVxuICAgICAgfSwgYXJpYUF0dHJpYnV0ZXMpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyUGxhY2Vob2xkZXJPclZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclBsYWNlaG9sZGVyT3JWYWx1ZSgpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAgICBNdWx0aVZhbHVlID0gX3RoaXMkY29tcG9uZW50cy5NdWx0aVZhbHVlLFxuICAgICAgICAgIE11bHRpVmFsdWVDb250YWluZXIgPSBfdGhpcyRjb21wb25lbnRzLk11bHRpVmFsdWVDb250YWluZXIsXG4gICAgICAgICAgTXVsdGlWYWx1ZUxhYmVsID0gX3RoaXMkY29tcG9uZW50cy5NdWx0aVZhbHVlTGFiZWwsXG4gICAgICAgICAgTXVsdGlWYWx1ZVJlbW92ZSA9IF90aGlzJGNvbXBvbmVudHMuTXVsdGlWYWx1ZVJlbW92ZSxcbiAgICAgICAgICBTaW5nbGVWYWx1ZSA9IF90aGlzJGNvbXBvbmVudHMuU2luZ2xlVmFsdWUsXG4gICAgICAgICAgUGxhY2Vob2xkZXIgPSBfdGhpcyRjb21wb25lbnRzLlBsYWNlaG9sZGVyO1xuICAgICAgdmFyIGNvbW1vblByb3BzID0gdGhpcy5jb21tb25Qcm9wcztcbiAgICAgIHZhciBfdGhpcyRwcm9wczE1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb250cm9sU2hvdWxkUmVuZGVyVmFsdWUgPSBfdGhpcyRwcm9wczE1LmNvbnRyb2xTaG91bGRSZW5kZXJWYWx1ZSxcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMxNS5pc0Rpc2FibGVkLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczE1LmlzTXVsdGksXG4gICAgICAgICAgaW5wdXRWYWx1ZSA9IF90aGlzJHByb3BzMTUuaW5wdXRWYWx1ZSxcbiAgICAgICAgICBwbGFjZWhvbGRlciA9IF90aGlzJHByb3BzMTUucGxhY2Vob2xkZXI7XG4gICAgICB2YXIgX3RoaXMkc3RhdGU4ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBzZWxlY3RWYWx1ZSA9IF90aGlzJHN0YXRlOC5zZWxlY3RWYWx1ZSxcbiAgICAgICAgICBmb2N1c2VkVmFsdWUgPSBfdGhpcyRzdGF0ZTguZm9jdXNlZFZhbHVlLFxuICAgICAgICAgIGlzRm9jdXNlZCA9IF90aGlzJHN0YXRlOC5pc0ZvY3VzZWQ7XG5cbiAgICAgIGlmICghdGhpcy5oYXNWYWx1ZSgpIHx8ICFjb250cm9sU2hvdWxkUmVuZGVyVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0VmFsdWUgPyBudWxsIDogUmVhY3QuY3JlYXRlRWxlbWVudChQbGFjZWhvbGRlciwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgICAga2V5OiBcInBsYWNlaG9sZGVyXCIsXG4gICAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgICB9KSwgcGxhY2Vob2xkZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNNdWx0aSkge1xuICAgICAgICB2YXIgc2VsZWN0VmFsdWVzID0gc2VsZWN0VmFsdWUubWFwKGZ1bmN0aW9uIChvcHQpIHtcbiAgICAgICAgICB2YXIgaXNPcHRpb25Gb2N1c2VkID0gb3B0ID09PSBmb2N1c2VkVmFsdWU7XG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTXVsdGlWYWx1ZSwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICAgICAgIENvbnRhaW5lcjogTXVsdGlWYWx1ZUNvbnRhaW5lcixcbiAgICAgICAgICAgICAgTGFiZWw6IE11bHRpVmFsdWVMYWJlbCxcbiAgICAgICAgICAgICAgUmVtb3ZlOiBNdWx0aVZhbHVlUmVtb3ZlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNGb2N1c2VkOiBpc09wdGlvbkZvY3VzZWQsXG4gICAgICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICAgICAga2V5OiBfdGhpczQuZ2V0T3B0aW9uVmFsdWUob3B0KSxcbiAgICAgICAgICAgIHJlbW92ZVByb3BzOiB7XG4gICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5yZW1vdmVWYWx1ZShvcHQpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvblRvdWNoRW5kOiBmdW5jdGlvbiBvblRvdWNoRW5kKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczQucmVtb3ZlVmFsdWUob3B0KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb25Nb3VzZURvd246IGZ1bmN0aW9uIG9uTW91c2VEb3duKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IG9wdFxuICAgICAgICAgIH0pLCBfdGhpczQuZm9ybWF0T3B0aW9uTGFiZWwob3B0LCAndmFsdWUnKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2VsZWN0VmFsdWVzO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5wdXRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHNpbmdsZVZhbHVlID0gc2VsZWN0VmFsdWVbMF07XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTaW5nbGVWYWx1ZSwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgIGRhdGE6IHNpbmdsZVZhbHVlLFxuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkXG4gICAgICB9KSwgdGhpcy5mb3JtYXRPcHRpb25MYWJlbChzaW5nbGVWYWx1ZSwgJ3ZhbHVlJykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJDbGVhckluZGljYXRvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJDbGVhckluZGljYXRvcigpIHtcbiAgICAgIHZhciBDbGVhckluZGljYXRvciA9IHRoaXMuY29tcG9uZW50cy5DbGVhckluZGljYXRvcjtcbiAgICAgIHZhciBjb21tb25Qcm9wcyA9IHRoaXMuY29tbW9uUHJvcHM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxNiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzMTYuaXNEaXNhYmxlZCxcbiAgICAgICAgICBpc0xvYWRpbmcgPSBfdGhpcyRwcm9wczE2LmlzTG9hZGluZztcbiAgICAgIHZhciBpc0ZvY3VzZWQgPSB0aGlzLnN0YXRlLmlzRm9jdXNlZDtcblxuICAgICAgaWYgKCF0aGlzLmlzQ2xlYXJhYmxlKCkgfHwgIUNsZWFySW5kaWNhdG9yIHx8IGlzRGlzYWJsZWQgfHwgIXRoaXMuaGFzVmFsdWUoKSB8fCBpc0xvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbm5lclByb3BzID0ge1xuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5vbkNsZWFySW5kaWNhdG9yTW91c2VEb3duLFxuICAgICAgICBvblRvdWNoRW5kOiB0aGlzLm9uQ2xlYXJJbmRpY2F0b3JUb3VjaEVuZCxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xlYXJJbmRpY2F0b3IsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBpbm5lclByb3BzOiBpbm5lclByb3BzLFxuICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJMb2FkaW5nSW5kaWNhdG9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckxvYWRpbmdJbmRpY2F0b3IoKSB7XG4gICAgICB2YXIgTG9hZGluZ0luZGljYXRvciA9IHRoaXMuY29tcG9uZW50cy5Mb2FkaW5nSW5kaWNhdG9yO1xuICAgICAgdmFyIGNvbW1vblByb3BzID0gdGhpcy5jb21tb25Qcm9wcztcbiAgICAgIHZhciBfdGhpcyRwcm9wczE3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMxNy5pc0Rpc2FibGVkLFxuICAgICAgICAgIGlzTG9hZGluZyA9IF90aGlzJHByb3BzMTcuaXNMb2FkaW5nO1xuICAgICAgdmFyIGlzRm9jdXNlZCA9IHRoaXMuc3RhdGUuaXNGb2N1c2VkO1xuICAgICAgaWYgKCFMb2FkaW5nSW5kaWNhdG9yIHx8ICFpc0xvYWRpbmcpIHJldHVybiBudWxsO1xuICAgICAgdmFyIGlubmVyUHJvcHMgPSB7XG4gICAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExvYWRpbmdJbmRpY2F0b3IsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBpbm5lclByb3BzOiBpbm5lclByb3BzLFxuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJJbmRpY2F0b3JTZXBhcmF0b3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVySW5kaWNhdG9yU2VwYXJhdG9yKCkge1xuICAgICAgdmFyIF90aGlzJGNvbXBvbmVudHMyID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICAgIERyb3Bkb3duSW5kaWNhdG9yID0gX3RoaXMkY29tcG9uZW50czIuRHJvcGRvd25JbmRpY2F0b3IsXG4gICAgICAgICAgSW5kaWNhdG9yU2VwYXJhdG9yID0gX3RoaXMkY29tcG9uZW50czIuSW5kaWNhdG9yU2VwYXJhdG9yOyAvLyBzZXBhcmF0b3IgZG9lc24ndCBtYWtlIHNlbnNlIHdpdGhvdXQgdGhlIGRyb3Bkb3duIGluZGljYXRvclxuXG4gICAgICBpZiAoIURyb3Bkb3duSW5kaWNhdG9yIHx8ICFJbmRpY2F0b3JTZXBhcmF0b3IpIHJldHVybiBudWxsO1xuICAgICAgdmFyIGNvbW1vblByb3BzID0gdGhpcy5jb21tb25Qcm9wcztcbiAgICAgIHZhciBpc0Rpc2FibGVkID0gdGhpcy5wcm9wcy5pc0Rpc2FibGVkO1xuICAgICAgdmFyIGlzRm9jdXNlZCA9IHRoaXMuc3RhdGUuaXNGb2N1c2VkO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5kaWNhdG9yU2VwYXJhdG9yLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyRHJvcGRvd25JbmRpY2F0b3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRHJvcGRvd25JbmRpY2F0b3IoKSB7XG4gICAgICB2YXIgRHJvcGRvd25JbmRpY2F0b3IgPSB0aGlzLmNvbXBvbmVudHMuRHJvcGRvd25JbmRpY2F0b3I7XG4gICAgICBpZiAoIURyb3Bkb3duSW5kaWNhdG9yKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBjb21tb25Qcm9wcyA9IHRoaXMuY29tbW9uUHJvcHM7XG4gICAgICB2YXIgaXNEaXNhYmxlZCA9IHRoaXMucHJvcHMuaXNEaXNhYmxlZDtcbiAgICAgIHZhciBpc0ZvY3VzZWQgPSB0aGlzLnN0YXRlLmlzRm9jdXNlZDtcbiAgICAgIHZhciBpbm5lclByb3BzID0ge1xuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5vbkRyb3Bkb3duSW5kaWNhdG9yTW91c2VEb3duLFxuICAgICAgICBvblRvdWNoRW5kOiB0aGlzLm9uRHJvcGRvd25JbmRpY2F0b3JUb3VjaEVuZCxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd25JbmRpY2F0b3IsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBpbm5lclByb3BzOiBpbm5lclByb3BzLFxuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJNZW51XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlck1lbnUoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJGNvbXBvbmVudHMzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICAgIEdyb3VwID0gX3RoaXMkY29tcG9uZW50czMuR3JvdXAsXG4gICAgICAgICAgR3JvdXBIZWFkaW5nID0gX3RoaXMkY29tcG9uZW50czMuR3JvdXBIZWFkaW5nLFxuICAgICAgICAgIE1lbnUkJDEgPSBfdGhpcyRjb21wb25lbnRzMy5NZW51LFxuICAgICAgICAgIE1lbnVMaXN0JCQxID0gX3RoaXMkY29tcG9uZW50czMuTWVudUxpc3QsXG4gICAgICAgICAgTWVudVBvcnRhbCQkMSA9IF90aGlzJGNvbXBvbmVudHMzLk1lbnVQb3J0YWwsXG4gICAgICAgICAgTG9hZGluZ01lc3NhZ2UkJDEgPSBfdGhpcyRjb21wb25lbnRzMy5Mb2FkaW5nTWVzc2FnZSxcbiAgICAgICAgICBOb09wdGlvbnNNZXNzYWdlJCQxID0gX3RoaXMkY29tcG9uZW50czMuTm9PcHRpb25zTWVzc2FnZSxcbiAgICAgICAgICBPcHRpb24gPSBfdGhpcyRjb21wb25lbnRzMy5PcHRpb247XG4gICAgICB2YXIgY29tbW9uUHJvcHMgPSB0aGlzLmNvbW1vblByb3BzO1xuICAgICAgdmFyIF90aGlzJHN0YXRlOSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgZm9jdXNlZE9wdGlvbiA9IF90aGlzJHN0YXRlOS5mb2N1c2VkT3B0aW9uLFxuICAgICAgICAgIG1lbnVPcHRpb25zID0gX3RoaXMkc3RhdGU5Lm1lbnVPcHRpb25zO1xuICAgICAgdmFyIF90aGlzJHByb3BzMTggPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNhcHR1cmVNZW51U2Nyb2xsID0gX3RoaXMkcHJvcHMxOC5jYXB0dXJlTWVudVNjcm9sbCxcbiAgICAgICAgICBpbnB1dFZhbHVlID0gX3RoaXMkcHJvcHMxOC5pbnB1dFZhbHVlLFxuICAgICAgICAgIGlzTG9hZGluZyA9IF90aGlzJHByb3BzMTguaXNMb2FkaW5nLFxuICAgICAgICAgIGxvYWRpbmdNZXNzYWdlID0gX3RoaXMkcHJvcHMxOC5sb2FkaW5nTWVzc2FnZSxcbiAgICAgICAgICBtaW5NZW51SGVpZ2h0ID0gX3RoaXMkcHJvcHMxOC5taW5NZW51SGVpZ2h0LFxuICAgICAgICAgIG1heE1lbnVIZWlnaHQgPSBfdGhpcyRwcm9wczE4Lm1heE1lbnVIZWlnaHQsXG4gICAgICAgICAgbWVudUlzT3BlbiA9IF90aGlzJHByb3BzMTgubWVudUlzT3BlbixcbiAgICAgICAgICBtZW51UGxhY2VtZW50ID0gX3RoaXMkcHJvcHMxOC5tZW51UGxhY2VtZW50LFxuICAgICAgICAgIG1lbnVQb3NpdGlvbiA9IF90aGlzJHByb3BzMTgubWVudVBvc2l0aW9uLFxuICAgICAgICAgIG1lbnVQb3J0YWxUYXJnZXQgPSBfdGhpcyRwcm9wczE4Lm1lbnVQb3J0YWxUYXJnZXQsXG4gICAgICAgICAgbWVudVNob3VsZEJsb2NrU2Nyb2xsID0gX3RoaXMkcHJvcHMxOC5tZW51U2hvdWxkQmxvY2tTY3JvbGwsXG4gICAgICAgICAgbWVudVNob3VsZFNjcm9sbEludG9WaWV3ID0gX3RoaXMkcHJvcHMxOC5tZW51U2hvdWxkU2Nyb2xsSW50b1ZpZXcsXG4gICAgICAgICAgbm9PcHRpb25zTWVzc2FnZSA9IF90aGlzJHByb3BzMTgubm9PcHRpb25zTWVzc2FnZSxcbiAgICAgICAgICBvbk1lbnVTY3JvbGxUb1RvcCA9IF90aGlzJHByb3BzMTgub25NZW51U2Nyb2xsVG9Ub3AsXG4gICAgICAgICAgb25NZW51U2Nyb2xsVG9Cb3R0b20gPSBfdGhpcyRwcm9wczE4Lm9uTWVudVNjcm9sbFRvQm90dG9tO1xuICAgICAgaWYgKCFtZW51SXNPcGVuKSByZXR1cm4gbnVsbDsgLy8gVE9ETzogSW50ZXJuYWwgT3B0aW9uIFR5cGUgaGVyZVxuXG4gICAgICB2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHByb3BzKSB7XG4gICAgICAgIC8vIGZvciBwZXJmb3JtYW5jZSwgdGhlIG1lbnUgb3B0aW9ucyBpbiBzdGF0ZSBhcmVuJ3QgY2hhbmdlZCB3aGVuIHRoZVxuICAgICAgICAvLyBmb2N1c2VkIG9wdGlvbiBjaGFuZ2VzIHNvIHdlIGNhbGN1bGF0ZSBhZGRpdGlvbmFsIHByb3BzIGJhc2VkIG9uIHRoYXRcbiAgICAgICAgdmFyIGlzRm9jdXNlZCA9IGZvY3VzZWRPcHRpb24gPT09IHByb3BzLmRhdGE7XG4gICAgICAgIHByb3BzLmlubmVyUmVmID0gaXNGb2N1c2VkID8gX3RoaXM1LmdldEZvY3VzZWRPcHRpb25SZWYgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE9wdGlvbiwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCBwcm9wcywge1xuICAgICAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkXG4gICAgICAgIH0pLCBfdGhpczUuZm9ybWF0T3B0aW9uTGFiZWwocHJvcHMuZGF0YSwgJ21lbnUnKSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWVudVVJO1xuXG4gICAgICBpZiAodGhpcy5oYXNPcHRpb25zKCkpIHtcbiAgICAgICAgbWVudVVJID0gbWVudU9wdGlvbnMucmVuZGVyLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdncm91cCcpIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0gaXRlbS50eXBlLFxuICAgICAgICAgICAgICAgIGdyb3VwID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGl0ZW0sIFtcInR5cGVcIl0pO1xuXG4gICAgICAgICAgICB2YXIgaGVhZGluZ0lkID0gXCJcIi5jb25jYXQoaXRlbS5rZXksIFwiLWhlYWRpbmdcIik7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChHcm91cCwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCBncm91cCwge1xuICAgICAgICAgICAgICBIZWFkaW5nOiBHcm91cEhlYWRpbmcsXG4gICAgICAgICAgICAgIGhlYWRpbmdQcm9wczoge1xuICAgICAgICAgICAgICAgIGlkOiBoZWFkaW5nSWRcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbGFiZWw6IF90aGlzNS5mb3JtYXRHcm91cExhYmVsKGl0ZW0uZGF0YSlcbiAgICAgICAgICAgIH0pLCBpdGVtLm9wdGlvbnMubWFwKGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihvcHRpb24pO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnb3B0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpc0xvYWRpbmcpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBsb2FkaW5nTWVzc2FnZSh7XG4gICAgICAgICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG1lc3NhZ2UgPT09IG51bGwpIHJldHVybiBudWxsO1xuICAgICAgICBtZW51VUkgPSBSZWFjdC5jcmVhdGVFbGVtZW50KExvYWRpbmdNZXNzYWdlJCQxLCBjb21tb25Qcm9wcywgbWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX21lc3NhZ2UgPSBub09wdGlvbnNNZXNzYWdlKHtcbiAgICAgICAgICBpbnB1dFZhbHVlOiBpbnB1dFZhbHVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChfbWVzc2FnZSA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICAgIG1lbnVVSSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTm9PcHRpb25zTWVzc2FnZSQkMSwgY29tbW9uUHJvcHMsIF9tZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG1lbnVQbGFjZW1lbnRQcm9wcyA9IHtcbiAgICAgICAgbWluTWVudUhlaWdodDogbWluTWVudUhlaWdodCxcbiAgICAgICAgbWF4TWVudUhlaWdodDogbWF4TWVudUhlaWdodCxcbiAgICAgICAgbWVudVBsYWNlbWVudDogbWVudVBsYWNlbWVudCxcbiAgICAgICAgbWVudVBvc2l0aW9uOiBtZW51UG9zaXRpb24sXG4gICAgICAgIG1lbnVTaG91bGRTY3JvbGxJbnRvVmlldzogbWVudVNob3VsZFNjcm9sbEludG9WaWV3XG4gICAgICB9O1xuICAgICAgdmFyIG1lbnVFbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChNZW51UGxhY2VyLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIG1lbnVQbGFjZW1lbnRQcm9wcyksIGZ1bmN0aW9uIChfcmVmNikge1xuICAgICAgICB2YXIgcmVmID0gX3JlZjYucmVmLFxuICAgICAgICAgICAgX3JlZjYkcGxhY2VyUHJvcHMgPSBfcmVmNi5wbGFjZXJQcm9wcyxcbiAgICAgICAgICAgIHBsYWNlbWVudCA9IF9yZWY2JHBsYWNlclByb3BzLnBsYWNlbWVudCxcbiAgICAgICAgICAgIG1heEhlaWdodCA9IF9yZWY2JHBsYWNlclByb3BzLm1heEhlaWdodDtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudSQkMSwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCBtZW51UGxhY2VtZW50UHJvcHMsIHtcbiAgICAgICAgICBpbm5lclJlZjogcmVmLFxuICAgICAgICAgIGlubmVyUHJvcHM6IHtcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiBfdGhpczUub25NZW51TW91c2VEb3duLFxuICAgICAgICAgICAgb25Nb3VzZU1vdmU6IF90aGlzNS5vbk1lbnVNb3VzZU1vdmVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGlzTG9hZGluZzogaXNMb2FkaW5nLFxuICAgICAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFNjcm9sbENhcHRvclN3aXRjaCwge1xuICAgICAgICAgIGlzRW5hYmxlZDogY2FwdHVyZU1lbnVTY3JvbGwsXG4gICAgICAgICAgb25Ub3BBcnJpdmU6IG9uTWVudVNjcm9sbFRvVG9wLFxuICAgICAgICAgIG9uQm90dG9tQXJyaXZlOiBvbk1lbnVTY3JvbGxUb0JvdHRvbVxuICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFNjcm9sbEJsb2NrLCB7XG4gICAgICAgICAgaXNFbmFibGVkOiBtZW51U2hvdWxkQmxvY2tTY3JvbGxcbiAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChNZW51TGlzdCQkMSwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgICAgaW5uZXJSZWY6IF90aGlzNS5nZXRNZW51TGlzdFJlZixcbiAgICAgICAgICBpc0xvYWRpbmc6IGlzTG9hZGluZyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodFxuICAgICAgICB9KSwgbWVudVVJKSkpKTtcbiAgICAgIH0pOyAvLyBwb3NpdGlvbmluZyBiZWhhdmlvdXIgaXMgYWxtb3N0IGlkZW50aWNhbCBmb3IgcG9ydGFsbGVkIGFuZCBmaXhlZCxcbiAgICAgIC8vIHNvIHdlIHVzZSB0aGUgc2FtZSBjb21wb25lbnQuIHRoZSBhY3R1YWwgcG9ydGFsbGluZyBsb2dpYyBpcyBmb3JrZWRcbiAgICAgIC8vIHdpdGhpbiB0aGUgY29tcG9uZW50IGJhc2VkIG9uIGBtZW51UG9zaXRpb25gXG5cbiAgICAgIHJldHVybiBtZW51UG9ydGFsVGFyZ2V0IHx8IG1lbnVQb3NpdGlvbiA9PT0gJ2ZpeGVkJyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudVBvcnRhbCQkMSwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgIGFwcGVuZFRvOiBtZW51UG9ydGFsVGFyZ2V0LFxuICAgICAgICBjb250cm9sRWxlbWVudDogdGhpcy5jb250cm9sUmVmLFxuICAgICAgICBtZW51UGxhY2VtZW50OiBtZW51UGxhY2VtZW50LFxuICAgICAgICBtZW51UG9zaXRpb246IG1lbnVQb3NpdGlvblxuICAgICAgfSksIG1lbnVFbGVtZW50KSA6IG1lbnVFbGVtZW50O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJGb3JtRmllbGRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRm9ybUZpZWxkKCkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczE5ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBkZWxpbWl0ZXIgPSBfdGhpcyRwcm9wczE5LmRlbGltaXRlcixcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMxOS5pc0Rpc2FibGVkLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczE5LmlzTXVsdGksXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzMTkubmFtZTtcbiAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IHRoaXMuc3RhdGUuc2VsZWN0VmFsdWU7XG4gICAgICBpZiAoIW5hbWUgfHwgaXNEaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICBpZiAoaXNNdWx0aSkge1xuICAgICAgICBpZiAoZGVsaW1pdGVyKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gc2VsZWN0VmFsdWUubWFwKGZ1bmN0aW9uIChvcHQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczYuZ2V0T3B0aW9uVmFsdWUob3B0KTtcbiAgICAgICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdHlwZTogXCJoaWRkZW5cIixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpbnB1dCA9IHNlbGVjdFZhbHVlLmxlbmd0aCA+IDAgPyBzZWxlY3RWYWx1ZS5tYXAoZnVuY3Rpb24gKG9wdCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgIGtleTogXCJpLVwiLmNvbmNhdChpKSxcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgdHlwZTogXCJoaWRkZW5cIixcbiAgICAgICAgICAgICAgdmFsdWU6IF90aGlzNi5nZXRPcHRpb25WYWx1ZShvcHQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdHlwZTogXCJoaWRkZW5cIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF92YWx1ZSA9IHNlbGVjdFZhbHVlWzBdID8gdGhpcy5nZXRPcHRpb25WYWx1ZShzZWxlY3RWYWx1ZVswXSkgOiAnJztcblxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIHR5cGU6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgdmFsdWU6IF92YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyTGl2ZVJlZ2lvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJMaXZlUmVnaW9uKCkge1xuICAgICAgaWYgKCF0aGlzLnN0YXRlLmlzRm9jdXNlZCkgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChBMTF5VGV4dCwge1xuICAgICAgICBcImFyaWEtbGl2ZVwiOiBcImFzc2VydGl2ZVwiXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCB7XG4gICAgICAgIGlkOiBcImFyaWEtc2VsZWN0aW9uLWV2ZW50XCJcbiAgICAgIH0sIFwiXFx4QTBcIiwgdGhpcy5zdGF0ZS5hcmlhTGl2ZVNlbGVjdGlvbiksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIHtcbiAgICAgICAgaWQ6IFwiYXJpYS1jb250ZXh0XCJcbiAgICAgIH0sIFwiXFx4QTBcIiwgdGhpcy5jb25zdHJ1Y3RBcmlhTGl2ZU1lc3NhZ2UoKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJGNvbXBvbmVudHM0ID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICAgIENvbnRyb2wgPSBfdGhpcyRjb21wb25lbnRzNC5Db250cm9sLFxuICAgICAgICAgIEluZGljYXRvcnNDb250YWluZXIgPSBfdGhpcyRjb21wb25lbnRzNC5JbmRpY2F0b3JzQ29udGFpbmVyLFxuICAgICAgICAgIFNlbGVjdENvbnRhaW5lciA9IF90aGlzJGNvbXBvbmVudHM0LlNlbGVjdENvbnRhaW5lcixcbiAgICAgICAgICBWYWx1ZUNvbnRhaW5lciA9IF90aGlzJGNvbXBvbmVudHM0LlZhbHVlQ29udGFpbmVyO1xuICAgICAgdmFyIF90aGlzJHByb3BzMjAgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMjAuY2xhc3NOYW1lLFxuICAgICAgICAgIGlkID0gX3RoaXMkcHJvcHMyMC5pZCxcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMyMC5pc0Rpc2FibGVkLFxuICAgICAgICAgIG1lbnVJc09wZW4gPSBfdGhpcyRwcm9wczIwLm1lbnVJc09wZW47XG4gICAgICB2YXIgaXNGb2N1c2VkID0gdGhpcy5zdGF0ZS5pc0ZvY3VzZWQ7XG4gICAgICB2YXIgY29tbW9uUHJvcHMgPSB0aGlzLmNvbW1vblByb3BzID0gdGhpcy5nZXRDb21tb25Qcm9wcygpO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0Q29udGFpbmVyLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIGlubmVyUHJvcHM6IHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgb25LZXlEb3duOiB0aGlzLm9uS2V5RG93blxuICAgICAgICB9LFxuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgfSksIHRoaXMucmVuZGVyTGl2ZVJlZ2lvbigpLCBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRyb2wsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBpbm5lclJlZjogdGhpcy5nZXRDb250cm9sUmVmLFxuICAgICAgICBpbm5lclByb3BzOiB7XG4gICAgICAgICAgb25Nb3VzZURvd246IHRoaXMub25Db250cm9sTW91c2VEb3duLFxuICAgICAgICAgIG9uVG91Y2hFbmQ6IHRoaXMub25Db250cm9sVG91Y2hFbmRcbiAgICAgICAgfSxcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWQsXG4gICAgICAgIG1lbnVJc09wZW46IG1lbnVJc09wZW5cbiAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFZhbHVlQ29udGFpbmVyLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZFxuICAgICAgfSksIHRoaXMucmVuZGVyUGxhY2Vob2xkZXJPclZhbHVlKCksIHRoaXMucmVuZGVySW5wdXQoKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5kaWNhdG9yc0NvbnRhaW5lciwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWRcbiAgICAgIH0pLCB0aGlzLnJlbmRlckNsZWFySW5kaWNhdG9yKCksIHRoaXMucmVuZGVyTG9hZGluZ0luZGljYXRvcigpLCB0aGlzLnJlbmRlckluZGljYXRvclNlcGFyYXRvcigpLCB0aGlzLnJlbmRlckRyb3Bkb3duSW5kaWNhdG9yKCkpKSwgdGhpcy5yZW5kZXJNZW51KCksIHRoaXMucmVuZGVyRm9ybUZpZWxkKCkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZWxlY3Q7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShTZWxlY3QsIFwiZGVmYXVsdFByb3BzXCIsIGRlZmF1bHRQcm9wcyk7XG5cbnZhciBkZWZhdWx0UHJvcHMkMSA9IHtcbiAgZGVmYXVsdElucHV0VmFsdWU6ICcnLFxuICBkZWZhdWx0TWVudUlzT3BlbjogZmFsc2UsXG4gIGRlZmF1bHRWYWx1ZTogbnVsbFxufTtcblxudmFyIG1hbmFnZVN0YXRlID0gZnVuY3Rpb24gbWFuYWdlU3RhdGUoU2VsZWN0Q29tcG9uZW50KSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHJldHVybiBfdGVtcCA9IF9jbGFzcyA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoU3RhdGVNYW5hZ2VyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFN0YXRlTWFuYWdlcigpIHtcbiAgICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0ZU1hbmFnZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihTdGF0ZU1hbmFnZXIpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInNlbGVjdFwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic3RhdGVcIiwge1xuICAgICAgICBpbnB1dFZhbHVlOiBfdGhpcy5wcm9wcy5pbnB1dFZhbHVlICE9PSB1bmRlZmluZWQgPyBfdGhpcy5wcm9wcy5pbnB1dFZhbHVlIDogX3RoaXMucHJvcHMuZGVmYXVsdElucHV0VmFsdWUsXG4gICAgICAgIG1lbnVJc09wZW46IF90aGlzLnByb3BzLm1lbnVJc09wZW4gIT09IHVuZGVmaW5lZCA/IF90aGlzLnByb3BzLm1lbnVJc09wZW4gOiBfdGhpcy5wcm9wcy5kZWZhdWx0TWVudUlzT3BlbixcbiAgICAgICAgdmFsdWU6IF90aGlzLnByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgPyBfdGhpcy5wcm9wcy52YWx1ZSA6IF90aGlzLnByb3BzLmRlZmF1bHRWYWx1ZVxuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkNoYW5nZVwiLCBmdW5jdGlvbiAodmFsdWUsIGFjdGlvbk1ldGEpIHtcbiAgICAgICAgX3RoaXMuY2FsbFByb3AoJ29uQ2hhbmdlJywgdmFsdWUsIGFjdGlvbk1ldGEpO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uSW5wdXRDaGFuZ2VcIiwgZnVuY3Rpb24gKHZhbHVlLCBhY3Rpb25NZXRhKSB7XG4gICAgICAgIC8vIFRPRE86IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2UgYWxsb3cgdGhlIHByb3AgdG8gcmV0dXJuIGEgbmV3XG4gICAgICAgIC8vIHZhbHVlLCBidXQgbm93IGlucHV0VmFsdWUgaXMgYSBjb250cm9sbGFibGUgcHJvcCB3ZSBwcm9iYWJseSBzaG91bGRuJ3RcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gX3RoaXMuY2FsbFByb3AoJ29uSW5wdXRDaGFuZ2UnLCB2YWx1ZSwgYWN0aW9uTWV0YSk7XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlucHV0VmFsdWU6IG5ld1ZhbHVlICE9PSB1bmRlZmluZWQgPyBuZXdWYWx1ZSA6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbk1lbnVPcGVuXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuY2FsbFByb3AoJ29uTWVudU9wZW4nKTtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbWVudUlzT3BlbjogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25NZW51Q2xvc2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5jYWxsUHJvcCgnb25NZW51Q2xvc2UnKTtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbWVudUlzT3BlbjogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhTdGF0ZU1hbmFnZXIsIFt7XG4gICAgICBrZXk6IFwiZm9jdXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgICAgdGhpcy5zZWxlY3QuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYmx1clwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJsdXIoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0LmJsdXIoKTtcbiAgICAgIH0gLy8gRklYTUU6IHVudHlwZWQgZmxvdyBjb2RlLCByZXR1cm4gYW55XG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0UHJvcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFByb3Aoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzW2tleV0gIT09IHVuZGVmaW5lZCA/IHRoaXMucHJvcHNba2V5XSA6IHRoaXMuc3RhdGVba2V5XTtcbiAgICAgIH0gLy8gRklYTUU6IHVudHlwZWQgZmxvdyBjb2RlLCByZXR1cm4gYW55XG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2FsbFByb3BcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxsUHJvcChuYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wc1tuYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcztcblxuICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAoX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzKVtuYW1lXS5hcHBseShfdGhpcyRwcm9wcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGRlZmF1bHRJbnB1dFZhbHVlID0gX3RoaXMkcHJvcHMyLmRlZmF1bHRJbnB1dFZhbHVlLFxuICAgICAgICAgICAgZGVmYXVsdE1lbnVJc09wZW4gPSBfdGhpcyRwcm9wczIuZGVmYXVsdE1lbnVJc09wZW4sXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBfdGhpcyRwcm9wczIuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMyLCBbXCJkZWZhdWx0SW5wdXRWYWx1ZVwiLCBcImRlZmF1bHRNZW51SXNPcGVuXCIsIFwiZGVmYXVsdFZhbHVlXCJdKTtcblxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3RDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICAgIF90aGlzMi5zZWxlY3QgPSBfcmVmO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaW5wdXRWYWx1ZTogdGhpcy5nZXRQcm9wKCdpbnB1dFZhbHVlJyksXG4gICAgICAgICAgbWVudUlzT3BlbjogdGhpcy5nZXRQcm9wKCdtZW51SXNPcGVuJyksXG4gICAgICAgICAgb25DaGFuZ2U6IHRoaXMub25DaGFuZ2UsXG4gICAgICAgICAgb25JbnB1dENoYW5nZTogdGhpcy5vbklucHV0Q2hhbmdlLFxuICAgICAgICAgIG9uTWVudUNsb3NlOiB0aGlzLm9uTWVudUNsb3NlLFxuICAgICAgICAgIG9uTWVudU9wZW46IHRoaXMub25NZW51T3BlbixcbiAgICAgICAgICB2YWx1ZTogdGhpcy5nZXRQcm9wKCd2YWx1ZScpXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU3RhdGVNYW5hZ2VyO1xuICB9KENvbXBvbmVudCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MsIFwiZGVmYXVsdFByb3BzXCIsIGRlZmF1bHRQcm9wcyQxKSwgX3RlbXA7XG59O1xuXG52YXIgZGVmYXVsdFByb3BzJDIgPSB7XG4gIGNhY2hlT3B0aW9uczogZmFsc2UsXG4gIGRlZmF1bHRPcHRpb25zOiBmYWxzZSxcbiAgZmlsdGVyT3B0aW9uOiBudWxsXG59O1xudmFyIG1ha2VBc3luY1NlbGVjdCA9IGZ1bmN0aW9uIG1ha2VBc3luY1NlbGVjdChTZWxlY3RDb21wb25lbnQpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhBc3luYywgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBBc3luYyhwcm9wcykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXN5bmMpO1xuXG4gICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBc3luYykuY2FsbCh0aGlzKSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzZWxlY3RcIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImxhc3RSZXF1ZXN0XCIsIHZvaWQgMCk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJtb3VudGVkXCIsIGZhbHNlKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9wdGlvbnNDYWNoZVwiLCB7fSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJoYW5kbGVJbnB1dENoYW5nZVwiLCBmdW5jdGlvbiAobmV3VmFsdWUsIGFjdGlvbk1ldGEpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBjYWNoZU9wdGlvbnMgPSBfdGhpcyRwcm9wcy5jYWNoZU9wdGlvbnMsXG4gICAgICAgICAgICBvbklucHV0Q2hhbmdlID0gX3RoaXMkcHJvcHMub25JbnB1dENoYW5nZTsgLy8gVE9ET1xuXG4gICAgICAgIHZhciBpbnB1dFZhbHVlID0gaGFuZGxlSW5wdXRDaGFuZ2UobmV3VmFsdWUsIGFjdGlvbk1ldGEsIG9uSW5wdXRDaGFuZ2UpO1xuXG4gICAgICAgIGlmICghaW5wdXRWYWx1ZSkge1xuICAgICAgICAgIGRlbGV0ZSBfdGhpcy5sYXN0UmVxdWVzdDtcblxuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGlucHV0VmFsdWU6ICcnLFxuICAgICAgICAgICAgbG9hZGVkSW5wdXRWYWx1ZTogJycsXG4gICAgICAgICAgICBsb2FkZWRPcHRpb25zOiBbXSxcbiAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICBwYXNzRW1wdHlPcHRpb25zOiBmYWxzZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhY2hlT3B0aW9ucyAmJiBfdGhpcy5vcHRpb25zQ2FjaGVbaW5wdXRWYWx1ZV0pIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpbnB1dFZhbHVlOiBpbnB1dFZhbHVlLFxuICAgICAgICAgICAgbG9hZGVkSW5wdXRWYWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgICAgICAgIGxvYWRlZE9wdGlvbnM6IF90aGlzLm9wdGlvbnNDYWNoZVtpbnB1dFZhbHVlXSxcbiAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICBwYXNzRW1wdHlPcHRpb25zOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciByZXF1ZXN0ID0gX3RoaXMubGFzdFJlcXVlc3QgPSB7fTtcblxuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGlucHV0VmFsdWU6IGlucHV0VmFsdWUsXG4gICAgICAgICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICBwYXNzRW1wdHlPcHRpb25zOiAhX3RoaXMuc3RhdGUubG9hZGVkSW5wdXRWYWx1ZVxuICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmxvYWRPcHRpb25zKGlucHV0VmFsdWUsIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgIGlmICghX3RoaXMubW91bnRlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMub3B0aW9uc0NhY2hlW2lucHV0VmFsdWVdID0gb3B0aW9ucztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChyZXF1ZXN0ICE9PSBfdGhpcy5sYXN0UmVxdWVzdCkgcmV0dXJuO1xuICAgICAgICAgICAgICBkZWxldGUgX3RoaXMubGFzdFJlcXVlc3Q7XG5cbiAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgbG9hZGVkSW5wdXRWYWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgICAgICAgICAgICBsb2FkZWRPcHRpb25zOiBvcHRpb25zIHx8IFtdLFxuICAgICAgICAgICAgICAgIHBhc3NFbXB0eU9wdGlvbnM6IGZhbHNlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgZGVmYXVsdE9wdGlvbnM6IEFycmF5LmlzQXJyYXkocHJvcHMuZGVmYXVsdE9wdGlvbnMpID8gcHJvcHMuZGVmYXVsdE9wdGlvbnMgOiB1bmRlZmluZWQsXG4gICAgICAgIGlucHV0VmFsdWU6IHR5cGVvZiBwcm9wcy5pbnB1dFZhbHVlICE9PSAndW5kZWZpbmVkJyA/IHByb3BzLmlucHV0VmFsdWUgOiAnJyxcbiAgICAgICAgaXNMb2FkaW5nOiBwcm9wcy5kZWZhdWx0T3B0aW9ucyA9PT0gdHJ1ZSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgbG9hZGVkT3B0aW9uczogW10sXG4gICAgICAgIHBhc3NFbXB0eU9wdGlvbnM6IGZhbHNlXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhBc3luYywgW3tcbiAgICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICAgICAgICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB0aGlzLnByb3BzLmRlZmF1bHRPcHRpb25zO1xuICAgICAgICB2YXIgaW5wdXRWYWx1ZSA9IHRoaXMuc3RhdGUuaW5wdXRWYWx1ZTtcblxuICAgICAgICBpZiAoZGVmYXVsdE9wdGlvbnMgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLmxvYWRPcHRpb25zKGlucHV0VmFsdWUsIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzMi5tb3VudGVkKSByZXR1cm47XG4gICAgICAgICAgICB2YXIgaXNMb2FkaW5nID0gISFfdGhpczIubGFzdFJlcXVlc3Q7XG5cbiAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIGRlZmF1bHRPcHRpb25zOiBvcHRpb25zIHx8IFtdLFxuICAgICAgICAgICAgICBpc0xvYWRpbmc6IGlzTG9hZGluZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIC8vIGlmIHRoZSBjYWNoZU9wdGlvbnMgcHJvcCBjaGFuZ2VzLCBjbGVhciB0aGUgY2FjaGVcbiAgICAgICAgaWYgKG5leHRQcm9wcy5jYWNoZU9wdGlvbnMgIT09IHRoaXMucHJvcHMuY2FjaGVPcHRpb25zKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zQ2FjaGUgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0UHJvcHMuZGVmYXVsdE9wdGlvbnMgIT09IHRoaXMucHJvcHMuZGVmYXVsdE9wdGlvbnMpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGRlZmF1bHRPcHRpb25zOiBBcnJheS5pc0FycmF5KG5leHRQcm9wcy5kZWZhdWx0T3B0aW9ucykgPyBuZXh0UHJvcHMuZGVmYXVsdE9wdGlvbnMgOiB1bmRlZmluZWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZm9jdXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgICAgdGhpcy5zZWxlY3QuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYmx1clwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJsdXIoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0LmJsdXIoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibG9hZE9wdGlvbnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkT3B0aW9ucyhpbnB1dFZhbHVlLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgbG9hZE9wdGlvbnMgPSB0aGlzLnByb3BzLmxvYWRPcHRpb25zO1xuICAgICAgICBpZiAoIWxvYWRPcHRpb25zKSByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgdmFyIGxvYWRlciA9IGxvYWRPcHRpb25zKGlucHV0VmFsdWUsIGNhbGxiYWNrKTtcblxuICAgICAgICBpZiAobG9hZGVyICYmIHR5cGVvZiBsb2FkZXIudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGxvYWRlci50aGVuKGNhbGxiYWNrLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZW5kZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgbG9hZE9wdGlvbnMgPSBfdGhpcyRwcm9wczIubG9hZE9wdGlvbnMsXG4gICAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wczIsIFtcImxvYWRPcHRpb25zXCJdKTtcblxuICAgICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgZGVmYXVsdE9wdGlvbnMgPSBfdGhpcyRzdGF0ZS5kZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgICAgIGlucHV0VmFsdWUgPSBfdGhpcyRzdGF0ZS5pbnB1dFZhbHVlLFxuICAgICAgICAgICAgaXNMb2FkaW5nID0gX3RoaXMkc3RhdGUuaXNMb2FkaW5nLFxuICAgICAgICAgICAgbG9hZGVkSW5wdXRWYWx1ZSA9IF90aGlzJHN0YXRlLmxvYWRlZElucHV0VmFsdWUsXG4gICAgICAgICAgICBsb2FkZWRPcHRpb25zID0gX3RoaXMkc3RhdGUubG9hZGVkT3B0aW9ucyxcbiAgICAgICAgICAgIHBhc3NFbXB0eU9wdGlvbnMgPSBfdGhpcyRzdGF0ZS5wYXNzRW1wdHlPcHRpb25zO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHBhc3NFbXB0eU9wdGlvbnMgPyBbXSA6IGlucHV0VmFsdWUgJiYgbG9hZGVkSW5wdXRWYWx1ZSA/IGxvYWRlZE9wdGlvbnMgOiBkZWZhdWx0T3B0aW9ucyB8fCBbXTtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0Q29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihfcmVmKSB7XG4gICAgICAgICAgICBfdGhpczMuc2VsZWN0ID0gX3JlZjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgICAgaXNMb2FkaW5nOiBpc0xvYWRpbmcsXG4gICAgICAgICAgb25JbnB1dENoYW5nZTogdGhpcy5oYW5kbGVJbnB1dENoYW5nZVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEFzeW5jO1xuICB9KENvbXBvbmVudCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MsIFwiZGVmYXVsdFByb3BzXCIsIGRlZmF1bHRQcm9wcyQyKSwgX3RlbXA7XG59O1xudmFyIFNlbGVjdFN0YXRlID0gbWFuYWdlU3RhdGUoU2VsZWN0KTtcbnZhciBBc3luYyA9IG1ha2VBc3luY1NlbGVjdChTZWxlY3RTdGF0ZSk7XG5cbnZhciBjb21wYXJlT3B0aW9uID0gZnVuY3Rpb24gY29tcGFyZU9wdGlvbigpIHtcbiAgdmFyIGlucHV0VmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBjYW5kaWRhdGUgPSBTdHJpbmcoaW5wdXRWYWx1ZSkudG9Mb3dlckNhc2UoKTtcbiAgdmFyIG9wdGlvblZhbHVlID0gU3RyaW5nKG9wdGlvbi52YWx1ZSkudG9Mb3dlckNhc2UoKTtcbiAgdmFyIG9wdGlvbkxhYmVsID0gU3RyaW5nKG9wdGlvbi5sYWJlbCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIG9wdGlvblZhbHVlID09PSBjYW5kaWRhdGUgfHwgb3B0aW9uTGFiZWwgPT09IGNhbmRpZGF0ZTtcbn07XG5cbnZhciBidWlsdGlucyA9IHtcbiAgZm9ybWF0Q3JlYXRlTGFiZWw6IGZ1bmN0aW9uIGZvcm1hdENyZWF0ZUxhYmVsKGlucHV0VmFsdWUpIHtcbiAgICByZXR1cm4gXCJDcmVhdGUgXFxcIlwiLmNvbmNhdChpbnB1dFZhbHVlLCBcIlxcXCJcIik7XG4gIH0sXG4gIGlzVmFsaWROZXdPcHRpb246IGZ1bmN0aW9uIGlzVmFsaWROZXdPcHRpb24oaW5wdXRWYWx1ZSwgc2VsZWN0VmFsdWUsIHNlbGVjdE9wdGlvbnMpIHtcbiAgICByZXR1cm4gISghaW5wdXRWYWx1ZSB8fCBzZWxlY3RWYWx1ZS5zb21lKGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgIHJldHVybiBjb21wYXJlT3B0aW9uKGlucHV0VmFsdWUsIG9wdGlvbik7XG4gICAgfSkgfHwgc2VsZWN0T3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgIHJldHVybiBjb21wYXJlT3B0aW9uKGlucHV0VmFsdWUsIG9wdGlvbik7XG4gICAgfSkpO1xuICB9LFxuICBnZXROZXdPcHRpb25EYXRhOiBmdW5jdGlvbiBnZXROZXdPcHRpb25EYXRhKGlucHV0VmFsdWUsIG9wdGlvbkxhYmVsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiBvcHRpb25MYWJlbCxcbiAgICAgIHZhbHVlOiBpbnB1dFZhbHVlLFxuICAgICAgX19pc05ld19fOiB0cnVlXG4gICAgfTtcbiAgfVxufTtcbnZhciBkZWZhdWx0UHJvcHMkMyA9IF9vYmplY3RTcHJlYWQoe1xuICBhbGxvd0NyZWF0ZVdoaWxlTG9hZGluZzogZmFsc2UsXG4gIGNyZWF0ZU9wdGlvblBvc2l0aW9uOiAnbGFzdCdcbn0sIGJ1aWx0aW5zKTtcbnZhciBtYWtlQ3JlYXRhYmxlU2VsZWN0ID0gZnVuY3Rpb24gbWFrZUNyZWF0YWJsZVNlbGVjdChTZWxlY3RDb21wb25lbnQpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhDcmVhdGFibGUsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gQ3JlYXRhYmxlKHByb3BzKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDcmVhdGFibGUpO1xuXG4gICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihDcmVhdGFibGUpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInNlbGVjdFwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25DaGFuZ2VcIiwgZnVuY3Rpb24gKG5ld1ZhbHVlLCBhY3Rpb25NZXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgZ2V0TmV3T3B0aW9uRGF0YSA9IF90aGlzJHByb3BzLmdldE5ld09wdGlvbkRhdGEsXG4gICAgICAgICAgICBpbnB1dFZhbHVlID0gX3RoaXMkcHJvcHMuaW5wdXRWYWx1ZSxcbiAgICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wcy5pc011bHRpLFxuICAgICAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbkNoYW5nZSxcbiAgICAgICAgICAgIG9uQ3JlYXRlT3B0aW9uID0gX3RoaXMkcHJvcHMub25DcmVhdGVPcHRpb24sXG4gICAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzLnZhbHVlO1xuXG4gICAgICAgIGlmIChhY3Rpb25NZXRhLmFjdGlvbiAhPT0gJ3NlbGVjdC1vcHRpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIG9uQ2hhbmdlKG5ld1ZhbHVlLCBhY3Rpb25NZXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXdPcHRpb24gPSBfdGhpcy5zdGF0ZS5uZXdPcHRpb247XG4gICAgICAgIHZhciB2YWx1ZUFycmF5ID0gQXJyYXkuaXNBcnJheShuZXdWYWx1ZSkgPyBuZXdWYWx1ZSA6IFtuZXdWYWx1ZV07XG5cbiAgICAgICAgaWYgKHZhbHVlQXJyYXlbdmFsdWVBcnJheS5sZW5ndGggLSAxXSA9PT0gbmV3T3B0aW9uKSB7XG4gICAgICAgICAgaWYgKG9uQ3JlYXRlT3B0aW9uKSBvbkNyZWF0ZU9wdGlvbihpbnB1dFZhbHVlKTtlbHNlIHtcbiAgICAgICAgICAgIHZhciBuZXdPcHRpb25EYXRhID0gZ2V0TmV3T3B0aW9uRGF0YShpbnB1dFZhbHVlLCBpbnB1dFZhbHVlKTtcbiAgICAgICAgICAgIHZhciBuZXdBY3Rpb25NZXRhID0ge1xuICAgICAgICAgICAgICBhY3Rpb246ICdjcmVhdGUtb3B0aW9uJ1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGlzTXVsdGkpIHtcbiAgICAgICAgICAgICAgb25DaGFuZ2UoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjbGVhblZhbHVlKHZhbHVlKSksIFtuZXdPcHRpb25EYXRhXSksIG5ld0FjdGlvbk1ldGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb25DaGFuZ2UobmV3T3B0aW9uRGF0YSwgbmV3QWN0aW9uTWV0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uQ2hhbmdlKG5ld1ZhbHVlLCBhY3Rpb25NZXRhKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IHByb3BzLm9wdGlvbnMgfHwgW107XG4gICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgbmV3T3B0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKENyZWF0YWJsZSwgW3tcbiAgICAgIGtleTogXCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgdmFyIGFsbG93Q3JlYXRlV2hpbGVMb2FkaW5nID0gbmV4dFByb3BzLmFsbG93Q3JlYXRlV2hpbGVMb2FkaW5nLFxuICAgICAgICAgICAgY3JlYXRlT3B0aW9uUG9zaXRpb24gPSBuZXh0UHJvcHMuY3JlYXRlT3B0aW9uUG9zaXRpb24sXG4gICAgICAgICAgICBmb3JtYXRDcmVhdGVMYWJlbCA9IG5leHRQcm9wcy5mb3JtYXRDcmVhdGVMYWJlbCxcbiAgICAgICAgICAgIGdldE5ld09wdGlvbkRhdGEgPSBuZXh0UHJvcHMuZ2V0TmV3T3B0aW9uRGF0YSxcbiAgICAgICAgICAgIGlucHV0VmFsdWUgPSBuZXh0UHJvcHMuaW5wdXRWYWx1ZSxcbiAgICAgICAgICAgIGlzTG9hZGluZyA9IG5leHRQcm9wcy5pc0xvYWRpbmcsXG4gICAgICAgICAgICBpc1ZhbGlkTmV3T3B0aW9uID0gbmV4dFByb3BzLmlzVmFsaWROZXdPcHRpb24sXG4gICAgICAgICAgICB2YWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBuZXh0UHJvcHMub3B0aW9ucyB8fCBbXTtcbiAgICAgICAgdmFyIG5ld09wdGlvbiA9IHRoaXMuc3RhdGUubmV3T3B0aW9uO1xuXG4gICAgICAgIGlmIChpc1ZhbGlkTmV3T3B0aW9uKGlucHV0VmFsdWUsIGNsZWFuVmFsdWUodmFsdWUpLCBvcHRpb25zKSkge1xuICAgICAgICAgIG5ld09wdGlvbiA9IGdldE5ld09wdGlvbkRhdGEoaW5wdXRWYWx1ZSwgZm9ybWF0Q3JlYXRlTGFiZWwoaW5wdXRWYWx1ZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld09wdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG5ld09wdGlvbjogbmV3T3B0aW9uLFxuICAgICAgICAgIG9wdGlvbnM6IChhbGxvd0NyZWF0ZVdoaWxlTG9hZGluZyB8fCAhaXNMb2FkaW5nKSAmJiBuZXdPcHRpb24gPyBjcmVhdGVPcHRpb25Qb3NpdGlvbiA9PT0gJ2ZpcnN0JyA/IFtuZXdPcHRpb25dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkob3B0aW9ucykpIDogW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShvcHRpb25zKSwgW25ld09wdGlvbl0pIDogb3B0aW9uc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZm9jdXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgICAgdGhpcy5zZWxlY3QuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYmx1clwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJsdXIoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0LmJsdXIoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcyk7XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLnN0YXRlLm9wdGlvbnM7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoX3JlZikge1xuICAgICAgICAgICAgX3RoaXMyLnNlbGVjdCA9IF9yZWY7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ3JlYXRhYmxlO1xuICB9KENvbXBvbmVudCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MsIFwiZGVmYXVsdFByb3BzXCIsIGRlZmF1bHRQcm9wcyQzKSwgX3RlbXA7XG59OyAvLyBUT0RPOiBkbyB0aGlzIGluIHBhY2thZ2UgZW50cnlwb2ludFxuXG52YXIgU2VsZWN0Q3JlYXRhYmxlID0gbWFrZUNyZWF0YWJsZVNlbGVjdChTZWxlY3QpO1xudmFyIENyZWF0YWJsZSA9IG1hbmFnZVN0YXRlKFNlbGVjdENyZWF0YWJsZSk7XG5cbnZhciBTZWxlY3RDcmVhdGFibGUkMSA9IG1ha2VDcmVhdGFibGVTZWxlY3QoU2VsZWN0KTtcbnZhciBTZWxlY3RDcmVhdGFibGVTdGF0ZSA9IG1hbmFnZVN0YXRlKFNlbGVjdENyZWF0YWJsZSQxKTtcbnZhciBBc3luY0NyZWF0YWJsZSA9IG1ha2VBc3luY1NlbGVjdChTZWxlY3RDcmVhdGFibGVTdGF0ZSk7XG5cbi8vIHN0cmlwIHRyYW5zaXRpb24gcHJvcHMgb2ZmIGJlZm9yZSBzcHJlYWRpbmcgb250byBzZWxlY3QgY29tcG9uZW50XG4vLyBub3RlIHdlIG5lZWQgdG8gYmUgZXhwbGljaXQgYWJvdXQgaW5uZXJSZWYgZm9yIGZsb3dcbnZhciBBbmltYXRlZElucHV0ID0gZnVuY3Rpb24gQW5pbWF0ZWRJbnB1dChXcmFwcGVkQ29tcG9uZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBpblByb3AgPSBfcmVmLmluLFxuICAgICAgICBvbkV4aXRlZCA9IF9yZWYub25FeGl0ZWQsXG4gICAgICAgIGFwcGVhciA9IF9yZWYuYXBwZWFyLFxuICAgICAgICBlbnRlciA9IF9yZWYuZW50ZXIsXG4gICAgICAgIGV4aXQgPSBfcmVmLmV4aXQsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImluXCIsIFwib25FeGl0ZWRcIiwgXCJhcHBlYXJcIiwgXCJlbnRlclwiLCBcImV4aXRcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgcHJvcHMpO1xuICB9O1xufTtcblxudmFyIEZhZGUgPSBmdW5jdGlvbiBGYWRlKF9yZWYpIHtcbiAgdmFyIFRhZyA9IF9yZWYuY29tcG9uZW50LFxuICAgICAgX3JlZiRkdXJhdGlvbiA9IF9yZWYuZHVyYXRpb24sXG4gICAgICBkdXJhdGlvbiA9IF9yZWYkZHVyYXRpb24gPT09IHZvaWQgMCA/IDEgOiBfcmVmJGR1cmF0aW9uLFxuICAgICAgaW5Qcm9wID0gX3JlZi5pbixcbiAgICAgIG9uRXhpdGVkID0gX3JlZi5vbkV4aXRlZCxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImNvbXBvbmVudFwiLCBcImR1cmF0aW9uXCIsIFwiaW5cIiwgXCJvbkV4aXRlZFwiXSk7XG5cbiAgdmFyIHRyYW5zaXRpb24gPSB7XG4gICAgZW50ZXJpbmc6IHtcbiAgICAgIG9wYWNpdHk6IDBcbiAgICB9LFxuICAgIGVudGVyZWQ6IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2l0aW9uOiBcIm9wYWNpdHkgXCIuY29uY2F0KGR1cmF0aW9uLCBcIm1zXCIpXG4gICAgfSxcbiAgICBleGl0aW5nOiB7XG4gICAgICBvcGFjaXR5OiAwXG4gICAgfSxcbiAgICBleGl0ZWQ6IHtcbiAgICAgIG9wYWNpdHk6IDBcbiAgICB9XG4gIH07XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIHtcbiAgICBtb3VudE9uRW50ZXI6IHRydWUsXG4gICAgdW5tb3VudE9uRXhpdDogdHJ1ZSxcbiAgICBpbjogaW5Qcm9wLFxuICAgIHRpbWVvdXQ6IGR1cmF0aW9uXG4gIH0sIGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHZhciBpbm5lclByb3BzID0ge1xuICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoe30sIHRyYW5zaXRpb25bc3RhdGVdKVxuICAgIH07XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7XG4gICAgICBpbm5lclByb3BzOiBpbm5lclByb3BzXG4gICAgfSwgcHJvcHMpKTtcbiAgfSk7XG59OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIENvbGxhcHNlIFRyYW5zaXRpb25cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgY29sbGFwc2VEdXJhdGlvbiA9IDI2MDtcbi8vIHdyYXAgZWFjaCBNdWx0aVZhbHVlIHdpdGggYSBjb2xsYXBzZSB0cmFuc2l0aW9uOyBkZWNyZWFzZXMgd2lkdGggdW50aWxcbi8vIGZpbmFsbHkgcmVtb3ZpbmcgZnJvbSBET01cbnZhciBDb2xsYXBzZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ29sbGFwc2UsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbGxhcHNlKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbGxhcHNlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKENvbGxhcHNlKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZHVyYXRpb25cIiwgY29sbGFwc2VEdXJhdGlvbik7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwicmFmSURcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzdGF0ZVwiLCB7XG4gICAgICB3aWR0aDogJ2F1dG8nXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwidHJhbnNpdGlvblwiLCB7XG4gICAgICBleGl0aW5nOiB7XG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICB0cmFuc2l0aW9uOiBcIndpZHRoIFwiLmNvbmNhdChfdGhpcy5kdXJhdGlvbiwgXCJtcyBlYXNlLW91dFwiKVxuICAgICAgfSxcbiAgICAgIGV4aXRlZDoge1xuICAgICAgICB3aWR0aDogMFxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldFdpZHRoXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIGlmIChyZWYgJiYgaXNOYU4oX3RoaXMuc3RhdGUud2lkdGgpKSB7XG4gICAgICAgIC8qXG4gICAgICAgICAgSGVyZSB3ZSdyZSBpbnZva2luZyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgd2l0aCBhIGNhbGxiYWNrIGludm9raW5nIG91clxuICAgICAgICAgIGNhbGwgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGFuZCBzZXRTdGF0ZSBpbiBvcmRlciB0byByZXNvbHZlIGFuIGVkZ2UgY2FzZVxuICAgICAgICAgIGFyb3VuZCBwb3J0YWxsaW5nLiBDZXJ0YWluIHBvcnRhbGxpbmcgc29sdXRpb25zIGJyaWVmbHkgcmVtb3ZlIGNoaWxkcmVuIGZyb20gdGhlIERPTVxuICAgICAgICAgIGJlZm9yZSBhcHBlbmRpbmcgdGhlbSB0byB0aGUgdGFyZ2V0IG5vZGUuIFRoaXMgaXMgdG8gYXZvaWQgdXMgdHJ5aW5nIHRvIGNhbGwgZ2V0Qm91bmRpbmdDbGllbnRyZWN0XG4gICAgICAgICAgd2hpbGUgdGhlIFNlbGVjdCBjb21wb25lbnQgaXMgaW4gdGhpcyBzdGF0ZS5cbiAgICAgICAgKi9cbiAgICAgICAgLy8gY2Fubm90IHVzZSBgb2Zmc2V0V2lkdGhgIGJlY2F1c2UgaXQgaXMgcm91bmRlZFxuICAgICAgICBfdGhpcy5yYWZJRCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBfcmVmJGdldEJvdW5kaW5nQ2xpZW4gPSByZWYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgICAgIHdpZHRoID0gX3JlZiRnZXRCb3VuZGluZ0NsaWVuLndpZHRoO1xuXG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgd2lkdGg6IHdpZHRoXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldFN0eWxlXCIsIGZ1bmN0aW9uICh3aWR0aCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgICAgd2lkdGg6IHdpZHRoXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldFRyYW5zaXRpb25cIiwgZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICByZXR1cm4gX3RoaXMudHJhbnNpdGlvbltzdGF0ZV07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ29sbGFwc2UsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucmFmSUQpIHtcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMucmFmSUQpO1xuICAgICAgfVxuICAgIH0gLy8gd2lkdGggbXVzdCBiZSBjYWxjdWxhdGVkOyBjYW5ub3QgdHJhbnNpdGlvbiBmcm9tIGB1bmRlZmluZWRgIHRvIGBudW1iZXJgXG5cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBpblByb3AgPSBfdGhpcyRwcm9wcy5pbjtcbiAgICAgIHZhciB3aWR0aCA9IHRoaXMuc3RhdGUud2lkdGg7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCB7XG4gICAgICAgIGVudGVyOiBmYWxzZSxcbiAgICAgICAgbW91bnRPbkVudGVyOiB0cnVlLFxuICAgICAgICB1bm1vdW50T25FeGl0OiB0cnVlLFxuICAgICAgICBpbjogaW5Qcm9wLFxuICAgICAgICB0aW1lb3V0OiB0aGlzLmR1cmF0aW9uXG4gICAgICB9LCBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIHN0eWxlID0gX29iamVjdFNwcmVhZCh7fSwgX3RoaXMyLmdldFN0eWxlKHdpZHRoKSwgX3RoaXMyLmdldFRyYW5zaXRpb24oc3RhdGUpKTtcblxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgcmVmOiBfdGhpczIuZ2V0V2lkdGgsXG4gICAgICAgICAgc3R5bGU6IHN0eWxlXG4gICAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb2xsYXBzZTtcbn0oQ29tcG9uZW50KTtcblxudmFyIEFuaW1hdGVkTXVsdGlWYWx1ZSA9IGZ1bmN0aW9uIEFuaW1hdGVkTXVsdGlWYWx1ZShXcmFwcGVkQ29tcG9uZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBpblByb3AgPSBfcmVmLmluLFxuICAgICAgICBvbkV4aXRlZCA9IF9yZWYub25FeGl0ZWQsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImluXCIsIFwib25FeGl0ZWRcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29sbGFwc2UsIHtcbiAgICAgIGluOiBpblByb3AsXG4gICAgICBvbkV4aXRlZDogb25FeGl0ZWRcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIGNyb3BXaXRoRWxsaXBzaXM6IGluUHJvcFxuICAgIH0sIHByb3BzKSkpO1xuICB9O1xufTtcblxudmFyIEFuaW1hdGVkUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiBBbmltYXRlZFBsYWNlaG9sZGVyKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZhZGUsIF9leHRlbmRzKHtcbiAgICAgIGNvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudCxcbiAgICAgIGR1cmF0aW9uOiBwcm9wcy5pc011bHRpID8gY29sbGFwc2VEdXJhdGlvbiA6IDFcbiAgICB9LCBwcm9wcykpO1xuICB9O1xufTtcblxudmFyIEFuaW1hdGVkU2luZ2xlVmFsdWUgPSBmdW5jdGlvbiBBbmltYXRlZFNpbmdsZVZhbHVlKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZhZGUsIF9leHRlbmRzKHtcbiAgICAgIGNvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0sIHByb3BzKSk7XG4gIH07XG59O1xuXG4vLyBtYWtlIFZhbHVlQ29udGFpbmVyIGEgdHJhbnNpdGlvbiBncm91cFxudmFyIEFuaW1hdGVkVmFsdWVDb250YWluZXIgPSBmdW5jdGlvbiBBbmltYXRlZFZhbHVlQ29udGFpbmVyKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cCwgX2V4dGVuZHMoe1xuICAgICAgY29tcG9uZW50OiBXcmFwcGVkQ29tcG9uZW50XG4gICAgfSwgcHJvcHMpKTtcbiAgfTtcbn07XG5cbnZhciBtYWtlQW5pbWF0ZWQgPSBmdW5jdGlvbiBtYWtlQW5pbWF0ZWQoKSB7XG4gIHZhciBleHRlcm5hbENvbXBvbmVudHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgY29tcG9uZW50cyQkMSA9IGRlZmF1bHRDb21wb25lbnRzKHtcbiAgICBjb21wb25lbnRzOiBleHRlcm5hbENvbXBvbmVudHNcbiAgfSk7XG5cbiAgdmFyIElucHV0ID0gY29tcG9uZW50cyQkMS5JbnB1dCxcbiAgICAgIE11bHRpVmFsdWUgPSBjb21wb25lbnRzJCQxLk11bHRpVmFsdWUsXG4gICAgICBQbGFjZWhvbGRlciA9IGNvbXBvbmVudHMkJDEuUGxhY2Vob2xkZXIsXG4gICAgICBTaW5nbGVWYWx1ZSA9IGNvbXBvbmVudHMkJDEuU2luZ2xlVmFsdWUsXG4gICAgICBWYWx1ZUNvbnRhaW5lciA9IGNvbXBvbmVudHMkJDEuVmFsdWVDb250YWluZXIsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGNvbXBvbmVudHMkJDEsIFtcIklucHV0XCIsIFwiTXVsdGlWYWx1ZVwiLCBcIlBsYWNlaG9sZGVyXCIsIFwiU2luZ2xlVmFsdWVcIiwgXCJWYWx1ZUNvbnRhaW5lclwiXSk7XG5cbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe1xuICAgIElucHV0OiBBbmltYXRlZElucHV0KElucHV0KSxcbiAgICBNdWx0aVZhbHVlOiBBbmltYXRlZE11bHRpVmFsdWUoTXVsdGlWYWx1ZSksXG4gICAgUGxhY2Vob2xkZXI6IEFuaW1hdGVkUGxhY2Vob2xkZXIoUGxhY2Vob2xkZXIpLFxuICAgIFNpbmdsZVZhbHVlOiBBbmltYXRlZFNpbmdsZVZhbHVlKFNpbmdsZVZhbHVlKSxcbiAgICBWYWx1ZUNvbnRhaW5lcjogQW5pbWF0ZWRWYWx1ZUNvbnRhaW5lcihWYWx1ZUNvbnRhaW5lcilcbiAgfSwgcmVzdCk7XG59O1xuXG52YXIgQW5pbWF0ZWRDb21wb25lbnRzID0gbWFrZUFuaW1hdGVkKCk7XG52YXIgSW5wdXQkMSA9IEFuaW1hdGVkQ29tcG9uZW50cy5JbnB1dDtcbnZhciBNdWx0aVZhbHVlJDEgPSBBbmltYXRlZENvbXBvbmVudHMuTXVsdGlWYWx1ZTtcbnZhciBQbGFjZWhvbGRlciQxID0gQW5pbWF0ZWRDb21wb25lbnRzLlBsYWNlaG9sZGVyO1xudmFyIFNpbmdsZVZhbHVlJDEgPSBBbmltYXRlZENvbXBvbmVudHMuU2luZ2xlVmFsdWU7XG52YXIgVmFsdWVDb250YWluZXIkMSA9IEFuaW1hdGVkQ29tcG9uZW50cy5WYWx1ZUNvbnRhaW5lcjtcbnZhciBpbmRleCA9IG1lbW9pemVPbmUobWFrZUFuaW1hdGVkLCBleHBvcnRlZEVxdWFsKTtcblxudmFyIGluZGV4JDEgPSBtYW5hZ2VTdGF0ZShTZWxlY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleCQxO1xuZXhwb3J0IHsgU2VsZWN0IGFzIFNlbGVjdEJhc2UsIEFzeW5jLCBtYWtlQXN5bmNTZWxlY3QsIEFzeW5jQ3JlYXRhYmxlLCBDcmVhdGFibGUsIG1ha2VDcmVhdGFibGVTZWxlY3QsIGNyZWF0ZUZpbHRlciwgaW5kZXggYXMgbWFrZUFuaW1hdGVkLCBjb21wb25lbnRzLCBtZXJnZVN0eWxlcywgZGVmYXVsdFRoZW1lIH07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGUgKi9cbmltcG9ydCB7IERlZmF1bHRUaGVtZSB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5jb25zdCBzZWxlY3RTdHlsZXMgPSAodGhlbWU6IERlZmF1bHRUaGVtZSkgPT4gKHtcbiAgY29udHJvbDogKHByb3ZpZGVkLCBzdGF0ZSkgPT4gKHtcbiAgICAuLi5wcm92aWRlZCxcbiAgICBib3JkZXI6IHN0YXRlLmlzRm9jdXNlZFxuICAgICAgPyBgMXB4IHNvbGlkICR7dGhlbWUuY29sb3JzLnByaW1hcnl9YFxuICAgICAgOiBgMXB4IHNvbGlkICR7dGhlbWUuY29sb3JzLmJvcmRlcn1gLFxuICAgIGJvcmRlclJhZGl1czogJzBweCcsXG4gICAgYmFja2dyb3VuZDogdGhlbWUuY29sb3JzLmlucHV0QmNrLFxuICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMuZGVmYXVsdFRleHQsXG4gIH0pLFxuICBtZW51OiBwcm92aWRlZCA9PiAoe1xuICAgIC4uLnByb3ZpZGVkLFxuICAgIGJvcmRlclJhZGl1czogJzBweCcsXG4gICAgYm9yZGVyQ29sb3I6IHRoZW1lLmNvbG9ycy5ib3JkZXIsXG4gICAgYmFja2dyb3VuZDogdGhlbWUuY29sb3JzLmJjayxcbiAgfSksXG4gIGlucHV0OiAoKSA9PiAoe1xuICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMuZGVmYXVsdFRleHQsXG4gICAgYmFja2dyb3VuZDogdGhlbWUuY29sb3JzLmlucHV0QmNrLFxuICB9KSxcbiAgc2luZ2xlVmFsdWU6ICgpID0+ICh7XG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy5kZWZhdWx0VGV4dCxcbiAgfSksXG4gIG9wdGlvbjogKHByb3ZpZGVkLCBzdGF0ZSkgPT4ge1xuICAgIGxldCBjb2xvciA9IHN0YXRlLmlzU2VsZWN0ZWQgPyB0aGVtZS5jb2xvcnMuZGVmYXVsdFRleHQgOiB0aGVtZS5jb2xvcnMubGlnaHRUZXh0XG4gICAgaWYgKHN0YXRlLmlzRm9jdXNlZCkge1xuICAgICAgY29sb3IgPSB0aGVtZS5jb2xvcnMuaW5wdXRCY2tcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnByb3ZpZGVkLFxuICAgICAgY29sb3IsXG4gICAgICBiYWNrZ3JvdW5kOiBzdGF0ZS5pc0ZvY3VzZWRcbiAgICAgICAgPyB0aGVtZS5jb2xvcnMucHJpbWFyeVxuICAgICAgICA6ICd0cmFuc3BhcmVudCcsXG4gICAgfVxuICB9LFxufSlcblxuY29uc3QgZmlsdGVyU3R5bGVzID0gdGhlbWUgPT4gKHtcbiAgY29udHJvbDogKHByb3ZpZGVkLCBzdGF0ZSkgPT4gKHtcbiAgICAuLi5wcm92aWRlZCxcbiAgICBib3JkZXI6IHN0YXRlLmlzRm9jdXNlZFxuICAgICAgPyBgMXB4IHNvbGlkICR7dGhlbWUuY29sb3JzLnByaW1hcnl9YFxuICAgICAgOiBgMXB4IHNvbGlkICR7dGhlbWUuY29sb3JzLmJvcmRlck9uRGFya31gLFxuICAgIGJvcmRlclJhZGl1czogJzBweCcsXG4gICAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JyxcbiAgICBjb2xvcjogdGhlbWUuY29sb3JzLmZpbHRlckRlZmF1bHRUZXh0LFxuICB9KSxcbiAgaW5wdXQ6ICgpID0+ICh7XG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy5maWx0ZXJEZWZhdWx0VGV4dCxcbiAgfSksXG4gIHNpbmdsZVZhbHVlOiAoKSA9PiAoe1xuICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMuZmlsdGVyRGVmYXVsdFRleHQsXG4gIH0pLFxuICBvcHRpb246IChwcm92aWRlZCwgc3RhdGUpID0+ICh7XG4gICAgLi4ucHJvdmlkZWQsXG4gICAgY29sb3I6IHN0YXRlLmlzU2VsZWN0ZWQgPyB0aGVtZS5jb2xvcnMuZmlsdGVyRGVmYXVsdFRleHQgOiB0aGVtZS5jb2xvcnMuZmlsdGVyTGlnaHRUZXh0LFxuICAgIGJhY2tncm91bmQ6IHN0YXRlLmlzRm9jdXNlZCA/ICdyZ2JhKDMyLDM5LDYyLDAuMjUpJyA6ICd0cmFuc3BhcmVudCcsXG4gIH0pLFxuICBtZW51OiBwcm92aWRlZCA9PiAoe1xuICAgIC4uLnByb3ZpZGVkLFxuICAgIGJvcmRlclJhZGl1czogJzBweCcsXG4gICAgYm9yZGVyQ29sb3I6IHRoZW1lLmNvbG9ycy5ib3JkZXIsXG4gICAgYmFja2dyb3VuZDogdGhlbWUuY29sb3JzLmRhcmtCY2ssXG4gICAgekluZGV4OiA1LFxuICB9KSxcbn0pXG5cbmV4cG9ydCB7IGZpbHRlclN0eWxlcyB9XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGVjdFN0eWxlc1xuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFNlbGVjdCBmcm9tICdyZWFjdC1zZWxlY3QnXG5pbXBvcnQgeyB3aXRoVGhlbWUsIERlZmF1bHRUaGVtZSB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5pbXBvcnQgUHJvcGVydHlJbkVkaXQgZnJvbSAnLi4vLi4vdWkvcHJvcGVydHktaW4tZWRpdCdcbmltcG9ydCBTdHlsZWRJbnB1dCBmcm9tICcuLi8uLi91aS9zdHlsZWQtaW5wdXQnXG5pbXBvcnQgeyBFZGl0UHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5pbXBvcnQgc2VsZWN0U3R5bGVzIGZyb20gJy4uLy4uLy4uL3N0eWxlcy9zZWxlY3Qtc3R5bGVzJ1xuXG50eXBlIENvbWJpbmVkUHJvcHMgPSBFZGl0UHJvcGVydHlQcm9wcyAmIHt0aGVtZTogRGVmYXVsdFRoZW1lfVxuXG5jbGFzcyBFZGl0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PENvbWJpbmVkUHJvcHM+IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlID0gdGhpcy5oYW5kbGVJbnB1dENoYW5nZS5iaW5kKHRoaXMpXG4gICAgdGhpcy5oYW5kbGVTZWxlY3RDaGFuZ2UgPSB0aGlzLmhhbmRsZVNlbGVjdENoYW5nZS5iaW5kKHRoaXMpXG4gIH1cblxuICBoYW5kbGVJbnB1dENoYW5nZShldmVudCk6IHZvaWQge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UsIHByb3BlcnR5IH0gPSB0aGlzLnByb3BzXG4gICAgb25DaGFuZ2UocHJvcGVydHkubmFtZSwgZXZlbnQudGFyZ2V0LnZhbHVlKVxuICB9XG5cbiAgaGFuZGxlU2VsZWN0Q2hhbmdlKHNlbGVjdGVkKTogdm9pZCB7XG4gICAgY29uc3QgeyBvbkNoYW5nZSwgcHJvcGVydHkgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB2YWx1ZSA9IHNlbGVjdGVkID8gc2VsZWN0ZWQudmFsdWUgOiAnJ1xuICAgIG9uQ2hhbmdlKHByb3BlcnR5Lm5hbWUsIHZhbHVlKVxuICB9XG5cbiAgcmVuZGVySW5wdXQoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQsIHRoZW1lIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgdmFsdWUgPSAocmVjb3JkLnBhcmFtcyAmJiB0eXBlb2YgcmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5uYW1lXSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICA/IHJlY29yZC5wYXJhbXNbcHJvcGVydHkubmFtZV1cbiAgICAgIDogJydcbiAgICBpZiAocHJvcGVydHkuYXZhaWxhYmxlVmFsdWVzKSB7XG4gICAgICBjb25zdCBzdHlsZXMgPSBzZWxlY3RTdHlsZXModGhlbWUpXG4gICAgICBjb25zdCBzZWxlY3RlZCA9IHByb3BlcnR5LmF2YWlsYWJsZVZhbHVlcy5maW5kKGF2ID0+IGF2LnZhbHVlID09PSB2YWx1ZSlcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTZWxlY3RcbiAgICAgICAgICBpc0NsZWFyYWJsZVxuICAgICAgICAgIHN0eWxlcz17c3R5bGVzfVxuICAgICAgICAgIHZhbHVlPXtzZWxlY3RlZH1cbiAgICAgICAgICBvcHRpb25zPXtwcm9wZXJ0eS5hdmFpbGFibGVWYWx1ZXN9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlU2VsZWN0Q2hhbmdlfVxuICAgICAgICAgIGlzRGlzYWJsZWQ9e3Byb3BlcnR5LmlzRGlzYWJsZWR9XG4gICAgICAgIC8+XG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8U3R5bGVkSW5wdXRcbiAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICBjbGFzc05hbWU9XCJpbnB1dFwiXG4gICAgICAgIGlkPXtwcm9wZXJ0eS5uYW1lfVxuICAgICAgICBuYW1lPXtwcm9wZXJ0eS5uYW1lfVxuICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBkaXNhYmxlZD17cHJvcGVydHkuaXNEaXNhYmxlZH1cbiAgICAgIC8+XG4gICAgKVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgZXJyb3IgPSByZWNvcmQuZXJyb3JzICYmIHJlY29yZC5lcnJvcnNbcHJvcGVydHkubmFtZV1cbiAgICByZXR1cm4gKFxuICAgICAgPFByb3BlcnR5SW5FZGl0IHByb3BlcnR5PXtwcm9wZXJ0eX0gZXJyb3I9e2Vycm9yfT5cbiAgICAgICAge3RoaXMucmVuZGVySW5wdXQoKX1cbiAgICAgIDwvUHJvcGVydHlJbkVkaXQ+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShFZGl0KVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFNlbGVjdCBmcm9tICdyZWFjdC1zZWxlY3QnXG5cbmltcG9ydCB7IHdpdGhUaGVtZSwgVGhlbWVQcm9wcywgRGVmYXVsdFRoZW1lIH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgUHJvcGVydHlJbkZpbHRlciBmcm9tICcuLi8uLi91aS9wcm9wZXJ0eS1pbi1maWx0ZXInXG5pbXBvcnQgeyBmaWx0ZXJTdHlsZXMgfSBmcm9tICcuLi8uLi8uLi9zdHlsZXMvc2VsZWN0LXN0eWxlcydcbmltcG9ydCB7IEZpbHRlclByb3BlcnR5UHJvcHMgfSBmcm9tICcuLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuaW1wb3J0IFN0eWxlZElucHV0IGZyb20gJy4uLy4uL3VpL3N0eWxlZC1pbnB1dCdcblxuY2xhc3MgRmlsdGVyIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxGaWx0ZXJQcm9wZXJ0eVByb3BzICYgVGhlbWVQcm9wczxEZWZhdWx0VGhlbWU+PiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5oYW5kbGVJbnB1dENoYW5nZSA9IHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2UuYmluZCh0aGlzKVxuICAgIHRoaXMuaGFuZGxlU2VsZWN0Q2hhbmdlID0gdGhpcy5oYW5kbGVTZWxlY3RDaGFuZ2UuYmluZCh0aGlzKVxuICB9XG5cbiAgaGFuZGxlSW5wdXRDaGFuZ2UoZXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlLCBwcm9wZXJ0eSB9ID0gdGhpcy5wcm9wc1xuICAgIG9uQ2hhbmdlKHByb3BlcnR5Lm5hbWUsIGV2ZW50LnRhcmdldC52YWx1ZSlcbiAgfVxuXG4gIGhhbmRsZVNlbGVjdENoYW5nZShzZWxlY3RlZCk6IHZvaWQge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UsIHByb3BlcnR5IH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgdmFsdWUgPSBzZWxlY3RlZCA/IHNlbGVjdGVkLnZhbHVlIDogJydcbiAgICBvbkNoYW5nZShwcm9wZXJ0eS5uYW1lLCB2YWx1ZSlcbiAgfVxuXG4gIHJlbmRlcklucHV0KCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgZmlsdGVyLCB0aGVtZSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IGZpbHRlcktleSA9IGBmaWx0ZXItJHtwcm9wZXJ0eS5uYW1lfWBcbiAgICBjb25zdCB2YWx1ZSA9IGZpbHRlcltwcm9wZXJ0eS5uYW1lXSB8fCAnJ1xuICAgIGlmIChwcm9wZXJ0eS5hdmFpbGFibGVWYWx1ZXMpIHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkID0gcHJvcGVydHkuYXZhaWxhYmxlVmFsdWVzLmZpbmQoYXYgPT4gYXYudmFsdWUgPT09IHZhbHVlKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFNlbGVjdFxuICAgICAgICAgIHZhbHVlPXt0eXBlb2Ygc2VsZWN0ZWQgPT09ICd1bmRlZmluZWQnID8gJycgOiBzZWxlY3RlZH1cbiAgICAgICAgICBpc0NsZWFyYWJsZVxuICAgICAgICAgIG9wdGlvbnM9e3Byb3BlcnR5LmF2YWlsYWJsZVZhbHVlc31cbiAgICAgICAgICBzdHlsZXM9e2ZpbHRlclN0eWxlcyh0aGVtZSl9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlU2VsZWN0Q2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpY29uIGlzLXNtYWxsIGlzLXJpZ2h0XCI+XG4gICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLXNlYXJjaFwiIC8+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPFN0eWxlZElucHV0XG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0IGZpbHRlclwiXG4gICAgICAgICAgbmFtZT17ZmlsdGVyS2V5fVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgLz5cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSB9ID0gdGhpcy5wcm9wc1xuICAgIHJldHVybiAoXG4gICAgICA8UHJvcGVydHlJbkZpbHRlciBwcm9wZXJ0eT17cHJvcGVydHl9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2wgaGFzLWljb25zLWxlZnRcIj5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJJbnB1dCgpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvUHJvcGVydHlJbkZpbHRlcj5cbiAgICApXG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShGaWx0ZXIpXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuaW1wb3J0IFZpZXdIZWxwZXJzIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzJ1xuaW1wb3J0IFByb3BlcnR5SlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcHJvcGVydHktanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgUmVjb3JkSlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVjb3JkLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IFJlc291cmNlSlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVzb3VyY2UtanNvbi5pbnRlcmZhY2UnXG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHByb3BlcnR5OiBQcm9wZXJ0eUpTT047XG4gIHJlY29yZDogUmVjb3JkSlNPTjtcbiAgcmVzb3VyY2U6IFJlc291cmNlSlNPTjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlzdCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8UHJvcHM+IHtcbiAgcmVuZGVyKCk6IFJlYWN0LlJlYWN0Q2hpbGQge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCwgcmVzb3VyY2UgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBzaG93QWN0aW9uID0gcmVjb3JkLnJlY29yZEFjdGlvbnMuZmluZChhID0+IGEubmFtZSA9PT0gJ3Nob3cnKVxuICAgIGNvbnN0IHZhbHVlID0gcmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5uYW1lXVxuXG4gICAgaWYgKHJlc291cmNlLnRpdGxlUHJvcGVydHkubmFtZSA9PT0gcHJvcGVydHkubmFtZSAmJiBzaG93QWN0aW9uKSB7XG4gICAgICBjb25zdCBoID0gbmV3IFZpZXdIZWxwZXJzKClcbiAgICAgIGNvbnN0IGhyZWYgPSBoLnJlY29yZEFjdGlvblVybCh7XG4gICAgICAgIHJlc291cmNlSWQ6IHJlc291cmNlLmlkLCByZWNvcmRJZDogcmVjb3JkLmlkLCBhY3Rpb25OYW1lOiAnc2hvdycsXG4gICAgICB9KVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPExpbmsgdG89e2hyZWZ9Pnt2YWx1ZX08L0xpbms+XG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgY2xhc3NOYW1lID0gcHJvcGVydHkuYXZhaWxhYmxlVmFsdWVzID8gJ3RhZycgOiAnJ1xuXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgPyAoPHNwYW4gY2xhc3NOYW1lPXtjbGFzc05hbWV9Pnt2YWx1ZX08L3NwYW4+KSA6ICcnXG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IFByb3BlcnR5SW5FZGl0IGZyb20gJy4uLy4uL3VpL3Byb3BlcnR5LWluLWVkaXQnXG5pbXBvcnQgeyBFZGl0UHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PEVkaXRQcm9wZXJ0eVByb3BzPiB7XG4gIGhhbmRsZUNoYW5nZShldmVudCk6IHZvaWQge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyBjaGVja2VkIH0gPSBldmVudC50YXJnZXRcbiAgICBvbkNoYW5nZShwcm9wZXJ0eS5uYW1lLCBjaGVja2VkKVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgdmFsdWUgPSAocmVjb3JkLnBhcmFtcyAmJiByZWNvcmQucGFyYW1zW3Byb3BlcnR5Lm5hbWVdKSB8fCAnJ1xuICAgIGNvbnN0IGVycm9yID0gcmVjb3JkLmVycm9ycyAmJiByZWNvcmQuZXJyb3JzW3Byb3BlcnR5Lm5hbWVdXG4gICAgcmV0dXJuIChcbiAgICAgIDxQcm9wZXJ0eUluRWRpdCBwcm9wZXJ0eT17cHJvcGVydHl9IGVycm9yPXtlcnJvcn0+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwiY2hlY2tib3hcIlxuICAgICAgICAgIGlkPXtwcm9wZXJ0eS5uYW1lfVxuICAgICAgICAgIG5hbWU9e3Byb3BlcnR5Lm5hbWV9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcyl9XG4gICAgICAgICAgY2hlY2tlZD17dmFsdWV9XG4gICAgICAgIC8+XG4gICAgICA8L1Byb3BlcnR5SW5FZGl0PlxuICAgIClcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgKHZhbHVlKTogJ1llcycgfCAnTm8nID0+ICh2YWx1ZSA/ICdZZXMnIDogJ05vJylcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IG1hcFZhbHVlIGZyb20gJy4vbWFwLXZhbHVlJ1xuaW1wb3J0IFByb3BlcnR5SW5TaG93IGZyb20gJy4uLy4uL3VpL3Byb3BlcnR5LWluLXNob3cnXG5pbXBvcnQgeyBFZGl0UHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNob3cgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PEVkaXRQcm9wZXJ0eVByb3BzPiB7XG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3QgdmFsdWUgPSBtYXBWYWx1ZShyZWNvcmQucGFyYW1zW3Byb3BlcnR5Lm5hbWVdKVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQcm9wZXJ0eUluU2hvdyBwcm9wZXJ0eT17cHJvcGVydHl9PlxuICAgICAgICB7dmFsdWV9XG4gICAgICA8L1Byb3BlcnR5SW5TaG93PlxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5cbmltcG9ydCBWaWV3SGVscGVycyBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL3V0aWxzL3ZpZXctaGVscGVycydcbmltcG9ydCBtYXBWYWx1ZSBmcm9tICcuL21hcC12YWx1ZSdcbmltcG9ydCBQcm9wZXJ0eUpTT04gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Byb3BlcnR5LWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IFJlY29yZEpTT04gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3JlY29yZC1qc29uLmludGVyZmFjZSdcbmltcG9ydCBSZXNvdXJjZUpTT04gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Jlc291cmNlLWpzb24uaW50ZXJmYWNlJ1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBwcm9wZXJ0eTogUHJvcGVydHlKU09OO1xuICByZWNvcmQ6IFJlY29yZEpTT047XG4gIHJlc291cmNlOiBSZXNvdXJjZUpTT047XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpc3QgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHJlbmRlcigpOiBSZWFjdC5SZWFjdENoaWxkIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQsIHJlc291cmNlIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3Qgc2hvd0FjdGlvbiA9IHJlY29yZC5yZWNvcmRBY3Rpb25zLmZpbmQoYSA9PiBhLm5hbWUgPT09ICdzaG93JylcbiAgICBjb25zdCB2YWx1ZSA9IG1hcFZhbHVlKHJlY29yZC5wYXJhbXNbcHJvcGVydHkubmFtZV0pXG5cbiAgICBpZiAocmVzb3VyY2UudGl0bGVQcm9wZXJ0eS5uYW1lID09PSBwcm9wZXJ0eS5uYW1lICYmIHNob3dBY3Rpb24pIHtcbiAgICAgIGNvbnN0IGggPSBuZXcgVmlld0hlbHBlcnMoKVxuICAgICAgY29uc3QgaHJlZiA9IGgucmVjb3JkQWN0aW9uVXJsKHtcbiAgICAgICAgcmVzb3VyY2VJZDogcmVzb3VyY2UuaWQsIHJlY29yZElkOiByZWNvcmQuaWQsIGFjdGlvbk5hbWU6ICdzaG93JyxcbiAgICAgIH0pXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TGluayB0bz17aHJlZn0+e3ZhbHVlfTwvTGluaz5cbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW4+e3ZhbHVlfTwvc3Bhbj5cbiAgICApXG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBTZWxlY3QgZnJvbSAncmVhY3Qtc2VsZWN0J1xuXG5pbXBvcnQgeyB3aXRoVGhlbWUsIERlZmF1bHRUaGVtZSwgVGhlbWVQcm9wcyB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IG1hcFZhbHVlIGZyb20gJy4vbWFwLXZhbHVlJ1xuaW1wb3J0IFByb3BlcnR5SW5GaWx0ZXIgZnJvbSAnLi4vLi4vdWkvcHJvcGVydHktaW4tZmlsdGVyJ1xuaW1wb3J0IHsgZmlsdGVyU3R5bGVzIH0gZnJvbSAnLi4vLi4vLi4vc3R5bGVzL3NlbGVjdC1zdHlsZXMnXG5pbXBvcnQgeyBGaWx0ZXJQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcblxuY2xhc3MgRmlsdGVyIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxGaWx0ZXJQcm9wZXJ0eVByb3BzICYgVGhlbWVQcm9wczxEZWZhdWx0VGhlbWU+PiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpXG4gIH1cblxuICBoYW5kbGVDaGFuZ2Uoc2VsZWN0ZWQpOiB2b2lkIHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlLCBwcm9wZXJ0eSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHZhbHVlID0gc2VsZWN0ZWQgPyBzZWxlY3RlZC52YWx1ZSA6ICcnXG4gICAgb25DaGFuZ2UocHJvcGVydHkubmFtZSwgdmFsdWUpXG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCBmaWx0ZXIgPSB7fSwgdGhlbWUgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiBmaWx0ZXJbcHJvcGVydHkubmFtZV0gPT09ICd1bmRlZmluZWQnID8gJycgOiBmaWx0ZXJbcHJvcGVydHkubmFtZV1cbiAgICBjb25zdCBvcHRpb25zID0gW1xuICAgICAgeyB2YWx1ZTogdHJ1ZSwgbGFiZWw6IG1hcFZhbHVlKHRydWUpIH0sXG4gICAgICB7IHZhbHVlOiBmYWxzZSwgbGFiZWw6IG1hcFZhbHVlKGZhbHNlKSB9LFxuICAgIF1cbiAgICBjb25zdCBzZWxlY3RlZCA9IG9wdGlvbnMuZmluZChvID0+IG8udmFsdWUgPT09IHZhbHVlKVxuICAgIHJldHVybiAoXG4gICAgICA8UHJvcGVydHlJbkZpbHRlciBwcm9wZXJ0eT17cHJvcGVydHl9PlxuICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgdmFsdWU9e3R5cGVvZiBzZWxlY3RlZCA9PT0gJ3VuZGVmaW5lZCcgPyAnJyA6IHNlbGVjdGVkfVxuICAgICAgICAgIGlzQ2xlYXJhYmxlXG4gICAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cbiAgICAgICAgICBzdHlsZXM9e2ZpbHRlclN0eWxlcyh0aGVtZSl9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgPC9Qcm9wZXJ0eUluRmlsdGVyPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoRmlsdGVyIGFzIG5ldmVyKVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgUHJvcGVydHlJbkVkaXQgZnJvbSAnLi4vLi4vdWkvcHJvcGVydHktaW4tZWRpdCdcbmltcG9ydCB7IEVkaXRQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcbmltcG9ydCBTdHlsZWRJbnB1dCBmcm9tICcuLi8uLi91aS9zdHlsZWQtaW5wdXQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8RWRpdFByb3BlcnR5UHJvcHM+IHtcbiAgcHJpdmF0ZSBkYXRlcGlja2VyUmVmOiBSZWFjdC5SZWZPYmplY3Q8YW55PlxuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5kYXRlcGlja2VyUmVmID0gUmVhY3QuY3JlYXRlUmVmKClcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0dXBEYXRlUGlja2VyKClcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpOiBib29sZWFuIHtcbiAgICBjb25zdCB7IHJlY29yZCwgcHJvcGVydHkgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBuZXh0UmVjb3JkID0gbmV4dFByb3BzLnJlY29yZFxuICAgIGNvbnN0IHZhbHVlID0gKHJlY29yZC5wYXJhbXMgJiYgcmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5uYW1lXSkgfHwgJydcbiAgICBjb25zdCBuZXh0VmFsdWUgPSAobmV4dFJlY29yZC5wYXJhbXMgJiYgbmV4dFJlY29yZC5wYXJhbXNbcHJvcGVydHkubmFtZV0pIHx8ICcnXG5cbiAgICBpZiAobmV4dFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgaWYgKG5leHRWYWx1ZSkge1xuICAgICAgICB0aGlzLmRhdGVwaWNrZXJSZWYuY3VycmVudC5fZmxhdHBpY2tyLmp1bXBUb0RhdGUobmV4dFZhbHVlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kYXRlcGlja2VyUmVmLmN1cnJlbnQuX2ZsYXRwaWNrci5pbnB1dC52YWx1ZSA9ICcnXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcHJldkVycm9yID0gcmVjb3JkLmVycm9ycyAmJiByZWNvcmQuZXJyb3JzW3Byb3BlcnR5Lm5hbWVdXG4gICAgY29uc3QgbmV3RXJyb3IgPSBuZXh0UmVjb3JkLmVycm9ycyAmJiBuZXh0UmVjb3JkLmVycm9yc1twcm9wZXJ0eS5uYW1lXVxuXG4gICAgcmV0dXJuIHByZXZFcnJvciAhPT0gbmV3RXJyb3JcbiAgfVxuXG4gIHNldHVwRGF0ZVBpY2tlcigpOiB2b2lkIHtcbiAgICBjb25zdCB7IHJlY29yZCwgcHJvcGVydHkgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBkZWZhdWx0RGF0ZSA9IChyZWNvcmQucGFyYW1zICYmIHJlY29yZC5wYXJhbXNbcHJvcGVydHkubmFtZV0pIHx8IG51bGxcbiAgICBsZXQgb3B0aW9ucyA9IHtcbiAgICAgIGZvcm1hdDogJ1ktbS1kJyxcbiAgICAgIGVuYWJsZVRpbWU6IGZhbHNlLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9jYW1lbGNhc2VcbiAgICAgIHRpbWVfMjRocjogZmFsc2UsXG4gICAgfVxuICAgIGlmIChwcm9wZXJ0eS50eXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBmb3JtYXQ6ICdZLW0tZCBIOmknLFxuICAgICAgICBlbmFibGVUaW1lOiB0cnVlLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2NhbWVsY2FzZVxuICAgICAgICB0aW1lXzI0aHI6IHRydWUsXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFwcm9wZXJ0eS5pc0Rpc2FibGVkKSB7XG4gICAgICBjb25zdCBpbnN0ID0gZmxhdHBpY2tyKHRoaXMuZGF0ZXBpY2tlclJlZi5jdXJyZW50LCB7XG4gICAgICAgIGRlZmF1bHREYXRlLFxuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgfSlcbiAgICAgIGluc3QuY29uZmlnLm9uQ2hhbmdlLnB1c2goKGRhdGVzLCB0ZXh0KSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlKHRleHQpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUNoYW5nZSh2YWx1ZSk6IHZvaWQge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UsIHByb3BlcnR5IH0gPSB0aGlzLnByb3BzXG4gICAgb25DaGFuZ2UocHJvcGVydHkubmFtZSwgdmFsdWUpXG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBlcnJvciA9IHJlY29yZC5lcnJvcnMgJiYgcmVjb3JkLmVycm9yc1twcm9wZXJ0eS5uYW1lXVxuICAgIHJldHVybiAoXG4gICAgICA8UHJvcGVydHlJbkVkaXQgcHJvcGVydHk9e3Byb3BlcnR5fSBlcnJvcj17ZXJyb3J9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2wgaGFzLWljb25zLXJpZ2h0XCI+XG4gICAgICAgICAgPFN0eWxlZElucHV0XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAvKiBjc3BlbGw6ZGlzYWJsZS1uZXh0LWxpbmUgKi9cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0IHBpY2thZGF0ZVwiXG4gICAgICAgICAgICBpZD17cHJvcGVydHkubmFtZX1cbiAgICAgICAgICAgIHJlZj17dGhpcy5kYXRlcGlja2VyUmVmfVxuICAgICAgICAgICAgbmFtZT17cHJvcGVydHkubmFtZX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtwcm9wZXJ0eS5pc0Rpc2FibGVkfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaWNvbiBpcy1zbWFsbCBpcy1yaWdodFwiPlxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiaWNvbW9vbi1jYWxlbmRhclwiIC8+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvUHJvcGVydHlJbkVkaXQ+XG4gICAgKVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCAodmFsdWU6IERhdGUpOiBzdHJpbmcgPT4ge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHZhbHVlKVxuICByZXR1cm4gZGF0ZS50b0xvY2FsZVN0cmluZygpXG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBtYXBWYWx1ZSBmcm9tICcuL21hcC12YWx1ZSdcbmltcG9ydCBQcm9wZXJ0eUluU2hvdyBmcm9tICcuLi8uLi91aS9wcm9wZXJ0eS1pbi1zaG93J1xuaW1wb3J0IHsgRWRpdFByb3BlcnR5UHJvcHMgfSBmcm9tICcuLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaG93IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxFZGl0UHJvcGVydHlQcm9wcz4ge1xuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB2YWx1ZSA9IG1hcFZhbHVlKHJlY29yZC5wYXJhbXNbcHJvcGVydHkubmFtZV0pXG5cbiAgICByZXR1cm4gKFxuICAgICAgPFByb3BlcnR5SW5TaG93IHByb3BlcnR5PXtwcm9wZXJ0eX0+XG4gICAgICAgIHt2YWx1ZX1cbiAgICAgIDwvUHJvcGVydHlJblNob3c+XG4gICAgKVxuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuaW1wb3J0IFZpZXdIZWxwZXJzIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzJ1xuaW1wb3J0IG1hcFZhbHVlIGZyb20gJy4vbWFwLXZhbHVlJ1xuaW1wb3J0IFByb3BlcnR5SlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcHJvcGVydHktanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgUmVjb3JkSlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVjb3JkLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IFJlc291cmNlSlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVzb3VyY2UtanNvbi5pbnRlcmZhY2UnXG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHByb3BlcnR5OiBQcm9wZXJ0eUpTT047XG4gIHJlY29yZDogUmVjb3JkSlNPTjtcbiAgcmVzb3VyY2U6IFJlc291cmNlSlNPTjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlzdCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8UHJvcHM+IHtcbiAgcmVuZGVyKCk6IFJlYWN0LlJlYWN0Q2hpbGQge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCwgcmVzb3VyY2UgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBzaG93QWN0aW9uID0gcmVjb3JkLnJlY29yZEFjdGlvbnMuZmluZChhID0+IGEubmFtZSA9PT0gJ3Nob3cnKVxuICAgIGNvbnN0IHZhbHVlID0gbWFwVmFsdWUocmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5uYW1lXSlcblxuICAgIGlmIChyZXNvdXJjZS50aXRsZVByb3BlcnR5Lm5hbWUgPT09IHByb3BlcnR5Lm5hbWUgJiYgc2hvd0FjdGlvbikge1xuICAgICAgY29uc3QgaCA9IG5ldyBWaWV3SGVscGVycygpXG4gICAgICBjb25zdCBocmVmID0gaC5yZWNvcmRBY3Rpb25Vcmwoe1xuICAgICAgICByZXNvdXJjZUlkOiByZXNvdXJjZS5pZCwgcmVjb3JkSWQ6IHJlY29yZC5pZCwgYWN0aW9uTmFtZTogJ3Nob3cnLFxuICAgICAgfSlcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxMaW5rIHRvPXtocmVmfT57dmFsdWV9PC9MaW5rPlxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8c3Bhbj57dmFsdWV9PC9zcGFuPlxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgZmxhdCBmcm9tICdmbGF0J1xuaW1wb3J0IEJhc2VQcm9wZXJ0eSBmcm9tICcuLi9hZGFwdGVycy9iYXNlLXByb3BlcnR5J1xuaW1wb3J0IEJhc2VSZXNvdXJjZSBmcm9tICcuLi9hZGFwdGVycy9iYXNlLXJlc291cmNlJ1xuXG5leHBvcnQgY29uc3QgUEFSQU1fU0VQQVJBVE9SID0gJ35+J1xuXG5leHBvcnQgdHlwZSBGaWx0ZXJFbGVtZW50ID0ge1xuICBwYXRoOiBzdHJpbmc7XG4gIHByb3BlcnR5OiBCYXNlUHJvcGVydHk7XG4gIHZhbHVlOiBzdHJpbmcgfCB7XG4gICAgZnJvbTogc3RyaW5nO1xuICAgIHRvOiBzdHJpbmc7XG4gIH07XG59XG5cbmludGVyZmFjZSBSZWR1Y2VDYWxsYmFjazxUPiB7XG4gIChtZW1vOiBULCBlbGVtZW50OiBGaWx0ZXJFbGVtZW50KTogVDtcbn1cblxuLyoqXG4gKiBGaWx0ZXIgb2JqZWN0IHdyYXBwaW5nIHVwIHNlbGVjdGVkIGZpbHRlcnMuXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBGaWx0ZXIge1xuICBwdWJsaWMgZmlsdGVyczoge1trZXk6IHN0cmluZ106IEZpbHRlckVsZW1lbnR9IHwge31cblxuICBwcml2YXRlIHJlc291cmNlOiBCYXNlUmVzb3VyY2VcbiAgLyoqXG4gICAqIENoYW5nZXMgcmF3IG5lc3RlZCBmaWx0ZXJzIHRvIGZvcm0gT2JqZWN0PHBhdGgsIHZhbHVlPi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgZmlsdGVycyA9IHtcbiAgICogIG5lc3RlZDoge2ZpZWxkOiAnYWxhJ30sXG4gICAqICAnZGF0YUZpZWxkfn5mcm9tJzogJzIwMTktMDgtMTQnXG4gICAqIH1cbiAgICpcbiAgICogY29uc3Qgbm9ybWFsaXplZCA9IEZpbHRlci5ub3JtYWxpemVGaWx0ZXJzKGZpbHRlcnMpXG4gICAqIC8vIHtcbiAgICogLy8gICAnbmVzdGVkLmZpbHRlcic6ICdhbGEnLFxuICAgKiAvLyAgICdkYXRhRmllbGQnOiB7ZnJvbTogJzIwMTktMDgtMTQnfVxuICAgKiAvLyB9XG4gICAqXG4gICAqXG4gICAqIEBwYXJhbSAgIHtPYmplY3R9ICBmaWx0ZXJzXG4gICAqXG4gICAqIEByZXR1cm4gIHtPYmplY3R9XG4gICAqL1xuXG4gIHN0YXRpYyBub3JtYWxpemVLZXlzKGZpbHRlcnMpOiBNYXA8c3RyaW5nLCBhbnk+IHtcbiAgICByZXR1cm4gZmxhdC51bmZsYXR0ZW4oZmxhdC5mbGF0dGVuKGZpbHRlcnMpLCB7IGRlbGltaXRlcjogUEFSQU1fU0VQQVJBVE9SIH0pXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtICAge09iamVjdDxTdHJpbmcsT2JqZWN0IHwgU3RyaW5nPn0gIGZpbHRlcnMgICBzZWxlY3RlZCBmaWx0ZXJzXG4gICAqIEBwYXJhbSAgIHtCYXNlUmVzb3VyY2V9ICAgICAgICAgICAgICAgICAgICByZXNvdXJjZSAgICByZXNvdXJjZSB3aGljaCBpcyBmaWx0ZXJlZFxuICAgKi9cbiAgY29uc3RydWN0b3IoZmlsdGVycyA9IHt9LCByZXNvdXJjZSkge1xuICAgIHRoaXMucmVzb3VyY2UgPSByZXNvdXJjZVxuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBGaWx0ZXIubm9ybWFsaXplS2V5cyhmaWx0ZXJzKVxuICAgIHRoaXMuZmlsdGVycyA9IE9iamVjdC5rZXlzKG5vcm1hbGl6ZWQpLnJlZHVjZSgobWVtbywgcGF0aCkgPT4gKHtcbiAgICAgIFtwYXRoXToge1xuICAgICAgICBwYXRoLFxuICAgICAgICBwcm9wZXJ0eTogdGhpcy5yZXNvdXJjZS5wcm9wZXJ0eShwYXRoKSxcbiAgICAgICAgdmFsdWU6IG5vcm1hbGl6ZWRbcGF0aF0sXG4gICAgICB9LFxuICAgICAgLi4ubWVtbyxcbiAgICB9KSwge30pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBmaWx0ZXIgZm9yIGEgZ2l2ZW4gcHJvcGVydHkga2V5XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgICAgICBwcm9wZXJ0eSBrZXlcbiAgICogQHJldHVybnMge0ZpbHRlci5Qcm9wZXJ0eSB8IHVuZGVmaW5lZH1cbiAgICovXG4gIGdldChrZXk6IHN0cmluZyk6IEZpbHRlckVsZW1lbnQgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJzW2tleV1cbiAgfVxuXG4gIC8qKlxuICAgKiBQb3B1bGF0ZXMgYWxsIGZpbHRlcmVkIHByb3BlcnRpZXMgd2hpY2ggcmVmZXJzIHRvIG90aGVyIHJlc291cmNlc1xuICAgKi9cbiAgYXN5bmMgcG9wdWxhdGUoKTogUHJvbWlzZTxGaWx0ZXI+IHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5maWx0ZXJzKVxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBrZXlzLmxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpbmRleF1cbiAgICAgIGNvbnN0IHJlZmVyZW5jZVJlc291cmNlID0gdGhpcy5yZXNvdXJjZS5kZWNvcmF0ZSgpLmdldFByb3BlcnR5QnlLZXkoa2V5KS5yZWZlcmVuY2UoKVxuICAgICAgaWYgKHJlZmVyZW5jZVJlc291cmNlKSB7XG4gICAgICAgIHRoaXMuZmlsdGVyc1trZXldLnBvcHVsYXRlZCA9IGF3YWl0IHJlZmVyZW5jZVJlc291cmNlLmZpbmRPbmUodGhpcy5maWx0ZXJzW2tleV0udmFsdWUpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICByZWR1Y2U8VD4oY2FsbGJhY2s6IFJlZHVjZUNhbGxiYWNrPFQ+LCBpbml0aWFsOiBUKTogVCB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5maWx0ZXJzKS5yZWR1Y2UoY2FsbGJhY2ssIGluaXRpYWwgfHwge30gYXMgVClcbiAgfVxuXG4gIGlzVmlzaWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISFPYmplY3Qua2V5cyh0aGlzLmZpbHRlcnMpLmxlbmd0aFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbHRlclxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgUHJvcGVydHlJbkZpbHRlciwgeyBMYWJlbCB9IGZyb20gJy4uLy4uL3VpL3Byb3BlcnR5LWluLWZpbHRlcidcbmltcG9ydCAqIGFzIEJhY2tlbmRGaWx0ZXIgZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC91dGlscy9maWx0ZXInXG5pbXBvcnQgeyBGaWx0ZXJQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcblxuY29uc3QgeyBQQVJBTV9TRVBBUkFUT1IgfSA9IEJhY2tlbmRGaWx0ZXJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsdGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEZpbHRlclByb3BlcnR5UHJvcHM+IHtcbiAgcHJpdmF0ZSBwaWNrZXJSZWY6IHtcbiAgICBmcm9tOiBSZWFjdC5SZWZPYmplY3Q8YW55PjtcbiAgICB0bzogUmVhY3QuUmVmT2JqZWN0PGFueT47XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMucGlja2VyUmVmID0ge1xuICAgICAgZnJvbTogUmVhY3QuY3JlYXRlUmVmKCksXG4gICAgICB0bzogUmVhY3QuY3JlYXRlUmVmKCksXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG4gICAgdGhpcy5zZXR1cERhdGVQaWNrZXIoJ2Zyb20nKVxuICAgIHRoaXMuc2V0dXBEYXRlUGlja2VyKCd0bycpXG4gIH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IGZyb21LZXkgPSBgJHtwcm9wZXJ0eS5uYW1lfSR7UEFSQU1fU0VQQVJBVE9SfWZyb21gXG4gICAgY29uc3QgdG9LZXkgPSBgJHtwcm9wZXJ0eS5uYW1lfSR7UEFSQU1fU0VQQVJBVE9SfXRvYFxuICAgIGNvbnN0IG5leHRGaWx0ZXIgPSBuZXh0UHJvcHMuZmlsdGVyIHx8IHt9XG5cbiAgICBpZiAobmV4dEZpbHRlcltmcm9tS2V5XSkge1xuICAgICAgdGhpcy5waWNrZXJSZWYuZnJvbS5jdXJyZW50Ll9mbGF0cGlja3IuanVtcFRvRGF0ZShuZXh0RmlsdGVyW2Zyb21LZXldKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBpY2tlclJlZi5mcm9tLmN1cnJlbnQuX2ZsYXRwaWNrci5pbnB1dC52YWx1ZSA9ICcnXG4gICAgfVxuXG4gICAgaWYgKG5leHRGaWx0ZXJbdG9LZXldKSB7XG4gICAgICB0aGlzLnBpY2tlclJlZi50by5jdXJyZW50Ll9mbGF0cGlja3IuanVtcFRvRGF0ZShuZXh0RmlsdGVyW3RvS2V5XSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5waWNrZXJSZWYudG8uY3VycmVudC5fZmxhdHBpY2tyLmlucHV0LnZhbHVlID0gJydcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBzZXR1cERhdGVQaWNrZXIoa2V5KTogdm9pZCB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgZmlsdGVyIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgZmllbGRLZXkgPSBgJHtwcm9wZXJ0eS5uYW1lfS4ke2tleX1gXG4gICAgY29uc3QgZGVmYXVsdERhdGUgPSAoZmlsdGVyW2ZpZWxkS2V5XSAmJiBuZXcgRGF0ZShmaWx0ZXJbZmllbGRLZXldKSkgfHwgJydcblxuICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgZm9ybWF0OiAnWS1tLWQnLFxuICAgICAgZW5hYmxlVGltZTogZmFsc2UsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2NhbWVsY2FzZVxuICAgICAgdGltZV8yNGhyOiBmYWxzZSxcbiAgICB9XG4gICAgaWYgKHByb3BlcnR5LnR5cGUgPT09ICdkYXRldGltZScpIHtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIGZvcm1hdDogJ1ktbS1kIEg6aScsXG4gICAgICAgIGVuYWJsZVRpbWU6IHRydWUsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY2FtZWxjYXNlXG4gICAgICAgIHRpbWVfMjRocjogdHJ1ZSxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBpbnN0ID0gZmxhdHBpY2tyKHRoaXMucGlja2VyUmVmW2tleV0uY3VycmVudCwge1xuICAgICAgZm9ybWF0OiAnWS1tLWQgSDppJyxcbiAgICAgIGRlZmF1bHREYXRlLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9KVxuICAgIGluc3QuY29uZmlnLm9uQ2hhbmdlLnB1c2goKGRhdGVzLCB0ZXh0KSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZUNoYW5nZShrZXksIG5ldyBEYXRlKHRleHQpKVxuICAgIH0pXG4gIH1cblxuICBoYW5kbGVDaGFuZ2Uoa2V5LCB2YWx1ZSk6IHZvaWQge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UsIHByb3BlcnR5IH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgZGF0ZSA9IHZhbHVlICE9PSAnJyA/IG5ldyBEYXRlKHZhbHVlKS50b0lTT1N0cmluZygpIDogJydcbiAgICBvbkNoYW5nZShgJHtwcm9wZXJ0eS5uYW1lfSR7UEFSQU1fU0VQQVJBVE9SfSR7a2V5fWAsIGRhdGUpXG4gIH1cblxuICByZW5kZXJGaWx0ZXIod2hlcmUpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IGtleSA9IHdoZXJlLnRvTG93ZXJDYXNlKClcbiAgICBjb25zdCB7IHByb3BlcnR5IH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgZmlsdGVyS2V5ID0gYGZpbHRlci0ke3Byb3BlcnR5Lm5hbWV9YFxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8TGFiZWw+XG4gICAgICAgIC1cbiAgICAgICAgICB7d2hlcmV9XG4gICAgICAgIDpcbiAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sIGhhcy1pY29ucy1yaWdodFwiPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgcmVmPXt0aGlzLnBpY2tlclJlZltrZXldfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW5wdXQgZmlsdGVyXCJcbiAgICAgICAgICAgIG5hbWU9e2Ake2ZpbHRlcktleX0ke1BBUkFNX1NFUEFSQVRPUn0ke2tleX1gfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaWNvbiBpcy1zbWFsbCBpcy1yaWdodFwiPlxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiaWNvbW9vbi1jYWxlbmRhclwiIC8+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcHJvcGVydHkgfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKFxuICAgICAgPFByb3BlcnR5SW5GaWx0ZXIgcHJvcGVydHk9e3Byb3BlcnR5fT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkYXRlLXJhbmdlXCI+XG4gICAgICAgICAge3RoaXMucmVuZGVyRmlsdGVyKCdGcm9tJyl9XG4gICAgICAgICAge3RoaXMucmVuZGVyRmlsdGVyKCdUbycpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvUHJvcGVydHlJbkZpbHRlcj5cbiAgICApXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2xhYmVsLWhhcy1mb3IgKi9cbmltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJ1xuXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHsgRWRpdFByb3BlcnR5UHJvcHMgfSBmcm9tICcuLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuaW1wb3J0IHsgTGFiZWwgfSBmcm9tICcuLi8uLi91aSdcblxuY29uc3QgdG9vbGJhck9wdGlvbnMgPSBbXG4gIFt7IGhlYWRlcjogWzEsIDIsIDMsIDQsIDUsIDYsIGZhbHNlXSB9XSxcbiAgWydib2xkJywgJ2l0YWxpYycsICd1bmRlcmxpbmUnLCAnc3RyaWtlJ10sIC8vIHRvZ2dsZWQgYnV0dG9uc1xuICBbJ2Jsb2NrcXVvdGUnLCAnY29kZS1ibG9jayddLFxuICBbeyBsaXN0OiAnb3JkZXJlZCcgfSwgeyBsaXN0OiAnYnVsbGV0JyB9XSxcbiAgW3sgc2NyaXB0OiAnc3ViJyB9LCB7IHNjcmlwdDogJ3N1cGVyJyB9XSwgLy8gc3VwZXJzY3JpcHQvc3Vic2NyaXB0XG4gIFt7IGluZGVudDogJy0xJyB9LCB7IGluZGVudDogJysxJyB9XSwgLy8gaW5kZW50XG4gIFt7IGRpcmVjdGlvbjogJ3J0bCcgfV0sIC8vIHRleHQgZGlyZWN0aW9uXG5cbiAgW3sgc2l6ZTogWydzbWFsbCcsIGZhbHNlLCAnbGFyZ2UnLCAnaHVnZSddIH1dLCAvLyBjdXN0b20gZHJvcGRvd25cblxuICBbeyBjb2xvcjogW10gfSwgeyBiYWNrZ3JvdW5kOiBbXSB9XSwgLy8gZHJvcGRvd24gd2l0aCBkZWZhdWx0cyBmcm9tIHRoZW1lXG4gIFt7IGZvbnQ6IFtdIH1dLFxuICBbeyBhbGlnbjogW10gfV0sXG5cbiAgWydjbGVhbiddLCAvLyByZW1vdmUgZm9ybWF0dGluZyBidXR0b25cbl1cblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXYuYXR0cnMoe1xuICBjbGFzc05hbWU6ICdjb250cm9sIGhhcy1pY29ucy1yaWdodCcsXG59KWBcbiAgLnFsLXRvb2xiYXIge1xuICAgIGJvcmRlci1jb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5ib3JkZXJ9O1xuXG4gICAgLnFsLXBpY2tlciB7XG4gICAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5saWdodFRleHR9O1xuICAgIH1cbiAgfVxuXG4gIC5xbC1jb250YWluZXIge1xuICAgIGJvcmRlci1jb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5ib3JkZXJ9O1xuICAgIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuaW5wdXRCY2t9O1xuICB9XG5gXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8RWRpdFByb3BlcnR5UHJvcHM+IHtcbiAgcHJpdmF0ZSB3eXNpd2lnUmVmOiBSZWFjdC5SZWZPYmplY3Q8YW55PlxuXG4gIHByaXZhdGUgcXVpbGw6IGFueVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBFZGl0UHJvcGVydHlQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMud3lzaXdpZ1JlZiA9IFJlYWN0LmNyZWF0ZVJlZigpXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldHVwV3lzaXdpZygpXG4gIH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzOiBFZGl0UHJvcGVydHlQcm9wcyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgcmVjb3JkLCBwcm9wZXJ0eSB9ID0gdGhpcy5wcm9wc1xuICAgIGlmICghbmV4dFByb3BzKSB7IHJldHVybiBmYWxzZSB9XG4gICAgY29uc3Qgb2xkRXJyb3IgPSByZWNvcmQuZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgICAmJiByZWNvcmQuZXJyb3JzW3Byb3BlcnR5Lm5hbWVdXG4gICAgICAgICAgICAgICAgICAgICAmJiByZWNvcmQuZXJyb3JzW3Byb3BlcnR5Lm5hbWVdLm1lc3NhZ2VcbiAgICBjb25zdCBuZXdFcnJvciA9IG5leHRQcm9wcy5yZWNvcmQuZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgICAmJiBuZXh0UHJvcHMucmVjb3JkLmVycm9yc1twcm9wZXJ0eS5uYW1lXVxuICAgICAgICAgICAgICAgICAgICAgJiYgbmV4dFByb3BzLnJlY29yZC5lcnJvcnNbcHJvcGVydHkubmFtZV0ubWVzc2FnZVxuICAgIHJldHVybiBvbGRFcnJvciAhPT0gbmV3RXJyb3JcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNldHVwV3lzaXdpZygpXG4gIH1cblxuICBzZXR1cFd5c2l3aWcoKTogdm9pZCB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgdmFsdWUgPSAocmVjb3JkLnBhcmFtcyAmJiByZWNvcmQucGFyYW1zW3Byb3BlcnR5Lm5hbWVdKSB8fCAnJ1xuICAgIHRoaXMud3lzaXdpZ1JlZi5jdXJyZW50LmlubmVySFRNTCA9IHZhbHVlXG4gICAgaWYgKHRoaXMucXVpbGwpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLnF1aWxsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZmluZC1kb20tbm9kZVxuICAgICAgY29uc3QgdGhpc05vZGUgPSBmaW5kRE9NTm9kZSh0aGlzKSBhcyBFbGVtZW50XG4gICAgICBjb25zdCB0b29sYmFycyA9IHRoaXNOb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3FsLXRvb2xiYXInKVxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRvb2xiYXJzLmxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAgICB0b29sYmFyc1tpbmRleF0ucmVtb3ZlKClcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5xdWlsbCA9IG5ldyBRdWlsbCh0aGlzLnd5c2l3aWdSZWYuY3VycmVudCwge1xuICAgICAgbW9kdWxlczoge1xuICAgICAgICB0b29sYmFyOiB0b29sYmFyT3B0aW9ucyxcbiAgICAgIH0sXG4gICAgICB0aGVtZTogJ3Nub3cnLFxuICAgIH0pXG5cbiAgICB0aGlzLnF1aWxsLm9uKCd0ZXh0LWNoYW5nZScsICgpID0+IHtcbiAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlKHRoaXMud3lzaXdpZ1JlZi5jdXJyZW50LmNoaWxkcmVuWzBdLmlubmVySFRNTClcbiAgICB9KVxuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlLCBwcm9wZXJ0eSB9ID0gdGhpcy5wcm9wc1xuICAgIG9uQ2hhbmdlKHByb3BlcnR5Lm5hbWUsIHZhbHVlKVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgZXJyb3IgPSByZWNvcmQuZXJyb3JzICYmIHJlY29yZC5lcnJvcnNbcHJvcGVydHkubmFtZV1cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiPlxuICAgICAgICA8TGFiZWwgaHRtbEZvcj17cHJvcGVydHkubmFtZX0+e3Byb3BlcnR5LmxhYmVsfTwvTGFiZWw+XG4gICAgICAgIDxXcmFwcGVyPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicXVpbGwtZWRpdG9yXCIgcmVmPXt0aGlzLnd5c2l3aWdSZWZ9IHN0eWxlPXt7IGhlaWdodDogJzQwMHB4JyB9fSAvPlxuICAgICAgICA8L1dyYXBwZXI+XG4gICAgICAgIHtlcnJvciAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWxwIGlzLWRhbmdlclwiPntlcnJvci5tZXNzYWdlfTwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcGVydHlJblNob3cgZnJvbSAnLi4vLi4vdWkvcHJvcGVydHktaW4tc2hvdydcbmltcG9ydCB7IEVkaXRQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hvdyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8RWRpdFByb3BlcnR5UHJvcHM+IHtcbiAgcHJpdmF0ZSBjb250ZW50UmVmOiBSZWFjdC5SZWZPYmplY3Q8YW55PlxuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBFZGl0UHJvcGVydHlQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuY29udGVudFJlZiA9IFJlYWN0LmNyZWF0ZVJlZigpXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB2YWx1ZSA9IHJlY29yZC5wYXJhbXNbcHJvcGVydHkubmFtZV1cbiAgICB0aGlzLmNvbnRlbnRSZWYuY3VycmVudC5pbm5lckhUTUwgPSB2YWx1ZVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQcm9wZXJ0eUluU2hvdyBwcm9wZXJ0eT17cHJvcGVydHl9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJpY2gtdGV4dC12YWx1ZSBjb250ZW50XCIgcmVmPXt0aGlzLmNvbnRlbnRSZWZ9IC8+XG4gICAgICA8L1Byb3BlcnR5SW5TaG93PlxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5cbmltcG9ydCBWaWV3SGVscGVycyBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL3V0aWxzL3ZpZXctaGVscGVycydcbmltcG9ydCBQcm9wZXJ0eUpTT04gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Byb3BlcnR5LWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IFJlY29yZEpTT04gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3JlY29yZC1qc29uLmludGVyZmFjZSdcbmltcG9ydCBSZXNvdXJjZUpTT04gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Jlc291cmNlLWpzb24uaW50ZXJmYWNlJ1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBwcm9wZXJ0eTogUHJvcGVydHlKU09OO1xuICByZWNvcmQ6IFJlY29yZEpTT047XG4gIHJlc291cmNlOiBSZXNvdXJjZUpTT047XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpc3QgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHJlbmRlcigpOiBSZWFjdC5SZWFjdENoaWxkIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQsIHJlc291cmNlIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3Qgc2hvd0FjdGlvbiA9IHJlY29yZC5yZWNvcmRBY3Rpb25zLmZpbmQoYSA9PiBhLm5hbWUgPT09ICdzaG93JylcbiAgICBjb25zdCBvcmlnaW5hbCA9IHJlY29yZC5wYXJhbXNbcHJvcGVydHkubmFtZV0gfHwgJydcbiAgICBjb25zdCB2YWx1ZSA9IG9yaWdpbmFsLnN1YnN0cmluZygwLCAxNSkgKyAob3JpZ2luYWwubGVuZ3RoID4gMTUgPyAnLi4uJyA6ICcnKVxuXG4gICAgaWYgKHJlc291cmNlLnRpdGxlUHJvcGVydHkubmFtZSA9PT0gcHJvcGVydHkubmFtZSAmJiBzaG93QWN0aW9uKSB7XG4gICAgICBjb25zdCBoID0gbmV3IFZpZXdIZWxwZXJzKClcbiAgICAgIGNvbnN0IGhyZWYgPSBoLnJlY29yZEFjdGlvblVybCh7XG4gICAgICAgIHJlc291cmNlSWQ6IHJlc291cmNlLmlkLCByZWNvcmRJZDogcmVjb3JkLmlkLCBhY3Rpb25OYW1lOiAnc2hvdycsXG4gICAgICB9KVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPExpbmsgdG89e2hyZWZ9Pnt2YWx1ZX08L0xpbms+XG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XG4gICAgKVxuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5leHBvcnRzLmhhbmRsZUlucHV0Q2hhbmdlID0gaGFuZGxlSW5wdXRDaGFuZ2U7XG5leHBvcnRzLmlzRG9jdW1lbnRFbGVtZW50ID0gaXNEb2N1bWVudEVsZW1lbnQ7XG5leHBvcnRzLm5vcm1hbGl6ZWRIZWlnaHQgPSBub3JtYWxpemVkSGVpZ2h0O1xuZXhwb3J0cy5nZXRTY3JvbGxUb3AgPSBnZXRTY3JvbGxUb3A7XG5leHBvcnRzLnNjcm9sbFRvID0gc2Nyb2xsVG87XG5leHBvcnRzLmdldFNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudDtcbmV4cG9ydHMuYW5pbWF0ZWRTY3JvbGxUbyA9IGFuaW1hdGVkU2Nyb2xsVG87XG5leHBvcnRzLnNjcm9sbEludG9WaWV3ID0gc2Nyb2xsSW50b1ZpZXc7XG5leHBvcnRzLmdldEJvdW5kaW5nQ2xpZW50T2JqID0gZ2V0Qm91bmRpbmdDbGllbnRPYmo7XG5leHBvcnRzLnRvS2V5ID0gdG9LZXk7XG5leHBvcnRzLmlzVG91Y2hDYXBhYmxlID0gaXNUb3VjaENhcGFibGU7XG5leHBvcnRzLmlzTW9iaWxlRGV2aWNlID0gaXNNb2JpbGVEZXZpY2U7XG5leHBvcnRzLmNsZWFuVmFsdWUgPSBleHBvcnRzLmVtcHR5U3RyaW5nID0gZXhwb3J0cy5ub29wID0gdm9pZCAwO1xuXG52YXIgX3JhZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJhZlwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTk8gT1Bcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbmV4cG9ydHMubm9vcCA9IG5vb3A7XG5cbnZhciBlbXB0eVN0cmluZyA9IGZ1bmN0aW9uIGVtcHR5U3RyaW5nKCkge1xuICByZXR1cm4gJyc7XG59OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIENsYXNzIE5hbWUgUHJlZml4ZXJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgY29tcG9uZW50IHN0YXRlIGZvciBzdHlsaW5nIHdpdGggY2xhc3MgbmFtZXMuXG5cbiBFeHBlY3RzIGFuIGFycmF5IG9mIHN0cmluZ3MgT1IgYSBzdHJpbmcvb2JqZWN0IHBhaXI6XG4gLSBjbGFzc05hbWUoWydjb21wJywgJ2NvbXAtYXJnJywgJ2NvbXAtYXJnLTInXSlcbiAgIEByZXR1cm5zICdyZWFjdC1zZWxlY3RfX2NvbXAgcmVhY3Qtc2VsZWN0X19jb21wLWFyZyByZWFjdC1zZWxlY3RfX2NvbXAtYXJnLTInXG4gLSBjbGFzc05hbWUoJ2NvbXAnLCB7IHNvbWU6IHRydWUsIHN0YXRlOiBmYWxzZSB9KVxuICAgQHJldHVybnMgJ3JlYWN0LXNlbGVjdF9fY29tcCByZWFjdC1zZWxlY3RfX2NvbXAtLXNvbWUnXG4qL1xuXG5cbmV4cG9ydHMuZW1wdHlTdHJpbmcgPSBlbXB0eVN0cmluZztcblxuZnVuY3Rpb24gYXBwbHlQcmVmaXhUb05hbWUocHJlZml4LCBuYW1lKSB7XG4gIGlmICghbmFtZSkge1xuICAgIHJldHVybiBwcmVmaXg7XG4gIH0gZWxzZSBpZiAobmFtZVswXSA9PT0gJy0nKSB7XG4gICAgcmV0dXJuIHByZWZpeCArIG5hbWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByZWZpeCArICdfXycgKyBuYW1lO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsYXNzTmFtZXMocHJlZml4LCBjc3NLZXksIHN0YXRlLCBjbGFzc05hbWUpIHtcbiAgdmFyIGFyciA9IFtjc3NLZXksIGNsYXNzTmFtZV07XG5cbiAgaWYgKHN0YXRlICYmIHByZWZpeCkge1xuICAgIGZvciAodmFyIGtleSBpbiBzdGF0ZSkge1xuICAgICAgaWYgKHN0YXRlLmhhc093blByb3BlcnR5KGtleSkgJiYgc3RhdGVba2V5XSkge1xuICAgICAgICBhcnIucHVzaChcIlwiLmNvbmNhdChhcHBseVByZWZpeFRvTmFtZShwcmVmaXgsIGtleSkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXJyLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gU3RyaW5nKGkpLnRyaW0oKTtcbiAgfSkuam9pbignICcpO1xufSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIENsZWFuIFZhbHVlXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG52YXIgY2xlYW5WYWx1ZSA9IGZ1bmN0aW9uIGNsZWFuVmFsdWUodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWUuZmlsdGVyKEJvb2xlYW4pO1xuICBpZiAoX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSByZXR1cm4gW3ZhbHVlXTtcbiAgcmV0dXJuIFtdO1xufTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBIYW5kbGUgSW5wdXQgQ2hhbmdlXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG5leHBvcnRzLmNsZWFuVmFsdWUgPSBjbGVhblZhbHVlO1xuXG5mdW5jdGlvbiBoYW5kbGVJbnB1dENoYW5nZShpbnB1dFZhbHVlLCBhY3Rpb25NZXRhLCBvbklucHV0Q2hhbmdlKSB7XG4gIGlmIChvbklucHV0Q2hhbmdlKSB7XG4gICAgdmFyIG5ld1ZhbHVlID0gb25JbnB1dENoYW5nZShpbnB1dFZhbHVlLCBhY3Rpb25NZXRhKTtcbiAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09PSAnc3RyaW5nJykgcmV0dXJuIG5ld1ZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGlucHV0VmFsdWU7XG59IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gU2Nyb2xsIEhlbHBlcnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbmZ1bmN0aW9uIGlzRG9jdW1lbnRFbGVtZW50KGVsKSB7XG4gIHJldHVybiBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBkb2N1bWVudC5ib2R5LCB3aW5kb3ddLmluZGV4T2YoZWwpID4gLTE7XG59IC8vIE5vcm1hbGl6ZWQgU2Nyb2xsIFRvcFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuZnVuY3Rpb24gbm9ybWFsaXplZEhlaWdodChlbCkge1xuICBpZiAoaXNEb2N1bWVudEVsZW1lbnQoZWwpKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgfVxuXG4gIHJldHVybiBlbC5jbGllbnRIZWlnaHQ7XG59IC8vIE5vcm1hbGl6ZWQgc2Nyb2xsVG8gJiBzY3JvbGxUb3Bcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbmZ1bmN0aW9uIGdldFNjcm9sbFRvcChlbCkge1xuICBpZiAoaXNEb2N1bWVudEVsZW1lbnQoZWwpKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgfVxuXG4gIHJldHVybiBlbC5zY3JvbGxUb3A7XG59XG5cbmZ1bmN0aW9uIHNjcm9sbFRvKGVsLCB0b3ApIHtcbiAgLy8gd2l0aCBhIHNjcm9sbCBkaXN0YW5jZSwgd2UgcGVyZm9ybSBzY3JvbGwgb24gdGhlIGVsZW1lbnRcbiAgaWYgKGlzRG9jdW1lbnRFbGVtZW50KGVsKSkge1xuICAgIHdpbmRvdy5zY3JvbGxUbygwLCB0b3ApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGVsLnNjcm9sbFRvcCA9IHRvcDtcbn0gLy8gR2V0IFNjcm9sbCBQYXJlbnRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciBleGNsdWRlU3RhdGljUGFyZW50ID0gc3R5bGUucG9zaXRpb24gPT09ICdhYnNvbHV0ZSc7XG4gIHZhciBvdmVyZmxvd1J4ID0gLyhhdXRvfHNjcm9sbCkvO1xuICB2YXIgZG9jRWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IC8vIHN1Y2sgaXQsIGZsb3cuLi5cblxuICBpZiAoc3R5bGUucG9zaXRpb24gPT09ICdmaXhlZCcpIHJldHVybiBkb2NFbDtcblxuICBmb3IgKHZhciBwYXJlbnQgPSBlbGVtZW50OyBwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudDspIHtcbiAgICBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUocGFyZW50KTtcblxuICAgIGlmIChleGNsdWRlU3RhdGljUGFyZW50ICYmIHN0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG92ZXJmbG93UngudGVzdChzdHlsZS5vdmVyZmxvdyArIHN0eWxlLm92ZXJmbG93WSArIHN0eWxlLm92ZXJmbG93WCkpIHtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRvY0VsO1xufSAvLyBBbmltYXRlZCBTY3JvbGwgVG9cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAgQHBhcmFtIHQ6IHRpbWUgKGVsYXBzZWQpXG4gIEBwYXJhbSBiOiBpbml0aWFsIHZhbHVlXG4gIEBwYXJhbSBjOiBhbW91bnQgb2YgY2hhbmdlXG4gIEBwYXJhbSBkOiBkdXJhdGlvblxuKi9cblxuXG5mdW5jdGlvbiBlYXNlT3V0Q3ViaWModCwgYiwgYywgZCkge1xuICByZXR1cm4gYyAqICgodCA9IHQgLyBkIC0gMSkgKiB0ICogdCArIDEpICsgYjtcbn1cblxuZnVuY3Rpb24gYW5pbWF0ZWRTY3JvbGxUbyhlbGVtZW50LCB0bykge1xuICB2YXIgZHVyYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDIwMDtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBub29wO1xuICB2YXIgc3RhcnQgPSBnZXRTY3JvbGxUb3AoZWxlbWVudCk7XG4gIHZhciBjaGFuZ2UgPSB0byAtIHN0YXJ0O1xuICB2YXIgaW5jcmVtZW50ID0gMTA7XG4gIHZhciBjdXJyZW50VGltZSA9IDA7XG5cbiAgZnVuY3Rpb24gYW5pbWF0ZVNjcm9sbCgpIHtcbiAgICBjdXJyZW50VGltZSArPSBpbmNyZW1lbnQ7XG4gICAgdmFyIHZhbCA9IGVhc2VPdXRDdWJpYyhjdXJyZW50VGltZSwgc3RhcnQsIGNoYW5nZSwgZHVyYXRpb24pO1xuICAgIHNjcm9sbFRvKGVsZW1lbnQsIHZhbCk7XG5cbiAgICBpZiAoY3VycmVudFRpbWUgPCBkdXJhdGlvbikge1xuICAgICAgKDAsIF9yYWYuZGVmYXVsdCkoYW5pbWF0ZVNjcm9sbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIGFuaW1hdGVTY3JvbGwoKTtcbn0gLy8gU2Nyb2xsIEludG8gVmlld1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuZnVuY3Rpb24gc2Nyb2xsSW50b1ZpZXcobWVudUVsLCBmb2N1c2VkRWwpIHtcbiAgdmFyIG1lbnVSZWN0ID0gbWVudUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgZm9jdXNlZFJlY3QgPSBmb2N1c2VkRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBvdmVyU2Nyb2xsID0gZm9jdXNlZEVsLm9mZnNldEhlaWdodCAvIDM7XG5cbiAgaWYgKGZvY3VzZWRSZWN0LmJvdHRvbSArIG92ZXJTY3JvbGwgPiBtZW51UmVjdC5ib3R0b20pIHtcbiAgICBzY3JvbGxUbyhtZW51RWwsIE1hdGgubWluKGZvY3VzZWRFbC5vZmZzZXRUb3AgKyBmb2N1c2VkRWwuY2xpZW50SGVpZ2h0IC0gbWVudUVsLm9mZnNldEhlaWdodCArIG92ZXJTY3JvbGwsIG1lbnVFbC5zY3JvbGxIZWlnaHQpKTtcbiAgfSBlbHNlIGlmIChmb2N1c2VkUmVjdC50b3AgLSBvdmVyU2Nyb2xsIDwgbWVudVJlY3QudG9wKSB7XG4gICAgc2Nyb2xsVG8obWVudUVsLCBNYXRoLm1heChmb2N1c2VkRWwub2Zmc2V0VG9wIC0gb3ZlclNjcm9sbCwgMCkpO1xuICB9XG59IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gR2V0IGJvdW5kaW5nIGNsaWVudCBvYmplY3Rcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gY2Fubm90IGdldCBrZXlzIHVzaW5nIGFycmF5IG5vdGF0aW9uIHdpdGggRE9NUmVjdFxuXG5cbmZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50T2JqKGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIGJvdHRvbTogcmVjdC5ib3R0b20sXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC53aWR0aFxuICB9O1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFN0cmluZyB0byBLZXkgKGtlYmFiaWZ5KVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5mdW5jdGlvbiB0b0tleShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXFcvZywgJy0nKTtcbn0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBUb3VjaCBDYXBhYmlsaXR5IERldGVjdG9yXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG5mdW5jdGlvbiBpc1RvdWNoQ2FwYWJsZSgpIHtcbiAgdHJ5IHtcbiAgICBkb2N1bWVudC5jcmVhdGVFdmVudCgnVG91Y2hFdmVudCcpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTW9iaWxlIERldmljZSBEZXRlY3RvclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuZnVuY3Rpb24gaXNNb2JpbGVEZXZpY2UoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRNZW51UGxhY2VtZW50ID0gZ2V0TWVudVBsYWNlbWVudDtcbmV4cG9ydHMuTWVudVBvcnRhbCA9IGV4cG9ydHMubWVudVBvcnRhbENTUyA9IGV4cG9ydHMuTG9hZGluZ01lc3NhZ2UgPSBleHBvcnRzLk5vT3B0aW9uc01lc3NhZ2UgPSBleHBvcnRzLmxvYWRpbmdNZXNzYWdlQ1NTID0gZXhwb3J0cy5ub09wdGlvbnNNZXNzYWdlQ1NTID0gZXhwb3J0cy5NZW51TGlzdCA9IGV4cG9ydHMubWVudUxpc3RDU1MgPSBleHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLk1lbnVQbGFjZXIgPSBleHBvcnRzLm1lbnVDU1MgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2Vtb3Rpb24gPSByZXF1aXJlKFwiZW1vdGlvblwiKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoXCJyZWFjdC1kb21cIik7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gZ2V0TWVudVBsYWNlbWVudChfcmVmKSB7XG4gIHZhciBtYXhIZWlnaHQgPSBfcmVmLm1heEhlaWdodCxcbiAgICAgIG1lbnVFbCA9IF9yZWYubWVudUVsLFxuICAgICAgbWluSGVpZ2h0ID0gX3JlZi5taW5IZWlnaHQsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudCxcbiAgICAgIHNob3VsZFNjcm9sbCA9IF9yZWYuc2hvdWxkU2Nyb2xsLFxuICAgICAgaXNGaXhlZFBvc2l0aW9uID0gX3JlZi5pc0ZpeGVkUG9zaXRpb24sXG4gICAgICB0aGVtZSA9IF9yZWYudGhlbWU7XG4gIHZhciBzcGFjaW5nID0gdGhlbWUuc3BhY2luZztcbiAgdmFyIHNjcm9sbFBhcmVudCA9ICgwLCBfdXRpbHMuZ2V0U2Nyb2xsUGFyZW50KShtZW51RWwpO1xuICB2YXIgZGVmYXVsdFN0YXRlID0ge1xuICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHRcbiAgfTsgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmcsIHJldHVybiBkZWZhdWx0IHN0YXRlXG5cbiAgaWYgKCFtZW51RWwgfHwgIW1lbnVFbC5vZmZzZXRQYXJlbnQpIHJldHVybiBkZWZhdWx0U3RhdGU7IC8vIHdlIGNhbid0IHRydXN0IGBzY3JvbGxQYXJlbnQuc2Nyb2xsSGVpZ2h0YCAtLT4gaXQgbWF5IGluY3JlYXNlIHdoZW5cbiAgLy8gdGhlIG1lbnUgaXMgcmVuZGVyZWRcblxuICB2YXIgX3Njcm9sbFBhcmVudCRnZXRCb3VuID0gc2Nyb2xsUGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgc2Nyb2xsSGVpZ2h0ID0gX3Njcm9sbFBhcmVudCRnZXRCb3VuLmhlaWdodDtcblxuICB2YXIgX21lbnVFbCRnZXRCb3VuZGluZ0NsID0gbWVudUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgbWVudUJvdHRvbSA9IF9tZW51RWwkZ2V0Qm91bmRpbmdDbC5ib3R0b20sXG4gICAgICBtZW51SGVpZ2h0ID0gX21lbnVFbCRnZXRCb3VuZGluZ0NsLmhlaWdodCxcbiAgICAgIG1lbnVUb3AgPSBfbWVudUVsJGdldEJvdW5kaW5nQ2wudG9wO1xuXG4gIHZhciBfbWVudUVsJG9mZnNldFBhcmVudCQgPSBtZW51RWwub2Zmc2V0UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgY29udGFpbmVyVG9wID0gX21lbnVFbCRvZmZzZXRQYXJlbnQkLnRvcDtcblxuICB2YXIgdmlld0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgdmFyIHNjcm9sbFRvcCA9ICgwLCBfdXRpbHMuZ2V0U2Nyb2xsVG9wKShzY3JvbGxQYXJlbnQpO1xuICB2YXIgbWFyZ2luQm90dG9tID0gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZShtZW51RWwpLm1hcmdpbkJvdHRvbSwgMTApO1xuICB2YXIgbWFyZ2luVG9wID0gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZShtZW51RWwpLm1hcmdpblRvcCwgMTApO1xuICB2YXIgdmlld1NwYWNlQWJvdmUgPSBjb250YWluZXJUb3AgLSBtYXJnaW5Ub3A7XG4gIHZhciB2aWV3U3BhY2VCZWxvdyA9IHZpZXdIZWlnaHQgLSBtZW51VG9wO1xuICB2YXIgc2Nyb2xsU3BhY2VBYm92ZSA9IHZpZXdTcGFjZUFib3ZlICsgc2Nyb2xsVG9wO1xuICB2YXIgc2Nyb2xsU3BhY2VCZWxvdyA9IHNjcm9sbEhlaWdodCAtIHNjcm9sbFRvcCAtIG1lbnVUb3A7XG4gIHZhciBzY3JvbGxEb3duID0gbWVudUJvdHRvbSAtIHZpZXdIZWlnaHQgKyBzY3JvbGxUb3AgKyBtYXJnaW5Cb3R0b207XG4gIHZhciBzY3JvbGxVcCA9IHNjcm9sbFRvcCArIG1lbnVUb3AgLSBtYXJnaW5Ub3A7XG4gIHZhciBzY3JvbGxEdXJhdGlvbiA9IDE2MDtcblxuICBzd2l0Y2ggKHBsYWNlbWVudCkge1xuICAgIGNhc2UgJ2F1dG8nOlxuICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAvLyAxOiB0aGUgbWVudSB3aWxsIGZpdCwgZG8gbm90aGluZ1xuICAgICAgaWYgKHZpZXdTcGFjZUJlbG93ID49IG1lbnVIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9IC8vIDI6IHRoZSBtZW51IHdpbGwgZml0LCBpZiBzY3JvbGxlZFxuXG5cbiAgICAgIGlmIChzY3JvbGxTcGFjZUJlbG93ID49IG1lbnVIZWlnaHQgJiYgIWlzRml4ZWRQb3NpdGlvbikge1xuICAgICAgICBpZiAoc2hvdWxkU2Nyb2xsKSB7XG4gICAgICAgICAgKDAsIF91dGlscy5hbmltYXRlZFNjcm9sbFRvKShzY3JvbGxQYXJlbnQsIHNjcm9sbERvd24sIHNjcm9sbER1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodFxuICAgICAgICB9O1xuICAgICAgfSAvLyAzOiB0aGUgbWVudSB3aWxsIGZpdCwgaWYgY29uc3RyYWluZWRcblxuXG4gICAgICBpZiAoIWlzRml4ZWRQb3NpdGlvbiAmJiBzY3JvbGxTcGFjZUJlbG93ID49IG1pbkhlaWdodCB8fCBpc0ZpeGVkUG9zaXRpb24gJiYgdmlld1NwYWNlQmVsb3cgPj0gbWluSGVpZ2h0KSB7XG4gICAgICAgIGlmIChzaG91bGRTY3JvbGwpIHtcbiAgICAgICAgICAoMCwgX3V0aWxzLmFuaW1hdGVkU2Nyb2xsVG8pKHNjcm9sbFBhcmVudCwgc2Nyb2xsRG93biwgc2Nyb2xsRHVyYXRpb24pO1xuICAgICAgICB9IC8vIHdlIHdhbnQgdG8gcHJvdmlkZSBhcyBtdWNoIG9mIHRoZSBtZW51IGFzIHBvc3NpYmxlIHRvIHRoZSB1c2VyLFxuICAgICAgICAvLyBzbyBnaXZlIHRoZW0gd2hhdGV2ZXIgaXMgYXZhaWxhYmxlIGJlbG93IHJhdGhlciB0aGFuIHRoZSBtaW5IZWlnaHQuXG5cblxuICAgICAgICB2YXIgY29uc3RyYWluZWRIZWlnaHQgPSBpc0ZpeGVkUG9zaXRpb24gPyB2aWV3U3BhY2VCZWxvdyAtIG1hcmdpbkJvdHRvbSA6IHNjcm9sbFNwYWNlQmVsb3cgLSBtYXJnaW5Cb3R0b207XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IGNvbnN0cmFpbmVkSGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9IC8vIDQuIEZvcmtlZCBiZXZpb3VyIHdoZW4gdGhlcmUgaXNuJ3QgZW5vdWdoIHNwYWNlIGJlbG93XG4gICAgICAvLyBBVVRPOiBmbGlwIHRoZSBtZW51LCByZW5kZXIgYWJvdmVcblxuXG4gICAgICBpZiAocGxhY2VtZW50ID09PSAnYXV0bycgfHwgaXNGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgIC8vIG1heSBuZWVkIHRvIGJlIGNvbnN0cmFpbmVkIGFmdGVyIGZsaXBwaW5nXG4gICAgICAgIHZhciBfY29uc3RyYWluZWRIZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgICAgIHZhciBzcGFjZUFib3ZlID0gaXNGaXhlZFBvc2l0aW9uID8gdmlld1NwYWNlQWJvdmUgOiBzY3JvbGxTcGFjZUFib3ZlO1xuXG4gICAgICAgIGlmIChzcGFjZUFib3ZlID49IG1pbkhlaWdodCkge1xuICAgICAgICAgIF9jb25zdHJhaW5lZEhlaWdodCA9IE1hdGgubWluKHNwYWNlQWJvdmUgLSBtYXJnaW5Cb3R0b20gLSBzcGFjaW5nLmNvbnRyb2xIZWlnaHQsIG1heEhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBfY29uc3RyYWluZWRIZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gQk9UVE9NOiBhbGxvdyBicm93c2VyIHRvIGluY3JlYXNlIHNjcm9sbGFibGUgYXJlYSBhbmQgaW1tZWRpYXRlbHkgc2V0IHNjcm9sbFxuXG5cbiAgICAgIGlmIChwbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgICAgICgwLCBfdXRpbHMuc2Nyb2xsVG8pKHNjcm9sbFBhcmVudCwgc2Nyb2xsRG93bik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RvcCc6XG4gICAgICAvLyAxOiB0aGUgbWVudSB3aWxsIGZpdCwgZG8gbm90aGluZ1xuICAgICAgaWYgKHZpZXdTcGFjZUFib3ZlID49IG1lbnVIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgICAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9IC8vIDI6IHRoZSBtZW51IHdpbGwgZml0LCBpZiBzY3JvbGxlZFxuXG5cbiAgICAgIGlmIChzY3JvbGxTcGFjZUFib3ZlID49IG1lbnVIZWlnaHQgJiYgIWlzRml4ZWRQb3NpdGlvbikge1xuICAgICAgICBpZiAoc2hvdWxkU2Nyb2xsKSB7XG4gICAgICAgICAgKDAsIF91dGlscy5hbmltYXRlZFNjcm9sbFRvKShzY3JvbGxQYXJlbnQsIHNjcm9sbFVwLCBzY3JvbGxEdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gMzogdGhlIG1lbnUgd2lsbCBmaXQsIGlmIGNvbnN0cmFpbmVkXG5cblxuICAgICAgaWYgKCFpc0ZpeGVkUG9zaXRpb24gJiYgc2Nyb2xsU3BhY2VBYm92ZSA+PSBtaW5IZWlnaHQgfHwgaXNGaXhlZFBvc2l0aW9uICYmIHZpZXdTcGFjZUFib3ZlID49IG1pbkhlaWdodCkge1xuICAgICAgICB2YXIgX2NvbnN0cmFpbmVkSGVpZ2h0MiA9IG1heEhlaWdodDsgLy8gd2Ugd2FudCB0byBwcm92aWRlIGFzIG11Y2ggb2YgdGhlIG1lbnUgYXMgcG9zc2libGUgdG8gdGhlIHVzZXIsXG4gICAgICAgIC8vIHNvIGdpdmUgdGhlbSB3aGF0ZXZlciBpcyBhdmFpbGFibGUgYmVsb3cgcmF0aGVyIHRoYW4gdGhlIG1pbkhlaWdodC5cblxuICAgICAgICBpZiAoIWlzRml4ZWRQb3NpdGlvbiAmJiBzY3JvbGxTcGFjZUFib3ZlID49IG1pbkhlaWdodCB8fCBpc0ZpeGVkUG9zaXRpb24gJiYgdmlld1NwYWNlQWJvdmUgPj0gbWluSGVpZ2h0KSB7XG4gICAgICAgICAgX2NvbnN0cmFpbmVkSGVpZ2h0MiA9IGlzRml4ZWRQb3NpdGlvbiA/IHZpZXdTcGFjZUFib3ZlIC0gbWFyZ2luVG9wIDogc2Nyb2xsU3BhY2VBYm92ZSAtIG1hcmdpblRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaG91bGRTY3JvbGwpIHtcbiAgICAgICAgICAoMCwgX3V0aWxzLmFuaW1hdGVkU2Nyb2xsVG8pKHNjcm9sbFBhcmVudCwgc2Nyb2xsVXAsIHNjcm9sbER1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IF9jb25zdHJhaW5lZEhlaWdodDJcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gNC4gbm90IGVub3VnaCBzcGFjZSwgdGhlIGJyb3dzZXIgV0lMTCBOT1QgaW5jcmVhc2Ugc2Nyb2xsYWJsZSBhcmVhIHdoZW5cbiAgICAgIC8vIGFic29sdXRlbHkgcG9zaXRpb25lZCBlbGVtZW50IHJlbmRlcmVkIGFib3ZlIHRoZSB2aWV3cG9ydCAob25seSBiZWxvdykuXG4gICAgICAvLyBGbGlwIHRoZSBtZW51LCByZW5kZXIgYmVsb3dcblxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodFxuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBsYWNlbWVudCBwcm92aWRlZCBcXFwiXCIuY29uY2F0KHBsYWNlbWVudCwgXCJcXFwiLlwiKSk7XG4gIH0gLy8gZnVsZmlsIGNvbnRyYWN0IHdpdGggZmxvdzogaW1wbGljaXQgcmV0dXJuIHZhbHVlIG9mIHVuZGVmaW5lZFxuXG5cbiAgcmV0dXJuIGRlZmF1bHRTdGF0ZTtcbn0gLy8gTWVudSBDb21wb25lbnRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbmZ1bmN0aW9uIGFsaWduVG9Db250cm9sKHBsYWNlbWVudCkge1xuICB2YXIgcGxhY2VtZW50VG9DU1NQcm9wID0ge1xuICAgIGJvdHRvbTogJ3RvcCcsXG4gICAgdG9wOiAnYm90dG9tJ1xuICB9O1xuICByZXR1cm4gcGxhY2VtZW50ID8gcGxhY2VtZW50VG9DU1NQcm9wW3BsYWNlbWVudF0gOiAnYm90dG9tJztcbn1cblxudmFyIGNvZXJjZVBsYWNlbWVudCA9IGZ1bmN0aW9uIGNvZXJjZVBsYWNlbWVudChwKSB7XG4gIHJldHVybiBwID09PSAnYXV0bycgPyAnYm90dG9tJyA6IHA7XG59O1xuXG52YXIgbWVudUNTUyA9IGZ1bmN0aW9uIG1lbnVDU1MoX3JlZjIpIHtcbiAgdmFyIF9yZWYzO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBfcmVmMi5wbGFjZW1lbnQsXG4gICAgICBfcmVmMiR0aGVtZSA9IF9yZWYyLnRoZW1lLFxuICAgICAgYm9yZGVyUmFkaXVzID0gX3JlZjIkdGhlbWUuYm9yZGVyUmFkaXVzLFxuICAgICAgc3BhY2luZyA9IF9yZWYyJHRoZW1lLnNwYWNpbmcsXG4gICAgICBjb2xvcnMgPSBfcmVmMiR0aGVtZS5jb2xvcnM7XG4gIHJldHVybiBfcmVmMyA9IHtcbiAgICBsYWJlbDogJ21lbnUnXG4gIH0sIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgYWxpZ25Ub0NvbnRyb2wocGxhY2VtZW50KSwgJzEwMCUnKSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBcImJhY2tncm91bmRDb2xvclwiLCBjb2xvcnMubmV1dHJhbDApLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFwiYm9yZGVyUmFkaXVzXCIsIGJvcmRlclJhZGl1cyksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgXCJib3hTaGFkb3dcIiwgJzAgMCAwIDFweCBoc2xhKDAsIDAlLCAwJSwgMC4xKSwgMCA0cHggMTFweCBoc2xhKDAsIDAlLCAwJSwgMC4xKScpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFwibWFyZ2luQm90dG9tXCIsIHNwYWNpbmcubWVudUd1dHRlciksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgXCJtYXJnaW5Ub3BcIiwgc3BhY2luZy5tZW51R3V0dGVyKSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBcInBvc2l0aW9uXCIsICdhYnNvbHV0ZScpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFwid2lkdGhcIiwgJzEwMCUnKSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBcInpJbmRleFwiLCAxKSwgX3JlZjM7XG59OyAvLyBOT1RFOiBpbnRlcm5hbCBvbmx5XG5cblxuZXhwb3J0cy5tZW51Q1NTID0gbWVudUNTUztcblxudmFyIE1lbnVQbGFjZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbnVQbGFjZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbnVQbGFjZXIoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVudVBsYWNlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihNZW51UGxhY2VyKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic3RhdGVcIiwge1xuICAgICAgbWF4SGVpZ2h0OiBfdGhpcy5wcm9wcy5tYXhNZW51SGVpZ2h0LFxuICAgICAgcGxhY2VtZW50OiBudWxsXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0UGxhY2VtZW50XCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG1pbk1lbnVIZWlnaHQgPSBfdGhpcyRwcm9wcy5taW5NZW51SGVpZ2h0LFxuICAgICAgICAgIG1heE1lbnVIZWlnaHQgPSBfdGhpcyRwcm9wcy5tYXhNZW51SGVpZ2h0LFxuICAgICAgICAgIG1lbnVQbGFjZW1lbnQgPSBfdGhpcyRwcm9wcy5tZW51UGxhY2VtZW50LFxuICAgICAgICAgIG1lbnVQb3NpdGlvbiA9IF90aGlzJHByb3BzLm1lbnVQb3NpdGlvbixcbiAgICAgICAgICBtZW51U2hvdWxkU2Nyb2xsSW50b1ZpZXcgPSBfdGhpcyRwcm9wcy5tZW51U2hvdWxkU2Nyb2xsSW50b1ZpZXcsXG4gICAgICAgICAgdGhlbWUgPSBfdGhpcyRwcm9wcy50aGVtZTtcbiAgICAgIHZhciBnZXRQb3J0YWxQbGFjZW1lbnQgPSBfdGhpcy5jb250ZXh0LmdldFBvcnRhbFBsYWNlbWVudDtcbiAgICAgIGlmICghcmVmKSByZXR1cm47IC8vIERPIE5PVCBzY3JvbGwgaWYgcG9zaXRpb24gaXMgZml4ZWRcblxuICAgICAgdmFyIGlzRml4ZWRQb3NpdGlvbiA9IG1lbnVQb3NpdGlvbiA9PT0gJ2ZpeGVkJztcbiAgICAgIHZhciBzaG91bGRTY3JvbGwgPSBtZW51U2hvdWxkU2Nyb2xsSW50b1ZpZXcgJiYgIWlzRml4ZWRQb3NpdGlvbjtcbiAgICAgIHZhciBzdGF0ZSA9IGdldE1lbnVQbGFjZW1lbnQoe1xuICAgICAgICBtYXhIZWlnaHQ6IG1heE1lbnVIZWlnaHQsXG4gICAgICAgIG1lbnVFbDogcmVmLFxuICAgICAgICBtaW5IZWlnaHQ6IG1pbk1lbnVIZWlnaHQsXG4gICAgICAgIHBsYWNlbWVudDogbWVudVBsYWNlbWVudCxcbiAgICAgICAgc2hvdWxkU2Nyb2xsOiBzaG91bGRTY3JvbGwsXG4gICAgICAgIGlzRml4ZWRQb3NpdGlvbjogaXNGaXhlZFBvc2l0aW9uLFxuICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgIH0pO1xuICAgICAgaWYgKGdldFBvcnRhbFBsYWNlbWVudCkgZ2V0UG9ydGFsUGxhY2VtZW50KHN0YXRlKTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldFVwZGF0ZWRQcm9wc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbWVudVBsYWNlbWVudCA9IF90aGlzLnByb3BzLm1lbnVQbGFjZW1lbnQ7XG4gICAgICB2YXIgcGxhY2VtZW50ID0gX3RoaXMuc3RhdGUucGxhY2VtZW50IHx8IGNvZXJjZVBsYWNlbWVudChtZW51UGxhY2VtZW50KTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge1xuICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgICAgbWF4SGVpZ2h0OiBfdGhpcy5zdGF0ZS5tYXhIZWlnaHRcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1lbnVQbGFjZXIsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgcmV0dXJuIGNoaWxkcmVuKHtcbiAgICAgICAgcmVmOiB0aGlzLmdldFBsYWNlbWVudCxcbiAgICAgICAgcGxhY2VyUHJvcHM6IHRoaXMuZ2V0VXBkYXRlZFByb3BzKClcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNZW51UGxhY2VyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5NZW51UGxhY2VyID0gTWVudVBsYWNlcjtcblxuX2RlZmluZVByb3BlcnR5KE1lbnVQbGFjZXIsIFwiY29udGV4dFR5cGVzXCIsIHtcbiAgZ2V0UG9ydGFsUGxhY2VtZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufSk7XG5cbnZhciBNZW51ID0gZnVuY3Rpb24gTWVudShwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpbm5lclJlZiA9IHByb3BzLmlubmVyUmVmLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHZhciBjbiA9IGN4KFxuICAvKiNfX1BVUkVfXyovXG4gICgwLCBfZW1vdGlvbi5jc3MpKGdldFN0eWxlcygnbWVudScsIHByb3BzKSksIHtcbiAgICBtZW51OiB0cnVlXG4gIH0sIGNsYXNzTmFtZSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNuXG4gIH0sIGlubmVyUHJvcHMsIHtcbiAgICByZWY6IGlubmVyUmVmXG4gIH0pLCBjaGlsZHJlbik7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBNZW51OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIE1lbnUgTGlzdFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG52YXIgbWVudUxpc3RDU1MgPSBmdW5jdGlvbiBtZW51TGlzdENTUyhfcmVmNCkge1xuICB2YXIgbWF4SGVpZ2h0ID0gX3JlZjQubWF4SGVpZ2h0LFxuICAgICAgYmFzZVVuaXQgPSBfcmVmNC50aGVtZS5zcGFjaW5nLmJhc2VVbml0O1xuICByZXR1cm4ge1xuICAgIG1heEhlaWdodDogbWF4SGVpZ2h0LFxuICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgIHBhZGRpbmdCb3R0b206IGJhc2VVbml0LFxuICAgIHBhZGRpbmdUb3A6IGJhc2VVbml0LFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIC8vIHJlcXVpcmVkIGZvciBvZmZzZXRbSGVpZ2h0LCBUb3BdID4ga2V5Ym9hcmQgc2Nyb2xsXG4gICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCdcbiAgfTtcbn07XG5cbmV4cG9ydHMubWVudUxpc3RDU1MgPSBtZW51TGlzdENTUztcblxudmFyIE1lbnVMaXN0ID0gZnVuY3Rpb24gTWVudUxpc3QocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaXNNdWx0aSA9IHByb3BzLmlzTXVsdGksXG4gICAgICBpbm5lclJlZiA9IHByb3BzLmlubmVyUmVmO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjeChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgKDAsIF9lbW90aW9uLmNzcykoZ2V0U3R5bGVzKCdtZW51TGlzdCcsIHByb3BzKSksIHtcbiAgICAgICdtZW51LWxpc3QnOiB0cnVlLFxuICAgICAgJ21lbnUtbGlzdC0taXMtbXVsdGknOiBpc011bHRpXG4gICAgfSwgY2xhc3NOYW1lKSxcbiAgICByZWY6IGlubmVyUmVmXG4gIH0sIGNoaWxkcmVuKTtcbn07IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTWVudSBOb3RpY2VzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG5leHBvcnRzLk1lbnVMaXN0ID0gTWVudUxpc3Q7XG5cbnZhciBub3RpY2VDU1MgPSBmdW5jdGlvbiBub3RpY2VDU1MoX3JlZjUpIHtcbiAgdmFyIF9yZWY1JHRoZW1lID0gX3JlZjUudGhlbWUsXG4gICAgICBiYXNlVW5pdCA9IF9yZWY1JHRoZW1lLnNwYWNpbmcuYmFzZVVuaXQsXG4gICAgICBjb2xvcnMgPSBfcmVmNSR0aGVtZS5jb2xvcnM7XG4gIHJldHVybiB7XG4gICAgY29sb3I6IGNvbG9ycy5uZXV0cmFsNDAsXG4gICAgcGFkZGluZzogXCJcIi5jb25jYXQoYmFzZVVuaXQgKiAyLCBcInB4IFwiKS5jb25jYXQoYmFzZVVuaXQgKiAzLCBcInB4XCIpLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgfTtcbn07XG5cbnZhciBub09wdGlvbnNNZXNzYWdlQ1NTID0gbm90aWNlQ1NTO1xuZXhwb3J0cy5ub09wdGlvbnNNZXNzYWdlQ1NTID0gbm9PcHRpb25zTWVzc2FnZUNTUztcbnZhciBsb2FkaW5nTWVzc2FnZUNTUyA9IG5vdGljZUNTUztcbmV4cG9ydHMubG9hZGluZ01lc3NhZ2VDU1MgPSBsb2FkaW5nTWVzc2FnZUNTUztcblxudmFyIE5vT3B0aW9uc01lc3NhZ2UgPSBmdW5jdGlvbiBOb09wdGlvbnNNZXNzYWdlKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjeChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgKDAsIF9lbW90aW9uLmNzcykoZ2V0U3R5bGVzKCdub09wdGlvbnNNZXNzYWdlJywgcHJvcHMpKSwge1xuICAgICAgJ21lbnUtbm90aWNlJzogdHJ1ZSxcbiAgICAgICdtZW51LW5vdGljZS0tbm8tb3B0aW9ucyc6IHRydWVcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0sIGlubmVyUHJvcHMpLCBjaGlsZHJlbik7XG59O1xuXG5leHBvcnRzLk5vT3B0aW9uc01lc3NhZ2UgPSBOb09wdGlvbnNNZXNzYWdlO1xuTm9PcHRpb25zTWVzc2FnZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNoaWxkcmVuOiAnTm8gb3B0aW9ucydcbn07XG5cbnZhciBMb2FkaW5nTWVzc2FnZSA9IGZ1bmN0aW9uIExvYWRpbmdNZXNzYWdlKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjeChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgKDAsIF9lbW90aW9uLmNzcykoZ2V0U3R5bGVzKCdsb2FkaW5nTWVzc2FnZScsIHByb3BzKSksIHtcbiAgICAgICdtZW51LW5vdGljZSc6IHRydWUsXG4gICAgICAnbWVudS1ub3RpY2UtLWxvYWRpbmcnOiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9LCBpbm5lclByb3BzKSwgY2hpbGRyZW4pO1xufTtcblxuZXhwb3J0cy5Mb2FkaW5nTWVzc2FnZSA9IExvYWRpbmdNZXNzYWdlO1xuTG9hZGluZ01lc3NhZ2UuZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogJ0xvYWRpbmcuLi4nXG59OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIE1lbnUgUG9ydGFsXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxudmFyIG1lbnVQb3J0YWxDU1MgPSBmdW5jdGlvbiBtZW51UG9ydGFsQ1NTKF9yZWY2KSB7XG4gIHZhciByZWN0ID0gX3JlZjYucmVjdCxcbiAgICAgIG9mZnNldCA9IF9yZWY2Lm9mZnNldCxcbiAgICAgIHBvc2l0aW9uID0gX3JlZjYucG9zaXRpb247XG4gIHJldHVybiB7XG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICB0b3A6IG9mZnNldCxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICB6SW5kZXg6IDFcbiAgfTtcbn07XG5cbmV4cG9ydHMubWVudVBvcnRhbENTUyA9IG1lbnVQb3J0YWxDU1M7XG5cbnZhciBNZW51UG9ydGFsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICBfaW5oZXJpdHMoTWVudVBvcnRhbCwgX0NvbXBvbmVudDIpO1xuXG4gIGZ1bmN0aW9uIE1lbnVQb3J0YWwoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjM7XG5cbiAgICB2YXIgX3RoaXMyO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbnVQb3J0YWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjMgPSBfZ2V0UHJvdG90eXBlT2YoTWVudVBvcnRhbCkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMywgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBwbGFjZW1lbnQ6IG51bGxcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSksIFwiZ2V0UG9ydGFsUGxhY2VtZW50XCIsIGZ1bmN0aW9uIChfcmVmNykge1xuICAgICAgdmFyIHBsYWNlbWVudCA9IF9yZWY3LnBsYWNlbWVudDtcbiAgICAgIHZhciBpbml0aWFsUGxhY2VtZW50ID0gY29lcmNlUGxhY2VtZW50KF90aGlzMi5wcm9wcy5tZW51UGxhY2VtZW50KTsgLy8gYXZvaWQgcmUtcmVuZGVycyBpZiB0aGUgcGxhY2VtZW50IGhhcyBub3QgY2hhbmdlZFxuXG4gICAgICBpZiAocGxhY2VtZW50ICE9PSBpbml0aWFsUGxhY2VtZW50KSB7XG4gICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1lbnVQb3J0YWwsIFt7XG4gICAga2V5OiBcImdldENoaWxkQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBnZXRQb3J0YWxQbGFjZW1lbnQ6IHRoaXMuZ2V0UG9ydGFsUGxhY2VtZW50XG4gICAgICB9O1xuICAgIH0gLy8gY2FsbGJhY2sgZm9yIG9jY2Fzc2lvbnMgd2hlcmUgdGhlIG1lbnUgbXVzdCBcImZsaXBcIlxuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFwcGVuZFRvID0gX3RoaXMkcHJvcHMyLmFwcGVuZFRvLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbnRyb2xFbGVtZW50ID0gX3RoaXMkcHJvcHMyLmNvbnRyb2xFbGVtZW50LFxuICAgICAgICAgIG1lbnVQbGFjZW1lbnQgPSBfdGhpcyRwcm9wczIubWVudVBsYWNlbWVudCxcbiAgICAgICAgICBwb3NpdGlvbiA9IF90aGlzJHByb3BzMi5tZW51UG9zaXRpb24sXG4gICAgICAgICAgZ2V0U3R5bGVzID0gX3RoaXMkcHJvcHMyLmdldFN0eWxlcztcbiAgICAgIHZhciBpc0ZpeGVkID0gcG9zaXRpb24gPT09ICdmaXhlZCc7IC8vIGJhaWwgZWFybHkgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlbid0IHByZXNlbnRcblxuICAgICAgaWYgKCFhcHBlbmRUbyAmJiAhaXNGaXhlZCB8fCAhY29udHJvbEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBwbGFjZW1lbnQgPSB0aGlzLnN0YXRlLnBsYWNlbWVudCB8fCBjb2VyY2VQbGFjZW1lbnQobWVudVBsYWNlbWVudCk7XG4gICAgICB2YXIgcmVjdCA9ICgwLCBfdXRpbHMuZ2V0Qm91bmRpbmdDbGllbnRPYmopKGNvbnRyb2xFbGVtZW50KTtcbiAgICAgIHZhciBzY3JvbGxEaXN0YW5jZSA9IGlzRml4ZWQgPyAwIDogd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgdmFyIG9mZnNldCA9IHJlY3RbcGxhY2VtZW50XSArIHNjcm9sbERpc3RhbmNlO1xuICAgICAgdmFyIHN0YXRlID0ge1xuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICByZWN0OiByZWN0XG4gICAgICB9OyAvLyBzYW1lIHdyYXBwZXIgZWxlbWVudCB3aGV0aGVyIGZpeGVkIG9yIHBvcnRhbGxlZFxuXG4gICAgICB2YXIgbWVudVdyYXBwZXIgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOlxuICAgICAgICAvKiNfX1BVUkVfXyovXG5cbiAgICAgICAgLyojX19QVVJFX18qL1xuICAgICAgICAoMCwgX2Vtb3Rpb24uY3NzKShnZXRTdHlsZXMoJ21lbnVQb3J0YWwnLCBzdGF0ZSkpXG4gICAgICB9LCBjaGlsZHJlbik7XG5cbiAgICAgIHJldHVybiBhcHBlbmRUbyA/ICgwLCBfcmVhY3REb20uY3JlYXRlUG9ydGFsKShtZW51V3JhcHBlciwgYXBwZW5kVG8pIDogbWVudVdyYXBwZXI7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1lbnVQb3J0YWw7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLk1lbnVQb3J0YWwgPSBNZW51UG9ydGFsO1xuXG5fZGVmaW5lUHJvcGVydHkoTWVudVBvcnRhbCwgXCJjaGlsZENvbnRleHRUeXBlc1wiLCB7XG4gIGdldFBvcnRhbFBsYWNlbWVudDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbn0pOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydGVkRXF1YWw7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBrZXlMaXN0ID0gT2JqZWN0LmtleXM7XG52YXIgaGFzUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGVxdWFsKGEsIGIpIHtcbiAgLy8gZmFzdC1kZWVwLWVxdWFsIGluZGV4LmpzIDIuMC4xXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSAmJiBiICYmIF90eXBlb2YoYSkgPT0gJ29iamVjdCcgJiYgX3R5cGVvZihiKSA9PSAnb2JqZWN0Jykge1xuICAgIHZhciBhcnJBID0gaXNBcnJheShhKSxcbiAgICAgICAgYXJyQiA9IGlzQXJyYXkoYiksXG4gICAgICAgIGksXG4gICAgICAgIGxlbmd0aCxcbiAgICAgICAga2V5O1xuXG4gICAgaWYgKGFyckEgJiYgYXJyQikge1xuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOykge1xuICAgICAgICBpZiAoIWVxdWFsKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhcnJBICE9IGFyckIpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgZGF0ZUEgPSBhIGluc3RhbmNlb2YgRGF0ZSxcbiAgICAgICAgZGF0ZUIgPSBiIGluc3RhbmNlb2YgRGF0ZTtcbiAgICBpZiAoZGF0ZUEgIT0gZGF0ZUIpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZGF0ZUEgJiYgZGF0ZUIpIHJldHVybiBhLmdldFRpbWUoKSA9PSBiLmdldFRpbWUoKTtcbiAgICB2YXIgcmVnZXhwQSA9IGEgaW5zdGFuY2VvZiBSZWdFeHAsXG4gICAgICAgIHJlZ2V4cEIgPSBiIGluc3RhbmNlb2YgUmVnRXhwO1xuICAgIGlmIChyZWdleHBBICE9IHJlZ2V4cEIpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocmVnZXhwQSAmJiByZWdleHBCKSByZXR1cm4gYS50b1N0cmluZygpID09IGIudG9TdHJpbmcoKTtcbiAgICB2YXIga2V5cyA9IGtleUxpc3QoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG5cbiAgICBpZiAobGVuZ3RoICE9PSBrZXlMaXN0KGIpLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOykge1xuICAgICAgaWYgKCFoYXNQcm9wLmNhbGwoYiwga2V5c1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIGVuZCBmYXN0LWRlZXAtZXF1YWxcbiAgICAvLyBDdXN0b20gaGFuZGxpbmcgZm9yIFJlYWN0XG5cblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKGtleSA9PT0gJ19vd25lcicgJiYgYS4kJHR5cGVvZikge1xuICAgICAgICAvLyBSZWFjdC1zcGVjaWZpYzogYXZvaWQgdHJhdmVyc2luZyBSZWFjdCBlbGVtZW50cycgX293bmVyLlxuICAgICAgICAvLyAgX293bmVyIGNvbnRhaW5zIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAgICAgICAgLy8gYW5kIGlzIG5vdCBuZWVkZWQgd2hlbiBjb21wYXJpbmcgdGhlIGFjdHVhbCBlbGVtZW50cyAoYW5kIG5vdCB0aGVpciBvd25lcnMpXG4gICAgICAgIC8vIC4kJHR5cGVvZiBhbmQgLl9zdG9yZSBvbiBqdXN0IHJlYXNvbmFibGUgbWFya2VycyBvZiBhIHJlYWN0IGVsZW1lbnRcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBhbGwgb3RoZXIgcHJvcGVydGllcyBzaG91bGQgYmUgdHJhdmVyc2VkIGFzIHVzdWFsXG4gICAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSAvLyBmYXN0LWRlZXAtZXF1YWwgaW5kZXguanMgMi4wLjFcblxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gYSAhPT0gYSAmJiBiICE9PSBiO1xufSAvLyBlbmQgZmFzdC1kZWVwLWVxdWFsXG5cblxuZnVuY3Rpb24gZXhwb3J0ZWRFcXVhbChhLCBiKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVxdWFsKGEsIGIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvci5tZXNzYWdlICYmIGVycm9yLm1lc3NhZ2UubWF0Y2goL3N0YWNrfHJlY3Vyc2lvbi9pKSkge1xuICAgICAgLy8gd2FybiBvbiBjaXJjdWxhciByZWZlcmVuY2VzLCBkb24ndCBjcmFzaFxuICAgICAgLy8gYnJvd3NlcnMgZ2l2ZSB0aGlzIGRpZmZlcmVudCBlcnJvcnMgbmFtZSBhbmQgbWVzc2FnZXM6XG4gICAgICAvLyBjaHJvbWUvc2FmYXJpOiBcIlJhbmdlRXJyb3JcIiwgXCJNYXhpbXVtIGNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiXG4gICAgICAvLyBmaXJlZm94OiBcIkludGVybmFsRXJyb3JcIiwgdG9vIG11Y2ggcmVjdXJzaW9uXCJcbiAgICAgIC8vIGVkZ2U6IFwiRXJyb3JcIiwgXCJPdXQgb2Ygc3RhY2sgc3BhY2VcIlxuICAgICAgY29uc29sZS53YXJuKCdXYXJuaW5nOiByZWFjdC1mYXN0LWNvbXBhcmUgZG9lcyBub3QgaGFuZGxlIGNpcmN1bGFyIHJlZmVyZW5jZXMuJywgZXJyb3IubmFtZSwgZXJyb3IubWVzc2FnZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBzb21lIG90aGVyIGVycm9yLiB3ZSBzaG91bGQgZGVmaW5pdGVseSBrbm93IGFib3V0IHRoZXNlXG5cblxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuc3RyaXBEaWFjcml0aWNzID0gdm9pZCAwO1xudmFyIGRpYWNyaXRpY3MgPSBbe1xuICBiYXNlOiAnQScsXG4gIGxldHRlcnM6IC9bXFx1MDA0MVxcdTI0QjZcXHVGRjIxXFx1MDBDMFxcdTAwQzFcXHUwMEMyXFx1MUVBNlxcdTFFQTRcXHUxRUFBXFx1MUVBOFxcdTAwQzNcXHUwMTAwXFx1MDEwMlxcdTFFQjBcXHUxRUFFXFx1MUVCNFxcdTFFQjJcXHUwMjI2XFx1MDFFMFxcdTAwQzRcXHUwMURFXFx1MUVBMlxcdTAwQzVcXHUwMUZBXFx1MDFDRFxcdTAyMDBcXHUwMjAyXFx1MUVBMFxcdTFFQUNcXHUxRUI2XFx1MUUwMFxcdTAxMDRcXHUwMjNBXFx1MkM2Rl0vZ1xufSwge1xuICBiYXNlOiAnQUEnLFxuICBsZXR0ZXJzOiAvW1xcdUE3MzJdL2dcbn0sIHtcbiAgYmFzZTogJ0FFJyxcbiAgbGV0dGVyczogL1tcXHUwMEM2XFx1MDFGQ1xcdTAxRTJdL2dcbn0sIHtcbiAgYmFzZTogJ0FPJyxcbiAgbGV0dGVyczogL1tcXHVBNzM0XS9nXG59LCB7XG4gIGJhc2U6ICdBVScsXG4gIGxldHRlcnM6IC9bXFx1QTczNl0vZ1xufSwge1xuICBiYXNlOiAnQVYnLFxuICBsZXR0ZXJzOiAvW1xcdUE3MzhcXHVBNzNBXS9nXG59LCB7XG4gIGJhc2U6ICdBWScsXG4gIGxldHRlcnM6IC9bXFx1QTczQ10vZ1xufSwge1xuICBiYXNlOiAnQicsXG4gIGxldHRlcnM6IC9bXFx1MDA0MlxcdTI0QjdcXHVGRjIyXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MDI0M1xcdTAxODJcXHUwMTgxXS9nXG59LCB7XG4gIGJhc2U6ICdDJyxcbiAgbGV0dGVyczogL1tcXHUwMDQzXFx1MjRCOFxcdUZGMjNcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDBDN1xcdTFFMDhcXHUwMTg3XFx1MDIzQlxcdUE3M0VdL2dcbn0sIHtcbiAgYmFzZTogJ0QnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNDRcXHUyNEI5XFx1RkYyNFxcdTFFMEFcXHUwMTBFXFx1MUUwQ1xcdTFFMTBcXHUxRTEyXFx1MUUwRVxcdTAxMTBcXHUwMThCXFx1MDE4QVxcdTAxODlcXHVBNzc5XS9nXG59LCB7XG4gIGJhc2U6ICdEWicsXG4gIGxldHRlcnM6IC9bXFx1MDFGMVxcdTAxQzRdL2dcbn0sIHtcbiAgYmFzZTogJ0R6JyxcbiAgbGV0dGVyczogL1tcXHUwMUYyXFx1MDFDNV0vZ1xufSwge1xuICBiYXNlOiAnRScsXG4gIGxldHRlcnM6IC9bXFx1MDA0NVxcdTI0QkFcXHVGRjI1XFx1MDBDOFxcdTAwQzlcXHUwMENBXFx1MUVDMFxcdTFFQkVcXHUxRUM0XFx1MUVDMlxcdTFFQkNcXHUwMTEyXFx1MUUxNFxcdTFFMTZcXHUwMTE0XFx1MDExNlxcdTAwQ0JcXHUxRUJBXFx1MDExQVxcdTAyMDRcXHUwMjA2XFx1MUVCOFxcdTFFQzZcXHUwMjI4XFx1MUUxQ1xcdTAxMThcXHUxRTE4XFx1MUUxQVxcdTAxOTBcXHUwMThFXS9nXG59LCB7XG4gIGJhc2U6ICdGJyxcbiAgbGV0dGVyczogL1tcXHUwMDQ2XFx1MjRCQlxcdUZGMjZcXHUxRTFFXFx1MDE5MVxcdUE3N0JdL2dcbn0sIHtcbiAgYmFzZTogJ0cnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNDdcXHUyNEJDXFx1RkYyN1xcdTAxRjRcXHUwMTFDXFx1MUUyMFxcdTAxMUVcXHUwMTIwXFx1MDFFNlxcdTAxMjJcXHUwMUU0XFx1MDE5M1xcdUE3QTBcXHVBNzdEXFx1QTc3RV0vZ1xufSwge1xuICBiYXNlOiAnSCcsXG4gIGxldHRlcnM6IC9bXFx1MDA0OFxcdTI0QkRcXHVGRjI4XFx1MDEyNFxcdTFFMjJcXHUxRTI2XFx1MDIxRVxcdTFFMjRcXHUxRTI4XFx1MUUyQVxcdTAxMjZcXHUyQzY3XFx1MkM3NVxcdUE3OERdL2dcbn0sIHtcbiAgYmFzZTogJ0knLFxuICBsZXR0ZXJzOiAvW1xcdTAwNDlcXHUyNEJFXFx1RkYyOVxcdTAwQ0NcXHUwMENEXFx1MDBDRVxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMzBcXHUwMENGXFx1MUUyRVxcdTFFQzhcXHUwMUNGXFx1MDIwOFxcdTAyMEFcXHUxRUNBXFx1MDEyRVxcdTFFMkNcXHUwMTk3XS9nXG59LCB7XG4gIGJhc2U6ICdKJyxcbiAgbGV0dGVyczogL1tcXHUwMDRBXFx1MjRCRlxcdUZGMkFcXHUwMTM0XFx1MDI0OF0vZ1xufSwge1xuICBiYXNlOiAnSycsXG4gIGxldHRlcnM6IC9bXFx1MDA0QlxcdTI0QzBcXHVGRjJCXFx1MUUzMFxcdTAxRThcXHUxRTMyXFx1MDEzNlxcdTFFMzRcXHUwMTk4XFx1MkM2OVxcdUE3NDBcXHVBNzQyXFx1QTc0NFxcdUE3QTJdL2dcbn0sIHtcbiAgYmFzZTogJ0wnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNENcXHUyNEMxXFx1RkYyQ1xcdTAxM0ZcXHUwMTM5XFx1MDEzRFxcdTFFMzZcXHUxRTM4XFx1MDEzQlxcdTFFM0NcXHUxRTNBXFx1MDE0MVxcdTAyM0RcXHUyQzYyXFx1MkM2MFxcdUE3NDhcXHVBNzQ2XFx1QTc4MF0vZ1xufSwge1xuICBiYXNlOiAnTEonLFxuICBsZXR0ZXJzOiAvW1xcdTAxQzddL2dcbn0sIHtcbiAgYmFzZTogJ0xqJyxcbiAgbGV0dGVyczogL1tcXHUwMUM4XS9nXG59LCB7XG4gIGJhc2U6ICdNJyxcbiAgbGV0dGVyczogL1tcXHUwMDREXFx1MjRDMlxcdUZGMkRcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUyQzZFXFx1MDE5Q10vZ1xufSwge1xuICBiYXNlOiAnTicsXG4gIGxldHRlcnM6IC9bXFx1MDA0RVxcdTI0QzNcXHVGRjJFXFx1MDFGOFxcdTAxNDNcXHUwMEQxXFx1MUU0NFxcdTAxNDdcXHUxRTQ2XFx1MDE0NVxcdTFFNEFcXHUxRTQ4XFx1MDIyMFxcdTAxOURcXHVBNzkwXFx1QTdBNF0vZ1xufSwge1xuICBiYXNlOiAnTkonLFxuICBsZXR0ZXJzOiAvW1xcdTAxQ0FdL2dcbn0sIHtcbiAgYmFzZTogJ05qJyxcbiAgbGV0dGVyczogL1tcXHUwMUNCXS9nXG59LCB7XG4gIGJhc2U6ICdPJyxcbiAgbGV0dGVyczogL1tcXHUwMDRGXFx1MjRDNFxcdUZGMkZcXHUwMEQyXFx1MDBEM1xcdTAwRDRcXHUxRUQyXFx1MUVEMFxcdTFFRDZcXHUxRUQ0XFx1MDBENVxcdTFFNENcXHUwMjJDXFx1MUU0RVxcdTAxNENcXHUxRTUwXFx1MUU1MlxcdTAxNEVcXHUwMjJFXFx1MDIzMFxcdTAwRDZcXHUwMjJBXFx1MUVDRVxcdTAxNTBcXHUwMUQxXFx1MDIwQ1xcdTAyMEVcXHUwMUEwXFx1MUVEQ1xcdTFFREFcXHUxRUUwXFx1MUVERVxcdTFFRTJcXHUxRUNDXFx1MUVEOFxcdTAxRUFcXHUwMUVDXFx1MDBEOFxcdTAxRkVcXHUwMTg2XFx1MDE5RlxcdUE3NEFcXHVBNzRDXS9nXG59LCB7XG4gIGJhc2U6ICdPSScsXG4gIGxldHRlcnM6IC9bXFx1MDFBMl0vZ1xufSwge1xuICBiYXNlOiAnT08nLFxuICBsZXR0ZXJzOiAvW1xcdUE3NEVdL2dcbn0sIHtcbiAgYmFzZTogJ09VJyxcbiAgbGV0dGVyczogL1tcXHUwMjIyXS9nXG59LCB7XG4gIGJhc2U6ICdQJyxcbiAgbGV0dGVyczogL1tcXHUwMDUwXFx1MjRDNVxcdUZGMzBcXHUxRTU0XFx1MUU1NlxcdTAxQTRcXHUyQzYzXFx1QTc1MFxcdUE3NTJcXHVBNzU0XS9nXG59LCB7XG4gIGJhc2U6ICdRJyxcbiAgbGV0dGVyczogL1tcXHUwMDUxXFx1MjRDNlxcdUZGMzFcXHVBNzU2XFx1QTc1OFxcdTAyNEFdL2dcbn0sIHtcbiAgYmFzZTogJ1InLFxuICBsZXR0ZXJzOiAvW1xcdTAwNTJcXHUyNEM3XFx1RkYzMlxcdTAxNTRcXHUxRTU4XFx1MDE1OFxcdTAyMTBcXHUwMjEyXFx1MUU1QVxcdTFFNUNcXHUwMTU2XFx1MUU1RVxcdTAyNENcXHUyQzY0XFx1QTc1QVxcdUE3QTZcXHVBNzgyXS9nXG59LCB7XG4gIGJhc2U6ICdTJyxcbiAgbGV0dGVyczogL1tcXHUwMDUzXFx1MjRDOFxcdUZGMzNcXHUxRTlFXFx1MDE1QVxcdTFFNjRcXHUwMTVDXFx1MUU2MFxcdTAxNjBcXHUxRTY2XFx1MUU2MlxcdTFFNjhcXHUwMjE4XFx1MDE1RVxcdTJDN0VcXHVBN0E4XFx1QTc4NF0vZ1xufSwge1xuICBiYXNlOiAnVCcsXG4gIGxldHRlcnM6IC9bXFx1MDA1NFxcdTI0QzlcXHVGRjM0XFx1MUU2QVxcdTAxNjRcXHUxRTZDXFx1MDIxQVxcdTAxNjJcXHUxRTcwXFx1MUU2RVxcdTAxNjZcXHUwMUFDXFx1MDFBRVxcdTAyM0VcXHVBNzg2XS9nXG59LCB7XG4gIGJhc2U6ICdUWicsXG4gIGxldHRlcnM6IC9bXFx1QTcyOF0vZ1xufSwge1xuICBiYXNlOiAnVScsXG4gIGxldHRlcnM6IC9bXFx1MDA1NVxcdTI0Q0FcXHVGRjM1XFx1MDBEOVxcdTAwREFcXHUwMERCXFx1MDE2OFxcdTFFNzhcXHUwMTZBXFx1MUU3QVxcdTAxNkNcXHUwMERDXFx1MDFEQlxcdTAxRDdcXHUwMUQ1XFx1MDFEOVxcdTFFRTZcXHUwMTZFXFx1MDE3MFxcdTAxRDNcXHUwMjE0XFx1MDIxNlxcdTAxQUZcXHUxRUVBXFx1MUVFOFxcdTFFRUVcXHUxRUVDXFx1MUVGMFxcdTFFRTRcXHUxRTcyXFx1MDE3MlxcdTFFNzZcXHUxRTc0XFx1MDI0NF0vZ1xufSwge1xuICBiYXNlOiAnVicsXG4gIGxldHRlcnM6IC9bXFx1MDA1NlxcdTI0Q0JcXHVGRjM2XFx1MUU3Q1xcdTFFN0VcXHUwMUIyXFx1QTc1RVxcdTAyNDVdL2dcbn0sIHtcbiAgYmFzZTogJ1ZZJyxcbiAgbGV0dGVyczogL1tcXHVBNzYwXS9nXG59LCB7XG4gIGJhc2U6ICdXJyxcbiAgbGV0dGVyczogL1tcXHUwMDU3XFx1MjRDQ1xcdUZGMzdcXHUxRTgwXFx1MUU4MlxcdTAxNzRcXHUxRTg2XFx1MUU4NFxcdTFFODhcXHUyQzcyXS9nXG59LCB7XG4gIGJhc2U6ICdYJyxcbiAgbGV0dGVyczogL1tcXHUwMDU4XFx1MjRDRFxcdUZGMzhcXHUxRThBXFx1MUU4Q10vZ1xufSwge1xuICBiYXNlOiAnWScsXG4gIGxldHRlcnM6IC9bXFx1MDA1OVxcdTI0Q0VcXHVGRjM5XFx1MUVGMlxcdTAwRERcXHUwMTc2XFx1MUVGOFxcdTAyMzJcXHUxRThFXFx1MDE3OFxcdTFFRjZcXHUxRUY0XFx1MDFCM1xcdTAyNEVcXHUxRUZFXS9nXG59LCB7XG4gIGJhc2U6ICdaJyxcbiAgbGV0dGVyczogL1tcXHUwMDVBXFx1MjRDRlxcdUZGM0FcXHUwMTc5XFx1MUU5MFxcdTAxN0JcXHUwMTdEXFx1MUU5MlxcdTFFOTRcXHUwMUI1XFx1MDIyNFxcdTJDN0ZcXHUyQzZCXFx1QTc2Ml0vZ1xufSwge1xuICBiYXNlOiAnYScsXG4gIGxldHRlcnM6IC9bXFx1MDA2MVxcdTI0RDBcXHVGRjQxXFx1MUU5QVxcdTAwRTBcXHUwMEUxXFx1MDBFMlxcdTFFQTdcXHUxRUE1XFx1MUVBQlxcdTFFQTlcXHUwMEUzXFx1MDEwMVxcdTAxMDNcXHUxRUIxXFx1MUVBRlxcdTFFQjVcXHUxRUIzXFx1MDIyN1xcdTAxRTFcXHUwMEU0XFx1MDFERlxcdTFFQTNcXHUwMEU1XFx1MDFGQlxcdTAxQ0VcXHUwMjAxXFx1MDIwM1xcdTFFQTFcXHUxRUFEXFx1MUVCN1xcdTFFMDFcXHUwMTA1XFx1MkM2NVxcdTAyNTBdL2dcbn0sIHtcbiAgYmFzZTogJ2FhJyxcbiAgbGV0dGVyczogL1tcXHVBNzMzXS9nXG59LCB7XG4gIGJhc2U6ICdhZScsXG4gIGxldHRlcnM6IC9bXFx1MDBFNlxcdTAxRkRcXHUwMUUzXS9nXG59LCB7XG4gIGJhc2U6ICdhbycsXG4gIGxldHRlcnM6IC9bXFx1QTczNV0vZ1xufSwge1xuICBiYXNlOiAnYXUnLFxuICBsZXR0ZXJzOiAvW1xcdUE3MzddL2dcbn0sIHtcbiAgYmFzZTogJ2F2JyxcbiAgbGV0dGVyczogL1tcXHVBNzM5XFx1QTczQl0vZ1xufSwge1xuICBiYXNlOiAnYXknLFxuICBsZXR0ZXJzOiAvW1xcdUE3M0RdL2dcbn0sIHtcbiAgYmFzZTogJ2InLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjJcXHUyNEQxXFx1RkY0MlxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTAxODBcXHUwMTgzXFx1MDI1M10vZ1xufSwge1xuICBiYXNlOiAnYycsXG4gIGxldHRlcnM6IC9bXFx1MDA2M1xcdTI0RDJcXHVGRjQzXFx1MDEwN1xcdTAxMDlcXHUwMTBCXFx1MDEwRFxcdTAwRTdcXHUxRTA5XFx1MDE4OFxcdTAyM0NcXHVBNzNGXFx1MjE4NF0vZ1xufSwge1xuICBiYXNlOiAnZCcsXG4gIGxldHRlcnM6IC9bXFx1MDA2NFxcdTI0RDNcXHVGRjQ0XFx1MUUwQlxcdTAxMEZcXHUxRTBEXFx1MUUxMVxcdTFFMTNcXHUxRTBGXFx1MDExMVxcdTAxOENcXHUwMjU2XFx1MDI1N1xcdUE3N0FdL2dcbn0sIHtcbiAgYmFzZTogJ2R6JyxcbiAgbGV0dGVyczogL1tcXHUwMUYzXFx1MDFDNl0vZ1xufSwge1xuICBiYXNlOiAnZScsXG4gIGxldHRlcnM6IC9bXFx1MDA2NVxcdTI0RDRcXHVGRjQ1XFx1MDBFOFxcdTAwRTlcXHUwMEVBXFx1MUVDMVxcdTFFQkZcXHUxRUM1XFx1MUVDM1xcdTFFQkRcXHUwMTEzXFx1MUUxNVxcdTFFMTdcXHUwMTE1XFx1MDExN1xcdTAwRUJcXHUxRUJCXFx1MDExQlxcdTAyMDVcXHUwMjA3XFx1MUVCOVxcdTFFQzdcXHUwMjI5XFx1MUUxRFxcdTAxMTlcXHUxRTE5XFx1MUUxQlxcdTAyNDdcXHUwMjVCXFx1MDFERF0vZ1xufSwge1xuICBiYXNlOiAnZicsXG4gIGxldHRlcnM6IC9bXFx1MDA2NlxcdTI0RDVcXHVGRjQ2XFx1MUUxRlxcdTAxOTJcXHVBNzdDXS9nXG59LCB7XG4gIGJhc2U6ICdnJyxcbiAgbGV0dGVyczogL1tcXHUwMDY3XFx1MjRENlxcdUZGNDdcXHUwMUY1XFx1MDExRFxcdTFFMjFcXHUwMTFGXFx1MDEyMVxcdTAxRTdcXHUwMTIzXFx1MDFFNVxcdTAyNjBcXHVBN0ExXFx1MUQ3OVxcdUE3N0ZdL2dcbn0sIHtcbiAgYmFzZTogJ2gnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjhcXHUyNEQ3XFx1RkY0OFxcdTAxMjVcXHUxRTIzXFx1MUUyN1xcdTAyMUZcXHUxRTI1XFx1MUUyOVxcdTFFMkJcXHUxRTk2XFx1MDEyN1xcdTJDNjhcXHUyQzc2XFx1MDI2NV0vZ1xufSwge1xuICBiYXNlOiAnaHYnLFxuICBsZXR0ZXJzOiAvW1xcdTAxOTVdL2dcbn0sIHtcbiAgYmFzZTogJ2knLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjlcXHUyNEQ4XFx1RkY0OVxcdTAwRUNcXHUwMEVEXFx1MDBFRVxcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAwRUZcXHUxRTJGXFx1MUVDOVxcdTAxRDBcXHUwMjA5XFx1MDIwQlxcdTFFQ0JcXHUwMTJGXFx1MUUyRFxcdTAyNjhcXHUwMTMxXS9nXG59LCB7XG4gIGJhc2U6ICdqJyxcbiAgbGV0dGVyczogL1tcXHUwMDZBXFx1MjREOVxcdUZGNEFcXHUwMTM1XFx1MDFGMFxcdTAyNDldL2dcbn0sIHtcbiAgYmFzZTogJ2snLFxuICBsZXR0ZXJzOiAvW1xcdTAwNkJcXHUyNERBXFx1RkY0QlxcdTFFMzFcXHUwMUU5XFx1MUUzM1xcdTAxMzdcXHUxRTM1XFx1MDE5OVxcdTJDNkFcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBN0EzXS9nXG59LCB7XG4gIGJhc2U6ICdsJyxcbiAgbGV0dGVyczogL1tcXHUwMDZDXFx1MjREQlxcdUZGNENcXHUwMTQwXFx1MDEzQVxcdTAxM0VcXHUxRTM3XFx1MUUzOVxcdTAxM0NcXHUxRTNEXFx1MUUzQlxcdTAxN0ZcXHUwMTQyXFx1MDE5QVxcdTAyNkJcXHUyQzYxXFx1QTc0OVxcdUE3ODFcXHVBNzQ3XS9nXG59LCB7XG4gIGJhc2U6ICdsaicsXG4gIGxldHRlcnM6IC9bXFx1MDFDOV0vZ1xufSwge1xuICBiYXNlOiAnbScsXG4gIGxldHRlcnM6IC9bXFx1MDA2RFxcdTI0RENcXHVGRjREXFx1MUUzRlxcdTFFNDFcXHUxRTQzXFx1MDI3MVxcdTAyNkZdL2dcbn0sIHtcbiAgYmFzZTogJ24nLFxuICBsZXR0ZXJzOiAvW1xcdTAwNkVcXHUyNEREXFx1RkY0RVxcdTAxRjlcXHUwMTQ0XFx1MDBGMVxcdTFFNDVcXHUwMTQ4XFx1MUU0N1xcdTAxNDZcXHUxRTRCXFx1MUU0OVxcdTAxOUVcXHUwMjcyXFx1MDE0OVxcdUE3OTFcXHVBN0E1XS9nXG59LCB7XG4gIGJhc2U6ICduaicsXG4gIGxldHRlcnM6IC9bXFx1MDFDQ10vZ1xufSwge1xuICBiYXNlOiAnbycsXG4gIGxldHRlcnM6IC9bXFx1MDA2RlxcdTI0REVcXHVGRjRGXFx1MDBGMlxcdTAwRjNcXHUwMEY0XFx1MUVEM1xcdTFFRDFcXHUxRUQ3XFx1MUVENVxcdTAwRjVcXHUxRTREXFx1MDIyRFxcdTFFNEZcXHUwMTREXFx1MUU1MVxcdTFFNTNcXHUwMTRGXFx1MDIyRlxcdTAyMzFcXHUwMEY2XFx1MDIyQlxcdTFFQ0ZcXHUwMTUxXFx1MDFEMlxcdTAyMERcXHUwMjBGXFx1MDFBMVxcdTFFRERcXHUxRURCXFx1MUVFMVxcdTFFREZcXHUxRUUzXFx1MUVDRFxcdTFFRDlcXHUwMUVCXFx1MDFFRFxcdTAwRjhcXHUwMUZGXFx1MDI1NFxcdUE3NEJcXHVBNzREXFx1MDI3NV0vZ1xufSwge1xuICBiYXNlOiAnb2knLFxuICBsZXR0ZXJzOiAvW1xcdTAxQTNdL2dcbn0sIHtcbiAgYmFzZTogJ291JyxcbiAgbGV0dGVyczogL1tcXHUwMjIzXS9nXG59LCB7XG4gIGJhc2U6ICdvbycsXG4gIGxldHRlcnM6IC9bXFx1QTc0Rl0vZ1xufSwge1xuICBiYXNlOiAncCcsXG4gIGxldHRlcnM6IC9bXFx1MDA3MFxcdTI0REZcXHVGRjUwXFx1MUU1NVxcdTFFNTdcXHUwMUE1XFx1MUQ3RFxcdUE3NTFcXHVBNzUzXFx1QTc1NV0vZ1xufSwge1xuICBiYXNlOiAncScsXG4gIGxldHRlcnM6IC9bXFx1MDA3MVxcdTI0RTBcXHVGRjUxXFx1MDI0QlxcdUE3NTdcXHVBNzU5XS9nXG59LCB7XG4gIGJhc2U6ICdyJyxcbiAgbGV0dGVyczogL1tcXHUwMDcyXFx1MjRFMVxcdUZGNTJcXHUwMTU1XFx1MUU1OVxcdTAxNTlcXHUwMjExXFx1MDIxM1xcdTFFNUJcXHUxRTVEXFx1MDE1N1xcdTFFNUZcXHUwMjREXFx1MDI3RFxcdUE3NUJcXHVBN0E3XFx1QTc4M10vZ1xufSwge1xuICBiYXNlOiAncycsXG4gIGxldHRlcnM6IC9bXFx1MDA3M1xcdTI0RTJcXHVGRjUzXFx1MDBERlxcdTAxNUJcXHUxRTY1XFx1MDE1RFxcdTFFNjFcXHUwMTYxXFx1MUU2N1xcdTFFNjNcXHUxRTY5XFx1MDIxOVxcdTAxNUZcXHUwMjNGXFx1QTdBOVxcdUE3ODVcXHUxRTlCXS9nXG59LCB7XG4gIGJhc2U6ICd0JyxcbiAgbGV0dGVyczogL1tcXHUwMDc0XFx1MjRFM1xcdUZGNTRcXHUxRTZCXFx1MUU5N1xcdTAxNjVcXHUxRTZEXFx1MDIxQlxcdTAxNjNcXHUxRTcxXFx1MUU2RlxcdTAxNjdcXHUwMUFEXFx1MDI4OFxcdTJDNjZcXHVBNzg3XS9nXG59LCB7XG4gIGJhc2U6ICd0eicsXG4gIGxldHRlcnM6IC9bXFx1QTcyOV0vZ1xufSwge1xuICBiYXNlOiAndScsXG4gIGxldHRlcnM6IC9bXFx1MDA3NVxcdTI0RTRcXHVGRjU1XFx1MDBGOVxcdTAwRkFcXHUwMEZCXFx1MDE2OVxcdTFFNzlcXHUwMTZCXFx1MUU3QlxcdTAxNkRcXHUwMEZDXFx1MDFEQ1xcdTAxRDhcXHUwMUQ2XFx1MDFEQVxcdTFFRTdcXHUwMTZGXFx1MDE3MVxcdTAxRDRcXHUwMjE1XFx1MDIxN1xcdTAxQjBcXHUxRUVCXFx1MUVFOVxcdTFFRUZcXHUxRUVEXFx1MUVGMVxcdTFFRTVcXHUxRTczXFx1MDE3M1xcdTFFNzdcXHUxRTc1XFx1MDI4OV0vZ1xufSwge1xuICBiYXNlOiAndicsXG4gIGxldHRlcnM6IC9bXFx1MDA3NlxcdTI0RTVcXHVGRjU2XFx1MUU3RFxcdTFFN0ZcXHUwMjhCXFx1QTc1RlxcdTAyOENdL2dcbn0sIHtcbiAgYmFzZTogJ3Z5JyxcbiAgbGV0dGVyczogL1tcXHVBNzYxXS9nXG59LCB7XG4gIGJhc2U6ICd3JyxcbiAgbGV0dGVyczogL1tcXHUwMDc3XFx1MjRFNlxcdUZGNTdcXHUxRTgxXFx1MUU4M1xcdTAxNzVcXHUxRTg3XFx1MUU4NVxcdTFFOThcXHUxRTg5XFx1MkM3M10vZ1xufSwge1xuICBiYXNlOiAneCcsXG4gIGxldHRlcnM6IC9bXFx1MDA3OFxcdTI0RTdcXHVGRjU4XFx1MUU4QlxcdTFFOERdL2dcbn0sIHtcbiAgYmFzZTogJ3knLFxuICBsZXR0ZXJzOiAvW1xcdTAwNzlcXHUyNEU4XFx1RkY1OVxcdTFFRjNcXHUwMEZEXFx1MDE3N1xcdTFFRjlcXHUwMjMzXFx1MUU4RlxcdTAwRkZcXHUxRUY3XFx1MUU5OVxcdTFFRjVcXHUwMUI0XFx1MDI0RlxcdTFFRkZdL2dcbn0sIHtcbiAgYmFzZTogJ3onLFxuICBsZXR0ZXJzOiAvW1xcdTAwN0FcXHUyNEU5XFx1RkY1QVxcdTAxN0FcXHUxRTkxXFx1MDE3Q1xcdTAxN0VcXHUxRTkzXFx1MUU5NVxcdTAxQjZcXHUwMjI1XFx1MDI0MFxcdTJDNkNcXHVBNzYzXS9nXG59XTtcblxudmFyIHN0cmlwRGlhY3JpdGljcyA9IGZ1bmN0aW9uIHN0cmlwRGlhY3JpdGljcyhzdHIpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaWFjcml0aWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoZGlhY3JpdGljc1tpXS5sZXR0ZXJzLCBkaWFjcml0aWNzW2ldLmJhc2UpO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cbmV4cG9ydHMuc3RyaXBEaWFjcml0aWNzID0gc3RyaXBEaWFjcml0aWNzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGVGaWx0ZXIgPSB2b2lkIDA7XG5cbnZhciBfZGlhY3JpdGljcyA9IHJlcXVpcmUoXCIuL2RpYWNyaXRpY3NcIik7XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIHRyaW1TdHJpbmcgPSBmdW5jdGlvbiB0cmltU3RyaW5nKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn07XG5cbnZhciBkZWZhdWx0U3RyaW5naWZ5ID0gZnVuY3Rpb24gZGVmYXVsdFN0cmluZ2lmeShvcHRpb24pIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KG9wdGlvbi5sYWJlbCwgXCIgXCIpLmNvbmNhdChvcHRpb24udmFsdWUpO1xufTtcblxudmFyIGNyZWF0ZUZpbHRlciA9IGZ1bmN0aW9uIGNyZWF0ZUZpbHRlcihjb25maWcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvcHRpb24sIHJhd0lucHV0KSB7XG4gICAgdmFyIF9pZ25vcmVDYXNlJGlnbm9yZUFjYyA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgaWdub3JlQ2FzZTogdHJ1ZSxcbiAgICAgIGlnbm9yZUFjY2VudHM6IHRydWUsXG4gICAgICBzdHJpbmdpZnk6IGRlZmF1bHRTdHJpbmdpZnksXG4gICAgICB0cmltOiB0cnVlLFxuICAgICAgbWF0Y2hGcm9tOiAnYW55J1xuICAgIH0sIGNvbmZpZyksXG4gICAgICAgIGlnbm9yZUNhc2UgPSBfaWdub3JlQ2FzZSRpZ25vcmVBY2MuaWdub3JlQ2FzZSxcbiAgICAgICAgaWdub3JlQWNjZW50cyA9IF9pZ25vcmVDYXNlJGlnbm9yZUFjYy5pZ25vcmVBY2NlbnRzLFxuICAgICAgICBzdHJpbmdpZnkgPSBfaWdub3JlQ2FzZSRpZ25vcmVBY2Muc3RyaW5naWZ5LFxuICAgICAgICB0cmltID0gX2lnbm9yZUNhc2UkaWdub3JlQWNjLnRyaW0sXG4gICAgICAgIG1hdGNoRnJvbSA9IF9pZ25vcmVDYXNlJGlnbm9yZUFjYy5tYXRjaEZyb207XG5cbiAgICB2YXIgaW5wdXQgPSB0cmltID8gdHJpbVN0cmluZyhyYXdJbnB1dCkgOiByYXdJbnB1dDtcbiAgICB2YXIgY2FuZGlkYXRlID0gdHJpbSA/IHRyaW1TdHJpbmcoc3RyaW5naWZ5KG9wdGlvbikpIDogc3RyaW5naWZ5KG9wdGlvbik7XG5cbiAgICBpZiAoaWdub3JlQ2FzZSkge1xuICAgICAgaW5wdXQgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FuZGlkYXRlID0gY2FuZGlkYXRlLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKGlnbm9yZUFjY2VudHMpIHtcbiAgICAgIGlucHV0ID0gKDAsIF9kaWFjcml0aWNzLnN0cmlwRGlhY3JpdGljcykoaW5wdXQpO1xuICAgICAgY2FuZGlkYXRlID0gKDAsIF9kaWFjcml0aWNzLnN0cmlwRGlhY3JpdGljcykoY2FuZGlkYXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2hGcm9tID09PSAnc3RhcnQnID8gY2FuZGlkYXRlLnN1YnN0cigwLCBpbnB1dC5sZW5ndGgpID09PSBpbnB1dCA6IGNhbmRpZGF0ZS5pbmRleE9mKGlucHV0KSA+IC0xO1xuICB9O1xufTtcblxuZXhwb3J0cy5jcmVhdGVGaWx0ZXIgPSBjcmVhdGVGaWx0ZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfZW1vdGlvbiA9IHJlcXVpcmUoXCJlbW90aW9uXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG4vLyBBc3Npc3RpdmUgdGV4dCB0byBkZXNjcmliZSB2aXN1YWwgZWxlbWVudHMuIEhpZGRlbiBmb3Igc2lnaHRlZCB1c2Vycy5cbnZhciBBMTF5VGV4dCA9IGZ1bmN0aW9uIEExMXlUZXh0KHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOlxuICAgIC8qI19fUFVSRV9fKi9cblxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAoMCwgX2Vtb3Rpb24uY3NzKSh7XG4gICAgICBsYWJlbDogJ2ExMXlUZXh0JyxcbiAgICAgIHpJbmRleDogOTk5OSxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNsaXA6ICdyZWN0KDFweCwgMXB4LCAxcHgsIDFweCknLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgd2lkdGg6IDEsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JlZCcsXG4gICAgICBjb2xvcjogJ2JsdWUnXG4gICAgfSlcbiAgfSwgcHJvcHMpKTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IEExMXlUZXh0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2Vtb3Rpb24gPSByZXF1aXJlKFwiZW1vdGlvblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIER1bW15SW5wdXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKER1bW15SW5wdXQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIER1bW15SW5wdXQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIER1bW15SW5wdXQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEdW1teUlucHV0KS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEdW1teUlucHV0LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpblByb3AgPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgICBvdXQgPSBfdGhpcyRwcm9wcy5vdXQsXG4gICAgICAgICAgb25FeGl0ZWQgPSBfdGhpcyRwcm9wcy5vbkV4aXRlZCxcbiAgICAgICAgICBhcHBlYXIgPSBfdGhpcyRwcm9wcy5hcHBlYXIsXG4gICAgICAgICAgZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgICBleGl0ID0gX3RoaXMkcHJvcHMuZXhpdCxcbiAgICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzLmlubmVyUmVmLFxuICAgICAgICAgIGVtb3Rpb24gPSBfdGhpcyRwcm9wcy5lbW90aW9uLFxuICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzLCBbXCJpblwiLCBcIm91dFwiLCBcIm9uRXhpdGVkXCIsIFwiYXBwZWFyXCIsIFwiZW50ZXJcIiwgXCJleGl0XCIsIFwiaW5uZXJSZWZcIiwgXCJlbW90aW9uXCJdKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogaW5uZXJSZWZcbiAgICAgIH0sIHByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTpcbiAgICAgICAgLyojX19QVVJFX18qL1xuXG4gICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgKDAsIF9lbW90aW9uLmNzcykoe1xuICAgICAgICAgIGxhYmVsOiAnZHVtbXlJbnB1dCcsXG4gICAgICAgICAgLy8gZ2V0IHJpZCBvZiBhbnkgZGVmYXVsdCBzdHlsZXNcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAwLFxuICAgICAgICAgIGJvcmRlcjogMCxcbiAgICAgICAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgICAgICAgIG91dGxpbmU6IDAsXG4gICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAvLyBpbXBvcnRhbnQhIHdpdGhvdXQgYHdpZHRoYCBicm93c2VycyB3b24ndCBhbGxvdyBmb2N1c1xuICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICAgIC8vIHJlbW92ZSBjdXJzb3Igb24gZGVza3RvcFxuICAgICAgICAgIGNvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgIC8vIHJlbW92ZSBjdXJzb3Igb24gbW9iaWxlIHdoaWxzdCBtYWludGFpbmluZyBcInNjcm9sbCBpbnRvIHZpZXdcIiBiZWhhdmlvdXJcbiAgICAgICAgICBsZWZ0OiAtMTAwLFxuICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknXG4gICAgICAgIH0pXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIER1bW15SW5wdXQ7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEdW1teUlucHV0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBOb2RlUmVzb2x2ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE5vZGVSZXNvbHZlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTm9kZVJlc29sdmVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb2RlUmVzb2x2ZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihOb2RlUmVzb2x2ZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE5vZGVSZXNvbHZlciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnByb3BzLmlubmVyUmVmKCgwLCBfcmVhY3REb20uZmluZERPTU5vZGUpKHRoaXMpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnByb3BzLmlubmVyUmVmKG51bGwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE5vZGVSZXNvbHZlcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE5vZGVSZXNvbHZlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTE9DS19TVFlMRVMgPSBleHBvcnRzLlNUWUxFX0tFWVMgPSB2b2lkIDA7XG52YXIgU1RZTEVfS0VZUyA9IFsnYm94U2l6aW5nJywgJ2hlaWdodCcsICdvdmVyZmxvdycsICdwYWRkaW5nUmlnaHQnLCAncG9zaXRpb24nXTtcbmV4cG9ydHMuU1RZTEVfS0VZUyA9IFNUWUxFX0tFWVM7XG52YXIgTE9DS19TVFlMRVMgPSB7XG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAvLyBhY2NvdW50IGZvciBwb3NzaWJsZSBkZWNsYXJhdGlvbiBgd2lkdGg6IDEwMCU7YCBvbiBib2R5XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGhlaWdodDogJzEwMCUnXG59O1xuZXhwb3J0cy5MT0NLX1NUWUxFUyA9IExPQ0tfU1RZTEVTOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wcmV2ZW50VG91Y2hNb3ZlID0gcHJldmVudFRvdWNoTW92ZTtcbmV4cG9ydHMuYWxsb3dUb3VjaE1vdmUgPSBhbGxvd1RvdWNoTW92ZTtcbmV4cG9ydHMucHJldmVudEluZXJ0aWFTY3JvbGwgPSBwcmV2ZW50SW5lcnRpYVNjcm9sbDtcbmV4cG9ydHMuaXNUb3VjaERldmljZSA9IGlzVG91Y2hEZXZpY2U7XG5cbmZ1bmN0aW9uIHByZXZlbnRUb3VjaE1vdmUoZSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmZ1bmN0aW9uIGFsbG93VG91Y2hNb3ZlKGUpIHtcbiAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbn1cblxuZnVuY3Rpb24gcHJldmVudEluZXJ0aWFTY3JvbGwoKSB7XG4gIHZhciB0b3AgPSB0aGlzLnNjcm9sbFRvcDtcbiAgdmFyIHRvdGFsU2Nyb2xsID0gdGhpcy5zY3JvbGxIZWlnaHQ7XG4gIHZhciBjdXJyZW50U2Nyb2xsID0gdG9wICsgdGhpcy5vZmZzZXRIZWlnaHQ7XG5cbiAgaWYgKHRvcCA9PT0gMCkge1xuICAgIHRoaXMuc2Nyb2xsVG9wID0gMTtcbiAgfSBlbHNlIGlmIChjdXJyZW50U2Nyb2xsID09PSB0b3RhbFNjcm9sbCkge1xuICAgIHRoaXMuc2Nyb2xsVG9wID0gdG9wIC0gMTtcbiAgfVxufSAvLyBgb250b3VjaHN0YXJ0YCBjaGVjayB3b3JrcyBvbiBtb3N0IGJyb3dzZXJzXG4vLyBgbWF4VG91Y2hQb2ludHNgIHdvcmtzIG9uIElFMTAvMTEgYW5kIFN1cmZhY2VcblxuXG5mdW5jdGlvbiBpc1RvdWNoRGV2aWNlKCkge1xuICByZXR1cm4gJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cztcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xudmFyIGFjdGl2ZVNjcm9sbExvY2tzID0gMDtcblxudmFyIFNjcm9sbExvY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNjcm9sbExvY2ssIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbExvY2soKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2Nyb2xsTG9jayk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihTY3JvbGxMb2NrKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib3JpZ2luYWxTdHlsZXNcIiwge30pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImxpc3RlbmVyT3B0aW9uc1wiLCB7XG4gICAgICBjYXB0dXJlOiBmYWxzZSxcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2Nyb2xsTG9jaywgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKCFjYW5Vc2VET00pIHJldHVybjtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWNjb3VudEZvclNjcm9sbGJhcnMgPSBfdGhpcyRwcm9wcy5hY2NvdW50Rm9yU2Nyb2xsYmFycyxcbiAgICAgICAgICB0b3VjaFNjcm9sbFRhcmdldCA9IF90aGlzJHByb3BzLnRvdWNoU2Nyb2xsVGFyZ2V0O1xuICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmJvZHk7XG4gICAgICB2YXIgdGFyZ2V0U3R5bGUgPSB0YXJnZXQgJiYgdGFyZ2V0LnN0eWxlO1xuXG4gICAgICBpZiAoYWNjb3VudEZvclNjcm9sbGJhcnMpIHtcbiAgICAgICAgLy8gc3RvcmUgYW55IHN0eWxlcyBhbHJlYWR5IGFwcGxpZWQgdG8gdGhlIGJvZHlcbiAgICAgICAgX2NvbnN0YW50cy5TVFlMRV9LRVlTLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHZhciB2YWwgPSB0YXJnZXRTdHlsZSAmJiB0YXJnZXRTdHlsZVtrZXldO1xuICAgICAgICAgIF90aGlzMi5vcmlnaW5hbFN0eWxlc1trZXldID0gdmFsO1xuICAgICAgICB9KTtcbiAgICAgIH0gLy8gYXBwbHkgdGhlIGxvY2sgc3R5bGVzIGFuZCBwYWRkaW5nIGlmIHRoaXMgaXMgdGhlIGZpcnN0IHNjcm9sbCBsb2NrXG5cblxuICAgICAgaWYgKGFjY291bnRGb3JTY3JvbGxiYXJzICYmIGFjdGl2ZVNjcm9sbExvY2tzIDwgMSkge1xuICAgICAgICB2YXIgY3VycmVudFBhZGRpbmcgPSBwYXJzZUludCh0aGlzLm9yaWdpbmFsU3R5bGVzLnBhZGRpbmdSaWdodCwgMTApIHx8IDA7XG4gICAgICAgIHZhciBjbGllbnRXaWR0aCA9IGRvY3VtZW50LmJvZHkgPyBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDogMDtcbiAgICAgICAgdmFyIGFkanVzdGVkUGFkZGluZyA9IHdpbmRvdy5pbm5lcldpZHRoIC0gY2xpZW50V2lkdGggKyBjdXJyZW50UGFkZGluZyB8fCAwO1xuICAgICAgICBPYmplY3Qua2V5cyhfY29uc3RhbnRzLkxPQ0tfU1RZTEVTKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICB2YXIgdmFsID0gX2NvbnN0YW50cy5MT0NLX1NUWUxFU1trZXldO1xuXG4gICAgICAgICAgaWYgKHRhcmdldFN0eWxlKSB7XG4gICAgICAgICAgICB0YXJnZXRTdHlsZVtrZXldID0gdmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRhcmdldFN0eWxlKSB7XG4gICAgICAgICAgdGFyZ2V0U3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIi5jb25jYXQoYWRqdXN0ZWRQYWRkaW5nLCBcInB4XCIpO1xuICAgICAgICB9XG4gICAgICB9IC8vIGFjY291bnQgZm9yIHRvdWNoIGRldmljZXNcblxuXG4gICAgICBpZiAodGFyZ2V0ICYmICgwLCBfdXRpbHMuaXNUb3VjaERldmljZSkoKSkge1xuICAgICAgICAvLyBNb2JpbGUgU2FmYXJpIGlnbm9yZXMgeyBvdmVyZmxvdzogaGlkZGVuIH0gZGVjbGFyYXRpb24gb24gdGhlIGJvZHkuXG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBfdXRpbHMucHJldmVudFRvdWNoTW92ZSwgdGhpcy5saXN0ZW5lck9wdGlvbnMpOyAvLyBBbGxvdyBzY3JvbGwgb24gcHJvdmlkZWQgdGFyZ2V0XG5cbiAgICAgICAgaWYgKHRvdWNoU2Nyb2xsVGFyZ2V0KSB7XG4gICAgICAgICAgdG91Y2hTY3JvbGxUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIF91dGlscy5wcmV2ZW50SW5lcnRpYVNjcm9sbCwgdGhpcy5saXN0ZW5lck9wdGlvbnMpO1xuICAgICAgICAgIHRvdWNoU2Nyb2xsVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIF91dGlscy5hbGxvd1RvdWNoTW92ZSwgdGhpcy5saXN0ZW5lck9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9IC8vIGluY3JlbWVudCBhY3RpdmUgc2Nyb2xsIGxvY2tzXG5cblxuICAgICAgYWN0aXZlU2Nyb2xsTG9ja3MgKz0gMTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgaWYgKCFjYW5Vc2VET00pIHJldHVybjtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFjY291bnRGb3JTY3JvbGxiYXJzID0gX3RoaXMkcHJvcHMyLmFjY291bnRGb3JTY3JvbGxiYXJzLFxuICAgICAgICAgIHRvdWNoU2Nyb2xsVGFyZ2V0ID0gX3RoaXMkcHJvcHMyLnRvdWNoU2Nyb2xsVGFyZ2V0O1xuICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmJvZHk7XG4gICAgICB2YXIgdGFyZ2V0U3R5bGUgPSB0YXJnZXQgJiYgdGFyZ2V0LnN0eWxlOyAvLyBzYWZlbHkgZGVjcmVtZW50IGFjdGl2ZSBzY3JvbGwgbG9ja3NcblxuICAgICAgYWN0aXZlU2Nyb2xsTG9ja3MgPSBNYXRoLm1heChhY3RpdmVTY3JvbGxMb2NrcyAtIDEsIDApOyAvLyByZWFwcGx5IG9yaWdpbmFsIGJvZHkgc3R5bGVzLCBpZiBhbnlcblxuICAgICAgaWYgKGFjY291bnRGb3JTY3JvbGxiYXJzICYmIGFjdGl2ZVNjcm9sbExvY2tzIDwgMSkge1xuICAgICAgICBfY29uc3RhbnRzLlNUWUxFX0tFWVMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgdmFyIHZhbCA9IF90aGlzMy5vcmlnaW5hbFN0eWxlc1trZXldO1xuXG4gICAgICAgICAgaWYgKHRhcmdldFN0eWxlKSB7XG4gICAgICAgICAgICB0YXJnZXRTdHlsZVtrZXldID0gdmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IC8vIHJlbW92ZSB0b3VjaCBsaXN0ZW5lcnNcblxuXG4gICAgICBpZiAodGFyZ2V0ICYmICgwLCBfdXRpbHMuaXNUb3VjaERldmljZSkoKSkge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgX3V0aWxzLnByZXZlbnRUb3VjaE1vdmUsIHRoaXMubGlzdGVuZXJPcHRpb25zKTtcblxuICAgICAgICBpZiAodG91Y2hTY3JvbGxUYXJnZXQpIHtcbiAgICAgICAgICB0b3VjaFNjcm9sbFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgX3V0aWxzLnByZXZlbnRJbmVydGlhU2Nyb2xsLCB0aGlzLmxpc3RlbmVyT3B0aW9ucyk7XG4gICAgICAgICAgdG91Y2hTY3JvbGxUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgX3V0aWxzLmFsbG93VG91Y2hNb3ZlLCB0aGlzLmxpc3RlbmVyT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTY3JvbGxMb2NrO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2Nyb2xsTG9jaztcblxuX2RlZmluZVByb3BlcnR5KFNjcm9sbExvY2ssIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgYWNjb3VudEZvclNjcm9sbGJhcnM6IHRydWVcbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9lbW90aW9uID0gcmVxdWlyZShcImVtb3Rpb25cIik7XG5cbnZhciBfTm9kZVJlc29sdmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ob2RlUmVzb2x2ZXJcIikpO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TY3JvbGxMb2NrL2luZGV4XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLy8gTk9URTpcbi8vIFdlIHNob3VsZG4ndCBuZWVkIHRoaXMgYWZ0ZXIgdXBkYXRpbmcgdG8gUmVhY3QgdjE2LjMuMCwgd2hpY2ggaW50cm9kdWNlczpcbi8vIC0gY3JlYXRlUmVmKCkgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0Y3JlYXRlcmVmXG4vLyAtIGZvcndhcmRSZWYoKSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3Rmb3J3YXJkcmVmXG52YXIgU2Nyb2xsQmxvY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9QdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTY3JvbGxCbG9jaywgX1B1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbEJsb2NrKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbEJsb2NrKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFNjcm9sbEJsb2NrKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic3RhdGVcIiwge1xuICAgICAgdG91Y2hTY3JvbGxUYXJnZXQ6IG51bGxcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRTY3JvbGxUYXJnZXRcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgaWYgKHJlZiA9PT0gX3RoaXMuc3RhdGUudG91Y2hTY3JvbGxUYXJnZXQpIHJldHVybjtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB0b3VjaFNjcm9sbFRhcmdldDogcmVmXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJibHVyU2VsZWN0SW5wdXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2Nyb2xsQmxvY2ssIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgaXNFbmFibGVkID0gX3RoaXMkcHJvcHMuaXNFbmFibGVkO1xuICAgICAgdmFyIHRvdWNoU2Nyb2xsVGFyZ2V0ID0gdGhpcy5zdGF0ZS50b3VjaFNjcm9sbFRhcmdldDsgLy8gYmFpbCBlYXJseSBpZiBub3QgZW5hYmxlZFxuXG4gICAgICBpZiAoIWlzRW5hYmxlZCkgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgLypcbiAgICAgICAqIERpdlxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBibG9ja3Mgc2Nyb2xsaW5nIG9uIG5vbi1ib2R5IGVsZW1lbnRzIGJlaGluZCB0aGUgbWVudVxuICAgICAgICAqIE5vZGVSZXNvbHZlclxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiB3ZSBuZWVkIGEgcmVmZXJlbmNlIHRvIHRoZSBzY3JvbGxhYmxlIGVsZW1lbnQgdG8gXCJ1bmxvY2tcIiBzY3JvbGwgb25cbiAgICAgICAqIG1vYmlsZSBkZXZpY2VzXG4gICAgICAgICogU2Nyb2xsTG9ja1xuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBhY3R1YWxseSBkb2VzIHRoZSBzY3JvbGwgbG9ja2luZ1xuICAgICAgICovXG5cbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBvbkNsaWNrOiB0aGlzLmJsdXJTZWxlY3RJbnB1dCxcbiAgICAgICAgY2xhc3NOYW1lOlxuICAgICAgICAvKiNfX1BVUkVfXyovXG5cbiAgICAgICAgLyojX19QVVJFX18qL1xuICAgICAgICAoMCwgX2Vtb3Rpb24uY3NzKSh7XG4gICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgdG9wOiAwXG4gICAgICAgIH0pXG4gICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTm9kZVJlc29sdmVyLmRlZmF1bHQsIHtcbiAgICAgICAgaW5uZXJSZWY6IHRoaXMuZ2V0U2Nyb2xsVGFyZ2V0XG4gICAgICB9LCBjaGlsZHJlbiksIHRvdWNoU2Nyb2xsVGFyZ2V0ID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaW5kZXguZGVmYXVsdCwge1xuICAgICAgICB0b3VjaFNjcm9sbFRhcmdldDogdG91Y2hTY3JvbGxUYXJnZXRcbiAgICAgIH0pIDogbnVsbCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNjcm9sbEJsb2NrO1xufShfcmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNjcm9sbEJsb2NrOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9Ob2RlUmVzb2x2ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL05vZGVSZXNvbHZlclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBTY3JvbGxDYXB0b3IgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNjcm9sbENhcHRvciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2Nyb2xsQ2FwdG9yKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbENhcHRvcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihTY3JvbGxDYXB0b3IpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJpc0JvdHRvbVwiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaXNUb3BcIiwgZmFsc2UpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInNjcm9sbFRhcmdldFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInRvdWNoU3RhcnRcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJjYW5jZWxTY3JvbGxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaGFuZGxlRXZlbnREZWx0YVwiLCBmdW5jdGlvbiAoZXZlbnQsIGRlbHRhKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkJvdHRvbUFycml2ZSA9IF90aGlzJHByb3BzLm9uQm90dG9tQXJyaXZlLFxuICAgICAgICAgIG9uQm90dG9tTGVhdmUgPSBfdGhpcyRwcm9wcy5vbkJvdHRvbUxlYXZlLFxuICAgICAgICAgIG9uVG9wQXJyaXZlID0gX3RoaXMkcHJvcHMub25Ub3BBcnJpdmUsXG4gICAgICAgICAgb25Ub3BMZWF2ZSA9IF90aGlzJHByb3BzLm9uVG9wTGVhdmU7XG4gICAgICB2YXIgX3RoaXMkc2Nyb2xsVGFyZ2V0ID0gX3RoaXMuc2Nyb2xsVGFyZ2V0LFxuICAgICAgICAgIHNjcm9sbFRvcCA9IF90aGlzJHNjcm9sbFRhcmdldC5zY3JvbGxUb3AsXG4gICAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gX3RoaXMkc2Nyb2xsVGFyZ2V0LnNjcm9sbEhlaWdodCxcbiAgICAgICAgICBjbGllbnRIZWlnaHQgPSBfdGhpcyRzY3JvbGxUYXJnZXQuY2xpZW50SGVpZ2h0O1xuICAgICAgdmFyIHRhcmdldCA9IF90aGlzLnNjcm9sbFRhcmdldDtcbiAgICAgIHZhciBpc0RlbHRhUG9zaXRpdmUgPSBkZWx0YSA+IDA7XG4gICAgICB2YXIgYXZhaWxhYmxlU2Nyb2xsID0gc2Nyb2xsSGVpZ2h0IC0gY2xpZW50SGVpZ2h0IC0gc2Nyb2xsVG9wO1xuICAgICAgdmFyIHNob3VsZENhbmNlbFNjcm9sbCA9IGZhbHNlOyAvLyByZXNldCBib3R0b20vdG9wIGZsYWdzXG5cbiAgICAgIGlmIChhdmFpbGFibGVTY3JvbGwgPiBkZWx0YSAmJiBfdGhpcy5pc0JvdHRvbSkge1xuICAgICAgICBpZiAob25Cb3R0b21MZWF2ZSkgb25Cb3R0b21MZWF2ZShldmVudCk7XG4gICAgICAgIF90aGlzLmlzQm90dG9tID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0RlbHRhUG9zaXRpdmUgJiYgX3RoaXMuaXNUb3ApIHtcbiAgICAgICAgaWYgKG9uVG9wTGVhdmUpIG9uVG9wTGVhdmUoZXZlbnQpO1xuICAgICAgICBfdGhpcy5pc1RvcCA9IGZhbHNlO1xuICAgICAgfSAvLyBib3R0b20gbGltaXRcblxuXG4gICAgICBpZiAoaXNEZWx0YVBvc2l0aXZlICYmIGRlbHRhID4gYXZhaWxhYmxlU2Nyb2xsKSB7XG4gICAgICAgIGlmIChvbkJvdHRvbUFycml2ZSAmJiAhX3RoaXMuaXNCb3R0b20pIHtcbiAgICAgICAgICBvbkJvdHRvbUFycml2ZShldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQuc2Nyb2xsVG9wID0gc2Nyb2xsSGVpZ2h0O1xuICAgICAgICBzaG91bGRDYW5jZWxTY3JvbGwgPSB0cnVlO1xuICAgICAgICBfdGhpcy5pc0JvdHRvbSA9IHRydWU7IC8vIHRvcCBsaW1pdFxuICAgICAgfSBlbHNlIGlmICghaXNEZWx0YVBvc2l0aXZlICYmIC1kZWx0YSA+IHNjcm9sbFRvcCkge1xuICAgICAgICBpZiAob25Ub3BBcnJpdmUgJiYgIV90aGlzLmlzVG9wKSB7XG4gICAgICAgICAgb25Ub3BBcnJpdmUoZXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0LnNjcm9sbFRvcCA9IDA7XG4gICAgICAgIHNob3VsZENhbmNlbFNjcm9sbCA9IHRydWU7XG4gICAgICAgIF90aGlzLmlzVG9wID0gdHJ1ZTtcbiAgICAgIH0gLy8gY2FuY2VsIHNjcm9sbFxuXG5cbiAgICAgIGlmIChzaG91bGRDYW5jZWxTY3JvbGwpIHtcbiAgICAgICAgX3RoaXMuY2FuY2VsU2Nyb2xsKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbldoZWVsXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuaGFuZGxlRXZlbnREZWx0YShldmVudCwgZXZlbnQuZGVsdGFZKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvblRvdWNoU3RhcnRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBzZXQgdG91Y2ggc3RhcnQgc28gd2UgY2FuIGNhbGN1bGF0ZSB0b3VjaG1vdmUgZGVsdGFcbiAgICAgIF90aGlzLnRvdWNoU3RhcnQgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uVG91Y2hNb3ZlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGRlbHRhWSA9IF90aGlzLnRvdWNoU3RhcnQgLSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZO1xuXG4gICAgICBfdGhpcy5oYW5kbGVFdmVudERlbHRhKGV2ZW50LCBkZWx0YVkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldFNjcm9sbFRhcmdldFwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5zY3JvbGxUYXJnZXQgPSByZWY7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2Nyb2xsQ2FwdG9yLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc3RhcnRMaXN0ZW5pbmcodGhpcy5zY3JvbGxUYXJnZXQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuc3RvcExpc3RlbmluZyh0aGlzLnNjcm9sbFRhcmdldCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0YXJ0TGlzdGVuaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0TGlzdGVuaW5nKGVsKSB7XG4gICAgICAvLyBiYWlsIGVhcmx5IGlmIG5vIHNjcm9sbCBhdmFpbGFibGVcbiAgICAgIGlmICghZWwpIHJldHVybjtcbiAgICAgIGlmIChlbC5zY3JvbGxIZWlnaHQgPD0gZWwuY2xpZW50SGVpZ2h0KSByZXR1cm47IC8vIGFsbCB0aGUgaWYgc3RhdGVtZW50cyBhcmUgdG8gYXBwZWFzZSBGbG93IPCfmKJcblxuICAgICAgaWYgKHR5cGVvZiBlbC5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5vbldoZWVsLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZWwuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlbC5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcExpc3RlbmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wTGlzdGVuaW5nKGVsKSB7XG4gICAgICAvLyBiYWlsIGVhcmx5IGlmIG5vIHNjcm9sbCBhdmFpbGFibGVcbiAgICAgIGlmIChlbC5zY3JvbGxIZWlnaHQgPD0gZWwuY2xpZW50SGVpZ2h0KSByZXR1cm47IC8vIGFsbCB0aGUgaWYgc3RhdGVtZW50cyBhcmUgdG8gYXBwZWFzZSBGbG93IPCfmKJcblxuICAgICAgaWYgKHR5cGVvZiBlbC5yZW1vdmVFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5vbldoZWVsLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlbC5yZW1vdmVFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Ob2RlUmVzb2x2ZXIuZGVmYXVsdCwge1xuICAgICAgICBpbm5lclJlZjogdGhpcy5nZXRTY3JvbGxUYXJnZXRcbiAgICAgIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTY3JvbGxDYXB0b3I7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG52YXIgU2Nyb2xsQ2FwdG9yU3dpdGNoID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICBfaW5oZXJpdHMoU2Nyb2xsQ2FwdG9yU3dpdGNoLCBfQ29tcG9uZW50Mik7XG5cbiAgZnVuY3Rpb24gU2Nyb2xsQ2FwdG9yU3dpdGNoKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY3JvbGxDYXB0b3JTd2l0Y2gpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTY3JvbGxDYXB0b3JTd2l0Y2gpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNjcm9sbENhcHRvclN3aXRjaCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlzRW5hYmxlZCA9IF90aGlzJHByb3BzMi5pc0VuYWJsZWQsXG4gICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMyLCBbXCJpc0VuYWJsZWRcIl0pO1xuXG4gICAgICByZXR1cm4gaXNFbmFibGVkID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChTY3JvbGxDYXB0b3IsIHByb3BzKSA6IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNjcm9sbENhcHRvclN3aXRjaDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNjcm9sbENhcHRvclN3aXRjaDtcblxuX2RlZmluZVByb3BlcnR5KFNjcm9sbENhcHRvclN3aXRjaCwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBpc0VuYWJsZWQ6IHRydWVcbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQTExeVRleHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0ExMXlUZXh0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRHVtbXlJbnB1dFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRHVtbXlJbnB1dC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vZGVSZXNvbHZlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTm9kZVJlc29sdmVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2Nyb2xsQmxvY2tcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1Njcm9sbEJsb2NrLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2Nyb2xsQ2FwdG9yXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TY3JvbGxDYXB0b3IuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQTExeVRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ExMXlUZXh0XCIpKTtcblxudmFyIF9EdW1teUlucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EdW1teUlucHV0XCIpKTtcblxudmFyIF9Ob2RlUmVzb2x2ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL05vZGVSZXNvbHZlclwiKSk7XG5cbnZhciBfU2Nyb2xsQmxvY2sgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1Njcm9sbEJsb2NrXCIpKTtcblxudmFyIF9TY3JvbGxDYXB0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1Njcm9sbENhcHRvclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnJlc3VsdHNBcmlhTWVzc2FnZSA9IGV4cG9ydHMub3B0aW9uRm9jdXNBcmlhTWVzc2FnZSA9IGV4cG9ydHMudmFsdWVGb2N1c0FyaWFNZXNzYWdlID0gZXhwb3J0cy52YWx1ZUV2ZW50QXJpYU1lc3NhZ2UgPSBleHBvcnRzLmluc3RydWN0aW9uc0FyaWFNZXNzYWdlID0gdm9pZCAwO1xuXG52YXIgaW5zdHJ1Y3Rpb25zQXJpYU1lc3NhZ2UgPSBmdW5jdGlvbiBpbnN0cnVjdGlvbnNBcmlhTWVzc2FnZShldmVudCkge1xuICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBpc1NlYXJjaGFibGUgPSBjb250ZXh0LmlzU2VhcmNoYWJsZSxcbiAgICAgIGlzTXVsdGkgPSBjb250ZXh0LmlzTXVsdGksXG4gICAgICBsYWJlbCA9IGNvbnRleHQubGFiZWwsXG4gICAgICBpc0Rpc2FibGVkID0gY29udGV4dC5pc0Rpc2FibGVkO1xuXG4gIHN3aXRjaCAoZXZlbnQpIHtcbiAgICBjYXNlICdtZW51JzpcbiAgICAgIHJldHVybiBcIlVzZSBVcCBhbmQgRG93biB0byBjaG9vc2Ugb3B0aW9uc1wiLmNvbmNhdChpc0Rpc2FibGVkID8gJycgOiAnLCBwcmVzcyBFbnRlciB0byBzZWxlY3QgdGhlIGN1cnJlbnRseSBmb2N1c2VkIG9wdGlvbicsIFwiLCBwcmVzcyBFc2NhcGUgdG8gZXhpdCB0aGUgbWVudSwgcHJlc3MgVGFiIHRvIHNlbGVjdCB0aGUgb3B0aW9uIGFuZCBleGl0IHRoZSBtZW51LlwiKTtcblxuICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChsYWJlbCA/IGxhYmVsIDogJ1NlbGVjdCcsIFwiIGlzIGZvY3VzZWQgXCIpLmNvbmNhdChpc1NlYXJjaGFibGUgPyAnLHR5cGUgdG8gcmVmaW5lIGxpc3QnIDogJycsIFwiLCBwcmVzcyBEb3duIHRvIG9wZW4gdGhlIG1lbnUsIFwiKS5jb25jYXQoaXNNdWx0aSA/ICcgcHJlc3MgbGVmdCB0byBmb2N1cyBzZWxlY3RlZCB2YWx1ZXMnIDogJycpO1xuXG4gICAgY2FzZSAndmFsdWUnOlxuICAgICAgcmV0dXJuICdVc2UgbGVmdCBhbmQgcmlnaHQgdG8gdG9nZ2xlIGJldHdlZW4gZm9jdXNlZCB2YWx1ZXMsIHByZXNzIEJhY2tzcGFjZSB0byByZW1vdmUgdGhlIGN1cnJlbnRseSBmb2N1c2VkIHZhbHVlJztcbiAgfVxufTtcblxuZXhwb3J0cy5pbnN0cnVjdGlvbnNBcmlhTWVzc2FnZSA9IGluc3RydWN0aW9uc0FyaWFNZXNzYWdlO1xuXG52YXIgdmFsdWVFdmVudEFyaWFNZXNzYWdlID0gZnVuY3Rpb24gdmFsdWVFdmVudEFyaWFNZXNzYWdlKGV2ZW50LCBjb250ZXh0KSB7XG4gIHZhciB2YWx1ZSA9IGNvbnRleHQudmFsdWUsXG4gICAgICBpc0Rpc2FibGVkID0gY29udGV4dC5pc0Rpc2FibGVkO1xuICBpZiAoIXZhbHVlKSByZXR1cm47XG5cbiAgc3dpdGNoIChldmVudCkge1xuICAgIGNhc2UgJ2Rlc2VsZWN0LW9wdGlvbic6XG4gICAgY2FzZSAncG9wLXZhbHVlJzpcbiAgICBjYXNlICdyZW1vdmUtdmFsdWUnOlxuICAgICAgcmV0dXJuIFwib3B0aW9uIFwiLmNvbmNhdCh2YWx1ZSwgXCIsIGRlc2VsZWN0ZWQuXCIpO1xuXG4gICAgY2FzZSAnc2VsZWN0LW9wdGlvbic6XG4gICAgICByZXR1cm4gaXNEaXNhYmxlZCA/IFwib3B0aW9uIFwiLmNvbmNhdCh2YWx1ZSwgXCIgaXMgZGlzYWJsZWQuIFNlbGVjdCBhbm90aGVyIG9wdGlvbi5cIikgOiBcIm9wdGlvbiBcIi5jb25jYXQodmFsdWUsIFwiLCBzZWxlY3RlZC5cIik7XG4gIH1cbn07XG5cbmV4cG9ydHMudmFsdWVFdmVudEFyaWFNZXNzYWdlID0gdmFsdWVFdmVudEFyaWFNZXNzYWdlO1xuXG52YXIgdmFsdWVGb2N1c0FyaWFNZXNzYWdlID0gZnVuY3Rpb24gdmFsdWVGb2N1c0FyaWFNZXNzYWdlKF9yZWYpIHtcbiAgdmFyIGZvY3VzZWRWYWx1ZSA9IF9yZWYuZm9jdXNlZFZhbHVlLFxuICAgICAgZ2V0T3B0aW9uTGFiZWwgPSBfcmVmLmdldE9wdGlvbkxhYmVsLFxuICAgICAgc2VsZWN0VmFsdWUgPSBfcmVmLnNlbGVjdFZhbHVlO1xuICByZXR1cm4gXCJ2YWx1ZSBcIi5jb25jYXQoZ2V0T3B0aW9uTGFiZWwoZm9jdXNlZFZhbHVlKSwgXCIgZm9jdXNlZCwgXCIpLmNvbmNhdChzZWxlY3RWYWx1ZS5pbmRleE9mKGZvY3VzZWRWYWx1ZSkgKyAxLCBcIiBvZiBcIikuY29uY2F0KHNlbGVjdFZhbHVlLmxlbmd0aCwgXCIuXCIpO1xufTtcblxuZXhwb3J0cy52YWx1ZUZvY3VzQXJpYU1lc3NhZ2UgPSB2YWx1ZUZvY3VzQXJpYU1lc3NhZ2U7XG5cbnZhciBvcHRpb25Gb2N1c0FyaWFNZXNzYWdlID0gZnVuY3Rpb24gb3B0aW9uRm9jdXNBcmlhTWVzc2FnZShfcmVmMikge1xuICB2YXIgZm9jdXNlZE9wdGlvbiA9IF9yZWYyLmZvY3VzZWRPcHRpb24sXG4gICAgICBnZXRPcHRpb25MYWJlbCA9IF9yZWYyLmdldE9wdGlvbkxhYmVsLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnM7XG4gIHJldHVybiBcIm9wdGlvbiBcIi5jb25jYXQoZ2V0T3B0aW9uTGFiZWwoZm9jdXNlZE9wdGlvbiksIFwiIGZvY3VzZWRcIikuY29uY2F0KGZvY3VzZWRPcHRpb24uaXNEaXNhYmxlZCA/ICcgZGlzYWJsZWQnIDogJycsIFwiLCBcIikuY29uY2F0KG9wdGlvbnMuaW5kZXhPZihmb2N1c2VkT3B0aW9uKSArIDEsIFwiIG9mIFwiKS5jb25jYXQob3B0aW9ucy5sZW5ndGgsIFwiLlwiKTtcbn07XG5cbmV4cG9ydHMub3B0aW9uRm9jdXNBcmlhTWVzc2FnZSA9IG9wdGlvbkZvY3VzQXJpYU1lc3NhZ2U7XG5cbnZhciByZXN1bHRzQXJpYU1lc3NhZ2UgPSBmdW5jdGlvbiByZXN1bHRzQXJpYU1lc3NhZ2UoX3JlZjMpIHtcbiAgdmFyIGlucHV0VmFsdWUgPSBfcmVmMy5pbnB1dFZhbHVlLFxuICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZSA9IF9yZWYzLnNjcmVlblJlYWRlck1lc3NhZ2U7XG4gIHJldHVybiBcIlwiLmNvbmNhdChzY3JlZW5SZWFkZXJNZXNzYWdlKS5jb25jYXQoaW5wdXRWYWx1ZSA/ICcgZm9yIHNlYXJjaCB0ZXJtICcgKyBpbnB1dFZhbHVlIDogJycsIFwiLlwiKTtcbn07XG5cbmV4cG9ydHMucmVzdWx0c0FyaWFNZXNzYWdlID0gcmVzdWx0c0FyaWFNZXNzYWdlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pc09wdGlvbkRpc2FibGVkID0gZXhwb3J0cy5nZXRPcHRpb25WYWx1ZSA9IGV4cG9ydHMuZ2V0T3B0aW9uTGFiZWwgPSBleHBvcnRzLmZvcm1hdEdyb3VwTGFiZWwgPSB2b2lkIDA7XG5cbnZhciBmb3JtYXRHcm91cExhYmVsID0gZnVuY3Rpb24gZm9ybWF0R3JvdXBMYWJlbChncm91cCkge1xuICByZXR1cm4gZ3JvdXAubGFiZWw7XG59O1xuXG5leHBvcnRzLmZvcm1hdEdyb3VwTGFiZWwgPSBmb3JtYXRHcm91cExhYmVsO1xuXG52YXIgZ2V0T3B0aW9uTGFiZWwgPSBmdW5jdGlvbiBnZXRPcHRpb25MYWJlbChvcHRpb24pIHtcbiAgcmV0dXJuIG9wdGlvbi5sYWJlbDtcbn07XG5cbmV4cG9ydHMuZ2V0T3B0aW9uTGFiZWwgPSBnZXRPcHRpb25MYWJlbDtcblxudmFyIGdldE9wdGlvblZhbHVlID0gZnVuY3Rpb24gZ2V0T3B0aW9uVmFsdWUob3B0aW9uKSB7XG4gIHJldHVybiBvcHRpb24udmFsdWU7XG59O1xuXG5leHBvcnRzLmdldE9wdGlvblZhbHVlID0gZ2V0T3B0aW9uVmFsdWU7XG5cbnZhciBpc09wdGlvbkRpc2FibGVkID0gZnVuY3Rpb24gaXNPcHRpb25EaXNhYmxlZChvcHRpb24pIHtcbiAgcmV0dXJuICEhb3B0aW9uLmlzRGlzYWJsZWQ7XG59O1xuXG5leHBvcnRzLmlzT3B0aW9uRGlzYWJsZWQgPSBpc09wdGlvbkRpc2FibGVkOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5JbmRpY2F0b3JzQ29udGFpbmVyID0gZXhwb3J0cy5pbmRpY2F0b3JzQ29udGFpbmVyQ1NTID0gZXhwb3J0cy5WYWx1ZUNvbnRhaW5lciA9IGV4cG9ydHMudmFsdWVDb250YWluZXJDU1MgPSBleHBvcnRzLlNlbGVjdENvbnRhaW5lciA9IGV4cG9ydHMuY29udGFpbmVyQ1NTID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9lbW90aW9uID0gcmVxdWlyZShcImVtb3Rpb25cIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbnZhciBjb250YWluZXJDU1MgPSBmdW5jdGlvbiBjb250YWluZXJDU1MoX3JlZikge1xuICB2YXIgaXNEaXNhYmxlZCA9IF9yZWYuaXNEaXNhYmxlZCxcbiAgICAgIGlzUnRsID0gX3JlZi5pc1J0bDtcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ2NvbnRhaW5lcicsXG4gICAgZGlyZWN0aW9uOiBpc1J0bCA/ICdydGwnIDogbnVsbCxcbiAgICBwb2ludGVyRXZlbnRzOiBpc0Rpc2FibGVkID8gJ25vbmUnIDogbnVsbCxcbiAgICAvLyBjYW5jZWwgbW91c2UgZXZlbnRzIHdoZW4gZGlzYWJsZWRcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICB9O1xufTtcblxuZXhwb3J0cy5jb250YWluZXJDU1MgPSBjb250YWluZXJDU1M7XG5cbnZhciBTZWxlY3RDb250YWluZXIgPSBmdW5jdGlvbiBTZWxlY3RDb250YWluZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHMsXG4gICAgICBpc0Rpc2FibGVkID0gcHJvcHMuaXNEaXNhYmxlZCxcbiAgICAgIGlzUnRsID0gcHJvcHMuaXNSdGw7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAoMCwgX2Vtb3Rpb24uY3NzKShnZXRTdHlsZXMoJ2NvbnRhaW5lcicsIHByb3BzKSksIHtcbiAgICAgICctLWlzLWRpc2FibGVkJzogaXNEaXNhYmxlZCxcbiAgICAgICctLWlzLXJ0bCc6IGlzUnRsXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9LCBpbm5lclByb3BzKSwgY2hpbGRyZW4pO1xufTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBWYWx1ZSBDb250YWluZXJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbmV4cG9ydHMuU2VsZWN0Q29udGFpbmVyID0gU2VsZWN0Q29udGFpbmVyO1xuXG52YXIgdmFsdWVDb250YWluZXJDU1MgPSBmdW5jdGlvbiB2YWx1ZUNvbnRhaW5lckNTUyhfcmVmMikge1xuICB2YXIgc3BhY2luZyA9IF9yZWYyLnRoZW1lLnNwYWNpbmc7XG4gIHJldHVybiB7XG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXg6IDEsXG4gICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdChzcGFjaW5nLmJhc2VVbml0IC8gMiwgXCJweCBcIikuY29uY2F0KHNwYWNpbmcuYmFzZVVuaXQgKiAyLCBcInB4XCIpLFxuICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICB9O1xufTtcblxuZXhwb3J0cy52YWx1ZUNvbnRhaW5lckNTUyA9IHZhbHVlQ29udGFpbmVyQ1NTO1xuXG52YXIgVmFsdWVDb250YWluZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFZhbHVlQ29udGFpbmVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBWYWx1ZUNvbnRhaW5lcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmFsdWVDb250YWluZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihWYWx1ZUNvbnRhaW5lcikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVmFsdWVDb250YWluZXIsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGN4ID0gX3RoaXMkcHJvcHMuY3gsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzLmlzTXVsdGksXG4gICAgICAgICAgZ2V0U3R5bGVzID0gX3RoaXMkcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgICAgIGhhc1ZhbHVlID0gX3RoaXMkcHJvcHMuaGFzVmFsdWU7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY3goXG4gICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgKDAsIF9lbW90aW9uLmNzcykoZ2V0U3R5bGVzKCd2YWx1ZUNvbnRhaW5lcicsIHRoaXMucHJvcHMpKSwge1xuICAgICAgICAgICd2YWx1ZS1jb250YWluZXInOiB0cnVlLFxuICAgICAgICAgICd2YWx1ZS1jb250YWluZXItLWlzLW11bHRpJzogaXNNdWx0aSxcbiAgICAgICAgICAndmFsdWUtY29udGFpbmVyLS1oYXMtdmFsdWUnOiBoYXNWYWx1ZVxuICAgICAgICB9LCBjbGFzc05hbWUpXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFZhbHVlQ29udGFpbmVyO1xufShfcmVhY3QuQ29tcG9uZW50KTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBJbmRpY2F0b3IgQ29udGFpbmVyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG5leHBvcnRzLlZhbHVlQ29udGFpbmVyID0gVmFsdWVDb250YWluZXI7XG5cbnZhciBpbmRpY2F0b3JzQ29udGFpbmVyQ1NTID0gZnVuY3Rpb24gaW5kaWNhdG9yc0NvbnRhaW5lckNTUygpIHtcbiAgcmV0dXJuIHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBhbGlnblNlbGY6ICdzdHJldGNoJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleFNocmluazogMFxuICB9O1xufTtcblxuZXhwb3J0cy5pbmRpY2F0b3JzQ29udGFpbmVyQ1NTID0gaW5kaWNhdG9yc0NvbnRhaW5lckNTUztcblxudmFyIEluZGljYXRvcnNDb250YWluZXIgPSBmdW5jdGlvbiBJbmRpY2F0b3JzQ29udGFpbmVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcztcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgICgwLCBfZW1vdGlvbi5jc3MpKGdldFN0eWxlcygnaW5kaWNhdG9yc0NvbnRhaW5lcicsIHByb3BzKSksIHtcbiAgICAgICdpbmRpY2F0b3JzJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgY2hpbGRyZW4pO1xufTtcblxuZXhwb3J0cy5JbmRpY2F0b3JzQ29udGFpbmVyID0gSW5kaWNhdG9yc0NvbnRhaW5lcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTG9hZGluZ0luZGljYXRvciA9IGV4cG9ydHMubG9hZGluZ0luZGljYXRvckNTUyA9IGV4cG9ydHMuSW5kaWNhdG9yU2VwYXJhdG9yID0gZXhwb3J0cy5pbmRpY2F0b3JTZXBhcmF0b3JDU1MgPSBleHBvcnRzLkNsZWFySW5kaWNhdG9yID0gZXhwb3J0cy5jbGVhckluZGljYXRvckNTUyA9IGV4cG9ydHMuRHJvcGRvd25JbmRpY2F0b3IgPSBleHBvcnRzLmRyb3Bkb3duSW5kaWNhdG9yQ1NTID0gZXhwb3J0cy5Eb3duQ2hldnJvbiA9IGV4cG9ydHMuQ3Jvc3NJY29uID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2Vtb3Rpb24gPSByZXF1aXJlKFwiZW1vdGlvblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBEcm9wZG93biAmIENsZWFyIEljb25zXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbnZhciBTdmcgPSBmdW5jdGlvbiBTdmcoX3JlZikge1xuICB2YXIgc2l6ZSA9IF9yZWYuc2l6ZSxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcInNpemVcIl0pO1xuXG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICBoZWlnaHQ6IHNpemUsXG4gICAgd2lkdGg6IHNpemUsXG4gICAgdmlld0JveDogXCIwIDAgMjAgMjBcIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuICAgIGZvY3VzYWJsZTogXCJmYWxzZVwiLFxuICAgIGNsYXNzTmFtZTpcbiAgICAvKiNfX1BVUkVfXyovXG5cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgKDAsIF9lbW90aW9uLmNzcykoe1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgIGxpbmVIZWlnaHQ6IDEsXG4gICAgICBzdHJva2U6ICdjdXJyZW50Q29sb3InLFxuICAgICAgc3Ryb2tlV2lkdGg6IDBcbiAgICB9KVxuICB9LCBwcm9wcykpO1xufTtcblxudmFyIENyb3NzSWNvbiA9IGZ1bmN0aW9uIENyb3NzSWNvbihwcm9wcykge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChTdmcsIF9leHRlbmRzKHtcbiAgICBzaXplOiAyMFxuICB9LCBwcm9wcyksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xNC4zNDggMTQuODQ5Yy0wLjQ2OSAwLjQ2OS0xLjIyOSAwLjQ2OS0xLjY5NyAwbC0yLjY1MS0zLjAzMC0yLjY1MSAzLjAyOWMtMC40NjkgMC40NjktMS4yMjkgMC40NjktMS42OTcgMC0wLjQ2OS0wLjQ2OS0wLjQ2OS0xLjIyOSAwLTEuNjk3bDIuNzU4LTMuMTUtMi43NTktMy4xNTJjLTAuNDY5LTAuNDY5LTAuNDY5LTEuMjI4IDAtMS42OTdzMS4yMjgtMC40NjkgMS42OTcgMGwyLjY1MiAzLjAzMSAyLjY1MS0zLjAzMWMwLjQ2OS0wLjQ2OSAxLjIyOC0wLjQ2OSAxLjY5NyAwczAuNDY5IDEuMjI5IDAgMS42OTdsLTIuNzU4IDMuMTUyIDIuNzU4IDMuMTVjMC40NjkgMC40NjkgMC40NjkgMS4yMjkgMCAxLjY5OHpcIlxuICB9KSk7XG59O1xuXG5leHBvcnRzLkNyb3NzSWNvbiA9IENyb3NzSWNvbjtcblxudmFyIERvd25DaGV2cm9uID0gZnVuY3Rpb24gRG93bkNoZXZyb24ocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoU3ZnLCBfZXh0ZW5kcyh7XG4gICAgc2l6ZTogMjBcbiAgfSwgcHJvcHMpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNC41MTYgNy41NDhjMC40MzYtMC40NDYgMS4wNDMtMC40ODEgMS41NzYgMGwzLjkwOCAzLjc0NyAzLjkwOC0zLjc0N2MwLjUzMy0wLjQ4MSAxLjE0MS0wLjQ0NiAxLjU3NCAwIDAuNDM2IDAuNDQ1IDAuNDA4IDEuMTk3IDAgMS42MTUtMC40MDYgMC40MTgtNC42OTUgNC41MDItNC42OTUgNC41MDItMC4yMTcgMC4yMjMtMC41MDIgMC4zMzUtMC43ODcgMC4zMzVzLTAuNTctMC4xMTItMC43ODktMC4zMzVjMCAwLTQuMjg3LTQuMDg0LTQuNjk1LTQuNTAycy0wLjQzNi0xLjE3IDAtMS42MTV6XCJcbiAgfSkpO1xufTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBEcm9wZG93biAmIENsZWFyIEJ1dHRvbnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbmV4cG9ydHMuRG93bkNoZXZyb24gPSBEb3duQ2hldnJvbjtcblxudmFyIGJhc2VDU1MgPSBmdW5jdGlvbiBiYXNlQ1NTKF9yZWYyKSB7XG4gIHZhciBpc0ZvY3VzZWQgPSBfcmVmMi5pc0ZvY3VzZWQsXG4gICAgICBfcmVmMiR0aGVtZSA9IF9yZWYyLnRoZW1lLFxuICAgICAgYmFzZVVuaXQgPSBfcmVmMiR0aGVtZS5zcGFjaW5nLmJhc2VVbml0LFxuICAgICAgY29sb3JzID0gX3JlZjIkdGhlbWUuY29sb3JzO1xuICByZXR1cm4ge1xuICAgIGxhYmVsOiAnaW5kaWNhdG9yQ29udGFpbmVyJyxcbiAgICBjb2xvcjogaXNGb2N1c2VkID8gY29sb3JzLm5ldXRyYWw2MCA6IGNvbG9ycy5uZXV0cmFsMjAsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIHBhZGRpbmc6IGJhc2VVbml0ICogMixcbiAgICB0cmFuc2l0aW9uOiAnY29sb3IgMTUwbXMnLFxuICAgICc6aG92ZXInOiB7XG4gICAgICBjb2xvcjogaXNGb2N1c2VkID8gY29sb3JzLm5ldXRyYWw4MCA6IGNvbG9ycy5uZXV0cmFsNDBcbiAgICB9XG4gIH07XG59O1xuXG52YXIgZHJvcGRvd25JbmRpY2F0b3JDU1MgPSBiYXNlQ1NTO1xuZXhwb3J0cy5kcm9wZG93bkluZGljYXRvckNTUyA9IGRyb3Bkb3duSW5kaWNhdG9yQ1NTO1xuXG52YXIgRHJvcGRvd25JbmRpY2F0b3IgPSBmdW5jdGlvbiBEcm9wZG93bkluZGljYXRvcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpbm5lclByb3BzID0gcHJvcHMuaW5uZXJQcm9wcztcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGlubmVyUHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAoMCwgX2Vtb3Rpb24uY3NzKShnZXRTdHlsZXMoJ2Ryb3Bkb3duSW5kaWNhdG9yJywgcHJvcHMpKSwge1xuICAgICAgJ2luZGljYXRvcic6IHRydWUsXG4gICAgICAnZHJvcGRvd24taW5kaWNhdG9yJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSksIGNoaWxkcmVuIHx8IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRG93bkNoZXZyb24sIG51bGwpKTtcbn07XG5cbmV4cG9ydHMuRHJvcGRvd25JbmRpY2F0b3IgPSBEcm9wZG93bkluZGljYXRvcjtcbnZhciBjbGVhckluZGljYXRvckNTUyA9IGJhc2VDU1M7XG5leHBvcnRzLmNsZWFySW5kaWNhdG9yQ1NTID0gY2xlYXJJbmRpY2F0b3JDU1M7XG5cbnZhciBDbGVhckluZGljYXRvciA9IGZ1bmN0aW9uIENsZWFySW5kaWNhdG9yKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgaW5uZXJQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgICgwLCBfZW1vdGlvbi5jc3MpKGdldFN0eWxlcygnY2xlYXJJbmRpY2F0b3InLCBwcm9wcykpLCB7XG4gICAgICAnaW5kaWNhdG9yJzogdHJ1ZSxcbiAgICAgICdjbGVhci1pbmRpY2F0b3InOiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9KSwgY2hpbGRyZW4gfHwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDcm9zc0ljb24sIG51bGwpKTtcbn07IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gU2VwYXJhdG9yXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG5leHBvcnRzLkNsZWFySW5kaWNhdG9yID0gQ2xlYXJJbmRpY2F0b3I7XG5cbnZhciBpbmRpY2F0b3JTZXBhcmF0b3JDU1MgPSBmdW5jdGlvbiBpbmRpY2F0b3JTZXBhcmF0b3JDU1MoX3JlZjMpIHtcbiAgdmFyIGlzRGlzYWJsZWQgPSBfcmVmMy5pc0Rpc2FibGVkLFxuICAgICAgX3JlZjMkdGhlbWUgPSBfcmVmMy50aGVtZSxcbiAgICAgIGJhc2VVbml0ID0gX3JlZjMkdGhlbWUuc3BhY2luZy5iYXNlVW5pdCxcbiAgICAgIGNvbG9ycyA9IF9yZWYzJHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ2luZGljYXRvclNlcGFyYXRvcicsXG4gICAgYWxpZ25TZWxmOiAnc3RyZXRjaCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWwxMCA6IGNvbG9ycy5uZXV0cmFsMjAsXG4gICAgbWFyZ2luQm90dG9tOiBiYXNlVW5pdCAqIDIsXG4gICAgbWFyZ2luVG9wOiBiYXNlVW5pdCAqIDIsXG4gICAgd2lkdGg6IDFcbiAgfTtcbn07XG5cbmV4cG9ydHMuaW5kaWNhdG9yU2VwYXJhdG9yQ1NTID0gaW5kaWNhdG9yU2VwYXJhdG9yQ1NTO1xuXG52YXIgSW5kaWNhdG9yU2VwYXJhdG9yID0gZnVuY3Rpb24gSW5kaWNhdG9yU2VwYXJhdG9yKHByb3BzKSB7XG4gIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7fSwgaW5uZXJQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgICgwLCBfZW1vdGlvbi5jc3MpKGdldFN0eWxlcygnaW5kaWNhdG9yU2VwYXJhdG9yJywgcHJvcHMpKSwge1xuICAgICAgJ2luZGljYXRvci1zZXBhcmF0b3InOiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9KSk7XG59OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIExvYWRpbmdcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbmV4cG9ydHMuSW5kaWNhdG9yU2VwYXJhdG9yID0gSW5kaWNhdG9yU2VwYXJhdG9yO1xudmFyIGtleWZyYW1lc05hbWUgPSAncmVhY3Qtc2VsZWN0LWxvYWRpbmctaW5kaWNhdG9yJztcbnZhciBrZXlmcmFtZXNJbmplY3RlZCA9IGZhbHNlO1xuXG52YXIgbG9hZGluZ0luZGljYXRvckNTUyA9IGZ1bmN0aW9uIGxvYWRpbmdJbmRpY2F0b3JDU1MoX3JlZjQpIHtcbiAgdmFyIGlzRm9jdXNlZCA9IF9yZWY0LmlzRm9jdXNlZCxcbiAgICAgIHNpemUgPSBfcmVmNC5zaXplLFxuICAgICAgX3JlZjQkdGhlbWUgPSBfcmVmNC50aGVtZSxcbiAgICAgIGNvbG9ycyA9IF9yZWY0JHRoZW1lLmNvbG9ycyxcbiAgICAgIGJhc2VVbml0ID0gX3JlZjQkdGhlbWUuc3BhY2luZy5iYXNlVW5pdDtcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ2xvYWRpbmdJbmRpY2F0b3InLFxuICAgIGNvbG9yOiBpc0ZvY3VzZWQgPyBjb2xvcnMubmV1dHJhbDYwIDogY29sb3JzLm5ldXRyYWwyMCxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgcGFkZGluZzogYmFzZVVuaXQgKiAyLFxuICAgIHRyYW5zaXRpb246ICdjb2xvciAxNTBtcycsXG4gICAgYWxpZ25TZWxmOiAnY2VudGVyJyxcbiAgICBmb250U2l6ZTogc2l6ZSxcbiAgICBsaW5lSGVpZ2h0OiAxLFxuICAgIG1hcmdpblJpZ2h0OiBzaXplLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZSdcbiAgfTtcbn07XG5cbmV4cG9ydHMubG9hZGluZ0luZGljYXRvckNTUyA9IGxvYWRpbmdJbmRpY2F0b3JDU1M7XG5cbnZhciBMb2FkaW5nRG90ID0gZnVuY3Rpb24gTG9hZGluZ0RvdChfcmVmNSkge1xuICB2YXIgY29sb3IgPSBfcmVmNS5jb2xvcixcbiAgICAgIGRlbGF5ID0gX3JlZjUuZGVsYXksXG4gICAgICBvZmZzZXQgPSBfcmVmNS5vZmZzZXQ7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOlxuICAgIC8qI19fUFVSRV9fKi9cblxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAoMCwgX2Vtb3Rpb24uY3NzKSh7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogJzFzJyxcbiAgICAgIGFuaW1hdGlvbkRlbGF5OiBcIlwiLmNvbmNhdChkZWxheSwgXCJtc1wiKSxcbiAgICAgIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAnaW5maW5pdGUnLFxuICAgICAgYW5pbWF0aW9uTmFtZToga2V5ZnJhbWVzTmFtZSxcbiAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiAnZWFzZS1pbi1vdXQnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcixcbiAgICAgIGJvcmRlclJhZGl1czogJzFlbScsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIG1hcmdpbkxlZnQ6IG9mZnNldCA/ICcxZW0nIDogbnVsbCxcbiAgICAgIGhlaWdodDogJzFlbScsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJyxcbiAgICAgIHdpZHRoOiAnMWVtJ1xuICAgIH0pXG4gIH0pO1xufTtcblxudmFyIExvYWRpbmdJbmRpY2F0b3IgPSBmdW5jdGlvbiBMb2FkaW5nSW5kaWNhdG9yKHByb3BzKSB7XG4gIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHMsXG4gICAgICBpc0ZvY3VzZWQgPSBwcm9wcy5pc0ZvY3VzZWQsXG4gICAgICBpc1J0bCA9IHByb3BzLmlzUnRsLFxuICAgICAgY29sb3JzID0gcHJvcHMudGhlbWUuY29sb3JzO1xuICB2YXIgY29sb3IgPSBpc0ZvY3VzZWQgPyBjb2xvcnMubmV1dHJhbDgwIDogY29sb3JzLm5ldXRyYWwyMDtcblxuICBpZiAoIWtleWZyYW1lc0luamVjdGVkKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuICAgICgwLCBfZW1vdGlvbi5pbmplY3RHbG9iYWwpKFwiQGtleWZyYW1lcyBcIiwga2V5ZnJhbWVzTmFtZSwgXCJ7MCUsODAlLDEwMCV7b3BhY2l0eTowO300MCV7b3BhY2l0eToxO319O1wiKTtcbiAgICBrZXlmcmFtZXNJbmplY3RlZCA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgaW5uZXJQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgICgwLCBfZW1vdGlvbi5jc3MpKGdldFN0eWxlcygnbG9hZGluZ0luZGljYXRvcicsIHByb3BzKSksIHtcbiAgICAgICdpbmRpY2F0b3InOiB0cnVlLFxuICAgICAgJ2xvYWRpbmctaW5kaWNhdG9yJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZ0RvdCwge1xuICAgIGNvbG9yOiBjb2xvcixcbiAgICBkZWxheTogMCxcbiAgICBvZmZzZXQ6IGlzUnRsXG4gIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KExvYWRpbmdEb3QsIHtcbiAgICBjb2xvcjogY29sb3IsXG4gICAgZGVsYXk6IDE2MCxcbiAgICBvZmZzZXQ6IHRydWVcbiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZ0RvdCwge1xuICAgIGNvbG9yOiBjb2xvcixcbiAgICBkZWxheTogMzIwLFxuICAgIG9mZnNldDogIWlzUnRsXG4gIH0pKTtcbn07XG5cbmV4cG9ydHMuTG9hZGluZ0luZGljYXRvciA9IExvYWRpbmdJbmRpY2F0b3I7XG5Mb2FkaW5nSW5kaWNhdG9yLmRlZmF1bHRQcm9wcyA9IHtcbiAgc2l6ZTogNFxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuY3NzID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2Vtb3Rpb24gPSByZXF1aXJlKFwiZW1vdGlvblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxudmFyIGNzcyA9IGZ1bmN0aW9uIGNzcyhfcmVmKSB7XG4gIHZhciBpc0Rpc2FibGVkID0gX3JlZi5pc0Rpc2FibGVkLFxuICAgICAgaXNGb2N1c2VkID0gX3JlZi5pc0ZvY3VzZWQsXG4gICAgICBfcmVmJHRoZW1lID0gX3JlZi50aGVtZSxcbiAgICAgIGNvbG9ycyA9IF9yZWYkdGhlbWUuY29sb3JzLFxuICAgICAgYm9yZGVyUmFkaXVzID0gX3JlZiR0aGVtZS5ib3JkZXJSYWRpdXMsXG4gICAgICBzcGFjaW5nID0gX3JlZiR0aGVtZS5zcGFjaW5nO1xuICByZXR1cm4ge1xuICAgIGxhYmVsOiAnY29udHJvbCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgYmFja2dyb3VuZENvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWw1IDogY29sb3JzLm5ldXRyYWwwLFxuICAgIGJvcmRlckNvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWwxMCA6IGlzRm9jdXNlZCA/IGNvbG9ycy5wcmltYXJ5IDogY29sb3JzLm5ldXRyYWwyMCxcbiAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICBib3JkZXJXaWR0aDogMSxcbiAgICBib3hTaGFkb3c6IGlzRm9jdXNlZCA/IFwiMCAwIDAgMXB4IFwiLmNvbmNhdChjb2xvcnMucHJpbWFyeSkgOiBudWxsLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgbWluSGVpZ2h0OiBzcGFjaW5nLmNvbnRyb2xIZWlnaHQsXG4gICAgb3V0bGluZTogJzAgIWltcG9ydGFudCcsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgdHJhbnNpdGlvbjogJ2FsbCAxMDBtcycsXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBib3JkZXJDb2xvcjogaXNGb2N1c2VkID8gY29sb3JzLnByaW1hcnkgOiBjb2xvcnMubmV1dHJhbDMwXG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5jc3MgPSBjc3M7XG5cbnZhciBDb250cm9sID0gZnVuY3Rpb24gQ29udHJvbChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBpc0Rpc2FibGVkID0gcHJvcHMuaXNEaXNhYmxlZCxcbiAgICAgIGlzRm9jdXNlZCA9IHByb3BzLmlzRm9jdXNlZCxcbiAgICAgIGlubmVyUmVmID0gcHJvcHMuaW5uZXJSZWYsXG4gICAgICBpbm5lclByb3BzID0gcHJvcHMuaW5uZXJQcm9wcyxcbiAgICAgIG1lbnVJc09wZW4gPSBwcm9wcy5tZW51SXNPcGVuO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBpbm5lclJlZixcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAoMCwgX2Vtb3Rpb24uY3NzKShnZXRTdHlsZXMoJ2NvbnRyb2wnLCBwcm9wcykpLCB7XG4gICAgICAnY29udHJvbCc6IHRydWUsXG4gICAgICAnY29udHJvbC0taXMtZGlzYWJsZWQnOiBpc0Rpc2FibGVkLFxuICAgICAgJ2NvbnRyb2wtLWlzLWZvY3VzZWQnOiBpc0ZvY3VzZWQsXG4gICAgICAnY29udHJvbC0tbWVudS1pcy1vcGVuJzogbWVudUlzT3BlblxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgaW5uZXJQcm9wcyksIGNoaWxkcmVuKTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IENvbnRyb2w7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuR3JvdXBIZWFkaW5nID0gZXhwb3J0cy5ncm91cEhlYWRpbmdDU1MgPSBleHBvcnRzLmdyb3VwQ1NTID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2Vtb3Rpb24gPSByZXF1aXJlKFwiZW1vdGlvblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgZ3JvdXBDU1MgPSBmdW5jdGlvbiBncm91cENTUyhfcmVmKSB7XG4gIHZhciBzcGFjaW5nID0gX3JlZi50aGVtZS5zcGFjaW5nO1xuICByZXR1cm4ge1xuICAgIHBhZGRpbmdCb3R0b206IHNwYWNpbmcuYmFzZVVuaXQgKiAyLFxuICAgIHBhZGRpbmdUb3A6IHNwYWNpbmcuYmFzZVVuaXQgKiAyXG4gIH07XG59O1xuXG5leHBvcnRzLmdyb3VwQ1NTID0gZ3JvdXBDU1M7XG5cbnZhciBHcm91cCA9IGZ1bmN0aW9uIEdyb3VwKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIEhlYWRpbmcgPSBwcm9wcy5IZWFkaW5nLFxuICAgICAgaGVhZGluZ1Byb3BzID0gcHJvcHMuaGVhZGluZ1Byb3BzLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIHRoZW1lID0gcHJvcHMudGhlbWUsXG4gICAgICBzZWxlY3RQcm9wcyA9IHByb3BzLnNlbGVjdFByb3BzO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjeChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgKDAsIF9lbW90aW9uLmNzcykoZ2V0U3R5bGVzKCdncm91cCcsIHByb3BzKSksIHtcbiAgICAgICdncm91cCc6IHRydWVcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSGVhZGluZywgX2V4dGVuZHMoe30sIGhlYWRpbmdQcm9wcywge1xuICAgIHNlbGVjdFByb3BzOiBzZWxlY3RQcm9wcyxcbiAgICB0aGVtZTogdGhlbWUsXG4gICAgZ2V0U3R5bGVzOiBnZXRTdHlsZXMsXG4gICAgY3g6IGN4XG4gIH0pLCBsYWJlbCksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgY2hpbGRyZW4pKTtcbn07XG5cbnZhciBncm91cEhlYWRpbmdDU1MgPSBmdW5jdGlvbiBncm91cEhlYWRpbmdDU1MoX3JlZjIpIHtcbiAgdmFyIHNwYWNpbmcgPSBfcmVmMi50aGVtZS5zcGFjaW5nO1xuICByZXR1cm4ge1xuICAgIGxhYmVsOiAnZ3JvdXAnLFxuICAgIGNvbG9yOiAnIzk5OScsXG4gICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICBmb250U2l6ZTogJzc1JScsXG4gICAgZm9udFdlaWdodDogJzUwMCcsXG4gICAgbWFyZ2luQm90dG9tOiAnMC4yNWVtJyxcbiAgICBwYWRkaW5nTGVmdDogc3BhY2luZy5iYXNlVW5pdCAqIDMsXG4gICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nLmJhc2VVbml0ICogMyxcbiAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJ1xuICB9O1xufTtcblxuZXhwb3J0cy5ncm91cEhlYWRpbmdDU1MgPSBncm91cEhlYWRpbmdDU1M7XG5cbnZhciBHcm91cEhlYWRpbmcgPSBmdW5jdGlvbiBHcm91cEhlYWRpbmcocHJvcHMpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICB0aGVtZSA9IHByb3BzLnRoZW1lLFxuICAgICAgc2VsZWN0UHJvcHMgPSBwcm9wcy5zZWxlY3RQcm9wcyxcbiAgICAgIGNsZWFuUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzTmFtZVwiLCBcImN4XCIsIFwiZ2V0U3R5bGVzXCIsIFwidGhlbWVcIiwgXCJzZWxlY3RQcm9wc1wiXSk7XG5cbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgICgwLCBfZW1vdGlvbi5jc3MpKGdldFN0eWxlcygnZ3JvdXBIZWFkaW5nJywgX29iamVjdFNwcmVhZCh7XG4gICAgICB0aGVtZTogdGhlbWVcbiAgICB9LCBjbGVhblByb3BzKSkpLCB7XG4gICAgICAnZ3JvdXAtaGVhZGluZyc6IHRydWVcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0sIGNsZWFuUHJvcHMpKTtcbn07XG5cbmV4cG9ydHMuR3JvdXBIZWFkaW5nID0gR3JvdXBIZWFkaW5nO1xudmFyIF9kZWZhdWx0ID0gR3JvdXA7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuaW5wdXRDU1MgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfZW1vdGlvbiA9IHJlcXVpcmUoXCJlbW90aW9uXCIpO1xuXG52YXIgX3JlYWN0SW5wdXRBdXRvc2l6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWlucHV0LWF1dG9zaXplXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgaW5wdXRDU1MgPSBmdW5jdGlvbiBpbnB1dENTUyhfcmVmKSB7XG4gIHZhciBpc0Rpc2FibGVkID0gX3JlZi5pc0Rpc2FibGVkLFxuICAgICAgX3JlZiR0aGVtZSA9IF9yZWYudGhlbWUsXG4gICAgICBzcGFjaW5nID0gX3JlZiR0aGVtZS5zcGFjaW5nLFxuICAgICAgY29sb3JzID0gX3JlZiR0aGVtZS5jb2xvcnM7XG4gIHJldHVybiB7XG4gICAgbWFyZ2luOiBzcGFjaW5nLmJhc2VVbml0IC8gMixcbiAgICBwYWRkaW5nQm90dG9tOiBzcGFjaW5nLmJhc2VVbml0IC8gMixcbiAgICBwYWRkaW5nVG9wOiBzcGFjaW5nLmJhc2VVbml0IC8gMixcbiAgICB2aXNpYmlsaXR5OiBpc0Rpc2FibGVkID8gJ2hpZGRlbicgOiAndmlzaWJsZScsXG4gICAgY29sb3I6IGNvbG9ycy5uZXV0cmFsODBcbiAgfTtcbn07XG5cbmV4cG9ydHMuaW5wdXRDU1MgPSBpbnB1dENTUztcblxudmFyIGlucHV0U3R5bGUgPSBmdW5jdGlvbiBpbnB1dFN0eWxlKGlzSGlkZGVuKSB7XG4gIHJldHVybiB7XG4gICAgbGFiZWw6ICdpbnB1dCcsXG4gICAgYmFja2dyb3VuZDogMCxcbiAgICBib3JkZXI6IDAsXG4gICAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgICBvcGFjaXR5OiBpc0hpZGRlbiA/IDAgOiAxLFxuICAgIG91dGxpbmU6IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICBjb2xvcjogJ2luaGVyaXQnXG4gIH07XG59O1xuXG52YXIgSW5wdXQgPSBmdW5jdGlvbiBJbnB1dChfcmVmMikge1xuICB2YXIgY2xhc3NOYW1lID0gX3JlZjIuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBfcmVmMi5jeCxcbiAgICAgIGdldFN0eWxlcyA9IF9yZWYyLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUmVmID0gX3JlZjIuaW5uZXJSZWYsXG4gICAgICBpc0hpZGRlbiA9IF9yZWYyLmlzSGlkZGVuLFxuICAgICAgaXNEaXNhYmxlZCA9IF9yZWYyLmlzRGlzYWJsZWQsXG4gICAgICB0aGVtZSA9IF9yZWYyLnRoZW1lLFxuICAgICAgc2VsZWN0UHJvcHMgPSBfcmVmMi5zZWxlY3RQcm9wcyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbXCJjbGFzc05hbWVcIiwgXCJjeFwiLCBcImdldFN0eWxlc1wiLCBcImlubmVyUmVmXCIsIFwiaXNIaWRkZW5cIiwgXCJpc0Rpc2FibGVkXCIsIFwidGhlbWVcIiwgXCJzZWxlY3RQcm9wc1wiXSk7XG5cbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTpcbiAgICAvKiNfX1BVUkVfXyovXG5cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgKDAsIF9lbW90aW9uLmNzcykoZ2V0U3R5bGVzKCdpbnB1dCcsIF9vYmplY3RTcHJlYWQoe1xuICAgICAgdGhlbWU6IHRoZW1lXG4gICAgfSwgcHJvcHMpKSlcbiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RJbnB1dEF1dG9zaXplLmRlZmF1bHQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGN4KG51bGwsIHtcbiAgICAgICdpbnB1dCc6IHRydWVcbiAgICB9LCBjbGFzc05hbWUpLFxuICAgIGlucHV0UmVmOiBpbm5lclJlZixcbiAgICBpbnB1dFN0eWxlOiBpbnB1dFN0eWxlKGlzSGlkZGVuKSxcbiAgICBkaXNhYmxlZDogaXNEaXNhYmxlZFxuICB9LCBwcm9wcykpKTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IElucHV0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLk11bHRpVmFsdWVSZW1vdmUgPSBleHBvcnRzLk11bHRpVmFsdWVMYWJlbCA9IGV4cG9ydHMuTXVsdGlWYWx1ZUNvbnRhaW5lciA9IGV4cG9ydHMuTXVsdGlWYWx1ZUdlbmVyaWMgPSBleHBvcnRzLm11bHRpVmFsdWVSZW1vdmVDU1MgPSBleHBvcnRzLm11bHRpVmFsdWVMYWJlbENTUyA9IGV4cG9ydHMubXVsdGlWYWx1ZUNTUyA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfZW1vdGlvbiA9IHJlcXVpcmUoXCJlbW90aW9uXCIpO1xuXG52YXIgX2luZGljYXRvcnMgPSByZXF1aXJlKFwiLi9pbmRpY2F0b3JzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBtdWx0aVZhbHVlQ1NTID0gZnVuY3Rpb24gbXVsdGlWYWx1ZUNTUyhfcmVmKSB7XG4gIHZhciBfcmVmJHRoZW1lID0gX3JlZi50aGVtZSxcbiAgICAgIHNwYWNpbmcgPSBfcmVmJHRoZW1lLnNwYWNpbmcsXG4gICAgICBib3JkZXJSYWRpdXMgPSBfcmVmJHRoZW1lLmJvcmRlclJhZGl1cyxcbiAgICAgIGNvbG9ycyA9IF9yZWYkdGhlbWUuY29sb3JzO1xuICByZXR1cm4ge1xuICAgIGxhYmVsOiAnbXVsdGlWYWx1ZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMubmV1dHJhbDEwLFxuICAgIGJvcmRlclJhZGl1czogYm9yZGVyUmFkaXVzIC8gMixcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgbWFyZ2luOiBzcGFjaW5nLmJhc2VVbml0IC8gMixcbiAgICBtaW5XaWR0aDogMCAvLyByZXNvbHZlcyBmbGV4L3RleHQtb3ZlcmZsb3cgYnVnXG5cbiAgfTtcbn07XG5cbmV4cG9ydHMubXVsdGlWYWx1ZUNTUyA9IG11bHRpVmFsdWVDU1M7XG5cbnZhciBtdWx0aVZhbHVlTGFiZWxDU1MgPSBmdW5jdGlvbiBtdWx0aVZhbHVlTGFiZWxDU1MoX3JlZjIpIHtcbiAgdmFyIF9yZWYyJHRoZW1lID0gX3JlZjIudGhlbWUsXG4gICAgICBib3JkZXJSYWRpdXMgPSBfcmVmMiR0aGVtZS5ib3JkZXJSYWRpdXMsXG4gICAgICBjb2xvcnMgPSBfcmVmMiR0aGVtZS5jb2xvcnMsXG4gICAgICBjcm9wV2l0aEVsbGlwc2lzID0gX3JlZjIuY3JvcFdpdGhFbGxpcHNpcztcbiAgcmV0dXJuIHtcbiAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyAvIDIsXG4gICAgY29sb3I6IGNvbG9ycy5uZXV0cmFsODAsXG4gICAgZm9udFNpemU6ICc4NSUnLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICBwYWRkaW5nOiAzLFxuICAgIHBhZGRpbmdMZWZ0OiA2LFxuICAgIHRleHRPdmVyZmxvdzogY3JvcFdpdGhFbGxpcHNpcyA/ICdlbGxpcHNpcycgOiBudWxsLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gIH07XG59O1xuXG5leHBvcnRzLm11bHRpVmFsdWVMYWJlbENTUyA9IG11bHRpVmFsdWVMYWJlbENTUztcblxudmFyIG11bHRpVmFsdWVSZW1vdmVDU1MgPSBmdW5jdGlvbiBtdWx0aVZhbHVlUmVtb3ZlQ1NTKF9yZWYzKSB7XG4gIHZhciBfcmVmMyR0aGVtZSA9IF9yZWYzLnRoZW1lLFxuICAgICAgc3BhY2luZyA9IF9yZWYzJHRoZW1lLnNwYWNpbmcsXG4gICAgICBib3JkZXJSYWRpdXMgPSBfcmVmMyR0aGVtZS5ib3JkZXJSYWRpdXMsXG4gICAgICBjb2xvcnMgPSBfcmVmMyR0aGVtZS5jb2xvcnMsXG4gICAgICBpc0ZvY3VzZWQgPSBfcmVmMy5pc0ZvY3VzZWQ7XG4gIHJldHVybiB7XG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgYm9yZGVyUmFkaXVzOiBib3JkZXJSYWRpdXMgLyAyLFxuICAgIGJhY2tncm91bmRDb2xvcjogaXNGb2N1c2VkICYmIGNvbG9ycy5kYW5nZXJMaWdodCxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcuYmFzZVVuaXQsXG4gICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nLmJhc2VVbml0LFxuICAgICc6aG92ZXInOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5kYW5nZXJMaWdodCxcbiAgICAgIGNvbG9yOiBjb2xvcnMuZGFuZ2VyXG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5tdWx0aVZhbHVlUmVtb3ZlQ1NTID0gbXVsdGlWYWx1ZVJlbW92ZUNTUztcblxudmFyIE11bHRpVmFsdWVHZW5lcmljID0gZnVuY3Rpb24gTXVsdGlWYWx1ZUdlbmVyaWMoX3JlZjQpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZjQuY2hpbGRyZW4sXG4gICAgICBpbm5lclByb3BzID0gX3JlZjQuaW5uZXJQcm9wcztcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgaW5uZXJQcm9wcywgY2hpbGRyZW4pO1xufTtcblxuZXhwb3J0cy5NdWx0aVZhbHVlR2VuZXJpYyA9IE11bHRpVmFsdWVHZW5lcmljO1xudmFyIE11bHRpVmFsdWVDb250YWluZXIgPSBNdWx0aVZhbHVlR2VuZXJpYztcbmV4cG9ydHMuTXVsdGlWYWx1ZUNvbnRhaW5lciA9IE11bHRpVmFsdWVDb250YWluZXI7XG52YXIgTXVsdGlWYWx1ZUxhYmVsID0gTXVsdGlWYWx1ZUdlbmVyaWM7XG5leHBvcnRzLk11bHRpVmFsdWVMYWJlbCA9IE11bHRpVmFsdWVMYWJlbDtcblxudmFyIE11bHRpVmFsdWVSZW1vdmUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE11bHRpVmFsdWVSZW1vdmUsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE11bHRpVmFsdWVSZW1vdmUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE11bHRpVmFsdWVSZW1vdmUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNdWx0aVZhbHVlUmVtb3ZlKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNdWx0aVZhbHVlUmVtb3ZlLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGlubmVyUHJvcHMgPSBfdGhpcyRwcm9wcy5pbm5lclByb3BzO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgaW5uZXJQcm9wcywgY2hpbGRyZW4gfHwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaW5kaWNhdG9ycy5Dcm9zc0ljb24sIHtcbiAgICAgICAgc2l6ZTogMTRcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTXVsdGlWYWx1ZVJlbW92ZTtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuTXVsdGlWYWx1ZVJlbW92ZSA9IE11bHRpVmFsdWVSZW1vdmU7XG5cbnZhciBNdWx0aVZhbHVlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICBfaW5oZXJpdHMoTXVsdGlWYWx1ZSwgX0NvbXBvbmVudDIpO1xuXG4gIGZ1bmN0aW9uIE11bHRpVmFsdWUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE11bHRpVmFsdWUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNdWx0aVZhbHVlKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNdWx0aVZhbHVlLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczIuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgICBjb21wb25lbnRzID0gX3RoaXMkcHJvcHMyLmNvbXBvbmVudHMsXG4gICAgICAgICAgY3ggPSBfdGhpcyRwcm9wczIuY3gsXG4gICAgICAgICAgZGF0YSA9IF90aGlzJHByb3BzMi5kYXRhLFxuICAgICAgICAgIGdldFN0eWxlcyA9IF90aGlzJHByb3BzMi5nZXRTdHlsZXMsXG4gICAgICAgICAgaW5uZXJQcm9wcyA9IF90aGlzJHByb3BzMi5pbm5lclByb3BzLFxuICAgICAgICAgIGlzRGlzYWJsZWQgPSBfdGhpcyRwcm9wczIuaXNEaXNhYmxlZCxcbiAgICAgICAgICByZW1vdmVQcm9wcyA9IF90aGlzJHByb3BzMi5yZW1vdmVQcm9wcyxcbiAgICAgICAgICBzZWxlY3RQcm9wcyA9IF90aGlzJHByb3BzMi5zZWxlY3RQcm9wcztcbiAgICAgIHZhciBDb250YWluZXIgPSBjb21wb25lbnRzLkNvbnRhaW5lcixcbiAgICAgICAgICBMYWJlbCA9IGNvbXBvbmVudHMuTGFiZWwsXG4gICAgICAgICAgUmVtb3ZlID0gY29tcG9uZW50cy5SZW1vdmU7XG5cbiAgICAgIHZhciBjb250YWluZXJJbm5lclByb3BzID0gX29iamVjdFNwcmVhZCh7XG4gICAgICAgIGNsYXNzTmFtZTogY3goXG4gICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgKDAsIF9lbW90aW9uLmNzcykoZ2V0U3R5bGVzKCdtdWx0aVZhbHVlJywgdGhpcy5wcm9wcykpLCB7XG4gICAgICAgICAgJ211bHRpLXZhbHVlJzogdHJ1ZSxcbiAgICAgICAgICAnbXVsdGktdmFsdWUtLWlzLWRpc2FibGVkJzogaXNEaXNhYmxlZFxuICAgICAgICB9LCBjbGFzc05hbWUpXG4gICAgICB9LCBpbm5lclByb3BzKTtcblxuICAgICAgdmFyIGxhYmVsSW5uZXJQcm9wcyA9IHtcbiAgICAgICAgY2xhc3NOYW1lOiBjeChcbiAgICAgICAgLyojX19QVVJFX18qL1xuICAgICAgICAoMCwgX2Vtb3Rpb24uY3NzKShnZXRTdHlsZXMoJ211bHRpVmFsdWVMYWJlbCcsIHRoaXMucHJvcHMpKSwge1xuICAgICAgICAgICdtdWx0aS12YWx1ZV9fbGFiZWwnOiB0cnVlXG4gICAgICAgIH0sIGNsYXNzTmFtZSlcbiAgICAgIH07XG5cbiAgICAgIHZhciByZW1vdmVJbm5lclByb3BzID0gX29iamVjdFNwcmVhZCh7XG4gICAgICAgIGNsYXNzTmFtZTogY3goXG4gICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgKDAsIF9lbW90aW9uLmNzcykoZ2V0U3R5bGVzKCdtdWx0aVZhbHVlUmVtb3ZlJywgdGhpcy5wcm9wcykpLCB7XG4gICAgICAgICAgJ211bHRpLXZhbHVlX19yZW1vdmUnOiB0cnVlXG4gICAgICAgIH0sIGNsYXNzTmFtZSlcbiAgICAgIH0sIHJlbW92ZVByb3BzKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyLCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGlubmVyUHJvcHM6IGNvbnRhaW5lcklubmVyUHJvcHMsXG4gICAgICAgIHNlbGVjdFByb3BzOiBzZWxlY3RQcm9wc1xuICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChMYWJlbCwge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBpbm5lclByb3BzOiBsYWJlbElubmVyUHJvcHMsXG4gICAgICAgIHNlbGVjdFByb3BzOiBzZWxlY3RQcm9wc1xuICAgICAgfSwgY2hpbGRyZW4pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFJlbW92ZSwge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBpbm5lclByb3BzOiByZW1vdmVJbm5lclByb3BzLFxuICAgICAgICBzZWxlY3RQcm9wczogc2VsZWN0UHJvcHNcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTXVsdGlWYWx1ZTtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShNdWx0aVZhbHVlLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNyb3BXaXRoRWxsaXBzaXM6IHRydWVcbn0pO1xuXG52YXIgX2RlZmF1bHQgPSBNdWx0aVZhbHVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLm9wdGlvbkNTUyA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9lbW90aW9uID0gcmVxdWlyZShcImVtb3Rpb25cIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbnZhciBvcHRpb25DU1MgPSBmdW5jdGlvbiBvcHRpb25DU1MoX3JlZikge1xuICB2YXIgaXNEaXNhYmxlZCA9IF9yZWYuaXNEaXNhYmxlZCxcbiAgICAgIGlzRm9jdXNlZCA9IF9yZWYuaXNGb2N1c2VkLFxuICAgICAgaXNTZWxlY3RlZCA9IF9yZWYuaXNTZWxlY3RlZCxcbiAgICAgIF9yZWYkdGhlbWUgPSBfcmVmLnRoZW1lLFxuICAgICAgc3BhY2luZyA9IF9yZWYkdGhlbWUuc3BhY2luZyxcbiAgICAgIGNvbG9ycyA9IF9yZWYkdGhlbWUuY29sb3JzO1xuICByZXR1cm4ge1xuICAgIGxhYmVsOiAnb3B0aW9uJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzU2VsZWN0ZWQgPyBjb2xvcnMucHJpbWFyeSA6IGlzRm9jdXNlZCA/IGNvbG9ycy5wcmltYXJ5MjUgOiAndHJhbnNwYXJlbnQnLFxuICAgIGNvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWwyMCA6IGlzU2VsZWN0ZWQgPyBjb2xvcnMubmV1dHJhbDAgOiAnaW5oZXJpdCcsXG4gICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KHNwYWNpbmcuYmFzZVVuaXQgKiAyLCBcInB4IFwiKS5jb25jYXQoc3BhY2luZy5iYXNlVW5pdCAqIDMsIFwicHhcIiksXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICdyZ2JhKDAsIDAsIDAsIDApJyxcbiAgICAvLyBwcm92aWRlIHNvbWUgYWZmb3JkYW5jZSBvbiB0b3VjaCBkZXZpY2VzXG4gICAgJzphY3RpdmUnOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICFpc0Rpc2FibGVkICYmIChpc1NlbGVjdGVkID8gY29sb3JzLnByaW1hcnkgOiBjb2xvcnMucHJpbWFyeTUwKVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMub3B0aW9uQ1NTID0gb3B0aW9uQ1NTO1xuXG52YXIgT3B0aW9uID0gZnVuY3Rpb24gT3B0aW9uKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlzRGlzYWJsZWQgPSBwcm9wcy5pc0Rpc2FibGVkLFxuICAgICAgaXNGb2N1c2VkID0gcHJvcHMuaXNGb2N1c2VkLFxuICAgICAgaXNTZWxlY3RlZCA9IHByb3BzLmlzU2VsZWN0ZWQsXG4gICAgICBpbm5lclJlZiA9IHByb3BzLmlubmVyUmVmLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgICgwLCBfZW1vdGlvbi5jc3MpKGdldFN0eWxlcygnb3B0aW9uJywgcHJvcHMpKSwge1xuICAgICAgJ29wdGlvbic6IHRydWUsXG4gICAgICAnb3B0aW9uLS1pcy1kaXNhYmxlZCc6IGlzRGlzYWJsZWQsXG4gICAgICAnb3B0aW9uLS1pcy1mb2N1c2VkJzogaXNGb2N1c2VkLFxuICAgICAgJ29wdGlvbi0taXMtc2VsZWN0ZWQnOiBpc1NlbGVjdGVkXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9LCBpbm5lclByb3BzKSwgY2hpbGRyZW4pO1xufTtcblxudmFyIF9kZWZhdWx0ID0gT3B0aW9uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnBsYWNlaG9sZGVyQ1NTID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2Vtb3Rpb24gPSByZXF1aXJlKFwiZW1vdGlvblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxudmFyIHBsYWNlaG9sZGVyQ1NTID0gZnVuY3Rpb24gcGxhY2Vob2xkZXJDU1MoX3JlZikge1xuICB2YXIgX3JlZiR0aGVtZSA9IF9yZWYudGhlbWUsXG4gICAgICBzcGFjaW5nID0gX3JlZiR0aGVtZS5zcGFjaW5nLFxuICAgICAgY29sb3JzID0gX3JlZiR0aGVtZS5jb2xvcnM7XG4gIHJldHVybiB7XG4gICAgbGFiZWw6ICdwbGFjZWhvbGRlcicsXG4gICAgY29sb3I6IGNvbG9ycy5uZXV0cmFsNTAsXG4gICAgbWFyZ2luTGVmdDogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgbWFyZ2luUmlnaHQ6IHNwYWNpbmcuYmFzZVVuaXQgLyAyLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSdcbiAgfTtcbn07XG5cbmV4cG9ydHMucGxhY2Vob2xkZXJDU1MgPSBwbGFjZWhvbGRlckNTUztcblxudmFyIFBsYWNlaG9sZGVyID0gZnVuY3Rpb24gUGxhY2Vob2xkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAoMCwgX2Vtb3Rpb24uY3NzKShnZXRTdHlsZXMoJ3BsYWNlaG9sZGVyJywgcHJvcHMpKSwge1xuICAgICAgJ3BsYWNlaG9sZGVyJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgaW5uZXJQcm9wcyksIGNoaWxkcmVuKTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IFBsYWNlaG9sZGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmNzcyA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9lbW90aW9uID0gcmVxdWlyZShcImVtb3Rpb25cIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbnZhciBjc3MgPSBmdW5jdGlvbiBjc3MoX3JlZikge1xuICB2YXIgaXNEaXNhYmxlZCA9IF9yZWYuaXNEaXNhYmxlZCxcbiAgICAgIF9yZWYkdGhlbWUgPSBfcmVmLnRoZW1lLFxuICAgICAgc3BhY2luZyA9IF9yZWYkdGhlbWUuc3BhY2luZyxcbiAgICAgIGNvbG9ycyA9IF9yZWYkdGhlbWUuY29sb3JzO1xuICByZXR1cm4ge1xuICAgIGxhYmVsOiAnc2luZ2xlVmFsdWUnLFxuICAgIGNvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWw0MCA6IGNvbG9ycy5uZXV0cmFsODAsXG4gICAgbWFyZ2luTGVmdDogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgbWFyZ2luUmlnaHQ6IHNwYWNpbmcuYmFzZVVuaXQgLyAyLFxuICAgIG1heFdpZHRoOiBcImNhbGMoMTAwJSAtIFwiLmNvbmNhdChzcGFjaW5nLmJhc2VVbml0ICogMiwgXCJweClcIiksXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICB0b3A6ICc1MCUnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSknXG4gIH07XG59O1xuXG5leHBvcnRzLmNzcyA9IGNzcztcblxudmFyIFNpbmdsZVZhbHVlID0gZnVuY3Rpb24gU2luZ2xlVmFsdWUocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaXNEaXNhYmxlZCA9IHByb3BzLmlzRGlzYWJsZWQsXG4gICAgICBpbm5lclByb3BzID0gcHJvcHMuaW5uZXJQcm9wcztcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgICgwLCBfZW1vdGlvbi5jc3MpKGdldFN0eWxlcygnc2luZ2xlVmFsdWUnLCBwcm9wcykpLCB7XG4gICAgICAnc2luZ2xlLXZhbHVlJzogdHJ1ZSxcbiAgICAgICdzaW5nbGUtdmFsdWUtLWlzLWRpc2FibGVkJzogaXNEaXNhYmxlZFxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgaW5uZXJQcm9wcyksIGNoaWxkcmVuKTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IFNpbmdsZVZhbHVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHRDb21wb25lbnRzID0gZXhwb3J0cy5jb21wb25lbnRzID0gdm9pZCAwO1xuXG52YXIgX2NvbnRhaW5lcnMgPSByZXF1aXJlKFwiLi9jb250YWluZXJzXCIpO1xuXG52YXIgX2luZGljYXRvcnMgPSByZXF1aXJlKFwiLi9pbmRpY2F0b3JzXCIpO1xuXG52YXIgX0NvbnRyb2wgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NvbnRyb2xcIikpO1xuXG52YXIgX0dyb3VwID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vR3JvdXBcIikpO1xuXG52YXIgX0lucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9JbnB1dFwiKSk7XG5cbnZhciBfTWVudSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL01lbnVcIikpO1xuXG52YXIgX011bHRpVmFsdWUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9NdWx0aVZhbHVlXCIpKTtcblxudmFyIF9PcHRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL09wdGlvblwiKSk7XG5cbnZhciBfUGxhY2Vob2xkZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BsYWNlaG9sZGVyXCIpKTtcblxudmFyIF9TaW5nbGVWYWx1ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2luZ2xlVmFsdWVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIGNvbXBvbmVudHMgPSB7XG4gIENsZWFySW5kaWNhdG9yOiBfaW5kaWNhdG9ycy5DbGVhckluZGljYXRvcixcbiAgQ29udHJvbDogX0NvbnRyb2wuZGVmYXVsdCxcbiAgRHJvcGRvd25JbmRpY2F0b3I6IF9pbmRpY2F0b3JzLkRyb3Bkb3duSW5kaWNhdG9yLFxuICBEb3duQ2hldnJvbjogX2luZGljYXRvcnMuRG93bkNoZXZyb24sXG4gIENyb3NzSWNvbjogX2luZGljYXRvcnMuQ3Jvc3NJY29uLFxuICBHcm91cDogX0dyb3VwLmRlZmF1bHQsXG4gIEdyb3VwSGVhZGluZzogX0dyb3VwLkdyb3VwSGVhZGluZyxcbiAgSW5kaWNhdG9yc0NvbnRhaW5lcjogX2NvbnRhaW5lcnMuSW5kaWNhdG9yc0NvbnRhaW5lcixcbiAgSW5kaWNhdG9yU2VwYXJhdG9yOiBfaW5kaWNhdG9ycy5JbmRpY2F0b3JTZXBhcmF0b3IsXG4gIElucHV0OiBfSW5wdXQuZGVmYXVsdCxcbiAgTG9hZGluZ0luZGljYXRvcjogX2luZGljYXRvcnMuTG9hZGluZ0luZGljYXRvcixcbiAgTWVudTogX01lbnUuZGVmYXVsdCxcbiAgTWVudUxpc3Q6IF9NZW51Lk1lbnVMaXN0LFxuICBNZW51UG9ydGFsOiBfTWVudS5NZW51UG9ydGFsLFxuICBMb2FkaW5nTWVzc2FnZTogX01lbnUuTG9hZGluZ01lc3NhZ2UsXG4gIE5vT3B0aW9uc01lc3NhZ2U6IF9NZW51Lk5vT3B0aW9uc01lc3NhZ2UsXG4gIE11bHRpVmFsdWU6IF9NdWx0aVZhbHVlLmRlZmF1bHQsXG4gIE11bHRpVmFsdWVDb250YWluZXI6IF9NdWx0aVZhbHVlLk11bHRpVmFsdWVDb250YWluZXIsXG4gIE11bHRpVmFsdWVMYWJlbDogX011bHRpVmFsdWUuTXVsdGlWYWx1ZUxhYmVsLFxuICBNdWx0aVZhbHVlUmVtb3ZlOiBfTXVsdGlWYWx1ZS5NdWx0aVZhbHVlUmVtb3ZlLFxuICBPcHRpb246IF9PcHRpb24uZGVmYXVsdCxcbiAgUGxhY2Vob2xkZXI6IF9QbGFjZWhvbGRlci5kZWZhdWx0LFxuICBTZWxlY3RDb250YWluZXI6IF9jb250YWluZXJzLlNlbGVjdENvbnRhaW5lcixcbiAgU2luZ2xlVmFsdWU6IF9TaW5nbGVWYWx1ZS5kZWZhdWx0LFxuICBWYWx1ZUNvbnRhaW5lcjogX2NvbnRhaW5lcnMuVmFsdWVDb250YWluZXJcbn07XG5leHBvcnRzLmNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xuXG52YXIgZGVmYXVsdENvbXBvbmVudHMgPSBmdW5jdGlvbiBkZWZhdWx0Q29tcG9uZW50cyhwcm9wcykge1xuICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgY29tcG9uZW50cywgcHJvcHMuY29tcG9uZW50cyk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHRDb21wb25lbnRzID0gZGVmYXVsdENvbXBvbmVudHM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm1lcmdlU3R5bGVzID0gbWVyZ2VTdHlsZXM7XG5leHBvcnRzLmRlZmF1bHRTdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfY29udGFpbmVycyA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvY29udGFpbmVyc1wiKTtcblxudmFyIF9Db250cm9sID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9Db250cm9sXCIpO1xuXG52YXIgX0dyb3VwID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9Hcm91cFwiKTtcblxudmFyIF9pbmRpY2F0b3JzID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9pbmRpY2F0b3JzXCIpO1xuXG52YXIgX0lucHV0ID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9JbnB1dFwiKTtcblxudmFyIF9QbGFjZWhvbGRlciA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvUGxhY2Vob2xkZXJcIik7XG5cbnZhciBfT3B0aW9uID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9PcHRpb25cIik7XG5cbnZhciBfTWVudSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvTWVudVwiKTtcblxudmFyIF9TaW5nbGVWYWx1ZSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvU2luZ2xlVmFsdWVcIik7XG5cbnZhciBfTXVsdGlWYWx1ZSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvTXVsdGlWYWx1ZVwiKTtcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgZGVmYXVsdFN0eWxlcyA9IHtcbiAgY2xlYXJJbmRpY2F0b3I6IF9pbmRpY2F0b3JzLmNsZWFySW5kaWNhdG9yQ1NTLFxuICBjb250YWluZXI6IF9jb250YWluZXJzLmNvbnRhaW5lckNTUyxcbiAgY29udHJvbDogX0NvbnRyb2wuY3NzLFxuICBkcm9wZG93bkluZGljYXRvcjogX2luZGljYXRvcnMuZHJvcGRvd25JbmRpY2F0b3JDU1MsXG4gIGdyb3VwOiBfR3JvdXAuZ3JvdXBDU1MsXG4gIGdyb3VwSGVhZGluZzogX0dyb3VwLmdyb3VwSGVhZGluZ0NTUyxcbiAgaW5kaWNhdG9yc0NvbnRhaW5lcjogX2NvbnRhaW5lcnMuaW5kaWNhdG9yc0NvbnRhaW5lckNTUyxcbiAgaW5kaWNhdG9yU2VwYXJhdG9yOiBfaW5kaWNhdG9ycy5pbmRpY2F0b3JTZXBhcmF0b3JDU1MsXG4gIGlucHV0OiBfSW5wdXQuaW5wdXRDU1MsXG4gIGxvYWRpbmdJbmRpY2F0b3I6IF9pbmRpY2F0b3JzLmxvYWRpbmdJbmRpY2F0b3JDU1MsXG4gIGxvYWRpbmdNZXNzYWdlOiBfTWVudS5sb2FkaW5nTWVzc2FnZUNTUyxcbiAgbWVudTogX01lbnUubWVudUNTUyxcbiAgbWVudUxpc3Q6IF9NZW51Lm1lbnVMaXN0Q1NTLFxuICBtZW51UG9ydGFsOiBfTWVudS5tZW51UG9ydGFsQ1NTLFxuICBtdWx0aVZhbHVlOiBfTXVsdGlWYWx1ZS5tdWx0aVZhbHVlQ1NTLFxuICBtdWx0aVZhbHVlTGFiZWw6IF9NdWx0aVZhbHVlLm11bHRpVmFsdWVMYWJlbENTUyxcbiAgbXVsdGlWYWx1ZVJlbW92ZTogX011bHRpVmFsdWUubXVsdGlWYWx1ZVJlbW92ZUNTUyxcbiAgbm9PcHRpb25zTWVzc2FnZTogX01lbnUubm9PcHRpb25zTWVzc2FnZUNTUyxcbiAgb3B0aW9uOiBfT3B0aW9uLm9wdGlvbkNTUyxcbiAgcGxhY2Vob2xkZXI6IF9QbGFjZWhvbGRlci5wbGFjZWhvbGRlckNTUyxcbiAgc2luZ2xlVmFsdWU6IF9TaW5nbGVWYWx1ZS5jc3MsXG4gIHZhbHVlQ29udGFpbmVyOiBfY29udGFpbmVycy52YWx1ZUNvbnRhaW5lckNTU1xufTsgLy8gTWVyZ2UgVXRpbGl0eVxuLy8gQWxsb3dzIGNvbnN1bWVycyB0byBleHRlbmQgYSBiYXNlIFNlbGVjdCB3aXRoIGFkZGl0aW9uYWwgc3R5bGVzXG5cbmV4cG9ydHMuZGVmYXVsdFN0eWxlcyA9IGRlZmF1bHRTdHlsZXM7XG5cbmZ1bmN0aW9uIG1lcmdlU3R5bGVzKHNvdXJjZSkge1xuICB2YXIgdGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAvLyBpbml0aWFsaXplIHdpdGggc291cmNlIHN0eWxlc1xuICB2YXIgc3R5bGVzID0gX29iamVjdFNwcmVhZCh7fSwgc291cmNlKTsgLy8gbWFzc2FnZSBpbiB0YXJnZXQgc3R5bGVzXG5cblxuICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChzb3VyY2Vba2V5XSkge1xuICAgICAgc3R5bGVzW2tleV0gPSBmdW5jdGlvbiAocnNDc3MsIHByb3BzKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRba2V5XShzb3VyY2Vba2V5XShyc0NzcywgcHJvcHMpLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNba2V5XSA9IHRhcmdldFtrZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzdHlsZXM7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHRUaGVtZSA9IGV4cG9ydHMuc3BhY2luZyA9IGV4cG9ydHMuY29sb3JzID0gdm9pZCAwO1xudmFyIGNvbG9ycyA9IHtcbiAgcHJpbWFyeTogJyMyNjg0RkYnLFxuICBwcmltYXJ5NzU6ICcjNEM5QUZGJyxcbiAgcHJpbWFyeTUwOiAnI0IyRDRGRicsXG4gIHByaW1hcnkyNTogJyNERUVCRkYnLFxuICBkYW5nZXI6ICcjREUzNTBCJyxcbiAgZGFuZ2VyTGlnaHQ6ICcjRkZCREFEJyxcbiAgbmV1dHJhbDA6ICdoc2woMCwgMCUsIDEwMCUpJyxcbiAgbmV1dHJhbDU6ICdoc2woMCwgMCUsIDk1JSknLFxuICBuZXV0cmFsMTA6ICdoc2woMCwgMCUsIDkwJSknLFxuICBuZXV0cmFsMjA6ICdoc2woMCwgMCUsIDgwJSknLFxuICBuZXV0cmFsMzA6ICdoc2woMCwgMCUsIDcwJSknLFxuICBuZXV0cmFsNDA6ICdoc2woMCwgMCUsIDYwJSknLFxuICBuZXV0cmFsNTA6ICdoc2woMCwgMCUsIDUwJSknLFxuICBuZXV0cmFsNjA6ICdoc2woMCwgMCUsIDQwJSknLFxuICBuZXV0cmFsNzA6ICdoc2woMCwgMCUsIDMwJSknLFxuICBuZXV0cmFsODA6ICdoc2woMCwgMCUsIDIwJSknLFxuICBuZXV0cmFsOTA6ICdoc2woMCwgMCUsIDEwJSknXG59O1xuZXhwb3J0cy5jb2xvcnMgPSBjb2xvcnM7XG52YXIgYm9yZGVyUmFkaXVzID0gNDtcbnZhciBiYXNlVW5pdCA9IDQ7XG4vKiBVc2VkIHRvIGNhbGN1bGF0ZSBjb25zaXN0ZW50IG1hcmdpbi9wYWRkaW5nIG9uIGVsZW1lbnRzICovXG5cbnZhciBjb250cm9sSGVpZ2h0ID0gMzg7XG4vKiBUaGUgbWluaW11bSBoZWlnaHQgb2YgdGhlIGNvbnRyb2wgKi9cblxudmFyIG1lbnVHdXR0ZXIgPSBiYXNlVW5pdCAqIDI7XG4vKiBUaGUgYW1vdW50IG9mIHNwYWNlIGJldHdlZW4gdGhlIGNvbnRyb2wgYW5kIG1lbnUgKi9cblxudmFyIHNwYWNpbmcgPSB7XG4gIGJhc2VVbml0OiBiYXNlVW5pdCxcbiAgY29udHJvbEhlaWdodDogY29udHJvbEhlaWdodCxcbiAgbWVudUd1dHRlcjogbWVudUd1dHRlclxufTtcbmV4cG9ydHMuc3BhY2luZyA9IHNwYWNpbmc7XG52YXIgZGVmYXVsdFRoZW1lID0ge1xuICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgY29sb3JzOiBjb2xvcnMsXG4gIHNwYWNpbmc6IHNwYWNpbmdcbn07XG5leHBvcnRzLmRlZmF1bHRUaGVtZSA9IGRlZmF1bHRUaGVtZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdFByb3BzID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9tZW1vaXplT25lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibWVtb2l6ZS1vbmVcIikpO1xuXG52YXIgX01lbnUgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL01lbnVcIik7XG5cbnZhciBfcmVhY3RGYXN0Q29tcGFyZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaW50ZXJuYWwvcmVhY3QtZmFzdC1jb21wYXJlXCIpKTtcblxudmFyIF9maWx0ZXJzID0gcmVxdWlyZShcIi4vZmlsdGVyc1wiKTtcblxudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuL2ludGVybmFsL2luZGV4XCIpO1xuXG52YXIgX2luZGV4MiA9IHJlcXVpcmUoXCIuL2FjY2Vzc2liaWxpdHkvaW5kZXhcIik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxudmFyIF9idWlsdGlucyA9IHJlcXVpcmUoXCIuL2J1aWx0aW5zXCIpO1xuXG52YXIgX2luZGV4MyA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvaW5kZXhcIik7XG5cbnZhciBfc3R5bGVzID0gcmVxdWlyZShcIi4vc3R5bGVzXCIpO1xuXG52YXIgX3RoZW1lID0gcmVxdWlyZShcIi4vdGhlbWVcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYmFja3NwYWNlUmVtb3Zlc1ZhbHVlOiB0cnVlLFxuICBibHVySW5wdXRPblNlbGVjdDogKDAsIF91dGlscy5pc1RvdWNoQ2FwYWJsZSkoKSxcbiAgY2FwdHVyZU1lbnVTY3JvbGw6ICEoMCwgX3V0aWxzLmlzVG91Y2hDYXBhYmxlKSgpLFxuICBjbG9zZU1lbnVPblNlbGVjdDogdHJ1ZSxcbiAgY2xvc2VNZW51T25TY3JvbGw6IGZhbHNlLFxuICBjb21wb25lbnRzOiB7fSxcbiAgY29udHJvbFNob3VsZFJlbmRlclZhbHVlOiB0cnVlLFxuICBlc2NhcGVDbGVhcnNWYWx1ZTogZmFsc2UsXG4gIGZpbHRlck9wdGlvbjogKDAsIF9maWx0ZXJzLmNyZWF0ZUZpbHRlcikoKSxcbiAgZm9ybWF0R3JvdXBMYWJlbDogX2J1aWx0aW5zLmZvcm1hdEdyb3VwTGFiZWwsXG4gIGdldE9wdGlvbkxhYmVsOiBfYnVpbHRpbnMuZ2V0T3B0aW9uTGFiZWwsXG4gIGdldE9wdGlvblZhbHVlOiBfYnVpbHRpbnMuZ2V0T3B0aW9uVmFsdWUsXG4gIGlzRGlzYWJsZWQ6IGZhbHNlLFxuICBpc0xvYWRpbmc6IGZhbHNlLFxuICBpc011bHRpOiBmYWxzZSxcbiAgaXNSdGw6IGZhbHNlLFxuICBpc1NlYXJjaGFibGU6IHRydWUsXG4gIGlzT3B0aW9uRGlzYWJsZWQ6IF9idWlsdGlucy5pc09wdGlvbkRpc2FibGVkLFxuICBsb2FkaW5nTWVzc2FnZTogZnVuY3Rpb24gbG9hZGluZ01lc3NhZ2UoKSB7XG4gICAgcmV0dXJuICdMb2FkaW5nLi4uJztcbiAgfSxcbiAgbWF4TWVudUhlaWdodDogMzAwLFxuICBtaW5NZW51SGVpZ2h0OiAxNDAsXG4gIG1lbnVJc09wZW46IGZhbHNlLFxuICBtZW51UGxhY2VtZW50OiAnYm90dG9tJyxcbiAgbWVudVBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBtZW51U2hvdWxkQmxvY2tTY3JvbGw6IGZhbHNlLFxuICBtZW51U2hvdWxkU2Nyb2xsSW50b1ZpZXc6ICEoMCwgX3V0aWxzLmlzTW9iaWxlRGV2aWNlKSgpLFxuICBub09wdGlvbnNNZXNzYWdlOiBmdW5jdGlvbiBub09wdGlvbnNNZXNzYWdlKCkge1xuICAgIHJldHVybiAnTm8gb3B0aW9ucyc7XG4gIH0sXG4gIG9wZW5NZW51T25Gb2N1czogZmFsc2UsXG4gIG9wZW5NZW51T25DbGljazogdHJ1ZSxcbiAgb3B0aW9uczogW10sXG4gIHBhZ2VTaXplOiA1LFxuICBwbGFjZWhvbGRlcjogJ1NlbGVjdC4uLicsXG4gIHNjcmVlblJlYWRlclN0YXR1czogZnVuY3Rpb24gc2NyZWVuUmVhZGVyU3RhdHVzKF9yZWYpIHtcbiAgICB2YXIgY291bnQgPSBfcmVmLmNvdW50O1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChjb3VudCwgXCIgcmVzdWx0XCIpLmNvbmNhdChjb3VudCAhPT0gMSA/ICdzJyA6ICcnLCBcIiBhdmFpbGFibGVcIik7XG4gIH0sXG4gIHN0eWxlczoge30sXG4gIHRhYkluZGV4OiAnMCcsXG4gIHRhYlNlbGVjdHNWYWx1ZTogdHJ1ZVxufTtcbmV4cG9ydHMuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xudmFyIGluc3RhbmNlSWQgPSAxO1xuXG52YXIgU2VsZWN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTZWxlY3QsIF9Db21wb25lbnQpO1xuXG4gIC8vIE1pc2MuIEluc3RhbmNlIFByb3BlcnRpZXNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFRPRE9cbiAgLy8gUmVmc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gTGlmZWN5Y2xlXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBmdW5jdGlvbiBTZWxlY3QoX3Byb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlbGVjdCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTZWxlY3QpLmNhbGwodGhpcywgX3Byb3BzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic3RhdGVcIiwge1xuICAgICAgYXJpYUxpdmVTZWxlY3Rpb246ICcnLFxuICAgICAgYXJpYUxpdmVDb250ZXh0OiAnJyxcbiAgICAgIGZvY3VzZWRPcHRpb246IG51bGwsXG4gICAgICBmb2N1c2VkVmFsdWU6IG51bGwsXG4gICAgICBpbnB1dElzSGlkZGVuOiBmYWxzZSxcbiAgICAgIGlzRm9jdXNlZDogZmFsc2UsXG4gICAgICBtZW51T3B0aW9uczoge1xuICAgICAgICByZW5kZXI6IFtdLFxuICAgICAgICBmb2N1c2FibGU6IFtdXG4gICAgICB9LFxuICAgICAgc2VsZWN0VmFsdWU6IFtdXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiYmxvY2tPcHRpb25Ib3ZlclwiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaXNDb21wb3NpbmdcIiwgZmFsc2UpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImNsZWFyRm9jdXNWYWx1ZU9uVXBkYXRlXCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJjb21tb25Qcm9wc1wiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImNvbXBvbmVudHNcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJoYXNHcm91cHNcIiwgZmFsc2UpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImluaXRpYWxUb3VjaFhcIiwgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaW5pdGlhbFRvdWNoWVwiLCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJpbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGVcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJpbnN0YW5jZVByZWZpeFwiLCAnJyk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib3BlbkFmdGVyRm9jdXNcIiwgZmFsc2UpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInNjcm9sbFRvRm9jdXNlZE9wdGlvbk9uVXBkYXRlXCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJ1c2VySXNEcmFnZ2luZ1wiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImNvbnRyb2xSZWZcIiwgbnVsbCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0Q29udHJvbFJlZlwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5jb250cm9sUmVmID0gcmVmO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImZvY3VzZWRPcHRpb25SZWZcIiwgbnVsbCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0Rm9jdXNlZE9wdGlvblJlZlwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5mb2N1c2VkT3B0aW9uUmVmID0gcmVmO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm1lbnVMaXN0UmVmXCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldE1lbnVMaXN0UmVmXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLm1lbnVMaXN0UmVmID0gcmVmO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImlucHV0UmVmXCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldElucHV0UmVmXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLmlucHV0UmVmID0gcmVmO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImNhY2hlQ29tcG9uZW50c1wiLCBmdW5jdGlvbiAoY29tcG9uZW50cykge1xuICAgICAgX3RoaXMuY29tcG9uZW50cyA9ICgwLCBfaW5kZXgzLmRlZmF1bHRDb21wb25lbnRzKSh7XG4gICAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHNcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImZvY3VzXCIsIF90aGlzLmZvY3VzSW5wdXQpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImJsdXJcIiwgX3RoaXMuYmx1cklucHV0KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkNoYW5nZVwiLCBmdW5jdGlvbiAobmV3VmFsdWUsIGFjdGlvbk1ldGEpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3RoaXMkcHJvcHMub25DaGFuZ2UsXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzLm5hbWU7XG4gICAgICBvbkNoYW5nZShuZXdWYWx1ZSwgX29iamVjdFNwcmVhZCh7fSwgYWN0aW9uTWV0YSwge1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9KSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2V0VmFsdWVcIiwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnc2V0LXZhbHVlJztcbiAgICAgIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbG9zZU1lbnVPblNlbGVjdCA9IF90aGlzJHByb3BzMi5jbG9zZU1lbnVPblNlbGVjdCxcbiAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHMyLmlzTXVsdGk7XG5cbiAgICAgIF90aGlzLm9uSW5wdXRDaGFuZ2UoJycsIHtcbiAgICAgICAgYWN0aW9uOiAnc2V0LXZhbHVlJ1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjbG9zZU1lbnVPblNlbGVjdCkge1xuICAgICAgICBfdGhpcy5pbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGUgPSAhaXNNdWx0aTtcblxuICAgICAgICBfdGhpcy5vbk1lbnVDbG9zZSgpO1xuICAgICAgfSAvLyB3aGVuIHRoZSBzZWxlY3QgdmFsdWUgc2hvdWxkIGNoYW5nZSwgd2Ugc2hvdWxkIHJlc2V0IGZvY3VzZWRWYWx1ZVxuXG5cbiAgICAgIF90aGlzLmNsZWFyRm9jdXNWYWx1ZU9uVXBkYXRlID0gdHJ1ZTtcblxuICAgICAgX3RoaXMub25DaGFuZ2UobmV3VmFsdWUsIHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIG9wdGlvbjogb3B0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzZWxlY3RPcHRpb25cIiwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmx1cklucHV0T25TZWxlY3QgPSBfdGhpcyRwcm9wczMuYmx1cklucHV0T25TZWxlY3QsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzMy5pc011bHRpO1xuICAgICAgdmFyIHNlbGVjdFZhbHVlID0gX3RoaXMuc3RhdGUuc2VsZWN0VmFsdWU7XG5cbiAgICAgIGlmIChpc011bHRpKSB7XG4gICAgICAgIGlmIChfdGhpcy5pc09wdGlvblNlbGVjdGVkKG5ld1ZhbHVlLCBzZWxlY3RWYWx1ZSkpIHtcbiAgICAgICAgICB2YXIgY2FuZGlkYXRlID0gX3RoaXMuZ2V0T3B0aW9uVmFsdWUobmV3VmFsdWUpO1xuXG4gICAgICAgICAgX3RoaXMuc2V0VmFsdWUoc2VsZWN0VmFsdWUuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0T3B0aW9uVmFsdWUoaSkgIT09IGNhbmRpZGF0ZTtcbiAgICAgICAgICB9KSwgJ2Rlc2VsZWN0LW9wdGlvbicsIG5ld1ZhbHVlKTtcblxuICAgICAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICAgICAgZXZlbnQ6ICdkZXNlbGVjdC1vcHRpb24nLFxuICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuZ2V0T3B0aW9uTGFiZWwobmV3VmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFfdGhpcy5pc09wdGlvbkRpc2FibGVkKG5ld1ZhbHVlLCBzZWxlY3RWYWx1ZSkpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFZhbHVlKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc2VsZWN0VmFsdWUpLCBbbmV3VmFsdWVdKSwgJ3NlbGVjdC1vcHRpb24nLCBuZXdWYWx1ZSk7XG5cbiAgICAgICAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICAgICAgICBldmVudDogJ3NlbGVjdC1vcHRpb24nLFxuICAgICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmdldE9wdGlvbkxhYmVsKG5ld1ZhbHVlKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYW5ub3VuY2UgdGhhdCBvcHRpb24gaXMgZGlzYWJsZWRcbiAgICAgICAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICAgICAgICBldmVudDogJ3NlbGVjdC1vcHRpb24nLFxuICAgICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmdldE9wdGlvbkxhYmVsKG5ld1ZhbHVlKSxcbiAgICAgICAgICAgICAgICBpc0Rpc2FibGVkOiB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFfdGhpcy5pc09wdGlvbkRpc2FibGVkKG5ld1ZhbHVlLCBzZWxlY3RWYWx1ZSkpIHtcbiAgICAgICAgICBfdGhpcy5zZXRWYWx1ZShuZXdWYWx1ZSwgJ3NlbGVjdC1vcHRpb24nKTtcblxuICAgICAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICAgICAgZXZlbnQ6ICdzZWxlY3Qtb3B0aW9uJyxcbiAgICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmdldE9wdGlvbkxhYmVsKG5ld1ZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGFubm91bmNlIHRoYXQgb3B0aW9uIGlzIGRpc2FibGVkXG4gICAgICAgICAgX3RoaXMuYW5ub3VuY2VBcmlhTGl2ZVNlbGVjdGlvbih7XG4gICAgICAgICAgICBldmVudDogJ3NlbGVjdC1vcHRpb24nLFxuICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuZ2V0T3B0aW9uTGFiZWwobmV3VmFsdWUpLFxuICAgICAgICAgICAgICBpc0Rpc2FibGVkOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGJsdXJJbnB1dE9uU2VsZWN0KSB7XG4gICAgICAgIF90aGlzLmJsdXJJbnB1dCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInJlbW92ZVZhbHVlXCIsIGZ1bmN0aW9uIChyZW1vdmVkVmFsdWUpIHtcbiAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IF90aGlzLnN0YXRlLnNlbGVjdFZhbHVlO1xuXG4gICAgICB2YXIgY2FuZGlkYXRlID0gX3RoaXMuZ2V0T3B0aW9uVmFsdWUocmVtb3ZlZFZhbHVlKTtcblxuICAgICAgX3RoaXMub25DaGFuZ2Uoc2VsZWN0VmFsdWUuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5nZXRPcHRpb25WYWx1ZShpKSAhPT0gY2FuZGlkYXRlO1xuICAgICAgfSksIHtcbiAgICAgICAgYWN0aW9uOiAncmVtb3ZlLXZhbHVlJyxcbiAgICAgICAgcmVtb3ZlZFZhbHVlOiByZW1vdmVkVmFsdWVcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5hbm5vdW5jZUFyaWFMaXZlU2VsZWN0aW9uKHtcbiAgICAgICAgZXZlbnQ6ICdyZW1vdmUtdmFsdWUnLFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgdmFsdWU6IHJlbW92ZWRWYWx1ZSA/IF90aGlzLmdldE9wdGlvbkxhYmVsKHJlbW92ZWRWYWx1ZSkgOiAnJ1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMuZm9jdXNJbnB1dCgpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImNsZWFyVmFsdWVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlzTXVsdGkgPSBfdGhpcy5wcm9wcy5pc011bHRpO1xuXG4gICAgICBfdGhpcy5vbkNoYW5nZShpc011bHRpID8gW10gOiBudWxsLCB7XG4gICAgICAgIGFjdGlvbjogJ2NsZWFyJ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwicG9wVmFsdWVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGVjdFZhbHVlID0gX3RoaXMuc3RhdGUuc2VsZWN0VmFsdWU7XG4gICAgICB2YXIgbGFzdFNlbGVjdGVkVmFsdWUgPSBzZWxlY3RWYWx1ZVtzZWxlY3RWYWx1ZS5sZW5ndGggLSAxXTtcblxuICAgICAgX3RoaXMuYW5ub3VuY2VBcmlhTGl2ZVNlbGVjdGlvbih7XG4gICAgICAgIGV2ZW50OiAncG9wLXZhbHVlJyxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIHZhbHVlOiBsYXN0U2VsZWN0ZWRWYWx1ZSA/IF90aGlzLmdldE9wdGlvbkxhYmVsKGxhc3RTZWxlY3RlZFZhbHVlKSA6ICcnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5vbkNoYW5nZShzZWxlY3RWYWx1ZS5zbGljZSgwLCBzZWxlY3RWYWx1ZS5sZW5ndGggLSAxKSwge1xuICAgICAgICBhY3Rpb246ICdwb3AtdmFsdWUnLFxuICAgICAgICByZW1vdmVkVmFsdWU6IGxhc3RTZWxlY3RlZFZhbHVlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRPcHRpb25MYWJlbFwiLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmdldE9wdGlvbkxhYmVsKGRhdGEpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldE9wdGlvblZhbHVlXCIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuZ2V0T3B0aW9uVmFsdWUoZGF0YSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0U3R5bGVzXCIsIGZ1bmN0aW9uIChrZXksIHByb3BzKSB7XG4gICAgICB2YXIgYmFzZSA9IF9zdHlsZXMuZGVmYXVsdFN0eWxlc1trZXldKHByb3BzKTtcblxuICAgICAgYmFzZS5ib3hTaXppbmcgPSAnYm9yZGVyLWJveCc7XG4gICAgICB2YXIgY3VzdG9tID0gX3RoaXMucHJvcHMuc3R5bGVzW2tleV07XG4gICAgICByZXR1cm4gY3VzdG9tID8gY3VzdG9tKGJhc2UsIHByb3BzKSA6IGJhc2U7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0RWxlbWVudElkXCIsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoX3RoaXMuaW5zdGFuY2VQcmVmaXgsIFwiLVwiKS5jb25jYXQoZWxlbWVudCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0QWN0aXZlRGVzY2VuZGVudElkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBtZW51SXNPcGVuID0gX3RoaXMucHJvcHMubWVudUlzT3BlbjtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIG1lbnVPcHRpb25zID0gX3RoaXMkc3RhdGUubWVudU9wdGlvbnMsXG4gICAgICAgICAgZm9jdXNlZE9wdGlvbiA9IF90aGlzJHN0YXRlLmZvY3VzZWRPcHRpb247XG4gICAgICBpZiAoIWZvY3VzZWRPcHRpb24gfHwgIW1lbnVJc09wZW4pIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB2YXIgaW5kZXggPSBtZW51T3B0aW9ucy5mb2N1c2FibGUuaW5kZXhPZihmb2N1c2VkT3B0aW9uKTtcbiAgICAgIHZhciBvcHRpb24gPSBtZW51T3B0aW9ucy5yZW5kZXJbaW5kZXhdO1xuICAgICAgcmV0dXJuIG9wdGlvbiAmJiBvcHRpb24ua2V5O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb25cIiwgZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgZXZlbnQgPSBfcmVmMi5ldmVudCxcbiAgICAgICAgICBjb250ZXh0ID0gX3JlZjIuY29udGV4dDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhcmlhTGl2ZVNlbGVjdGlvbjogKDAsIF9pbmRleDIudmFsdWVFdmVudEFyaWFNZXNzYWdlKShldmVudCwgY29udGV4dClcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImFubm91bmNlQXJpYUxpdmVDb250ZXh0XCIsIGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgdmFyIGV2ZW50ID0gX3JlZjMuZXZlbnQsXG4gICAgICAgICAgY29udGV4dCA9IF9yZWYzLmNvbnRleHQ7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYXJpYUxpdmVDb250ZXh0OiAoMCwgX2luZGV4Mi5pbnN0cnVjdGlvbnNBcmlhTWVzc2FnZSkoZXZlbnQsIF9vYmplY3RTcHJlYWQoe30sIGNvbnRleHQsIHtcbiAgICAgICAgICBsYWJlbDogX3RoaXMucHJvcHNbJ2FyaWEtbGFiZWwnXVxuICAgICAgICB9KSlcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uTWVudU1vdXNlRG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIF90aGlzLmZvY3VzSW5wdXQoKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbk1lbnVNb3VzZU1vdmVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5ibG9ja09wdGlvbkhvdmVyID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Db250cm9sTW91c2VEb3duXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9wZW5NZW51T25DbGljayA9IF90aGlzLnByb3BzLm9wZW5NZW51T25DbGljaztcblxuICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5pc0ZvY3VzZWQpIHtcbiAgICAgICAgaWYgKG9wZW5NZW51T25DbGljaykge1xuICAgICAgICAgIF90aGlzLm9wZW5BZnRlckZvY3VzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLmZvY3VzSW5wdXQoKTtcbiAgICAgIH0gZWxzZSBpZiAoIV90aGlzLnByb3BzLm1lbnVJc09wZW4pIHtcbiAgICAgICAgaWYgKG9wZW5NZW51T25DbGljaykge1xuICAgICAgICAgIF90aGlzLm9wZW5NZW51KCdmaXJzdCcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyRGbG93Rml4TWVcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC50YWdOYW1lICE9PSAnSU5QVVQnKSB7XG4gICAgICAgICAgX3RoaXMub25NZW51Q2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyRGbG93Rml4TWVcblxuXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUgIT09ICdJTlBVVCcpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkRyb3Bkb3duSW5kaWNhdG9yTW91c2VEb3duXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gaWdub3JlIG1vdXNlIGV2ZW50cyB0aGF0IHdlcmVuJ3QgdHJpZ2dlcmVkIGJ5IHRoZSBwcmltYXJ5IGJ1dHRvblxuICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5pc0Rpc2FibGVkKSByZXR1cm47XG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzNC5pc011bHRpLFxuICAgICAgICAgIG1lbnVJc09wZW4gPSBfdGhpcyRwcm9wczQubWVudUlzT3BlbjtcblxuICAgICAgX3RoaXMuZm9jdXNJbnB1dCgpO1xuXG4gICAgICBpZiAobWVudUlzT3Blbikge1xuICAgICAgICBfdGhpcy5pbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGUgPSAhaXNNdWx0aTtcblxuICAgICAgICBfdGhpcy5vbk1lbnVDbG9zZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMub3Blbk1lbnUoJ2ZpcnN0Jyk7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkNsZWFySW5kaWNhdG9yTW91c2VEb3duXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gaWdub3JlIG1vdXNlIGV2ZW50cyB0aGF0IHdlcmVuJ3QgdHJpZ2dlcmVkIGJ5IHRoZSBwcmltYXJ5IGJ1dHRvblxuICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmNsZWFyVmFsdWUoKTtcblxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBfdGhpcy5vcGVuQWZ0ZXJGb2N1cyA9IGZhbHNlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5mb2N1c0lucHV0KCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvblNjcm9sbFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgX3RoaXMucHJvcHMuY2xvc2VNZW51T25TY3JvbGwgPT09ICdib29sZWFuJykge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgKDAsIF91dGlscy5pc0RvY3VtZW50RWxlbWVudCkoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uTWVudUNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGlzLnByb3BzLmNsb3NlTWVudU9uU2Nyb2xsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5jbG9zZU1lbnVPblNjcm9sbChldmVudCkpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbk1lbnVDbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Db21wb3NpdGlvblN0YXJ0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmlzQ29tcG9zaW5nID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkNvbXBvc2l0aW9uRW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmlzQ29tcG9zaW5nID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Ub3VjaFN0YXJ0XCIsIGZ1bmN0aW9uIChfcmVmNCkge1xuICAgICAgdmFyIHRvdWNoZXMgPSBfcmVmNC50b3VjaGVzO1xuICAgICAgdmFyIHRvdWNoID0gdG91Y2hlcy5pdGVtKDApO1xuXG4gICAgICBpZiAoIXRvdWNoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaW5pdGlhbFRvdWNoWCA9IHRvdWNoLmNsaWVudFg7XG4gICAgICBfdGhpcy5pbml0aWFsVG91Y2hZID0gdG91Y2guY2xpZW50WTtcbiAgICAgIF90aGlzLnVzZXJJc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Ub3VjaE1vdmVcIiwgZnVuY3Rpb24gKF9yZWY1KSB7XG4gICAgICB2YXIgdG91Y2hlcyA9IF9yZWY1LnRvdWNoZXM7XG4gICAgICB2YXIgdG91Y2ggPSB0b3VjaGVzLml0ZW0oMCk7XG5cbiAgICAgIGlmICghdG91Y2gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVsdGFYID0gTWF0aC5hYnModG91Y2guY2xpZW50WCAtIF90aGlzLmluaXRpYWxUb3VjaFgpO1xuICAgICAgdmFyIGRlbHRhWSA9IE1hdGguYWJzKHRvdWNoLmNsaWVudFkgLSBfdGhpcy5pbml0aWFsVG91Y2hZKTtcbiAgICAgIHZhciBtb3ZlVGhyZXNob2xkID0gNTtcbiAgICAgIF90aGlzLnVzZXJJc0RyYWdnaW5nID0gZGVsdGFYID4gbW92ZVRocmVzaG9sZCB8fCBkZWx0YVkgPiBtb3ZlVGhyZXNob2xkO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uVG91Y2hFbmRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMudXNlcklzRHJhZ2dpbmcpIHJldHVybjsgLy8gY2xvc2UgdGhlIG1lbnUgaWYgdGhlIHVzZXIgdGFwcyBvdXRzaWRlXG4gICAgICAvLyB3ZSdyZSBjaGVja2luZyBvbiBldmVudC50YXJnZXQgaGVyZSBpbnN0ZWFkIG9mIGV2ZW50LmN1cnJlbnRUYXJnZXQsIGJlY2F1c2Ugd2Ugd2FudCB0byBhc3NlcnQgaW5mb3JtYXRpb25cbiAgICAgIC8vIG9uIGV2ZW50cyBvbiBjaGlsZCBlbGVtZW50cywgbm90IHRoZSBkb2N1bWVudCAod2hpY2ggd2UndmUgYXR0YWNoZWQgdGhpcyBoYW5kbGVyIHRvKS5cblxuICAgICAgaWYgKF90aGlzLmNvbnRyb2xSZWYgJiYgIV90aGlzLmNvbnRyb2xSZWYuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiBfdGhpcy5tZW51TGlzdFJlZiAmJiAhX3RoaXMubWVudUxpc3RSZWYuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICBfdGhpcy5ibHVySW5wdXQoKTtcbiAgICAgIH0gLy8gcmVzZXQgbW92ZSB2YXJzXG5cblxuICAgICAgX3RoaXMuaW5pdGlhbFRvdWNoWCA9IDA7XG4gICAgICBfdGhpcy5pbml0aWFsVG91Y2hZID0gMDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkNvbnRyb2xUb3VjaEVuZFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy51c2VySXNEcmFnZ2luZykgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5vbkNvbnRyb2xNb3VzZURvd24oZXZlbnQpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uQ2xlYXJJbmRpY2F0b3JUb3VjaEVuZFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy51c2VySXNEcmFnZ2luZykgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5vbkNsZWFySW5kaWNhdG9yTW91c2VEb3duKGV2ZW50KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkRyb3Bkb3duSW5kaWNhdG9yVG91Y2hFbmRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMudXNlcklzRHJhZ2dpbmcpIHJldHVybjtcblxuICAgICAgX3RoaXMub25Ecm9wZG93bkluZGljYXRvck1vdXNlRG93bihldmVudCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaGFuZGxlSW5wdXRDaGFuZ2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgaW5wdXRWYWx1ZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWU7XG4gICAgICBfdGhpcy5pbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgX3RoaXMub25JbnB1dENoYW5nZShpbnB1dFZhbHVlLCB7XG4gICAgICAgIGFjdGlvbjogJ2lucHV0LWNoYW5nZSdcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5vbk1lbnVPcGVuKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25JbnB1dEZvY3VzXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNSA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGlzU2VhcmNoYWJsZSA9IF90aGlzJHByb3BzNS5pc1NlYXJjaGFibGUsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzNS5pc011bHRpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Gb2N1cykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVDb250ZXh0KHtcbiAgICAgICAgZXZlbnQ6ICdpbnB1dCcsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICBpc1NlYXJjaGFibGU6IGlzU2VhcmNoYWJsZSxcbiAgICAgICAgICBpc011bHRpOiBpc011bHRpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzRm9jdXNlZDogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChfdGhpcy5vcGVuQWZ0ZXJGb2N1cyB8fCBfdGhpcy5wcm9wcy5vcGVuTWVudU9uRm9jdXMpIHtcbiAgICAgICAgX3RoaXMub3Blbk1lbnUoJ2ZpcnN0Jyk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLm9wZW5BZnRlckZvY3VzID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25JbnB1dEJsdXJcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMubWVudUxpc3RSZWYgJiYgX3RoaXMubWVudUxpc3RSZWYuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgX3RoaXMuaW5wdXRSZWYuZm9jdXMoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkJsdXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25CbHVyKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMub25JbnB1dENoYW5nZSgnJywge1xuICAgICAgICBhY3Rpb246ICdpbnB1dC1ibHVyJ1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLm9uTWVudUNsb3NlKCk7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZFZhbHVlOiBudWxsLFxuICAgICAgICBpc0ZvY3VzZWQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbk9wdGlvbkhvdmVyXCIsIGZ1bmN0aW9uIChmb2N1c2VkT3B0aW9uKSB7XG4gICAgICBpZiAoX3RoaXMuYmxvY2tPcHRpb25Ib3ZlciB8fCBfdGhpcy5zdGF0ZS5mb2N1c2VkT3B0aW9uID09PSBmb2N1c2VkT3B0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkT3B0aW9uOiBmb2N1c2VkT3B0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzaG91bGRIaWRlU2VsZWN0ZWRPcHRpb25zXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczYgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBoaWRlU2VsZWN0ZWRPcHRpb25zID0gX3RoaXMkcHJvcHM2LmhpZGVTZWxlY3RlZE9wdGlvbnMsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzNi5pc011bHRpO1xuICAgICAgaWYgKGhpZGVTZWxlY3RlZE9wdGlvbnMgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGlzTXVsdGk7XG4gICAgICByZXR1cm4gaGlkZVNlbGVjdGVkT3B0aW9ucztcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbktleURvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM3ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzNy5pc011bHRpLFxuICAgICAgICAgIGJhY2tzcGFjZVJlbW92ZXNWYWx1ZSA9IF90aGlzJHByb3BzNy5iYWNrc3BhY2VSZW1vdmVzVmFsdWUsXG4gICAgICAgICAgZXNjYXBlQ2xlYXJzVmFsdWUgPSBfdGhpcyRwcm9wczcuZXNjYXBlQ2xlYXJzVmFsdWUsXG4gICAgICAgICAgaW5wdXRWYWx1ZSA9IF90aGlzJHByb3BzNy5pbnB1dFZhbHVlLFxuICAgICAgICAgIGlzQ2xlYXJhYmxlID0gX3RoaXMkcHJvcHM3LmlzQ2xlYXJhYmxlLFxuICAgICAgICAgIGlzRGlzYWJsZWQgPSBfdGhpcyRwcm9wczcuaXNEaXNhYmxlZCxcbiAgICAgICAgICBtZW51SXNPcGVuID0gX3RoaXMkcHJvcHM3Lm1lbnVJc09wZW4sXG4gICAgICAgICAgb25LZXlEb3duID0gX3RoaXMkcHJvcHM3Lm9uS2V5RG93bixcbiAgICAgICAgICB0YWJTZWxlY3RzVmFsdWUgPSBfdGhpcyRwcm9wczcudGFiU2VsZWN0c1ZhbHVlLFxuICAgICAgICAgIG9wZW5NZW51T25Gb2N1cyA9IF90aGlzJHByb3BzNy5vcGVuTWVudU9uRm9jdXM7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUyID0gX3RoaXMuc3RhdGUsXG4gICAgICAgICAgZm9jdXNlZE9wdGlvbiA9IF90aGlzJHN0YXRlMi5mb2N1c2VkT3B0aW9uLFxuICAgICAgICAgIGZvY3VzZWRWYWx1ZSA9IF90aGlzJHN0YXRlMi5mb2N1c2VkVmFsdWUsXG4gICAgICAgICAgc2VsZWN0VmFsdWUgPSBfdGhpcyRzdGF0ZTIuc2VsZWN0VmFsdWU7XG4gICAgICBpZiAoaXNEaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICBpZiAodHlwZW9mIG9uS2V5RG93biA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvbktleURvd24oZXZlbnQpO1xuXG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IC8vIEJsb2NrIG9wdGlvbiBob3ZlciBldmVudHMgd2hlbiB0aGUgdXNlciBoYXMganVzdCBwcmVzc2VkIGEga2V5XG5cblxuICAgICAgX3RoaXMuYmxvY2tPcHRpb25Ib3ZlciA9IHRydWU7XG5cbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgICAgaWYgKCFpc011bHRpIHx8IGlucHV0VmFsdWUpIHJldHVybjtcblxuICAgICAgICAgIF90aGlzLmZvY3VzVmFsdWUoJ3ByZXZpb3VzJyk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgICBpZiAoIWlzTXVsdGkgfHwgaW5wdXRWYWx1ZSkgcmV0dXJuO1xuXG4gICAgICAgICAgX3RoaXMuZm9jdXNWYWx1ZSgnbmV4dCcpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnRGVsZXRlJzpcbiAgICAgICAgY2FzZSAnQmFja3NwYWNlJzpcbiAgICAgICAgICBpZiAoaW5wdXRWYWx1ZSkgcmV0dXJuO1xuXG4gICAgICAgICAgaWYgKGZvY3VzZWRWYWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMucmVtb3ZlVmFsdWUoZm9jdXNlZFZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFiYWNrc3BhY2VSZW1vdmVzVmFsdWUpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKGlzTXVsdGkpIHtcbiAgICAgICAgICAgICAgX3RoaXMucG9wVmFsdWUoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNDbGVhcmFibGUpIHtcbiAgICAgICAgICAgICAgX3RoaXMuY2xlYXJWYWx1ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ1RhYic6XG4gICAgICAgICAgaWYgKF90aGlzLmlzQ29tcG9zaW5nKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkgfHwgIW1lbnVJc09wZW4gfHwgIXRhYlNlbGVjdHNWYWx1ZSB8fCAhZm9jdXNlZE9wdGlvbiB8fCAvLyBkb24ndCBjYXB0dXJlIHRoZSBldmVudCBpZiB0aGUgbWVudSBvcGVucyBvbiBmb2N1cyBhbmQgdGhlIGZvY3VzZWRcbiAgICAgICAgICAvLyBvcHRpb24gaXMgYWxyZWFkeSBzZWxlY3RlZDsgaXQgYnJlYWtzIHRoZSBmbG93IG9mIG5hdmlnYXRpb25cbiAgICAgICAgICBvcGVuTWVudU9uRm9jdXMgJiYgX3RoaXMuaXNPcHRpb25TZWxlY3RlZChmb2N1c2VkT3B0aW9uLCBzZWxlY3RWYWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpcy5zZWxlY3RPcHRpb24oZm9jdXNlZE9wdGlvbik7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDIyOSkge1xuICAgICAgICAgICAgLy8gaWdub3JlIHRoZSBrZXlkb3duIGV2ZW50IGZyb20gYW4gSW5wdXQgTWV0aG9kIEVkaXRvcihJTUUpXG4gICAgICAgICAgICAvLyByZWYuIGh0dHBzOi8vd3d3LnczLm9yZy9UUi91aWV2ZW50cy8jZGV0ZXJtaW5lLWtleWRvd24ta2V5dXAta2V5Q29kZVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG1lbnVJc09wZW4pIHtcbiAgICAgICAgICAgIGlmICghZm9jdXNlZE9wdGlvbikgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKF90aGlzLmlzQ29tcG9zaW5nKSByZXR1cm47XG5cbiAgICAgICAgICAgIF90aGlzLnNlbGVjdE9wdGlvbihmb2N1c2VkT3B0aW9uKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgICAgaWYgKG1lbnVJc09wZW4pIHtcbiAgICAgICAgICAgIF90aGlzLmlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBfdGhpcy5vbklucHV0Q2hhbmdlKCcnLCB7XG4gICAgICAgICAgICAgIGFjdGlvbjogJ21lbnUtY2xvc2UnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgX3RoaXMub25NZW51Q2xvc2UoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzQ2xlYXJhYmxlICYmIGVzY2FwZUNsZWFyc1ZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpcy5jbGVhclZhbHVlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnICc6XG4gICAgICAgICAgLy8gc3BhY2VcbiAgICAgICAgICBpZiAoaW5wdXRWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghbWVudUlzT3Blbikge1xuICAgICAgICAgICAgX3RoaXMub3Blbk1lbnUoJ2ZpcnN0Jyk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZm9jdXNlZE9wdGlvbikgcmV0dXJuO1xuXG4gICAgICAgICAgX3RoaXMuc2VsZWN0T3B0aW9uKGZvY3VzZWRPcHRpb24pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgaWYgKG1lbnVJc09wZW4pIHtcbiAgICAgICAgICAgIF90aGlzLmZvY3VzT3B0aW9uKCd1cCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5vcGVuTWVudSgnbGFzdCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgICAgaWYgKG1lbnVJc09wZW4pIHtcbiAgICAgICAgICAgIF90aGlzLmZvY3VzT3B0aW9uKCdkb3duJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLm9wZW5NZW51KCdmaXJzdCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ1BhZ2VVcCc6XG4gICAgICAgICAgaWYgKCFtZW51SXNPcGVuKSByZXR1cm47XG5cbiAgICAgICAgICBfdGhpcy5mb2N1c09wdGlvbigncGFnZXVwJyk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdQYWdlRG93bic6XG4gICAgICAgICAgaWYgKCFtZW51SXNPcGVuKSByZXR1cm47XG5cbiAgICAgICAgICBfdGhpcy5mb2N1c09wdGlvbigncGFnZWRvd24nKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0hvbWUnOlxuICAgICAgICAgIGlmICghbWVudUlzT3BlbikgcmV0dXJuO1xuXG4gICAgICAgICAgX3RoaXMuZm9jdXNPcHRpb24oJ2ZpcnN0Jyk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdFbmQnOlxuICAgICAgICAgIGlmICghbWVudUlzT3BlbikgcmV0dXJuO1xuXG4gICAgICAgICAgX3RoaXMuZm9jdXNPcHRpb24oJ2xhc3QnKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgdmFyIHZhbHVlID0gX3Byb3BzLnZhbHVlO1xuICAgIF90aGlzLmNhY2hlQ29tcG9uZW50cyA9ICgwLCBfbWVtb2l6ZU9uZS5kZWZhdWx0KShfdGhpcy5jYWNoZUNvbXBvbmVudHMsIF9yZWFjdEZhc3RDb21wYXJlLmRlZmF1bHQpLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuXG4gICAgX3RoaXMuY2FjaGVDb21wb25lbnRzKF9wcm9wcy5jb21wb25lbnRzKTtcblxuICAgIF90aGlzLmluc3RhbmNlUHJlZml4ID0gJ3JlYWN0LXNlbGVjdC0nICsgKF90aGlzLnByb3BzLmluc3RhbmNlSWQgfHwgKytpbnN0YW5jZUlkKTtcblxuICAgIHZhciBfc2VsZWN0VmFsdWUgPSAoMCwgX3V0aWxzLmNsZWFuVmFsdWUpKHZhbHVlKTtcblxuICAgIHZhciBfbWVudU9wdGlvbnMgPSBfdGhpcy5idWlsZE1lbnVPcHRpb25zKF9wcm9wcywgX3NlbGVjdFZhbHVlKTtcblxuICAgIF90aGlzLnN0YXRlLm1lbnVPcHRpb25zID0gX21lbnVPcHRpb25zO1xuICAgIF90aGlzLnN0YXRlLnNlbGVjdFZhbHVlID0gX3NlbGVjdFZhbHVlO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTZWxlY3QsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5zdGFydExpc3RlbmluZ0NvbXBvc2l0aW9uKCk7XG4gICAgICB0aGlzLnN0YXJ0TGlzdGVuaW5nVG9Ub3VjaCgpO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5jbG9zZU1lbnVPblNjcm9sbCAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIC8vIExpc3RlbiB0byBhbGwgc2Nyb2xsIGV2ZW50cywgYW5kIGZpbHRlciB0aGVtIG91dCBpbnNpZGUgb2YgJ29uU2Nyb2xsJ1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvcHMuYXV0b0ZvY3VzKSB7XG4gICAgICAgIHRoaXMuZm9jdXNJbnB1dCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBvcHRpb25zID0gX3RoaXMkcHJvcHM4Lm9wdGlvbnMsXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wczgudmFsdWUsXG4gICAgICAgICAgaW5wdXRWYWx1ZSA9IF90aGlzJHByb3BzOC5pbnB1dFZhbHVlOyAvLyByZS1jYWNoZSBjdXN0b20gY29tcG9uZW50c1xuXG4gICAgICB0aGlzLmNhY2hlQ29tcG9uZW50cyhuZXh0UHJvcHMuY29tcG9uZW50cyk7IC8vIHJlYnVpbGQgdGhlIG1lbnUgb3B0aW9uc1xuXG4gICAgICBpZiAobmV4dFByb3BzLnZhbHVlICE9PSB2YWx1ZSB8fCBuZXh0UHJvcHMub3B0aW9ucyAhPT0gb3B0aW9ucyB8fCBuZXh0UHJvcHMuaW5wdXRWYWx1ZSAhPT0gaW5wdXRWYWx1ZSkge1xuICAgICAgICB2YXIgc2VsZWN0VmFsdWUgPSAoMCwgX3V0aWxzLmNsZWFuVmFsdWUpKG5leHRQcm9wcy52YWx1ZSk7XG4gICAgICAgIHZhciBtZW51T3B0aW9ucyA9IHRoaXMuYnVpbGRNZW51T3B0aW9ucyhuZXh0UHJvcHMsIHNlbGVjdFZhbHVlKTtcbiAgICAgICAgdmFyIGZvY3VzZWRWYWx1ZSA9IHRoaXMuZ2V0TmV4dEZvY3VzZWRWYWx1ZShzZWxlY3RWYWx1ZSk7XG4gICAgICAgIHZhciBmb2N1c2VkT3B0aW9uID0gdGhpcy5nZXROZXh0Rm9jdXNlZE9wdGlvbihtZW51T3B0aW9ucy5mb2N1c2FibGUpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBtZW51T3B0aW9uczogbWVudU9wdGlvbnMsXG4gICAgICAgICAgc2VsZWN0VmFsdWU6IHNlbGVjdFZhbHVlLFxuICAgICAgICAgIGZvY3VzZWRPcHRpb246IGZvY3VzZWRPcHRpb24sXG4gICAgICAgICAgZm9jdXNlZFZhbHVlOiBmb2N1c2VkVmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIHNvbWUgdXBkYXRlcyBzaG91bGQgdG9nZ2xlIHRoZSBzdGF0ZSBvZiB0aGUgaW5wdXQgdmlzaWJpbGl0eVxuXG5cbiAgICAgIGlmICh0aGlzLmlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlucHV0SXNIaWRkZW46IHRoaXMuaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlXG4gICAgICAgIH0pO1xuICAgICAgICBkZWxldGUgdGhpcy5pbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGU7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM5ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHM5LmlzRGlzYWJsZWQsXG4gICAgICAgICAgbWVudUlzT3BlbiA9IF90aGlzJHByb3BzOS5tZW51SXNPcGVuO1xuICAgICAgdmFyIGlzRm9jdXNlZCA9IHRoaXMuc3RhdGUuaXNGb2N1c2VkO1xuXG4gICAgICBpZiAoIC8vIGVuc3VyZSBmb2N1cyBpcyByZXN0b3JlZCBjb3JyZWN0bHkgd2hlbiB0aGUgY29udHJvbCBiZWNvbWVzIGVuYWJsZWRcbiAgICAgIGlzRm9jdXNlZCAmJiAhaXNEaXNhYmxlZCAmJiBwcmV2UHJvcHMuaXNEaXNhYmxlZCB8fCAvLyBlbnN1cmUgZm9jdXMgaXMgb24gdGhlIElucHV0IHdoZW4gdGhlIG1lbnUgb3BlbnNcbiAgICAgIGlzRm9jdXNlZCAmJiBtZW51SXNPcGVuICYmICFwcmV2UHJvcHMubWVudUlzT3Blbikge1xuICAgICAgICB0aGlzLmZvY3VzSW5wdXQoKTtcbiAgICAgIH0gLy8gc2Nyb2xsIHRoZSBmb2N1c2VkIG9wdGlvbiBpbnRvIHZpZXcgaWYgbmVjZXNzYXJ5XG5cblxuICAgICAgaWYgKHRoaXMubWVudUxpc3RSZWYgJiYgdGhpcy5mb2N1c2VkT3B0aW9uUmVmICYmIHRoaXMuc2Nyb2xsVG9Gb2N1c2VkT3B0aW9uT25VcGRhdGUpIHtcbiAgICAgICAgKDAsIF91dGlscy5zY3JvbGxJbnRvVmlldykodGhpcy5tZW51TGlzdFJlZiwgdGhpcy5mb2N1c2VkT3B0aW9uUmVmKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zY3JvbGxUb0ZvY3VzZWRPcHRpb25PblVwZGF0ZSA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuc3RvcExpc3RlbmluZ0NvbXBvc2l0aW9uKCk7XG4gICAgICB0aGlzLnN0b3BMaXN0ZW5pbmdUb1RvdWNoKCk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsLCB0cnVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25NZW51T3BlblwiLFxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIENvbnN1bWVyIEhhbmRsZXJzXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uTWVudU9wZW4oKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTWVudU9wZW4oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25NZW51Q2xvc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25NZW51Q2xvc2UoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxMCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNTZWFyY2hhYmxlID0gX3RoaXMkcHJvcHMxMC5pc1NlYXJjaGFibGUsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzMTAuaXNNdWx0aTtcbiAgICAgIHRoaXMuYW5ub3VuY2VBcmlhTGl2ZUNvbnRleHQoe1xuICAgICAgICBldmVudDogJ2lucHV0JyxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIGlzU2VhcmNoYWJsZTogaXNTZWFyY2hhYmxlLFxuICAgICAgICAgIGlzTXVsdGk6IGlzTXVsdGlcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLm9uSW5wdXRDaGFuZ2UoJycsIHtcbiAgICAgICAgYWN0aW9uOiAnbWVudS1jbG9zZSdcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wcm9wcy5vbk1lbnVDbG9zZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbklucHV0Q2hhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uSW5wdXRDaGFuZ2UobmV3VmFsdWUsIGFjdGlvbk1ldGEpIHtcbiAgICAgIHRoaXMucHJvcHMub25JbnB1dENoYW5nZShuZXdWYWx1ZSwgYWN0aW9uTWV0YSk7XG4gICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBNZXRob2RzXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgfSwge1xuICAgIGtleTogXCJmb2N1c0lucHV0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzSW5wdXQoKSB7XG4gICAgICBpZiAoIXRoaXMuaW5wdXRSZWYpIHJldHVybjtcbiAgICAgIHRoaXMuaW5wdXRSZWYuZm9jdXMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYmx1cklucHV0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJsdXJJbnB1dCgpIHtcbiAgICAgIGlmICghdGhpcy5pbnB1dFJlZikgcmV0dXJuO1xuICAgICAgdGhpcy5pbnB1dFJlZi5ibHVyKCk7XG4gICAgfSAvLyBhbGlhc2VkIGZvciBjb25zdW1lcnNcblxuICB9LCB7XG4gICAga2V5OiBcIm9wZW5NZW51XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wZW5NZW51KGZvY3VzT3B0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUzID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBtZW51T3B0aW9ucyA9IF90aGlzJHN0YXRlMy5tZW51T3B0aW9ucyxcbiAgICAgICAgICBzZWxlY3RWYWx1ZSA9IF90aGlzJHN0YXRlMy5zZWxlY3RWYWx1ZSxcbiAgICAgICAgICBpc0ZvY3VzZWQgPSBfdGhpcyRzdGF0ZTMuaXNGb2N1c2VkO1xuICAgICAgdmFyIGlzTXVsdGkgPSB0aGlzLnByb3BzLmlzTXVsdGk7XG4gICAgICB2YXIgb3BlbkF0SW5kZXggPSBmb2N1c09wdGlvbiA9PT0gJ2ZpcnN0JyA/IDAgOiBtZW51T3B0aW9ucy5mb2N1c2FibGUubGVuZ3RoIC0gMTtcblxuICAgICAgaWYgKCFpc011bHRpKSB7XG4gICAgICAgIHZhciBzZWxlY3RlZEluZGV4ID0gbWVudU9wdGlvbnMuZm9jdXNhYmxlLmluZGV4T2Yoc2VsZWN0VmFsdWVbMF0pO1xuXG4gICAgICAgIGlmIChzZWxlY3RlZEluZGV4ID4gLTEpIHtcbiAgICAgICAgICBvcGVuQXRJbmRleCA9IHNlbGVjdGVkSW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gb25seSBzY3JvbGwgaWYgdGhlIG1lbnUgaXNuJ3QgYWxyZWFkeSBvcGVuXG5cblxuICAgICAgdGhpcy5zY3JvbGxUb0ZvY3VzZWRPcHRpb25PblVwZGF0ZSA9ICEoaXNGb2N1c2VkICYmIHRoaXMubWVudUxpc3RSZWYpO1xuICAgICAgdGhpcy5pbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGUgPSBmYWxzZTtcbiAgICAgIHRoaXMub25NZW51T3BlbigpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWRWYWx1ZTogbnVsbCxcbiAgICAgICAgZm9jdXNlZE9wdGlvbjogbWVudU9wdGlvbnMuZm9jdXNhYmxlW29wZW5BdEluZGV4XVxuICAgICAgfSk7XG4gICAgICB0aGlzLmFubm91bmNlQXJpYUxpdmVDb250ZXh0KHtcbiAgICAgICAgZXZlbnQ6ICdtZW51J1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvY3VzVmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXNWYWx1ZShkaXJlY3Rpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczExID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHMxMS5pc011bHRpLFxuICAgICAgICAgIGlzU2VhcmNoYWJsZSA9IF90aGlzJHByb3BzMTEuaXNTZWFyY2hhYmxlO1xuICAgICAgdmFyIF90aGlzJHN0YXRlNCA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgc2VsZWN0VmFsdWUgPSBfdGhpcyRzdGF0ZTQuc2VsZWN0VmFsdWUsXG4gICAgICAgICAgZm9jdXNlZFZhbHVlID0gX3RoaXMkc3RhdGU0LmZvY3VzZWRWYWx1ZTsgLy8gT25seSBtdWx0aXNlbGVjdHMgc3VwcG9ydCB2YWx1ZSBmb2N1c2luZ1xuXG4gICAgICBpZiAoIWlzTXVsdGkpIHJldHVybjtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkT3B0aW9uOiBudWxsXG4gICAgICB9KTtcbiAgICAgIHZhciBmb2N1c2VkSW5kZXggPSBzZWxlY3RWYWx1ZS5pbmRleE9mKGZvY3VzZWRWYWx1ZSk7XG5cbiAgICAgIGlmICghZm9jdXNlZFZhbHVlKSB7XG4gICAgICAgIGZvY3VzZWRJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLmFubm91bmNlQXJpYUxpdmVDb250ZXh0KHtcbiAgICAgICAgICBldmVudDogJ3ZhbHVlJ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxhc3RJbmRleCA9IHNlbGVjdFZhbHVlLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgbmV4dEZvY3VzID0gLTE7XG4gICAgICBpZiAoIXNlbGVjdFZhbHVlLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICBjYXNlICdwcmV2aW91cyc6XG4gICAgICAgICAgaWYgKGZvY3VzZWRJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gZG9uJ3QgY3ljbGUgZnJvbSB0aGUgc3RhcnQgdG8gdGhlIGVuZFxuICAgICAgICAgICAgbmV4dEZvY3VzID0gMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZvY3VzZWRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIGlmIG5vdGhpbmcgaXMgZm9jdXNlZCwgZm9jdXMgdGhlIGxhc3QgdmFsdWUgZmlyc3RcbiAgICAgICAgICAgIG5leHRGb2N1cyA9IGxhc3RJbmRleDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dEZvY3VzID0gZm9jdXNlZEluZGV4IC0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgICAgICBpZiAoZm9jdXNlZEluZGV4ID4gLTEgJiYgZm9jdXNlZEluZGV4IDwgbGFzdEluZGV4KSB7XG4gICAgICAgICAgICBuZXh0Rm9jdXMgPSBmb2N1c2VkSW5kZXggKyAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV4dEZvY3VzID09PSAtMSkge1xuICAgICAgICB0aGlzLmFubm91bmNlQXJpYUxpdmVDb250ZXh0KHtcbiAgICAgICAgICBldmVudDogJ2lucHV0JyxcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBpc1NlYXJjaGFibGU6IGlzU2VhcmNoYWJsZSxcbiAgICAgICAgICAgIGlzTXVsdGk6IGlzTXVsdGlcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaW5wdXRJc0hpZGRlbjogbmV4dEZvY3VzID09PSAtMSA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgICAgZm9jdXNlZFZhbHVlOiBzZWxlY3RWYWx1ZVtuZXh0Rm9jdXNdXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9jdXNPcHRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXNPcHRpb24oKSB7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZmlyc3QnO1xuICAgICAgdmFyIHBhZ2VTaXplID0gdGhpcy5wcm9wcy5wYWdlU2l6ZTtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGZvY3VzZWRPcHRpb24gPSBfdGhpcyRzdGF0ZTUuZm9jdXNlZE9wdGlvbixcbiAgICAgICAgICBtZW51T3B0aW9ucyA9IF90aGlzJHN0YXRlNS5tZW51T3B0aW9ucztcbiAgICAgIHZhciBvcHRpb25zID0gbWVudU9wdGlvbnMuZm9jdXNhYmxlO1xuICAgICAgaWYgKCFvcHRpb25zLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgdmFyIG5leHRGb2N1cyA9IDA7IC8vIGhhbmRsZXMgJ2ZpcnN0J1xuXG4gICAgICB2YXIgZm9jdXNlZEluZGV4ID0gb3B0aW9ucy5pbmRleE9mKGZvY3VzZWRPcHRpb24pO1xuXG4gICAgICBpZiAoIWZvY3VzZWRPcHRpb24pIHtcbiAgICAgICAgZm9jdXNlZEluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuYW5ub3VuY2VBcmlhTGl2ZUNvbnRleHQoe1xuICAgICAgICAgIGV2ZW50OiAnbWVudSdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICAgICAgbmV4dEZvY3VzID0gZm9jdXNlZEluZGV4ID4gMCA/IGZvY3VzZWRJbmRleCAtIDEgOiBvcHRpb25zLmxlbmd0aCAtIDE7XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgIG5leHRGb2N1cyA9IChmb2N1c2VkSW5kZXggKyAxKSAlIG9wdGlvbnMubGVuZ3RoO1xuICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdwYWdldXAnKSB7XG4gICAgICAgIG5leHRGb2N1cyA9IGZvY3VzZWRJbmRleCAtIHBhZ2VTaXplO1xuICAgICAgICBpZiAobmV4dEZvY3VzIDwgMCkgbmV4dEZvY3VzID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAncGFnZWRvd24nKSB7XG4gICAgICAgIG5leHRGb2N1cyA9IGZvY3VzZWRJbmRleCArIHBhZ2VTaXplO1xuICAgICAgICBpZiAobmV4dEZvY3VzID4gb3B0aW9ucy5sZW5ndGggLSAxKSBuZXh0Rm9jdXMgPSBvcHRpb25zLmxlbmd0aCAtIDE7XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xhc3QnKSB7XG4gICAgICAgIG5leHRGb2N1cyA9IG9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zY3JvbGxUb0ZvY3VzZWRPcHRpb25PblVwZGF0ZSA9IHRydWU7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZE9wdGlvbjogb3B0aW9uc1tuZXh0Rm9jdXNdLFxuICAgICAgICBmb2N1c2VkVmFsdWU6IG51bGxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5hbm5vdW5jZUFyaWFMaXZlQ29udGV4dCh7XG4gICAgICAgIGV2ZW50OiAnbWVudScsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICBpc0Rpc2FibGVkOiAoMCwgX2J1aWx0aW5zLmlzT3B0aW9uRGlzYWJsZWQpKG9wdGlvbnNbbmV4dEZvY3VzXSlcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFRoZW1lXCIsXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gR2V0dGVyc1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICAgIC8vIFVzZSB0aGUgZGVmYXVsdCB0aGVtZSBpZiB0aGVyZSBhcmUgbm8gY3VzdG9taXphdGlvbnMuXG4gICAgICBpZiAoIXRoaXMucHJvcHMudGhlbWUpIHtcbiAgICAgICAgcmV0dXJuIF90aGVtZS5kZWZhdWx0VGhlbWU7XG4gICAgICB9IC8vIElmIHRoZSB0aGVtZSBwcm9wIGlzIGEgZnVuY3Rpb24sIGFzc3VtZSB0aGUgZnVuY3Rpb25cbiAgICAgIC8vIGtub3dzIGhvdyB0byBtZXJnZSB0aGUgcGFzc2VkLWluIGRlZmF1bHQgdGhlbWUgd2l0aFxuICAgICAgLy8gaXRzIG93biBtb2RpZmljYXRpb25zLlxuXG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy50aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy50aGVtZShfdGhlbWUuZGVmYXVsdFRoZW1lKTtcbiAgICAgIH0gLy8gT3RoZXJ3aXNlLCBpZiBhIHBsYWluIHRoZW1lIG9iamVjdCB3YXMgcGFzc2VkIGluLFxuICAgICAgLy8gb3ZlcmxheSBpdCB3aXRoIHRoZSBkZWZhdWx0IHRoZW1lLlxuXG5cbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBfdGhlbWUuZGVmYXVsdFRoZW1lLCB0aGlzLnByb3BzLnRoZW1lKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q29tbW9uUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29tbW9uUHJvcHMoKSB7XG4gICAgICB2YXIgY2xlYXJWYWx1ZSA9IHRoaXMuY2xlYXJWYWx1ZSxcbiAgICAgICAgICBnZXRTdHlsZXMgPSB0aGlzLmdldFN0eWxlcyxcbiAgICAgICAgICBzZXRWYWx1ZSA9IHRoaXMuc2V0VmFsdWUsXG4gICAgICAgICAgc2VsZWN0T3B0aW9uID0gdGhpcy5zZWxlY3RPcHRpb24sXG4gICAgICAgICAgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IHByb3BzLmNsYXNzTmFtZVByZWZpeCxcbiAgICAgICAgICBpc011bHRpID0gcHJvcHMuaXNNdWx0aSxcbiAgICAgICAgICBpc1J0bCA9IHByb3BzLmlzUnRsLFxuICAgICAgICAgIG9wdGlvbnMgPSBwcm9wcy5vcHRpb25zO1xuICAgICAgdmFyIHNlbGVjdFZhbHVlID0gdGhpcy5zdGF0ZS5zZWxlY3RWYWx1ZTtcbiAgICAgIHZhciBoYXNWYWx1ZSA9IHRoaXMuaGFzVmFsdWUoKTtcblxuICAgICAgdmFyIGdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RWYWx1ZTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBjeCA9IF91dGlscy5jbGFzc05hbWVzLmJpbmQobnVsbCwgY2xhc3NOYW1lUHJlZml4KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3g6IGN4LFxuICAgICAgICBjbGVhclZhbHVlOiBjbGVhclZhbHVlLFxuICAgICAgICBnZXRTdHlsZXM6IGdldFN0eWxlcyxcbiAgICAgICAgZ2V0VmFsdWU6IGdldFZhbHVlLFxuICAgICAgICBoYXNWYWx1ZTogaGFzVmFsdWUsXG4gICAgICAgIGlzTXVsdGk6IGlzTXVsdGksXG4gICAgICAgIGlzUnRsOiBpc1J0bCxcbiAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgc2VsZWN0T3B0aW9uOiBzZWxlY3RPcHRpb24sXG4gICAgICAgIHNldFZhbHVlOiBzZXRWYWx1ZSxcbiAgICAgICAgc2VsZWN0UHJvcHM6IHByb3BzLFxuICAgICAgICB0aGVtZTogdGhpcy5nZXRUaGVtZSgpXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXROZXh0Rm9jdXNlZFZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE5leHRGb2N1c2VkVmFsdWUobmV4dFNlbGVjdFZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5jbGVhckZvY3VzVmFsdWVPblVwZGF0ZSkge1xuICAgICAgICB0aGlzLmNsZWFyRm9jdXNWYWx1ZU9uVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMkc3RhdGU2ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBmb2N1c2VkVmFsdWUgPSBfdGhpcyRzdGF0ZTYuZm9jdXNlZFZhbHVlLFxuICAgICAgICAgIGxhc3RTZWxlY3RWYWx1ZSA9IF90aGlzJHN0YXRlNi5zZWxlY3RWYWx1ZTtcbiAgICAgIHZhciBsYXN0Rm9jdXNlZEluZGV4ID0gbGFzdFNlbGVjdFZhbHVlLmluZGV4T2YoZm9jdXNlZFZhbHVlKTtcblxuICAgICAgaWYgKGxhc3RGb2N1c2VkSW5kZXggPiAtMSkge1xuICAgICAgICB2YXIgbmV4dEZvY3VzZWRJbmRleCA9IG5leHRTZWxlY3RWYWx1ZS5pbmRleE9mKGZvY3VzZWRWYWx1ZSk7XG5cbiAgICAgICAgaWYgKG5leHRGb2N1c2VkSW5kZXggPiAtMSkge1xuICAgICAgICAgIC8vIHRoZSBmb2N1c2VkIHZhbHVlIGlzIHN0aWxsIGluIHRoZSBzZWxlY3RWYWx1ZSwgcmV0dXJuIGl0XG4gICAgICAgICAgcmV0dXJuIGZvY3VzZWRWYWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChsYXN0Rm9jdXNlZEluZGV4IDwgbmV4dFNlbGVjdFZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgIC8vIHRoZSBmb2N1c2VkVmFsdWUgaXMgbm90IHByZXNlbnQgaW4gdGhlIG5leHQgc2VsZWN0VmFsdWUgYXJyYXkgYnlcbiAgICAgICAgICAvLyByZWZlcmVuY2UsIHNvIHJldHVybiB0aGUgbmV3IHZhbHVlIGF0IHRoZSBzYW1lIGluZGV4XG4gICAgICAgICAgcmV0dXJuIG5leHRTZWxlY3RWYWx1ZVtsYXN0Rm9jdXNlZEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TmV4dEZvY3VzZWRPcHRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TmV4dEZvY3VzZWRPcHRpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGxhc3RGb2N1c2VkT3B0aW9uID0gdGhpcy5zdGF0ZS5mb2N1c2VkT3B0aW9uO1xuICAgICAgcmV0dXJuIGxhc3RGb2N1c2VkT3B0aW9uICYmIG9wdGlvbnMuaW5kZXhPZihsYXN0Rm9jdXNlZE9wdGlvbikgPiAtMSA/IGxhc3RGb2N1c2VkT3B0aW9uIDogb3B0aW9uc1swXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzVmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzVmFsdWUoKSB7XG4gICAgICB2YXIgc2VsZWN0VmFsdWUgPSB0aGlzLnN0YXRlLnNlbGVjdFZhbHVlO1xuICAgICAgcmV0dXJuIHNlbGVjdFZhbHVlLmxlbmd0aCA+IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc09wdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzT3B0aW9ucygpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuc3RhdGUubWVudU9wdGlvbnMucmVuZGVyLmxlbmd0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY291bnRPcHRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvdW50T3B0aW9ucygpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlLm1lbnVPcHRpb25zLmZvY3VzYWJsZS5sZW5ndGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzQ2xlYXJhYmxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzQ2xlYXJhYmxlKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMTIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlzQ2xlYXJhYmxlID0gX3RoaXMkcHJvcHMxMi5pc0NsZWFyYWJsZSxcbiAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHMxMi5pc011bHRpOyAvLyBzaW5nbGUgc2VsZWN0LCBieSBkZWZhdWx0LCBJUyBOT1QgY2xlYXJhYmxlXG4gICAgICAvLyBtdWx0aSBzZWxlY3QsIGJ5IGRlZmF1bHQsIElTIGNsZWFyYWJsZVxuXG4gICAgICBpZiAoaXNDbGVhcmFibGUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGlzTXVsdGk7XG4gICAgICByZXR1cm4gaXNDbGVhcmFibGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzT3B0aW9uRGlzYWJsZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNPcHRpb25EaXNhYmxlZChvcHRpb24sIHNlbGVjdFZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHRoaXMucHJvcHMuaXNPcHRpb25EaXNhYmxlZCA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMucHJvcHMuaXNPcHRpb25EaXNhYmxlZChvcHRpb24sIHNlbGVjdFZhbHVlKSA6IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc09wdGlvblNlbGVjdGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzT3B0aW9uU2VsZWN0ZWQob3B0aW9uLCBzZWxlY3RWYWx1ZSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChzZWxlY3RWYWx1ZS5pbmRleE9mKG9wdGlvbikgPiAtMSkgcmV0dXJuIHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5pc09wdGlvblNlbGVjdGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmlzT3B0aW9uU2VsZWN0ZWQob3B0aW9uLCBzZWxlY3RWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjYW5kaWRhdGUgPSB0aGlzLmdldE9wdGlvblZhbHVlKG9wdGlvbik7XG4gICAgICByZXR1cm4gc2VsZWN0VmFsdWUuc29tZShmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLmdldE9wdGlvblZhbHVlKGkpID09PSBjYW5kaWRhdGU7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZmlsdGVyT3B0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlck9wdGlvbihvcHRpb24sIGlucHV0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmZpbHRlck9wdGlvbiA/IHRoaXMucHJvcHMuZmlsdGVyT3B0aW9uKG9wdGlvbiwgaW5wdXRWYWx1ZSkgOiB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3JtYXRPcHRpb25MYWJlbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRPcHRpb25MYWJlbChkYXRhLCBjb250ZXh0KSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMuZm9ybWF0T3B0aW9uTGFiZWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIGlucHV0VmFsdWUgPSB0aGlzLnByb3BzLmlucHV0VmFsdWU7XG4gICAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IHRoaXMuc3RhdGUuc2VsZWN0VmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmZvcm1hdE9wdGlvbkxhYmVsKGRhdGEsIHtcbiAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgIGlucHV0VmFsdWU6IGlucHV0VmFsdWUsXG4gICAgICAgICAgc2VsZWN0VmFsdWU6IHNlbGVjdFZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3B0aW9uTGFiZWwoZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvcm1hdEdyb3VwTGFiZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0R3JvdXBMYWJlbChkYXRhKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5mb3JtYXRHcm91cExhYmVsKGRhdGEpO1xuICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gTW91c2UgSGFuZGxlcnNcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB9LCB7XG4gICAga2V5OiBcInN0YXJ0TGlzdGVuaW5nQ29tcG9zaXRpb25cIixcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBDb21wb3NpdGlvbiBIYW5kbGVyc1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydExpc3RlbmluZ0NvbXBvc2l0aW9uKCkge1xuICAgICAgaWYgKGRvY3VtZW50ICYmIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIHRoaXMub25Db21wb3NpdGlvblN0YXJ0LCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgdGhpcy5vbkNvbXBvc2l0aW9uRW5kLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BMaXN0ZW5pbmdDb21wb3NpdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wTGlzdGVuaW5nQ29tcG9zaXRpb24oKSB7XG4gICAgICBpZiAoZG9jdW1lbnQgJiYgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0JywgdGhpcy5vbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIHRoaXMub25Db21wb3NpdGlvbkVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0YXJ0TGlzdGVuaW5nVG9Ub3VjaFwiLFxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIFRvdWNoIEhhbmRsZXJzXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0TGlzdGVuaW5nVG9Ub3VjaCgpIHtcbiAgICAgIGlmIChkb2N1bWVudCAmJiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlLCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BMaXN0ZW5pbmdUb1RvdWNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmdUb1RvdWNoKCkge1xuICAgICAgaWYgKGRvY3VtZW50ICYmIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Ub3VjaFN0YXJ0KTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vblRvdWNoTW92ZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vblRvdWNoRW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYnVpbGRNZW51T3B0aW9uc1wiLFxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIE1lbnUgT3B0aW9uc1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZE1lbnVPcHRpb25zKHByb3BzLCBzZWxlY3RWYWx1ZSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMkaW5wdXRWYWx1ZSA9IHByb3BzLmlucHV0VmFsdWUsXG4gICAgICAgICAgaW5wdXRWYWx1ZSA9IF9wcm9wcyRpbnB1dFZhbHVlID09PSB2b2lkIDAgPyAnJyA6IF9wcm9wcyRpbnB1dFZhbHVlLFxuICAgICAgICAgIG9wdGlvbnMgPSBwcm9wcy5vcHRpb25zO1xuXG4gICAgICB2YXIgdG9PcHRpb24gPSBmdW5jdGlvbiB0b09wdGlvbihvcHRpb24sIGlkKSB7XG4gICAgICAgIHZhciBpc0Rpc2FibGVkID0gX3RoaXMzLmlzT3B0aW9uRGlzYWJsZWQob3B0aW9uLCBzZWxlY3RWYWx1ZSk7XG5cbiAgICAgICAgdmFyIGlzU2VsZWN0ZWQgPSBfdGhpczMuaXNPcHRpb25TZWxlY3RlZChvcHRpb24sIHNlbGVjdFZhbHVlKTtcblxuICAgICAgICB2YXIgbGFiZWwgPSBfdGhpczMuZ2V0T3B0aW9uTGFiZWwob3B0aW9uKTtcblxuICAgICAgICB2YXIgdmFsdWUgPSBfdGhpczMuZ2V0T3B0aW9uVmFsdWUob3B0aW9uKTtcblxuICAgICAgICBpZiAoX3RoaXMzLnNob3VsZEhpZGVTZWxlY3RlZE9wdGlvbnMoKSAmJiBpc1NlbGVjdGVkIHx8ICFfdGhpczMuZmlsdGVyT3B0aW9uKHtcbiAgICAgICAgICBsYWJlbDogbGFiZWwsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIGRhdGE6IG9wdGlvblxuICAgICAgICB9LCBpbnB1dFZhbHVlKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvbkhvdmVyID0gaXNEaXNhYmxlZCA/IHVuZGVmaW5lZCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLm9uT3B0aW9uSG92ZXIob3B0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9uU2VsZWN0ID0gaXNEaXNhYmxlZCA/IHVuZGVmaW5lZCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLnNlbGVjdE9wdGlvbihvcHRpb24pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgb3B0aW9uSWQgPSBcIlwiLmNvbmNhdChfdGhpczMuZ2V0RWxlbWVudElkKCdvcHRpb24nKSwgXCItXCIpLmNvbmNhdChpZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW5uZXJQcm9wczoge1xuICAgICAgICAgICAgaWQ6IG9wdGlvbklkLFxuICAgICAgICAgICAgb25DbGljazogb25TZWxlY3QsXG4gICAgICAgICAgICBvbk1vdXNlTW92ZTogb25Ib3ZlcixcbiAgICAgICAgICAgIG9uTW91c2VPdmVyOiBvbkhvdmVyLFxuICAgICAgICAgICAgdGFiSW5kZXg6IC0xXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkYXRhOiBvcHRpb24sXG4gICAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgICBpc1NlbGVjdGVkOiBpc1NlbGVjdGVkLFxuICAgICAgICAgIGtleTogb3B0aW9uSWQsXG4gICAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICAgIHR5cGU6ICdvcHRpb24nLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIG9wdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGl0ZW0sIGl0ZW1JbmRleCkge1xuICAgICAgICBpZiAoaXRlbS5vcHRpb25zKSB7XG4gICAgICAgICAgLy8gVE9ETyBuZWVkcyBhIHRpZGllciBpbXBsZW1lbnRhdGlvblxuICAgICAgICAgIGlmICghX3RoaXMzLmhhc0dyb3VwcykgX3RoaXMzLmhhc0dyb3VwcyA9IHRydWU7XG4gICAgICAgICAgdmFyIGl0ZW1zID0gaXRlbS5vcHRpb25zO1xuICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGl0ZW1zLm1hcChmdW5jdGlvbiAoY2hpbGQsIGkpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSB0b09wdGlvbihjaGlsZCwgXCJcIi5jb25jYXQoaXRlbUluZGV4LCBcIi1cIikuY29uY2F0KGkpKTtcbiAgICAgICAgICAgIGlmIChvcHRpb24pIGFjYy5mb2N1c2FibGUucHVzaChjaGlsZCk7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9uO1xuICAgICAgICAgIH0pLmZpbHRlcihCb29sZWFuKTtcblxuICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBncm91cElkID0gXCJcIi5jb25jYXQoX3RoaXMzLmdldEVsZW1lbnRJZCgnZ3JvdXAnKSwgXCItXCIpLmNvbmNhdChpdGVtSW5kZXgpO1xuICAgICAgICAgICAgYWNjLnJlbmRlci5wdXNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2dyb3VwJyxcbiAgICAgICAgICAgICAga2V5OiBncm91cElkLFxuICAgICAgICAgICAgICBkYXRhOiBpdGVtLFxuICAgICAgICAgICAgICBvcHRpb25zOiBjaGlsZHJlblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBvcHRpb24gPSB0b09wdGlvbihpdGVtLCBcIlwiLmNvbmNhdChpdGVtSW5kZXgpKTtcblxuICAgICAgICAgIGlmIChvcHRpb24pIHtcbiAgICAgICAgICAgIGFjYy5yZW5kZXIucHVzaChvcHRpb24pO1xuICAgICAgICAgICAgYWNjLmZvY3VzYWJsZS5wdXNoKGl0ZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7XG4gICAgICAgIHJlbmRlcjogW10sXG4gICAgICAgIGZvY3VzYWJsZTogW11cbiAgICAgIH0pO1xuICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gUmVuZGVyZXJzXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgfSwge1xuICAgIGtleTogXCJjb25zdHJ1Y3RBcmlhTGl2ZU1lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29uc3RydWN0QXJpYUxpdmVNZXNzYWdlKCkge1xuICAgICAgdmFyIF90aGlzJHN0YXRlNyA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgYXJpYUxpdmVDb250ZXh0ID0gX3RoaXMkc3RhdGU3LmFyaWFMaXZlQ29udGV4dCxcbiAgICAgICAgICBzZWxlY3RWYWx1ZSA9IF90aGlzJHN0YXRlNy5zZWxlY3RWYWx1ZSxcbiAgICAgICAgICBmb2N1c2VkVmFsdWUgPSBfdGhpcyRzdGF0ZTcuZm9jdXNlZFZhbHVlLFxuICAgICAgICAgIGZvY3VzZWRPcHRpb24gPSBfdGhpcyRzdGF0ZTcuZm9jdXNlZE9wdGlvbjtcbiAgICAgIHZhciBfdGhpcyRwcm9wczEzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBvcHRpb25zID0gX3RoaXMkcHJvcHMxMy5vcHRpb25zLFxuICAgICAgICAgIG1lbnVJc09wZW4gPSBfdGhpcyRwcm9wczEzLm1lbnVJc09wZW4sXG4gICAgICAgICAgaW5wdXRWYWx1ZSA9IF90aGlzJHByb3BzMTMuaW5wdXRWYWx1ZSxcbiAgICAgICAgICBzY3JlZW5SZWFkZXJTdGF0dXMgPSBfdGhpcyRwcm9wczEzLnNjcmVlblJlYWRlclN0YXR1czsgLy8gQW4gYXJpYSBsaXZlIG1lc3NhZ2UgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50bHkgZm9jdXNlZCB2YWx1ZSBpbiB0aGUgc2VsZWN0LlxuXG4gICAgICB2YXIgZm9jdXNlZFZhbHVlTXNnID0gZm9jdXNlZFZhbHVlID8gKDAsIF9pbmRleDIudmFsdWVGb2N1c0FyaWFNZXNzYWdlKSh7XG4gICAgICAgIGZvY3VzZWRWYWx1ZTogZm9jdXNlZFZhbHVlLFxuICAgICAgICBnZXRPcHRpb25MYWJlbDogdGhpcy5nZXRPcHRpb25MYWJlbCxcbiAgICAgICAgc2VsZWN0VmFsdWU6IHNlbGVjdFZhbHVlXG4gICAgICB9KSA6ICcnOyAvLyBBbiBhcmlhIGxpdmUgbWVzc2FnZSByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnRseSBmb2N1c2VkIG9wdGlvbiBpbiB0aGUgc2VsZWN0LlxuXG4gICAgICB2YXIgZm9jdXNlZE9wdGlvbk1zZyA9IGZvY3VzZWRPcHRpb24gJiYgbWVudUlzT3BlbiA/ICgwLCBfaW5kZXgyLm9wdGlvbkZvY3VzQXJpYU1lc3NhZ2UpKHtcbiAgICAgICAgZm9jdXNlZE9wdGlvbjogZm9jdXNlZE9wdGlvbixcbiAgICAgICAgZ2V0T3B0aW9uTGFiZWw6IHRoaXMuZ2V0T3B0aW9uTGFiZWwsXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgIH0pIDogJyc7IC8vIEFuIGFyaWEgbGl2ZSBtZXNzYWdlIHJlcHJlc2VudGluZyB0aGUgc2V0IG9mIGZvY3VzYWJsZSByZXN1bHRzIGFuZCBjdXJyZW50IHNlYXJjaHRlcm0vaW5wdXR2YWx1ZS5cblxuICAgICAgdmFyIHJlc3VsdHNNc2cgPSAoMCwgX2luZGV4Mi5yZXN1bHRzQXJpYU1lc3NhZ2UpKHtcbiAgICAgICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZTogc2NyZWVuUmVhZGVyU3RhdHVzKHtcbiAgICAgICAgICBjb3VudDogdGhpcy5jb3VudE9wdGlvbnMoKVxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoZm9jdXNlZFZhbHVlTXNnLCBcIiBcIikuY29uY2F0KGZvY3VzZWRPcHRpb25Nc2csIFwiIFwiKS5jb25jYXQocmVzdWx0c01zZywgXCIgXCIpLmNvbmNhdChhcmlhTGl2ZUNvbnRleHQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJJbnB1dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJJbnB1dCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczE0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMxNC5pc0Rpc2FibGVkLFxuICAgICAgICAgIGlzU2VhcmNoYWJsZSA9IF90aGlzJHByb3BzMTQuaXNTZWFyY2hhYmxlLFxuICAgICAgICAgIGlucHV0SWQgPSBfdGhpcyRwcm9wczE0LmlucHV0SWQsXG4gICAgICAgICAgaW5wdXRWYWx1ZSA9IF90aGlzJHByb3BzMTQuaW5wdXRWYWx1ZSxcbiAgICAgICAgICB0YWJJbmRleCA9IF90aGlzJHByb3BzMTQudGFiSW5kZXg7XG4gICAgICB2YXIgSW5wdXQgPSB0aGlzLmNvbXBvbmVudHMuSW5wdXQ7XG4gICAgICB2YXIgaW5wdXRJc0hpZGRlbiA9IHRoaXMuc3RhdGUuaW5wdXRJc0hpZGRlbjtcbiAgICAgIHZhciBpZCA9IGlucHV0SWQgfHwgdGhpcy5nZXRFbGVtZW50SWQoJ2lucHV0Jyk7XG5cbiAgICAgIGlmICghaXNTZWFyY2hhYmxlKSB7XG4gICAgICAgIC8vIHVzZSBhIGR1bW15IGlucHV0IHRvIG1haW50YWluIGZvY3VzL2JsdXIgZnVuY3Rpb25hbGl0eVxuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaW5kZXguRHVtbXlJbnB1dCwge1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBpbm5lclJlZjogdGhpcy5nZXRJbnB1dFJlZixcbiAgICAgICAgICBvbkJsdXI6IHRoaXMub25JbnB1dEJsdXIsXG4gICAgICAgICAgb25DaGFuZ2U6IF91dGlscy5ub29wLFxuICAgICAgICAgIG9uRm9jdXM6IHRoaXMub25JbnB1dEZvY3VzLFxuICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgICAgICB2YWx1ZTogXCJcIlxuICAgICAgICB9KTtcbiAgICAgIH0gLy8gYXJpYSBhdHRyaWJ1dGVzIG1ha2VzIHRoZSBKU1ggXCJub2lzeVwiLCBzZXBhcmF0ZWQgZm9yIGNsYXJpdHlcblxuXG4gICAgICB2YXIgYXJpYUF0dHJpYnV0ZXMgPSB7XG4gICAgICAgICdhcmlhLWF1dG9jb21wbGV0ZSc6ICdsaXN0JyxcbiAgICAgICAgJ2FyaWEtbGFiZWwnOiB0aGlzLnByb3BzWydhcmlhLWxhYmVsJ10sXG4gICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiB0aGlzLnByb3BzWydhcmlhLWxhYmVsbGVkYnknXVxuICAgICAgfTtcbiAgICAgIHZhciBfdGhpcyRjb21tb25Qcm9wcyA9IHRoaXMuY29tbW9uUHJvcHMsXG4gICAgICAgICAgY3ggPSBfdGhpcyRjb21tb25Qcm9wcy5jeCxcbiAgICAgICAgICB0aGVtZSA9IF90aGlzJGNvbW1vblByb3BzLnRoZW1lLFxuICAgICAgICAgIHNlbGVjdFByb3BzID0gX3RoaXMkY29tbW9uUHJvcHMuc2VsZWN0UHJvcHM7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChJbnB1dCwgX2V4dGVuZHMoe1xuICAgICAgICBhdXRvQ2FwaXRhbGl6ZTogXCJub25lXCIsXG4gICAgICAgIGF1dG9Db21wbGV0ZTogXCJvZmZcIixcbiAgICAgICAgYXV0b0NvcnJlY3Q6IFwib2ZmXCIsXG4gICAgICAgIGN4OiBjeCxcbiAgICAgICAgZ2V0U3R5bGVzOiB0aGlzLmdldFN0eWxlcyxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBpbm5lclJlZjogdGhpcy5nZXRJbnB1dFJlZixcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgaXNIaWRkZW46IGlucHV0SXNIaWRkZW4sXG4gICAgICAgIG9uQmx1cjogdGhpcy5vbklucHV0Qmx1cixcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgICAgIG9uRm9jdXM6IHRoaXMub25JbnB1dEZvY3VzLFxuICAgICAgICBzZWxlY3RQcm9wczogc2VsZWN0UHJvcHMsXG4gICAgICAgIHNwZWxsQ2hlY2s6IFwiZmFsc2VcIixcbiAgICAgICAgdGFiSW5kZXg6IHRhYkluZGV4LFxuICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICB2YWx1ZTogaW5wdXRWYWx1ZVxuICAgICAgfSwgYXJpYUF0dHJpYnV0ZXMpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyUGxhY2Vob2xkZXJPclZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclBsYWNlaG9sZGVyT3JWYWx1ZSgpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAgICBNdWx0aVZhbHVlID0gX3RoaXMkY29tcG9uZW50cy5NdWx0aVZhbHVlLFxuICAgICAgICAgIE11bHRpVmFsdWVDb250YWluZXIgPSBfdGhpcyRjb21wb25lbnRzLk11bHRpVmFsdWVDb250YWluZXIsXG4gICAgICAgICAgTXVsdGlWYWx1ZUxhYmVsID0gX3RoaXMkY29tcG9uZW50cy5NdWx0aVZhbHVlTGFiZWwsXG4gICAgICAgICAgTXVsdGlWYWx1ZVJlbW92ZSA9IF90aGlzJGNvbXBvbmVudHMuTXVsdGlWYWx1ZVJlbW92ZSxcbiAgICAgICAgICBTaW5nbGVWYWx1ZSA9IF90aGlzJGNvbXBvbmVudHMuU2luZ2xlVmFsdWUsXG4gICAgICAgICAgUGxhY2Vob2xkZXIgPSBfdGhpcyRjb21wb25lbnRzLlBsYWNlaG9sZGVyO1xuICAgICAgdmFyIGNvbW1vblByb3BzID0gdGhpcy5jb21tb25Qcm9wcztcbiAgICAgIHZhciBfdGhpcyRwcm9wczE1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb250cm9sU2hvdWxkUmVuZGVyVmFsdWUgPSBfdGhpcyRwcm9wczE1LmNvbnRyb2xTaG91bGRSZW5kZXJWYWx1ZSxcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMxNS5pc0Rpc2FibGVkLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczE1LmlzTXVsdGksXG4gICAgICAgICAgaW5wdXRWYWx1ZSA9IF90aGlzJHByb3BzMTUuaW5wdXRWYWx1ZSxcbiAgICAgICAgICBwbGFjZWhvbGRlciA9IF90aGlzJHByb3BzMTUucGxhY2Vob2xkZXI7XG4gICAgICB2YXIgX3RoaXMkc3RhdGU4ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBzZWxlY3RWYWx1ZSA9IF90aGlzJHN0YXRlOC5zZWxlY3RWYWx1ZSxcbiAgICAgICAgICBmb2N1c2VkVmFsdWUgPSBfdGhpcyRzdGF0ZTguZm9jdXNlZFZhbHVlLFxuICAgICAgICAgIGlzRm9jdXNlZCA9IF90aGlzJHN0YXRlOC5pc0ZvY3VzZWQ7XG5cbiAgICAgIGlmICghdGhpcy5oYXNWYWx1ZSgpIHx8ICFjb250cm9sU2hvdWxkUmVuZGVyVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0VmFsdWUgPyBudWxsIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChQbGFjZWhvbGRlciwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgICAga2V5OiBcInBsYWNlaG9sZGVyXCIsXG4gICAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgICB9KSwgcGxhY2Vob2xkZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNNdWx0aSkge1xuICAgICAgICB2YXIgc2VsZWN0VmFsdWVzID0gc2VsZWN0VmFsdWUubWFwKGZ1bmN0aW9uIChvcHQpIHtcbiAgICAgICAgICB2YXIgaXNPcHRpb25Gb2N1c2VkID0gb3B0ID09PSBmb2N1c2VkVmFsdWU7XG4gICAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTXVsdGlWYWx1ZSwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICAgICAgIENvbnRhaW5lcjogTXVsdGlWYWx1ZUNvbnRhaW5lcixcbiAgICAgICAgICAgICAgTGFiZWw6IE11bHRpVmFsdWVMYWJlbCxcbiAgICAgICAgICAgICAgUmVtb3ZlOiBNdWx0aVZhbHVlUmVtb3ZlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNGb2N1c2VkOiBpc09wdGlvbkZvY3VzZWQsXG4gICAgICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICAgICAga2V5OiBfdGhpczQuZ2V0T3B0aW9uVmFsdWUob3B0KSxcbiAgICAgICAgICAgIHJlbW92ZVByb3BzOiB7XG4gICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5yZW1vdmVWYWx1ZShvcHQpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvblRvdWNoRW5kOiBmdW5jdGlvbiBvblRvdWNoRW5kKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczQucmVtb3ZlVmFsdWUob3B0KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb25Nb3VzZURvd246IGZ1bmN0aW9uIG9uTW91c2VEb3duKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IG9wdFxuICAgICAgICAgIH0pLCBfdGhpczQuZm9ybWF0T3B0aW9uTGFiZWwob3B0LCAndmFsdWUnKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2VsZWN0VmFsdWVzO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5wdXRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHNpbmdsZVZhbHVlID0gc2VsZWN0VmFsdWVbMF07XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChTaW5nbGVWYWx1ZSwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgIGRhdGE6IHNpbmdsZVZhbHVlLFxuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkXG4gICAgICB9KSwgdGhpcy5mb3JtYXRPcHRpb25MYWJlbChzaW5nbGVWYWx1ZSwgJ3ZhbHVlJykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJDbGVhckluZGljYXRvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJDbGVhckluZGljYXRvcigpIHtcbiAgICAgIHZhciBDbGVhckluZGljYXRvciA9IHRoaXMuY29tcG9uZW50cy5DbGVhckluZGljYXRvcjtcbiAgICAgIHZhciBjb21tb25Qcm9wcyA9IHRoaXMuY29tbW9uUHJvcHM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxNiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzMTYuaXNEaXNhYmxlZCxcbiAgICAgICAgICBpc0xvYWRpbmcgPSBfdGhpcyRwcm9wczE2LmlzTG9hZGluZztcbiAgICAgIHZhciBpc0ZvY3VzZWQgPSB0aGlzLnN0YXRlLmlzRm9jdXNlZDtcblxuICAgICAgaWYgKCF0aGlzLmlzQ2xlYXJhYmxlKCkgfHwgIUNsZWFySW5kaWNhdG9yIHx8IGlzRGlzYWJsZWQgfHwgIXRoaXMuaGFzVmFsdWUoKSB8fCBpc0xvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbm5lclByb3BzID0ge1xuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5vbkNsZWFySW5kaWNhdG9yTW91c2VEb3duLFxuICAgICAgICBvblRvdWNoRW5kOiB0aGlzLm9uQ2xlYXJJbmRpY2F0b3JUb3VjaEVuZCxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ2xlYXJJbmRpY2F0b3IsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBpbm5lclByb3BzOiBpbm5lclByb3BzLFxuICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJMb2FkaW5nSW5kaWNhdG9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckxvYWRpbmdJbmRpY2F0b3IoKSB7XG4gICAgICB2YXIgTG9hZGluZ0luZGljYXRvciA9IHRoaXMuY29tcG9uZW50cy5Mb2FkaW5nSW5kaWNhdG9yO1xuICAgICAgdmFyIGNvbW1vblByb3BzID0gdGhpcy5jb21tb25Qcm9wcztcbiAgICAgIHZhciBfdGhpcyRwcm9wczE3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMxNy5pc0Rpc2FibGVkLFxuICAgICAgICAgIGlzTG9hZGluZyA9IF90aGlzJHByb3BzMTcuaXNMb2FkaW5nO1xuICAgICAgdmFyIGlzRm9jdXNlZCA9IHRoaXMuc3RhdGUuaXNGb2N1c2VkO1xuICAgICAgaWYgKCFMb2FkaW5nSW5kaWNhdG9yIHx8ICFpc0xvYWRpbmcpIHJldHVybiBudWxsO1xuICAgICAgdmFyIGlubmVyUHJvcHMgPSB7XG4gICAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KExvYWRpbmdJbmRpY2F0b3IsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBpbm5lclByb3BzOiBpbm5lclByb3BzLFxuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJJbmRpY2F0b3JTZXBhcmF0b3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVySW5kaWNhdG9yU2VwYXJhdG9yKCkge1xuICAgICAgdmFyIF90aGlzJGNvbXBvbmVudHMyID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICAgIERyb3Bkb3duSW5kaWNhdG9yID0gX3RoaXMkY29tcG9uZW50czIuRHJvcGRvd25JbmRpY2F0b3IsXG4gICAgICAgICAgSW5kaWNhdG9yU2VwYXJhdG9yID0gX3RoaXMkY29tcG9uZW50czIuSW5kaWNhdG9yU2VwYXJhdG9yOyAvLyBzZXBhcmF0b3IgZG9lc24ndCBtYWtlIHNlbnNlIHdpdGhvdXQgdGhlIGRyb3Bkb3duIGluZGljYXRvclxuXG4gICAgICBpZiAoIURyb3Bkb3duSW5kaWNhdG9yIHx8ICFJbmRpY2F0b3JTZXBhcmF0b3IpIHJldHVybiBudWxsO1xuICAgICAgdmFyIGNvbW1vblByb3BzID0gdGhpcy5jb21tb25Qcm9wcztcbiAgICAgIHZhciBpc0Rpc2FibGVkID0gdGhpcy5wcm9wcy5pc0Rpc2FibGVkO1xuICAgICAgdmFyIGlzRm9jdXNlZCA9IHRoaXMuc3RhdGUuaXNGb2N1c2VkO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSW5kaWNhdG9yU2VwYXJhdG9yLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyRHJvcGRvd25JbmRpY2F0b3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRHJvcGRvd25JbmRpY2F0b3IoKSB7XG4gICAgICB2YXIgRHJvcGRvd25JbmRpY2F0b3IgPSB0aGlzLmNvbXBvbmVudHMuRHJvcGRvd25JbmRpY2F0b3I7XG4gICAgICBpZiAoIURyb3Bkb3duSW5kaWNhdG9yKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBjb21tb25Qcm9wcyA9IHRoaXMuY29tbW9uUHJvcHM7XG4gICAgICB2YXIgaXNEaXNhYmxlZCA9IHRoaXMucHJvcHMuaXNEaXNhYmxlZDtcbiAgICAgIHZhciBpc0ZvY3VzZWQgPSB0aGlzLnN0YXRlLmlzRm9jdXNlZDtcbiAgICAgIHZhciBpbm5lclByb3BzID0ge1xuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5vbkRyb3Bkb3duSW5kaWNhdG9yTW91c2VEb3duLFxuICAgICAgICBvblRvdWNoRW5kOiB0aGlzLm9uRHJvcGRvd25JbmRpY2F0b3JUb3VjaEVuZCxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd25JbmRpY2F0b3IsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBpbm5lclByb3BzOiBpbm5lclByb3BzLFxuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJNZW51XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlck1lbnUoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJGNvbXBvbmVudHMzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICAgIEdyb3VwID0gX3RoaXMkY29tcG9uZW50czMuR3JvdXAsXG4gICAgICAgICAgR3JvdXBIZWFkaW5nID0gX3RoaXMkY29tcG9uZW50czMuR3JvdXBIZWFkaW5nLFxuICAgICAgICAgIE1lbnUgPSBfdGhpcyRjb21wb25lbnRzMy5NZW51LFxuICAgICAgICAgIE1lbnVMaXN0ID0gX3RoaXMkY29tcG9uZW50czMuTWVudUxpc3QsXG4gICAgICAgICAgTWVudVBvcnRhbCA9IF90aGlzJGNvbXBvbmVudHMzLk1lbnVQb3J0YWwsXG4gICAgICAgICAgTG9hZGluZ01lc3NhZ2UgPSBfdGhpcyRjb21wb25lbnRzMy5Mb2FkaW5nTWVzc2FnZSxcbiAgICAgICAgICBOb09wdGlvbnNNZXNzYWdlID0gX3RoaXMkY29tcG9uZW50czMuTm9PcHRpb25zTWVzc2FnZSxcbiAgICAgICAgICBPcHRpb24gPSBfdGhpcyRjb21wb25lbnRzMy5PcHRpb247XG4gICAgICB2YXIgY29tbW9uUHJvcHMgPSB0aGlzLmNvbW1vblByb3BzO1xuICAgICAgdmFyIF90aGlzJHN0YXRlOSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgZm9jdXNlZE9wdGlvbiA9IF90aGlzJHN0YXRlOS5mb2N1c2VkT3B0aW9uLFxuICAgICAgICAgIG1lbnVPcHRpb25zID0gX3RoaXMkc3RhdGU5Lm1lbnVPcHRpb25zO1xuICAgICAgdmFyIF90aGlzJHByb3BzMTggPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNhcHR1cmVNZW51U2Nyb2xsID0gX3RoaXMkcHJvcHMxOC5jYXB0dXJlTWVudVNjcm9sbCxcbiAgICAgICAgICBpbnB1dFZhbHVlID0gX3RoaXMkcHJvcHMxOC5pbnB1dFZhbHVlLFxuICAgICAgICAgIGlzTG9hZGluZyA9IF90aGlzJHByb3BzMTguaXNMb2FkaW5nLFxuICAgICAgICAgIGxvYWRpbmdNZXNzYWdlID0gX3RoaXMkcHJvcHMxOC5sb2FkaW5nTWVzc2FnZSxcbiAgICAgICAgICBtaW5NZW51SGVpZ2h0ID0gX3RoaXMkcHJvcHMxOC5taW5NZW51SGVpZ2h0LFxuICAgICAgICAgIG1heE1lbnVIZWlnaHQgPSBfdGhpcyRwcm9wczE4Lm1heE1lbnVIZWlnaHQsXG4gICAgICAgICAgbWVudUlzT3BlbiA9IF90aGlzJHByb3BzMTgubWVudUlzT3BlbixcbiAgICAgICAgICBtZW51UGxhY2VtZW50ID0gX3RoaXMkcHJvcHMxOC5tZW51UGxhY2VtZW50LFxuICAgICAgICAgIG1lbnVQb3NpdGlvbiA9IF90aGlzJHByb3BzMTgubWVudVBvc2l0aW9uLFxuICAgICAgICAgIG1lbnVQb3J0YWxUYXJnZXQgPSBfdGhpcyRwcm9wczE4Lm1lbnVQb3J0YWxUYXJnZXQsXG4gICAgICAgICAgbWVudVNob3VsZEJsb2NrU2Nyb2xsID0gX3RoaXMkcHJvcHMxOC5tZW51U2hvdWxkQmxvY2tTY3JvbGwsXG4gICAgICAgICAgbWVudVNob3VsZFNjcm9sbEludG9WaWV3ID0gX3RoaXMkcHJvcHMxOC5tZW51U2hvdWxkU2Nyb2xsSW50b1ZpZXcsXG4gICAgICAgICAgbm9PcHRpb25zTWVzc2FnZSA9IF90aGlzJHByb3BzMTgubm9PcHRpb25zTWVzc2FnZSxcbiAgICAgICAgICBvbk1lbnVTY3JvbGxUb1RvcCA9IF90aGlzJHByb3BzMTgub25NZW51U2Nyb2xsVG9Ub3AsXG4gICAgICAgICAgb25NZW51U2Nyb2xsVG9Cb3R0b20gPSBfdGhpcyRwcm9wczE4Lm9uTWVudVNjcm9sbFRvQm90dG9tO1xuICAgICAgaWYgKCFtZW51SXNPcGVuKSByZXR1cm4gbnVsbDsgLy8gVE9ETzogSW50ZXJuYWwgT3B0aW9uIFR5cGUgaGVyZVxuXG4gICAgICB2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHByb3BzKSB7XG4gICAgICAgIC8vIGZvciBwZXJmb3JtYW5jZSwgdGhlIG1lbnUgb3B0aW9ucyBpbiBzdGF0ZSBhcmVuJ3QgY2hhbmdlZCB3aGVuIHRoZVxuICAgICAgICAvLyBmb2N1c2VkIG9wdGlvbiBjaGFuZ2VzIHNvIHdlIGNhbGN1bGF0ZSBhZGRpdGlvbmFsIHByb3BzIGJhc2VkIG9uIHRoYXRcbiAgICAgICAgdmFyIGlzRm9jdXNlZCA9IGZvY3VzZWRPcHRpb24gPT09IHByb3BzLmRhdGE7XG4gICAgICAgIHByb3BzLmlubmVyUmVmID0gaXNGb2N1c2VkID8gX3RoaXM1LmdldEZvY3VzZWRPcHRpb25SZWYgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE9wdGlvbiwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCBwcm9wcywge1xuICAgICAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkXG4gICAgICAgIH0pLCBfdGhpczUuZm9ybWF0T3B0aW9uTGFiZWwocHJvcHMuZGF0YSwgJ21lbnUnKSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWVudVVJO1xuXG4gICAgICBpZiAodGhpcy5oYXNPcHRpb25zKCkpIHtcbiAgICAgICAgbWVudVVJID0gbWVudU9wdGlvbnMucmVuZGVyLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdncm91cCcpIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0gaXRlbS50eXBlLFxuICAgICAgICAgICAgICAgIGdyb3VwID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGl0ZW0sIFtcInR5cGVcIl0pO1xuXG4gICAgICAgICAgICB2YXIgaGVhZGluZ0lkID0gXCJcIi5jb25jYXQoaXRlbS5rZXksIFwiLWhlYWRpbmdcIik7XG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChHcm91cCwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCBncm91cCwge1xuICAgICAgICAgICAgICBIZWFkaW5nOiBHcm91cEhlYWRpbmcsXG4gICAgICAgICAgICAgIGhlYWRpbmdQcm9wczoge1xuICAgICAgICAgICAgICAgIGlkOiBoZWFkaW5nSWRcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbGFiZWw6IF90aGlzNS5mb3JtYXRHcm91cExhYmVsKGl0ZW0uZGF0YSlcbiAgICAgICAgICAgIH0pLCBpdGVtLm9wdGlvbnMubWFwKGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihvcHRpb24pO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnb3B0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpc0xvYWRpbmcpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBsb2FkaW5nTWVzc2FnZSh7XG4gICAgICAgICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG1lc3NhZ2UgPT09IG51bGwpIHJldHVybiBudWxsO1xuICAgICAgICBtZW51VUkgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KExvYWRpbmdNZXNzYWdlLCBjb21tb25Qcm9wcywgbWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX21lc3NhZ2UgPSBub09wdGlvbnNNZXNzYWdlKHtcbiAgICAgICAgICBpbnB1dFZhbHVlOiBpbnB1dFZhbHVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChfbWVzc2FnZSA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICAgIG1lbnVVSSA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTm9PcHRpb25zTWVzc2FnZSwgY29tbW9uUHJvcHMsIF9tZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG1lbnVQbGFjZW1lbnRQcm9wcyA9IHtcbiAgICAgICAgbWluTWVudUhlaWdodDogbWluTWVudUhlaWdodCxcbiAgICAgICAgbWF4TWVudUhlaWdodDogbWF4TWVudUhlaWdodCxcbiAgICAgICAgbWVudVBsYWNlbWVudDogbWVudVBsYWNlbWVudCxcbiAgICAgICAgbWVudVBvc2l0aW9uOiBtZW51UG9zaXRpb24sXG4gICAgICAgIG1lbnVTaG91bGRTY3JvbGxJbnRvVmlldzogbWVudVNob3VsZFNjcm9sbEludG9WaWV3XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWVudUVsZW1lbnQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9NZW51Lk1lbnVQbGFjZXIsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywgbWVudVBsYWNlbWVudFByb3BzKSwgZnVuY3Rpb24gKF9yZWY2KSB7XG4gICAgICAgIHZhciByZWYgPSBfcmVmNi5yZWYsXG4gICAgICAgICAgICBfcmVmNiRwbGFjZXJQcm9wcyA9IF9yZWY2LnBsYWNlclByb3BzLFxuICAgICAgICAgICAgcGxhY2VtZW50ID0gX3JlZjYkcGxhY2VyUHJvcHMucGxhY2VtZW50LFxuICAgICAgICAgICAgbWF4SGVpZ2h0ID0gX3JlZjYkcGxhY2VyUHJvcHMubWF4SGVpZ2h0O1xuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChNZW51LCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIG1lbnVQbGFjZW1lbnRQcm9wcywge1xuICAgICAgICAgIGlubmVyUmVmOiByZWYsXG4gICAgICAgICAgaW5uZXJQcm9wczoge1xuICAgICAgICAgICAgb25Nb3VzZURvd246IF90aGlzNS5vbk1lbnVNb3VzZURvd24sXG4gICAgICAgICAgICBvbk1vdXNlTW92ZTogX3RoaXM1Lm9uTWVudU1vdXNlTW92ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaXNMb2FkaW5nOiBpc0xvYWRpbmcsXG4gICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2luZGV4LlNjcm9sbENhcHRvciwge1xuICAgICAgICAgIGlzRW5hYmxlZDogY2FwdHVyZU1lbnVTY3JvbGwsXG4gICAgICAgICAgb25Ub3BBcnJpdmU6IG9uTWVudVNjcm9sbFRvVG9wLFxuICAgICAgICAgIG9uQm90dG9tQXJyaXZlOiBvbk1lbnVTY3JvbGxUb0JvdHRvbVxuICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9pbmRleC5TY3JvbGxCbG9jaywge1xuICAgICAgICAgIGlzRW5hYmxlZDogbWVudVNob3VsZEJsb2NrU2Nyb2xsXG4gICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTWVudUxpc3QsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICAgIGlubmVyUmVmOiBfdGhpczUuZ2V0TWVudUxpc3RSZWYsXG4gICAgICAgICAgaXNMb2FkaW5nOiBpc0xvYWRpbmcsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHRcbiAgICAgICAgfSksIG1lbnVVSSkpKSk7XG4gICAgICB9KTsgLy8gcG9zaXRpb25pbmcgYmVoYXZpb3VyIGlzIGFsbW9zdCBpZGVudGljYWwgZm9yIHBvcnRhbGxlZCBhbmQgZml4ZWQsXG4gICAgICAvLyBzbyB3ZSB1c2UgdGhlIHNhbWUgY29tcG9uZW50LiB0aGUgYWN0dWFsIHBvcnRhbGxpbmcgbG9naWMgaXMgZm9ya2VkXG4gICAgICAvLyB3aXRoaW4gdGhlIGNvbXBvbmVudCBiYXNlZCBvbiBgbWVudVBvc2l0aW9uYFxuXG5cbiAgICAgIHJldHVybiBtZW51UG9ydGFsVGFyZ2V0IHx8IG1lbnVQb3NpdGlvbiA9PT0gJ2ZpeGVkJyA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTWVudVBvcnRhbCwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgIGFwcGVuZFRvOiBtZW51UG9ydGFsVGFyZ2V0LFxuICAgICAgICBjb250cm9sRWxlbWVudDogdGhpcy5jb250cm9sUmVmLFxuICAgICAgICBtZW51UGxhY2VtZW50OiBtZW51UGxhY2VtZW50LFxuICAgICAgICBtZW51UG9zaXRpb246IG1lbnVQb3NpdGlvblxuICAgICAgfSksIG1lbnVFbGVtZW50KSA6IG1lbnVFbGVtZW50O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJGb3JtRmllbGRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRm9ybUZpZWxkKCkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczE5ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBkZWxpbWl0ZXIgPSBfdGhpcyRwcm9wczE5LmRlbGltaXRlcixcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMxOS5pc0Rpc2FibGVkLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczE5LmlzTXVsdGksXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzMTkubmFtZTtcbiAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IHRoaXMuc3RhdGUuc2VsZWN0VmFsdWU7XG4gICAgICBpZiAoIW5hbWUgfHwgaXNEaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICBpZiAoaXNNdWx0aSkge1xuICAgICAgICBpZiAoZGVsaW1pdGVyKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gc2VsZWN0VmFsdWUubWFwKGZ1bmN0aW9uIChvcHQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczYuZ2V0T3B0aW9uVmFsdWUob3B0KTtcbiAgICAgICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdHlwZTogXCJoaWRkZW5cIixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpbnB1dCA9IHNlbGVjdFZhbHVlLmxlbmd0aCA+IDAgPyBzZWxlY3RWYWx1ZS5tYXAoZnVuY3Rpb24gKG9wdCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgIGtleTogXCJpLVwiLmNvbmNhdChpKSxcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgdHlwZTogXCJoaWRkZW5cIixcbiAgICAgICAgICAgICAgdmFsdWU6IF90aGlzNi5nZXRPcHRpb25WYWx1ZShvcHQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSA6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdHlwZTogXCJoaWRkZW5cIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF92YWx1ZSA9IHNlbGVjdFZhbHVlWzBdID8gdGhpcy5nZXRPcHRpb25WYWx1ZShzZWxlY3RWYWx1ZVswXSkgOiAnJztcblxuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIHR5cGU6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgdmFsdWU6IF92YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyTGl2ZVJlZ2lvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJMaXZlUmVnaW9uKCkge1xuICAgICAgaWYgKCF0aGlzLnN0YXRlLmlzRm9jdXNlZCkgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaW5kZXguQTExeVRleHQsIHtcbiAgICAgICAgXCJhcmlhLWxpdmVcIjogXCJhc3NlcnRpdmVcIlxuICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBcIiwge1xuICAgICAgICBpZDogXCJhcmlhLXNlbGVjdGlvbi1ldmVudFwiXG4gICAgICB9LCBcIlxceEEwXCIsIHRoaXMuc3RhdGUuYXJpYUxpdmVTZWxlY3Rpb24pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicFwiLCB7XG4gICAgICAgIGlkOiBcImFyaWEtY29udGV4dFwiXG4gICAgICB9LCBcIlxceEEwXCIsIHRoaXMuY29uc3RydWN0QXJpYUxpdmVNZXNzYWdlKCkpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRjb21wb25lbnRzNCA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAgICBDb250cm9sID0gX3RoaXMkY29tcG9uZW50czQuQ29udHJvbCxcbiAgICAgICAgICBJbmRpY2F0b3JzQ29udGFpbmVyID0gX3RoaXMkY29tcG9uZW50czQuSW5kaWNhdG9yc0NvbnRhaW5lcixcbiAgICAgICAgICBTZWxlY3RDb250YWluZXIgPSBfdGhpcyRjb21wb25lbnRzNC5TZWxlY3RDb250YWluZXIsXG4gICAgICAgICAgVmFsdWVDb250YWluZXIgPSBfdGhpcyRjb21wb25lbnRzNC5WYWx1ZUNvbnRhaW5lcjtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIwID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIwLmNsYXNzTmFtZSxcbiAgICAgICAgICBpZCA9IF90aGlzJHByb3BzMjAuaWQsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzMjAuaXNEaXNhYmxlZCxcbiAgICAgICAgICBtZW51SXNPcGVuID0gX3RoaXMkcHJvcHMyMC5tZW51SXNPcGVuO1xuICAgICAgdmFyIGlzRm9jdXNlZCA9IHRoaXMuc3RhdGUuaXNGb2N1c2VkO1xuICAgICAgdmFyIGNvbW1vblByb3BzID0gdGhpcy5jb21tb25Qcm9wcyA9IHRoaXMuZ2V0Q29tbW9uUHJvcHMoKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNlbGVjdENvbnRhaW5lciwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBpbm5lclByb3BzOiB7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIG9uS2V5RG93bjogdGhpcy5vbktleURvd25cbiAgICAgICAgfSxcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWRcbiAgICAgIH0pLCB0aGlzLnJlbmRlckxpdmVSZWdpb24oKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb250cm9sLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICAgICAgaW5uZXJSZWY6IHRoaXMuZ2V0Q29udHJvbFJlZixcbiAgICAgICAgaW5uZXJQcm9wczoge1xuICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLm9uQ29udHJvbE1vdXNlRG93bixcbiAgICAgICAgICBvblRvdWNoRW5kOiB0aGlzLm9uQ29udHJvbFRvdWNoRW5kXG4gICAgICAgIH0sXG4gICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWQsXG4gICAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkLFxuICAgICAgICBtZW51SXNPcGVuOiBtZW51SXNPcGVuXG4gICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChWYWx1ZUNvbnRhaW5lciwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWRcbiAgICAgIH0pLCB0aGlzLnJlbmRlclBsYWNlaG9sZGVyT3JWYWx1ZSgpLCB0aGlzLnJlbmRlcklucHV0KCkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEluZGljYXRvcnNDb250YWluZXIsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkXG4gICAgICB9KSwgdGhpcy5yZW5kZXJDbGVhckluZGljYXRvcigpLCB0aGlzLnJlbmRlckxvYWRpbmdJbmRpY2F0b3IoKSwgdGhpcy5yZW5kZXJJbmRpY2F0b3JTZXBhcmF0b3IoKSwgdGhpcy5yZW5kZXJEcm9wZG93bkluZGljYXRvcigpKSksIHRoaXMucmVuZGVyTWVudSgpLCB0aGlzLnJlbmRlckZvcm1GaWVsZCgpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2VsZWN0O1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2VsZWN0O1xuXG5fZGVmaW5lUHJvcGVydHkoU2VsZWN0LCBcImRlZmF1bHRQcm9wc1wiLCBkZWZhdWx0UHJvcHMpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0UHJvcHMgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBkZWZhdWx0SW5wdXRWYWx1ZTogJycsXG4gIGRlZmF1bHRNZW51SXNPcGVuOiBmYWxzZSxcbiAgZGVmYXVsdFZhbHVlOiBudWxsXG59O1xuZXhwb3J0cy5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBtYW5hZ2VTdGF0ZSA9IGZ1bmN0aW9uIG1hbmFnZVN0YXRlKFNlbGVjdENvbXBvbmVudCkge1xuICB2YXIgX2NsYXNzLCBfdGVtcDtcblxuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFN0YXRlTWFuYWdlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBTdGF0ZU1hbmFnZXIoKSB7XG4gICAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGVNYW5hZ2VyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoU3RhdGVNYW5hZ2VyKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzZWxlY3RcIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInN0YXRlXCIsIHtcbiAgICAgICAgaW5wdXRWYWx1ZTogX3RoaXMucHJvcHMuaW5wdXRWYWx1ZSAhPT0gdW5kZWZpbmVkID8gX3RoaXMucHJvcHMuaW5wdXRWYWx1ZSA6IF90aGlzLnByb3BzLmRlZmF1bHRJbnB1dFZhbHVlLFxuICAgICAgICBtZW51SXNPcGVuOiBfdGhpcy5wcm9wcy5tZW51SXNPcGVuICE9PSB1bmRlZmluZWQgPyBfdGhpcy5wcm9wcy5tZW51SXNPcGVuIDogX3RoaXMucHJvcHMuZGVmYXVsdE1lbnVJc09wZW4sXG4gICAgICAgIHZhbHVlOiBfdGhpcy5wcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkID8gX3RoaXMucHJvcHMudmFsdWUgOiBfdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWVcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25DaGFuZ2VcIiwgZnVuY3Rpb24gKHZhbHVlLCBhY3Rpb25NZXRhKSB7XG4gICAgICAgIF90aGlzLmNhbGxQcm9wKCdvbkNoYW5nZScsIHZhbHVlLCBhY3Rpb25NZXRhKTtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbklucHV0Q2hhbmdlXCIsIGZ1bmN0aW9uICh2YWx1ZSwgYWN0aW9uTWV0YSkge1xuICAgICAgICAvLyBUT0RPOiBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHdlIGFsbG93IHRoZSBwcm9wIHRvIHJldHVybiBhIG5ld1xuICAgICAgICAvLyB2YWx1ZSwgYnV0IG5vdyBpbnB1dFZhbHVlIGlzIGEgY29udHJvbGxhYmxlIHByb3Agd2UgcHJvYmFibHkgc2hvdWxkbid0XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IF90aGlzLmNhbGxQcm9wKCdvbklucHV0Q2hhbmdlJywgdmFsdWUsIGFjdGlvbk1ldGEpO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpbnB1dFZhbHVlOiBuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkID8gbmV3VmFsdWUgOiB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25NZW51T3BlblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmNhbGxQcm9wKCdvbk1lbnVPcGVuJyk7XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG1lbnVJc09wZW46IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uTWVudUNsb3NlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuY2FsbFByb3AoJ29uTWVudUNsb3NlJyk7XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG1lbnVJc09wZW46IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoU3RhdGVNYW5hZ2VyLCBbe1xuICAgICAga2V5OiBcImZvY3VzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImJsdXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBibHVyKCkge1xuICAgICAgICB0aGlzLnNlbGVjdC5ibHVyKCk7XG4gICAgICB9IC8vIEZJWE1FOiB1bnR5cGVkIGZsb3cgY29kZSwgcmV0dXJuIGFueVxuXG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFByb3BcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcm9wKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wc1trZXldICE9PSB1bmRlZmluZWQgPyB0aGlzLnByb3BzW2tleV0gOiB0aGlzLnN0YXRlW2tleV07XG4gICAgICB9IC8vIEZJWE1FOiB1bnR5cGVkIGZsb3cgY29kZSwgcmV0dXJuIGFueVxuXG4gICAgfSwge1xuICAgICAga2V5OiBcImNhbGxQcm9wXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2FsbFByb3AobmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHNbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkcHJvcHM7XG5cbiAgICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gKF90aGlzJHByb3BzID0gdGhpcy5wcm9wcylbbmFtZV0uYXBwbHkoX3RoaXMkcHJvcHMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBkZWZhdWx0SW5wdXRWYWx1ZSA9IF90aGlzJHByb3BzMi5kZWZhdWx0SW5wdXRWYWx1ZSxcbiAgICAgICAgICAgIGRlZmF1bHRNZW51SXNPcGVuID0gX3RoaXMkcHJvcHMyLmRlZmF1bHRNZW51SXNPcGVuLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gX3RoaXMkcHJvcHMyLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzMiwgW1wiZGVmYXVsdElucHV0VmFsdWVcIiwgXCJkZWZhdWx0TWVudUlzT3BlblwiLCBcImRlZmF1bHRWYWx1ZVwiXSk7XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0Q29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihfcmVmKSB7XG4gICAgICAgICAgICBfdGhpczIuc2VsZWN0ID0gX3JlZjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGlucHV0VmFsdWU6IHRoaXMuZ2V0UHJvcCgnaW5wdXRWYWx1ZScpLFxuICAgICAgICAgIG1lbnVJc09wZW46IHRoaXMuZ2V0UHJvcCgnbWVudUlzT3BlbicpLFxuICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlLFxuICAgICAgICAgIG9uSW5wdXRDaGFuZ2U6IHRoaXMub25JbnB1dENoYW5nZSxcbiAgICAgICAgICBvbk1lbnVDbG9zZTogdGhpcy5vbk1lbnVDbG9zZSxcbiAgICAgICAgICBvbk1lbnVPcGVuOiB0aGlzLm9uTWVudU9wZW4sXG4gICAgICAgICAgdmFsdWU6IHRoaXMuZ2V0UHJvcCgndmFsdWUnKVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFN0YXRlTWFuYWdlcjtcbiAgfShfcmVhY3QuQ29tcG9uZW50KSwgX2RlZmluZVByb3BlcnR5KF9jbGFzcywgXCJkZWZhdWx0UHJvcHNcIiwgZGVmYXVsdFByb3BzKSwgX3RlbXA7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBtYW5hZ2VTdGF0ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5tYWtlQXN5bmNTZWxlY3QgPSBleHBvcnRzLmRlZmF1bHRQcm9wcyA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfU2VsZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TZWxlY3RcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbnZhciBfc3RhdGVNYW5hZ2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zdGF0ZU1hbmFnZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjYWNoZU9wdGlvbnM6IGZhbHNlLFxuICBkZWZhdWx0T3B0aW9uczogZmFsc2UsXG4gIGZpbHRlck9wdGlvbjogbnVsbFxufTtcbmV4cG9ydHMuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgbWFrZUFzeW5jU2VsZWN0ID0gZnVuY3Rpb24gbWFrZUFzeW5jU2VsZWN0KFNlbGVjdENvbXBvbmVudCkge1xuICB2YXIgX2NsYXNzLCBfdGVtcDtcblxuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEFzeW5jLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIEFzeW5jKHByb3BzKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBc3luYyk7XG5cbiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFzeW5jKS5jYWxsKHRoaXMpKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInNlbGVjdFwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwibGFzdFJlcXVlc3RcIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm1vdW50ZWRcIiwgZmFsc2UpO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib3B0aW9uc0NhY2hlXCIsIHt9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImhhbmRsZUlucHV0Q2hhbmdlXCIsIGZ1bmN0aW9uIChuZXdWYWx1ZSwgYWN0aW9uTWV0YSkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGNhY2hlT3B0aW9ucyA9IF90aGlzJHByb3BzLmNhY2hlT3B0aW9ucyxcbiAgICAgICAgICAgIG9uSW5wdXRDaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbklucHV0Q2hhbmdlOyAvLyBUT0RPXG5cbiAgICAgICAgdmFyIGlucHV0VmFsdWUgPSAoMCwgX3V0aWxzLmhhbmRsZUlucHV0Q2hhbmdlKShuZXdWYWx1ZSwgYWN0aW9uTWV0YSwgb25JbnB1dENoYW5nZSk7XG5cbiAgICAgICAgaWYgKCFpbnB1dFZhbHVlKSB7XG4gICAgICAgICAgZGVsZXRlIF90aGlzLmxhc3RSZXF1ZXN0O1xuXG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaW5wdXRWYWx1ZTogJycsXG4gICAgICAgICAgICBsb2FkZWRJbnB1dFZhbHVlOiAnJyxcbiAgICAgICAgICAgIGxvYWRlZE9wdGlvbnM6IFtdLFxuICAgICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHBhc3NFbXB0eU9wdGlvbnM6IGZhbHNlXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FjaGVPcHRpb25zICYmIF90aGlzLm9wdGlvbnNDYWNoZVtpbnB1dFZhbHVlXSkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGlucHV0VmFsdWU6IGlucHV0VmFsdWUsXG4gICAgICAgICAgICBsb2FkZWRJbnB1dFZhbHVlOiBpbnB1dFZhbHVlLFxuICAgICAgICAgICAgbG9hZGVkT3B0aW9uczogX3RoaXMub3B0aW9uc0NhY2hlW2lucHV0VmFsdWVdLFxuICAgICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHBhc3NFbXB0eU9wdGlvbnM6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHJlcXVlc3QgPSBfdGhpcy5sYXN0UmVxdWVzdCA9IHt9O1xuXG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgICAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHBhc3NFbXB0eU9wdGlvbnM6ICFfdGhpcy5zdGF0ZS5sb2FkZWRJbnB1dFZhbHVlXG4gICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubG9hZE9wdGlvbnMoaW5wdXRWYWx1ZSwgZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgaWYgKCFfdGhpcy5tb3VudGVkKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5vcHRpb25zQ2FjaGVbaW5wdXRWYWx1ZV0gPSBvcHRpb25zO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHJlcXVlc3QgIT09IF90aGlzLmxhc3RSZXF1ZXN0KSByZXR1cm47XG4gICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5sYXN0UmVxdWVzdDtcblxuICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBsb2FkZWRJbnB1dFZhbHVlOiBpbnB1dFZhbHVlLFxuICAgICAgICAgICAgICAgIGxvYWRlZE9wdGlvbnM6IG9wdGlvbnMgfHwgW10sXG4gICAgICAgICAgICAgICAgcGFzc0VtcHR5T3B0aW9uczogZmFsc2VcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICBkZWZhdWx0T3B0aW9uczogQXJyYXkuaXNBcnJheShwcm9wcy5kZWZhdWx0T3B0aW9ucykgPyBwcm9wcy5kZWZhdWx0T3B0aW9ucyA6IHVuZGVmaW5lZCxcbiAgICAgICAgaW5wdXRWYWx1ZTogdHlwZW9mIHByb3BzLmlucHV0VmFsdWUgIT09ICd1bmRlZmluZWQnID8gcHJvcHMuaW5wdXRWYWx1ZSA6ICcnLFxuICAgICAgICBpc0xvYWRpbmc6IHByb3BzLmRlZmF1bHRPcHRpb25zID09PSB0cnVlID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICBsb2FkZWRPcHRpb25zOiBbXSxcbiAgICAgICAgcGFzc0VtcHR5T3B0aW9uczogZmFsc2VcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEFzeW5jLCBbe1xuICAgICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHRoaXMucHJvcHMuZGVmYXVsdE9wdGlvbnM7XG4gICAgICAgIHZhciBpbnB1dFZhbHVlID0gdGhpcy5zdGF0ZS5pbnB1dFZhbHVlO1xuXG4gICAgICAgIGlmIChkZWZhdWx0T3B0aW9ucyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMubG9hZE9wdGlvbnMoaW5wdXRWYWx1ZSwgZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMyLm1vdW50ZWQpIHJldHVybjtcbiAgICAgICAgICAgIHZhciBpc0xvYWRpbmcgPSAhIV90aGlzMi5sYXN0UmVxdWVzdDtcblxuICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgZGVmYXVsdE9wdGlvbnM6IG9wdGlvbnMgfHwgW10sXG4gICAgICAgICAgICAgIGlzTG9hZGluZzogaXNMb2FkaW5nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgLy8gaWYgdGhlIGNhY2hlT3B0aW9ucyBwcm9wIGNoYW5nZXMsIGNsZWFyIHRoZSBjYWNoZVxuICAgICAgICBpZiAobmV4dFByb3BzLmNhY2hlT3B0aW9ucyAhPT0gdGhpcy5wcm9wcy5jYWNoZU9wdGlvbnMpIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnNDYWNoZSA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHRQcm9wcy5kZWZhdWx0T3B0aW9ucyAhPT0gdGhpcy5wcm9wcy5kZWZhdWx0T3B0aW9ucykge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZGVmYXVsdE9wdGlvbnM6IEFycmF5LmlzQXJyYXkobmV4dFByb3BzLmRlZmF1bHRPcHRpb25zKSA/IG5leHRQcm9wcy5kZWZhdWx0T3B0aW9ucyA6IHVuZGVmaW5lZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJmb2N1c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgICB0aGlzLnNlbGVjdC5mb2N1cygpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJibHVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYmx1cigpIHtcbiAgICAgICAgdGhpcy5zZWxlY3QuYmx1cigpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsb2FkT3B0aW9uc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRPcHRpb25zKGlucHV0VmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBsb2FkT3B0aW9ucyA9IHRoaXMucHJvcHMubG9hZE9wdGlvbnM7XG4gICAgICAgIGlmICghbG9hZE9wdGlvbnMpIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICB2YXIgbG9hZGVyID0gbG9hZE9wdGlvbnMoaW5wdXRWYWx1ZSwgY2FsbGJhY2spO1xuXG4gICAgICAgIGlmIChsb2FkZXIgJiYgdHlwZW9mIGxvYWRlci50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgbG9hZGVyLnRoZW4oY2FsbGJhY2ssIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBsb2FkT3B0aW9ucyA9IF90aGlzJHByb3BzMi5sb2FkT3B0aW9ucyxcbiAgICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzMiwgW1wibG9hZE9wdGlvbnNcIl0pO1xuXG4gICAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgICBkZWZhdWx0T3B0aW9ucyA9IF90aGlzJHN0YXRlLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IF90aGlzJHN0YXRlLmlucHV0VmFsdWUsXG4gICAgICAgICAgICBpc0xvYWRpbmcgPSBfdGhpcyRzdGF0ZS5pc0xvYWRpbmcsXG4gICAgICAgICAgICBsb2FkZWRJbnB1dFZhbHVlID0gX3RoaXMkc3RhdGUubG9hZGVkSW5wdXRWYWx1ZSxcbiAgICAgICAgICAgIGxvYWRlZE9wdGlvbnMgPSBfdGhpcyRzdGF0ZS5sb2FkZWRPcHRpb25zLFxuICAgICAgICAgICAgcGFzc0VtcHR5T3B0aW9ucyA9IF90aGlzJHN0YXRlLnBhc3NFbXB0eU9wdGlvbnM7XG4gICAgICAgIHZhciBvcHRpb25zID0gcGFzc0VtcHR5T3B0aW9ucyA/IFtdIDogaW5wdXRWYWx1ZSAmJiBsb2FkZWRJbnB1dFZhbHVlID8gbG9hZGVkT3B0aW9ucyA6IGRlZmF1bHRPcHRpb25zIHx8IFtdO1xuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChTZWxlY3RDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICAgIF90aGlzMy5zZWxlY3QgPSBfcmVmO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgICBpc0xvYWRpbmc6IGlzTG9hZGluZyxcbiAgICAgICAgICBvbklucHV0Q2hhbmdlOiB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQXN5bmM7XG4gIH0oX3JlYWN0LkNvbXBvbmVudCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MsIFwiZGVmYXVsdFByb3BzXCIsIGRlZmF1bHRQcm9wcyksIF90ZW1wO1xufTtcblxuZXhwb3J0cy5tYWtlQXN5bmNTZWxlY3QgPSBtYWtlQXN5bmNTZWxlY3Q7XG52YXIgU2VsZWN0U3RhdGUgPSAoMCwgX3N0YXRlTWFuYWdlci5kZWZhdWx0KShfU2VsZWN0LmRlZmF1bHQpO1xuXG52YXIgX2RlZmF1bHQgPSBtYWtlQXN5bmNTZWxlY3QoU2VsZWN0U3RhdGUpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgU2VsZWN0IGZyb20gJ3JlYWN0LXNlbGVjdC9saWIvQXN5bmMnXG5pbXBvcnQgeyB3aXRoVGhlbWUsIERlZmF1bHRUaGVtZSB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5pbXBvcnQgQXBpQ2xpZW50IGZyb20gJy4uLy4uLy4uL3V0aWxzL2FwaS1jbGllbnQnXG5pbXBvcnQgUHJvcGVydHlJbkVkaXQgZnJvbSAnLi4vLi4vdWkvcHJvcGVydHktaW4tZWRpdCdcbmltcG9ydCBzZWxlY3RTdHlsZXMgZnJvbSAnLi4vLi4vLi4vc3R5bGVzL3NlbGVjdC1zdHlsZXMnXG5pbXBvcnQgeyBFZGl0UHJvcGVydHlQcm9wcywgU2VsZWN0UmVjb3JkIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcbmltcG9ydCBSZWNvcmRKU09OIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9yZWNvcmQtanNvbi5pbnRlcmZhY2UnXG5cbnR5cGUgQ29tYmluZWRQcm9wcyA9IEVkaXRQcm9wZXJ0eVByb3BzICYge3RoZW1lOiBEZWZhdWx0VGhlbWV9XG50eXBlIFNlbGVjdFJlY29yZEVuaGFuY2VkID0gU2VsZWN0UmVjb3JkICYge1xuICByZWNvcmQ6IFJlY29yZEpTT047XG59XG5cbmNsYXNzIEVkaXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8Q29tYmluZWRQcm9wcz4ge1xuICBwcml2YXRlIHNlbGVjdGVkOiBSZWNvcmRKU09OIHwgbnVsbFxuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBDb21iaW5lZFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5zZWxlY3RlZCA9IG51bGxcbiAgICB0aGlzLmxvYWRPcHRpb25zID0gdGhpcy5sb2FkT3B0aW9ucy5iaW5kKHRoaXMpXG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpXG4gIH1cblxuICBoYW5kbGVDaGFuZ2Uoc2VsZWN0ZWQ6IFNlbGVjdFJlY29yZEVuaGFuY2VkKTogdm9pZCB7XG4gICAgY29uc3QgeyBvbkNoYW5nZSwgcHJvcGVydHkgfSA9IHRoaXMucHJvcHNcbiAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3RlZC5yZWNvcmRcbiAgICAgIG9uQ2hhbmdlKHByb3BlcnR5Lm5hbWUsIHNlbGVjdGVkLnZhbHVlLCBzZWxlY3RlZC5yZWNvcmQpXG4gICAgfSBlbHNlIHtcbiAgICAgIG9uQ2hhbmdlKHByb3BlcnR5Lm5hbWUsICcnKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGxvYWRPcHRpb25zKGlucHV0VmFsdWU6IHN0cmluZyk6IFByb21pc2U8QXJyYXk8U2VsZWN0UmVjb3JkRW5oYW5jZWQ+PiB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IGFwaSA9IG5ldyBBcGlDbGllbnQoKVxuXG4gICAgY29uc3QgcmVjb3JkcyA9IGF3YWl0IGFwaS5zZWFyY2hSZWNvcmRzKHtcbiAgICAgIHJlc291cmNlSWQ6IHByb3BlcnR5LnJlZmVyZW5jZSBhcyBzdHJpbmcsXG4gICAgICBxdWVyeTogaW5wdXRWYWx1ZSxcbiAgICB9KVxuICAgIHJldHVybiByZWNvcmRzLm1hcCgocmVjb3JkOiBSZWNvcmRKU09OKSA9PiAoe1xuICAgICAgdmFsdWU6IHJlY29yZC5pZCxcbiAgICAgIGxhYmVsOiByZWNvcmQudGl0bGUsXG4gICAgICByZWNvcmQsXG4gICAgfSkpXG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQsIHRoZW1lIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgZXJyb3IgPSByZWNvcmQuZXJyb3JzICYmIHJlY29yZC5lcnJvcnNbcHJvcGVydHkubmFtZV1cblxuICAgIGNvbnN0IHJlZmVyZW5jZSA9IHJlY29yZC5wb3B1bGF0ZWQgJiYgcmVjb3JkLnBvcHVsYXRlZFtwcm9wZXJ0eS5uYW1lXVxuICAgIGxldCBzZWxlY3RlZE9wdGlvbiA9IHJlZmVyZW5jZSAmJiB7XG4gICAgICB2YWx1ZTogcmVmZXJlbmNlLmlkLFxuICAgICAgbGFiZWw6IHJlZmVyZW5jZS50aXRsZSxcbiAgICB9XG4gICAgY29uc3Qgc3R5bGVzID0gc2VsZWN0U3R5bGVzKHRoZW1lKVxuXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWQpIHtcbiAgICAgIHNlbGVjdGVkT3B0aW9uID0ge1xuICAgICAgICB2YWx1ZTogdGhpcy5zZWxlY3RlZC5pZCxcbiAgICAgICAgbGFiZWw6IHRoaXMuc2VsZWN0ZWQudGl0bGUsXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQcm9wZXJ0eUluRWRpdCBwcm9wZXJ0eT17cHJvcGVydHl9IGVycm9yPXtlcnJvcn0+XG4gICAgICAgIDxTZWxlY3RcbiAgICAgICAgICBjYWNoZU9wdGlvbnNcbiAgICAgICAgICB2YWx1ZT17c2VsZWN0ZWRPcHRpb259XG4gICAgICAgICAgc3R5bGVzPXtzdHlsZXN9XG4gICAgICAgICAgZGVmYXVsdE9wdGlvbnNcbiAgICAgICAgICBsb2FkT3B0aW9ucz17dGhpcy5sb2FkT3B0aW9uc31cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgaXNEaXNhYmxlZD17cHJvcGVydHkuaXNEaXNhYmxlZH1cbiAgICAgICAgLz5cbiAgICAgIDwvUHJvcGVydHlJbkVkaXQ+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShFZGl0KVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5cbmltcG9ydCBWaWV3SGVscGVycyBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL3V0aWxzL3ZpZXctaGVscGVycydcbmltcG9ydCBQcm9wZXJ0eUpTT04gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Byb3BlcnR5LWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IFJlY29yZEpTT04gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3JlY29yZC1qc29uLmludGVyZmFjZSdcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcHJvcGVydHk6IFByb3BlcnR5SlNPTjtcbiAgcmVjb3JkOiBSZWNvcmRKU09OO1xufVxuXG5jb25zdCBSZWZlcmVuY2VWYWx1ZTogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCB9ID0gcHJvcHNcblxuICBjb25zdCBoID0gbmV3IFZpZXdIZWxwZXJzKClcbiAgY29uc3QgcmVmSWQgPSByZWNvcmQucGFyYW1zW3Byb3BlcnR5Lm5hbWVdXG4gIGNvbnN0IHBvcHVsYXRlZCA9IHJlY29yZC5wb3B1bGF0ZWRbcHJvcGVydHkubmFtZV1cbiAgY29uc3QgdmFsdWUgPSAocG9wdWxhdGVkICYmIHBvcHVsYXRlZC50aXRsZSkgfHwgcmVmSWRcblxuICBpZiAoIXByb3BlcnR5LnJlZmVyZW5jZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgcHJvcGVydHk6IFwiJHtwcm9wZXJ0eS5uYW1lfVwiIGRvZXMgbm90IGhhdmUgYSByZWZlcmVuY2VgKVxuICB9XG5cbiAgaWYgKHBvcHVsYXRlZCAmJiBwb3B1bGF0ZWQucmVjb3JkQWN0aW9ucy5maW5kKGEgPT4gYS5uYW1lID09PSAnc2hvdycpKSB7XG4gICAgY29uc3QgaHJlZiA9IGgucmVjb3JkQWN0aW9uVXJsKHtcbiAgICAgIHJlc291cmNlSWQ6IHByb3BlcnR5LnJlZmVyZW5jZSwgcmVjb3JkSWQ6IHJlZklkLCBhY3Rpb25OYW1lOiAnc2hvdycsXG4gICAgfSlcbiAgICByZXR1cm4gKFxuICAgICAgPExpbmsgdG89e2hyZWZ9Pnt2YWx1ZX08L0xpbms+XG4gICAgKVxuICB9XG4gIHJldHVybiAoXG4gICAgPHNwYW4+e3ZhbHVlfTwvc3Bhbj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWZlcmVuY2VWYWx1ZVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgUHJvcGVydHlJblNob3cgZnJvbSAnLi4vLi4vdWkvcHJvcGVydHktaW4tc2hvdydcbmltcG9ydCBSZWZlcmVuY2VWYWx1ZSBmcm9tICcuL3JlZmVyZW5jZS12YWx1ZSdcbmltcG9ydCB7IEVkaXRQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hvdyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8RWRpdFByb3BlcnR5UHJvcHM+IHtcbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkIH0gPSB0aGlzLnByb3BzXG5cbiAgICByZXR1cm4gKFxuICAgICAgPFByb3BlcnR5SW5TaG93IHByb3BlcnR5PXtwcm9wZXJ0eX0+XG4gICAgICAgIDxSZWZlcmVuY2VWYWx1ZVxuICAgICAgICAgIHByb3BlcnR5PXtwcm9wZXJ0eX1cbiAgICAgICAgICByZWNvcmQ9e3JlY29yZH1cbiAgICAgICAgLz5cbiAgICAgIDwvUHJvcGVydHlJblNob3c+XG4gICAgKVxuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBSZWZlcmVuY2VWYWx1ZSBmcm9tICcuL3JlZmVyZW5jZS12YWx1ZSdcbmltcG9ydCB7IEVkaXRQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlzdCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8RWRpdFByb3BlcnR5UHJvcHM+IHtcbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkIH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWZlcmVuY2VWYWx1ZVxuICAgICAgICBwcm9wZXJ0eT17cHJvcGVydHl9XG4gICAgICAgIHJlY29yZD17cmVjb3JkfVxuICAgICAgLz5cbiAgICApXG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBTZWxlY3QgZnJvbSAncmVhY3Qtc2VsZWN0L2xpYi9Bc3luYydcbmltcG9ydCB7IFRoZW1lUHJvcHMsIERlZmF1bHRUaGVtZSwgd2l0aFRoZW1lIH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgQXBpQ2xpZW50IGZyb20gJy4uLy4uLy4uL3V0aWxzL2FwaS1jbGllbnQnXG5cbmltcG9ydCBQcm9wZXJ0eUluRmlsdGVyIGZyb20gJy4uLy4uL3VpL3Byb3BlcnR5LWluLWZpbHRlcidcbmltcG9ydCB7IGZpbHRlclN0eWxlcyB9IGZyb20gJy4uLy4uLy4uL3N0eWxlcy9zZWxlY3Qtc3R5bGVzJ1xuaW1wb3J0IHsgRmlsdGVyUHJvcGVydHlQcm9wcywgU2VsZWN0UmVjb3JkIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcblxudHlwZSBDb21iaW5lZFByb3BzID0gRmlsdGVyUHJvcGVydHlQcm9wcyAmIFRoZW1lUHJvcHM8RGVmYXVsdFRoZW1lPlxuXG5jbGFzcyBGaWx0ZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PENvbWJpbmVkUHJvcHM+IHtcbiAgcHJpdmF0ZSBhcGk6IEFwaUNsaWVudFxuXG4gIHByaXZhdGUgb3B0aW9uczogQXJyYXk8U2VsZWN0UmVjb3JkPlxuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBDb21iaW5lZFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5hcGkgPSBuZXcgQXBpQ2xpZW50KClcbiAgICB0aGlzLm9wdGlvbnMgPSBbXVxuICAgIHRoaXMubG9hZE9wdGlvbnMgPSB0aGlzLmxvYWRPcHRpb25zLmJpbmQodGhpcylcbiAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcylcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZShzZWxlY3RlZDogU2VsZWN0UmVjb3JkKTogdm9pZCB7XG4gICAgY29uc3QgeyBvbkNoYW5nZSwgcHJvcGVydHkgfSA9IHRoaXMucHJvcHNcbiAgICBvbkNoYW5nZShwcm9wZXJ0eS5uYW1lLCBzZWxlY3RlZCA/IHNlbGVjdGVkLnZhbHVlIDogJycpXG4gIH1cblxuICBhc3luYyBsb2FkT3B0aW9ucyhpbnB1dFZhbHVlOiBzdHJpbmcpOiBQcm9taXNlPEFycmF5PHt2YWx1ZTogc3RyaW5nOyBsYWJlbDogc3RyaW5nIH0+PiB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHJlY29yZHMgPSBhd2FpdCB0aGlzLmFwaS5zZWFyY2hSZWNvcmRzKHtcbiAgICAgIHJlc291cmNlSWQ6IHByb3BlcnR5LnJlZmVyZW5jZSBhcyBzdHJpbmcsXG4gICAgICBxdWVyeTogaW5wdXRWYWx1ZSxcbiAgICB9KVxuICAgIHRoaXMub3B0aW9ucyA9IHJlY29yZHMubWFwKHIgPT4gKHsgdmFsdWU6IHIuaWQsIGxhYmVsOiByLnRpdGxlIH0pKVxuICAgIHJldHVybiB0aGlzLm9wdGlvbnNcbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIGZpbHRlciwgdGhlbWUgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiBmaWx0ZXJbcHJvcGVydHkubmFtZV0gPT09ICd1bmRlZmluZWQnID8gJycgOiBmaWx0ZXJbcHJvcGVydHkubmFtZV1cbiAgICBjb25zdCBzZWxlY3RlZCA9ICh0aGlzLm9wdGlvbnMgfHwgW10pLmZpbmQobyA9PiBvLnZhbHVlID09PSB2YWx1ZSlcbiAgICByZXR1cm4gKFxuICAgICAgPFByb3BlcnR5SW5GaWx0ZXIgcHJvcGVydHk9e3Byb3BlcnR5fT5cbiAgICAgICAgPFNlbGVjdFxuICAgICAgICAgIHZhbHVlPXt0eXBlb2Ygc2VsZWN0ZWQgPT09ICd1bmRlZmluZWQnID8gJycgOiBzZWxlY3RlZH1cbiAgICAgICAgICBpc0NsZWFyYWJsZVxuICAgICAgICAgIGNhY2hlT3B0aW9uc1xuICAgICAgICAgIHN0eWxlcz17ZmlsdGVyU3R5bGVzKHRoZW1lKX1cbiAgICAgICAgICBsb2FkT3B0aW9ucz17dGhpcy5sb2FkT3B0aW9uc31cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgZGVmYXVsdE9wdGlvbnNcbiAgICAgICAgLz5cbiAgICAgIDwvUHJvcGVydHlJbkZpbHRlcj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEZpbHRlcilcbiIsIlxuaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgUHJvcGVydHlJblNob3cgZnJvbSAnLi4vLi4vdWkvcHJvcGVydHktaW4tc2hvdydcbmltcG9ydCB7IEVkaXRQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi4vYmFzZS1wcm9wZXJ0eS1wcm9wcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hvdyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8RWRpdFByb3BlcnR5UHJvcHM+IHtcbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgcmVjb3JkIH0gPSB0aGlzLnByb3BzXG5cbiAgICBjb25zdCB2YWx1ZSA9IHJlY29yZC5wYXJhbXNbcHJvcGVydHkubmFtZV0gfHwgJydcblxuICAgIHJldHVybiAoXG4gICAgICA8UHJvcGVydHlJblNob3cgcHJvcGVydHk9e3Byb3BlcnR5fT5cbiAgICAgICAge3ZhbHVlLnNwbGl0KC8oPzpcXHJcXG58XFxyfFxcbikvZykubWFwKChsaW5lLCBpKSA9PiAoXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9e2l9PlxuICAgICAgICAgICAge2xpbmV9XG4gICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICApKX1cbiAgICAgIDwvUHJvcGVydHlJblNob3c+XG4gICAgKVxuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB3aXRoVGhlbWUsIERlZmF1bHRUaGVtZSB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5pbXBvcnQgUHJvcGVydHlJbkVkaXQgZnJvbSAnLi4vLi4vdWkvcHJvcGVydHktaW4tZWRpdCdcbmltcG9ydCBTdHlsZWRJbnB1dCBmcm9tICcuLi8uLi91aS9zdHlsZWQtaW5wdXQnXG5pbXBvcnQgeyBFZGl0UHJvcGVydHlQcm9wcyB9IGZyb20gJy4uL2Jhc2UtcHJvcGVydHktcHJvcHMnXG5cbnR5cGUgQ29tYmluZWRQcm9wcyA9IEVkaXRQcm9wZXJ0eVByb3BzICYge3RoZW1lOiBEZWZhdWx0VGhlbWV9XG5cbmNsYXNzIEVkaXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8Q29tYmluZWRQcm9wcz4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2UgPSB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlLmJpbmQodGhpcylcbiAgfVxuXG4gIGhhbmRsZUlucHV0Q2hhbmdlKGV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgeyBvbkNoYW5nZSwgcHJvcGVydHkgfSA9IHRoaXMucHJvcHNcbiAgICBvbkNoYW5nZShwcm9wZXJ0eS5uYW1lLCBldmVudC50YXJnZXQudmFsdWUpXG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHByb3BlcnR5LCByZWNvcmQgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB2YWx1ZSA9IChcbiAgICAgIHJlY29yZC5wYXJhbXNcbiAgICAgICYmIHR5cGVvZiByZWNvcmQucGFyYW1zW3Byb3BlcnR5Lm5hbWVdICE9PSAndW5kZWZpbmVkJ1xuICAgICAgJiYgcmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5uYW1lXSAhPT0gbnVsbFxuICAgIClcbiAgICAgID8gcmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5uYW1lXVxuICAgICAgOiAnJ1xuICAgIGNvbnN0IGVycm9yID0gcmVjb3JkLmVycm9ycyAmJiByZWNvcmQuZXJyb3JzW3Byb3BlcnR5Lm5hbWVdXG4gICAgcmV0dXJuIChcbiAgICAgIDxQcm9wZXJ0eUluRWRpdCBwcm9wZXJ0eT17cHJvcGVydHl9IGVycm9yPXtlcnJvcn0+XG4gICAgICAgIDxTdHlsZWRJbnB1dFxuICAgICAgICAgIGFzPVwidGV4dGFyZWFcIlxuICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0XCJcbiAgICAgICAgICByb3dzPXsodmFsdWUubWF0Y2goL1xcbi9nKSB8fCBbXSkubGVuZ3RoICsgMX1cbiAgICAgICAgICBpZD17cHJvcGVydHkubmFtZX1cbiAgICAgICAgICBuYW1lPXtwcm9wZXJ0eS5uYW1lfVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICBkaXNhYmxlZD17cHJvcGVydHkuaXNEaXNhYmxlZH1cbiAgICAgICAgLz5cbiAgICAgIDwvUHJvcGVydHlJbkVkaXQ+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShFZGl0KVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgUmVhY3RDb21wb25lbnRMaWtlIH0gZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBFcnJvckJvdW5kYXJ5IGZyb20gJy4uL2FwcC9lcnJvci1ib3VuZGFyeSdcblxuaW1wb3J0ICogYXMgQXJyYXlUeXBlIGZyb20gJy4vYXJyYXknXG5pbXBvcnQgKiBhcyBNaXhlZFR5cGUgZnJvbSAnLi9taXhlZCdcblxuaW1wb3J0ICogYXMgZGVmYXVsdFR5cGUgZnJvbSAnLi9kZWZhdWx0LXR5cGUnXG5pbXBvcnQgKiBhcyBib29sZWFuIGZyb20gJy4vYm9vbGVhbidcbmltcG9ydCAqIGFzIGRhdGV0aW1lIGZyb20gJy4vZGF0ZXRpbWUnXG5pbXBvcnQgKiBhcyByaWNodGV4dCBmcm9tICcuL3JpY2h0ZXh0J1xuaW1wb3J0ICogYXMgcmVmZXJlbmNlIGZyb20gJy4vcmVmZXJlbmNlJ1xuaW1wb3J0ICogYXMgdGV4dGFyZWEgZnJvbSAnLi90ZXh0YXJlYSdcbmltcG9ydCB7IEJhc2VQcm9wZXJ0eVByb3BzIH0gZnJvbSAnLi9iYXNlLXByb3BlcnR5LXByb3BzJ1xuaW1wb3J0IHsgUHJvcGVydHlQbGFjZSB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9wcm9wZXJ0eS1qc29uLmludGVyZmFjZSdcblxubGV0IGdsb2JhbEFueTogYW55ID0ge31cblxudHJ5IHtcbiAgZ2xvYmFsQW55ID0gd2luZG93XG59IGNhdGNoIChlcnJvcikge1xuICBpZiAoZXJyb3IubWVzc2FnZSAhPT0gJ3dpbmRvdyBpcyBub3QgZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbmNvbnN0IHR5cGVzID0ge1xuICB0ZXh0YXJlYSxcbiAgYm9vbGVhbixcbiAgZGF0ZXRpbWUsXG4gIHJlZmVyZW5jZSxcbiAgZGF0ZTogZGF0ZXRpbWUsXG4gIHJpY2h0ZXh0LFxufVxuXG50eXBlIFN0YXRlID0ge1xuICBpc0NsaWVudDogYm9vbGVhbjtcbn1cblxudHlwZSBQcm9wcyA9IEJhc2VQcm9wZXJ0eVByb3BzICYge1xuICAvKipcbiAgICogV2hlcmUgZ2l2ZW4gcHJvcGVydHkgc2hvdWxkIGJlIHJlbmRlcmVkXG4gICAqL1xuICB3aGVyZTogUHJvcGVydHlQbGFjZTtcbn1cblxuLyoqXG4gKiBDb21wb25lbnQgd2hpY2ggcmVuZGVycyBwcm9wZXJ0aWVzIGluIGFsbCB0aGUgcGxhY2VzIGluIHRoZSBBZG1pbkJybyBVSS4gQnkgYWxsIHRoZVxuICogcGxhY2VzIEkgbWVhbjpcbiAqIC0gKipsaXN0Kio6IG9uIHRoZSBMaXN0LFxuICogLSAqKmVkaXQqKjogb24gZGVmYXVsdCBhY3Rpb25zIHdoZXJlIHVzZXIgY2FuIG1vZGlmeSB0aGUgcmVjb3JkIGxpa2U6IHtAbGluayBFZGl0QWN0aW9ufSxcbiAqIGFuZCB7QGxpbmsgTmV3QWN0aW9ufSxcbiAqIC0gKipzaG93Kio6IG9uIHRoZSBkZWZhdWx0IHtAbGluayBTaG93QWN0aW9ufSB3aGVyZSB1c2VyIGNhbiBzZWUgdGhlIGRldGFpbHMgb2YgYSByZWNvcmQsXG4gKiAtICoqZmlsdGVyKio6IGFuZCBmaW5hbGx5IG9uIHRoZSBzaWRlYmFyIGZpbHRlcixcbiAqXG4gKiBCYXNlZCBvbiB0aGUgdHlwZSBvZiBnaXZlbiBwcm9wZXJ0eSBhbmQgd2hlcmUgdGhlIHByb3BlcnR5IGlzIHJlbmRlcmVkICoqQmFzZVByb3BlcnR5Q29tcG9uZW50KipcbiAqIHBpY2tzIENvbXBvbmVudCB0byB1c2UuIFRoYXQgaXMgaG93ICoqZGF0ZSoqIGZpZWxkcyBhcmUgcmVuZGVyZWQgYXMgKipkYXRlcGlja2VyKipcbiAqIG9yICoqYm9vbGVhbioqIHZhbHVlcyBhcyAqKmNoZWNrYm94KionZXMuXG4gKlxuICogWW91IGNhbiBvdmVycmlkZSBkZWZhdWx0IGJlaGF2aW9yIGJ5IGNoYW5naW5nICoqY29tcG9uZW50cyoqIHBhcmFtXG4gKiBmb3IgZ2l2ZW4gcHJvcGVydHkgaW4gKipBZG1pbkJyb09wdGlvbnMqKi4gVGFrZSBhIGxvb2sgYXQgdGhlIGZvbGxvd2luZyBleGFtcGxlOlxuICpcbiAqIGBgYFxuICogY29uc3QgQWRtaW5Ccm8gPSByZXF1aXJlKCdhZG1pbi1icm8nKVxuICogY29uc3QgUmVzb3VyY2VNb2RlbCA9IHJlcXVpcmUoJy4vcmVzb3VyY2UtbW9kZWwnKVxuICogY29uc3QgQWRtaW5Ccm9PcHRpb25zID0ge1xuICogICByZXNvdXJjZXM6IFt7XG4gKiAgICAgcmVzb3VyY2U6IFJlc291cmNlTW9kZWxcbiAqICAgICBvcHRpb25zOiB7XG4gKiAgICAgICBwcm9wZXJ0aWVzOiB7XG4gKiAgICAgICAgIG5hbWU6IHtcbiAqICAgICAgICAgICBjb21wb25lbnRzOiB7XG4gKiAgICAgICAgICAgICBzaG93OiBBZG1pbkJyby5idW5kbGUoJy4vbXktcmVhY3QtY29tcG9uZW50JyksXG4gKiAgICAgICAgICAgfSxcbiAqICAgICAgICAgfSxcbiAqICAgICAgIH0sXG4gKiAgICAgfSxcbiAqICAgfV0sXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBJbiB0aGUgZXhhbXBsZSBhYm92ZSB3ZSBhcmUgYWx0ZXJpbmcgaG93ICoqbmFtZSoqIHByb3BlcnR5IHdpbGwgbG9va1xuICogbGlrZSBvbiB0aGUge0BsaW5rIFNob3dBY3Rpb259LiBXaGVuIHdlIHdpbGwgZGVmaW5lICoqbXktcmVhY3QtY29tcG9uZW50LmpzeCoqIGxpa2UgdGhpczpcbiAqXG4gKiBgYGBcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCBQcm9wZXJ0eUluU2hvdyBmcm9tICdhZG1pbi1icm8nXG4gKlxuICogY29uc3QgTXlSZWFjdENvbXBvbmVudCA9IHByb3BzID0+IHtcbiAqICAgY29uc3QgeyByZWNvcmQsIHByb3BlcnR5IH0gPSBwcm9wc1xuICogICBjb25zdCB2YWx1ZSA9IHJlY29yZC5wYXJhbXNbcHJvcGVydHkubmFtZV0gPT09ICdmb28nID8gJ2JhcicgOiAnem9lJ1xuICogICByZXR1cm4gKFxuICogICAgIDxQcm9wZXJ0eUluU2hvdyBwcm9wZXJ0eT17cHJvcGVydHl9PlxuICogICAgICAge3ZhbHVlfVxuICogICAgIDwvUHJvcGVydHlJblNob3c+XG4gKiAgIClcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gcmVjb3JkIHZhbHVlIGZvciBnaXZlbiBwcm9wZXJ0eSAoKipuYW1lKiopIGVxdWFscyAnZm9vJyB3ZSB3aWxsIHJlbmRlciAnYmFyJyxcbiAqIG90aGVyd2lzZSAnem9lJ1xuICpcbiAqIFdlIGFsc28gdXNlIHtAbGluayBQcm9wZXJ0eUluU2hvd30gaGVscGVyIGNvbXBvbmVudCB0byByZW5kZXIgZmllbGQgd2l0aCBhIGxhYmVsIHRoYXQgaXQgbG9va3NcbiAqIHNpbWlsYXIgdG8gYWxyZWFkeSBkZWZpbmVkIHByb3BlcnRpZXMuIEZvciBvdGhlciBwbGFjZXMgeW91IGNhbiB1c2VcbiAqIGEgZGlmZmVyZW50IF93cmFwcGVyIGNvbXBvbmVudHNfOlxuICogLSBgZWRpdGA6IHtAbGluayBQcm9wZXJ0eUluRWRpdH1cbiAqIC0gYHNob3dgOiB7QGxpbmsgUHJvcGVydHlJblNob3d9XG4gKiAtIGBmaWx0ZXJgOiB7QGxpbmsgUHJvcGVydHlJbkZpbHRlcn1cbiAqIC0gYGxpc3RgOiBkb2Vzbid0IGhhdmUgYW55IHNwZWNpYWwgd3JhcHBlcixcbiAqXG4gKiBJbiB5b3VyIGNvbXBvbmVudHMgeW91IGhhdmUgYWNjZXNzIHRvIHRoZSBmb2xsb3dpbmcgcHJvcCB0eXBlczpcbiAqXG4gKiBAY29tcG9uZW50XG4gKiBAbmFtZSBCYXNlUHJvcGVydHlDb21wb25lbnRcbiAqIEBjYXRlZ29yeSBCYXNlXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYm9vbGVhblByb3BlcnR5ID0ge1xuICogICBpc1RpdGxlOiBmYWxzZSxcbiAqICAgbmFtZTogJ2F3ZXNvbWUnLFxuICogICBpc0lkOiBmYWxzZSxcbiAqICAgcG9zaXRpb246IC0xLFxuICogICBsYWJlbDogJ0kgYW0gYXdlc29tZScsXG4gKiAgIHR5cGU6ICdib29sZWFuJyxcbiAqIH1cbiAqXG4gKiBjb25zdCBzdHJpbmdQcm9wZXJ0eSA9IHtcbiAqICAgaXNUaXRsZTogdHJ1ZSxcbiAqICAgbmFtZTogJ25hbWUnLFxuICogICBpc0lkOiBmYWxzZSxcbiAqICAgcG9zaXRpb246IC0xLFxuICogICBsYWJlbDogJ05hbWUgb2YgYSB1c2VyJyxcbiAqICAgdHlwZTogJ3N0cmluZycsXG4gKiB9XG4gKiAvLyBSZXNvdXJjZSBpcyB0YWtlbiBmcm9tIHRoZSBkYXRhYmFzZVxuICogY29uc3QgcmVzb3VyY2UgPSB7XG4gKiAgIGlkOiAnVXNlcicsXG4gKiAgIG5hbWU6ICdVc2VyIE1vZGVsJyxcbiAqICAgdGl0bGVQcm9wZXJ0eTogJ25hbWUnLFxuICogICByZXNvdXJjZUFjdGlvbnM6IFtdLFxuICogICBsaXN0UHJvcGVydGllczogW2Jvb2xlYW5Qcm9wZXJ0eSwgc3RyaW5nUHJvcGVydHldLFxuICogICBlZGl0UHJvcGVydGllczogW2Jvb2xlYW5Qcm9wZXJ0eSwgc3RyaW5nUHJvcGVydHldLFxuICogICBzaG93UHJvcGVydGllczogW2Jvb2xlYW5Qcm9wZXJ0eSwgc3RyaW5nUHJvcGVydHldLFxuICogICBmaWx0ZXJQcm9wZXJ0aWVzOiBbYm9vbGVhblByb3BlcnR5LCBzdHJpbmdQcm9wZXJ0eV0sXG4gKiB9XG4gKlxuICogY29uc3QgcmVjb3JkID0ge1xuICogICBpZDogJzEnLFxuICogICB0aXRsZTogJ0pvaG4nLFxuICogICBwYXJhbXM6IHtcbiAqICAgICBuYW1lOiAnSm9obicsXG4gKiAgICAgZ2VuZGVyOiAnbWFsZScsXG4gKiAgIH0sXG4gKiAgIHJlY29yZEFjdGlvbnM6IFtdLFxuICogfVxuICpcbiAqIHJldHVybiAoXG4gKiAgIDxXcmFwcGVyQm94IGJvcmRlcj5cbiAqICAgICA8QmFzZVByb3BlcnR5Q29tcG9uZW50XG4gKiAgICAgICBwcm9wZXJ0eT17Ym9vbGVhblByb3BlcnR5fVxuICogICAgICAgcmVzb3VyY2U9e3Jlc291cmNlfVxuICogICAgICAgd2hlcmU9XCJlZGl0XCJcbiAqICAgICAgIHJlY29yZD17cmVjb3JkfVxuICogICAgIC8+XG4gKiAgICAgPEJhc2VQcm9wZXJ0eUNvbXBvbmVudFxuICogICAgICAgcHJvcGVydHk9e3N0cmluZ1Byb3BlcnR5fVxuICogICAgICAgcmVzb3VyY2U9e3Jlc291cmNlfVxuICogICAgICAgd2hlcmU9XCJlZGl0XCJcbiAqICAgICAgIHJlY29yZD17cmVjb3JkfVxuICogICAgIC8+XG4gKiAgIDwvV3JhcHBlckJveD5cbiAqIClcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZVByb3BlcnR5Q29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNDbGllbnQ6IGZhbHNlLFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc0NsaWVudDogdHJ1ZSB9KVxuICB9XG5cbiAgc3RhdGljIERlZmF1bHRUeXBlXG5cbiAgc3RhdGljIEJvb2xlYW5cblxuICBzdGF0aWMgRGF0ZVRpbWVcblxuICBzdGF0aWMgUmljaFRleHRcblxuICBzdGF0aWMgUmVmZXJlbmNlXG5cbiAgc3RhdGljIFRleHRBcmVhXG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSwgcmVzb3VyY2UsIHJlY29yZCwgZmlsdGVyLCB3aGVyZSwgb25DaGFuZ2UgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB7IGlzQ2xpZW50IH0gPSB0aGlzLnN0YXRlXG5cbiAgICBsZXQgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudExpa2UgPSAodHlwZXNbcHJvcGVydHkudHlwZV0gJiYgdHlwZXNbcHJvcGVydHkudHlwZV1bd2hlcmVdKVxuICAgIHx8IGRlZmF1bHRUeXBlW3doZXJlXVxuXG4gICAgaWYgKHByb3BlcnR5LmNvbXBvbmVudHMgJiYgcHJvcGVydHkuY29tcG9uZW50c1t3aGVyZV0gJiYgaXNDbGllbnQpIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHByb3BlcnR5LmNvbXBvbmVudHNbd2hlcmVdXG4gICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHRoZXJlIGlzIG5vIFwiJHtwcm9wZXJ0eS5uYW1lfS5jb21wb25lbnRzLiR7d2hlcmV9XCJgKVxuICAgICAgfVxuICAgICAgQ29tcG9uZW50ID0gZ2xvYmFsQW55LkFkbWluQnJvLlVzZXJDb21wb25lbnRzW2NvbXBvbmVudF1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxFcnJvckJvdW5kYXJ5PlxuICAgICAgICAgIDxDb21wb25lbnRcbiAgICAgICAgICAgIHByb3BlcnR5PXtwcm9wZXJ0eX1cbiAgICAgICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgICAgIHJlY29yZD17cmVjb3JkfVxuICAgICAgICAgICAgZmlsdGVyPXtmaWx0ZXJ9XG4gICAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IEFycmF5ID0gQXJyYXlUeXBlW3doZXJlXVxuICAgIGNvbnN0IE1peGVkID0gTWl4ZWRUeXBlW3doZXJlXVxuXG4gICAgaWYgKHByb3BlcnR5LmlzQXJyYXkpIHtcbiAgICAgIGlmICghQXJyYXkpIHsgcmV0dXJuICg8ZGl2IC8+KSB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8QXJyYXlcbiAgICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgICAgICBJdGVtQ29tcG9uZW50PXtCYXNlUHJvcGVydHlDb21wb25lbnR9XG4gICAgICAgIC8+XG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKHByb3BlcnR5LnR5cGUgPT09ICdtaXhlZCcgJiYgcHJvcGVydHkuc3ViUHJvcGVydGllcyAmJiBwcm9wZXJ0eS5zdWJQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgaWYgKCFNaXhlZCkgeyByZXR1cm4gKDxkaXYgLz4pIH1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxNaXhlZFxuICAgICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICAgIEl0ZW1Db21wb25lbnQ9e0Jhc2VQcm9wZXJ0eUNvbXBvbmVudH1cbiAgICAgICAgLz5cbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEVycm9yQm91bmRhcnk+XG4gICAgICAgIDxDb21wb25lbnRcbiAgICAgICAgICBwcm9wZXJ0eT17cHJvcGVydHl9XG4gICAgICAgICAgcmVzb3VyY2U9e3Jlc291cmNlfVxuICAgICAgICAgIHJlY29yZD17cmVjb3JkfVxuICAgICAgICAgIGZpbHRlcj17ZmlsdGVyfVxuICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgLz5cbiAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICApXG4gIH1cbn1cblxuXG5mdW5jdGlvbiBjYW1lbGl6ZVByb3BlcnR5VHlwZTxUPih0eXBlOiB7W2tleTogc3RyaW5nXTogVH0pOiB7W2tleTogc3RyaW5nXTogVH0ge1xuICByZXR1cm4ge1xuICAgIEVkaXQ6IHR5cGUuZWRpdCxcbiAgICBTaG93OiB0eXBlLnNob3csXG4gICAgTGlzdDogdHlwZS5saXN0LFxuICAgIEZpbHRlcjogdHlwZS5maWx0ZXIsXG4gIH1cbn1cblxuQmFzZVByb3BlcnR5Q29tcG9uZW50LkRlZmF1bHRUeXBlID0gY2FtZWxpemVQcm9wZXJ0eVR5cGUoZGVmYXVsdFR5cGUpXG5CYXNlUHJvcGVydHlDb21wb25lbnQuQm9vbGVhbiA9IGNhbWVsaXplUHJvcGVydHlUeXBlKGJvb2xlYW4pXG5CYXNlUHJvcGVydHlDb21wb25lbnQuRGF0ZVRpbWUgPSBjYW1lbGl6ZVByb3BlcnR5VHlwZShkYXRldGltZSlcbkJhc2VQcm9wZXJ0eUNvbXBvbmVudC5SaWNoVGV4dCA9IGNhbWVsaXplUHJvcGVydHlUeXBlKHJpY2h0ZXh0KVxuQmFzZVByb3BlcnR5Q29tcG9uZW50LlJlZmVyZW5jZSA9IGNhbWVsaXplUHJvcGVydHlUeXBlKHJlZmVyZW5jZSlcbkJhc2VQcm9wZXJ0eUNvbXBvbmVudC5UZXh0QXJlYSA9IGNhbWVsaXplUHJvcGVydHlUeXBlKHRleHRhcmVhKVxuIiwiZXhwb3J0IGVudW0gUHJvcGVydHlQbGFjZSB7XG4gIHNob3cgPSAnc2hvdycsXG4gIGxpc3QgPSAnbGlzdCcsXG4gIGVkaXQgPSAnZWRpdCcsXG4gIGZpbHRlciA9ICdmaWx0ZXInLFxufVxuXG4vKipcbiAqIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYSBQcm9wZXJ0eS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgaW50ZXJmYWNlIFByb3BlcnR5SlNPTiB7XG4gIC8qKlxuICAgKiBJZiBnaXZlbiBwcm9wZXJ0eSBzaG91bGQgYmUgdHJlYXRlZCBhcyBhIHRpdGxlXG4gICAqL1xuICBpc1RpdGxlOiBib29sZWFuO1xuICAvKipcbiAgICogSWYgZ2l2ZW4gcHJvcGVydHkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgYSBJZCBmaWVsZFxuICAgKi9cbiAgaXNJZDogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFByb3BlcnR5IHBvc2l0aW9uIG9uIGEgbGlzdFxuICAgKi9cbiAgcG9zaXRpb246IG51bWJlcjtcbiAgLyoqXG4gICAqIElmIHByb3BlcnR5IGlzIHNvcnRhYmxlXG4gICAqL1xuICBpc1NvcnRhYmxlOiBib29sZWFuO1xuICAvKipcbiAgICogSWYgcHJvcGVydHkgaGFzIHJlc3RyaWN0ZWQgbnVtYmVyIG9mIHZhbHVlc1xuICAgKi9cbiAgYXZhaWxhYmxlVmFsdWVzOiBBcnJheTx7bGFiZWw6IHN0cmluZzsgdmFsdWU6IHN0cmluZ30+IHwgbnVsbDtcbiAgLyoqXG4gICAqIFByb3BlcnR5IHVuaXEgbmFtZS9wYXRoXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBQcm9wZXJ0eSBsYWJlbFxuICAgKi9cbiAgbGFiZWw6IHN0cmluZztcbiAgLyoqXG4gICAqIFByb3BlcnR5IHR5cGVcbiAgICovXG4gIHR5cGU6IHN0cmluZztcbiAgLyoqXG4gICAqIEhhcyBhIG5hbWUgb2YgYSByZXNvdXJjZSB0byB3aGljaCBpdCBpcyBhIHJlZmVyZW5jZS5cbiAgICogRm9yIGluc3RhbmNlIHByb3BlcnR5IGB1c2VySWRgIHdpbGwgaGF2ZSBoZXJlIGBVc2Vyc2BcbiAgICovXG4gIHJlZmVyZW5jZTogc3RyaW5nIHwgbnVsbDtcbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiBwcm9wZXJ0eSBpcyBhbiBhcnJheSBvZiBwcm9wZXJ0aWVzXG4gICAqL1xuICBpc0FycmF5OiBib29sZWFuO1xuICAvKipcbiAgICogQ29udGFpbiBsaXN0IG9mIGFsbCBzdWIgcHJvcGVydGllc1xuICAgKi9cbiAgc3ViUHJvcGVydGllczogQXJyYXk8UHJvcGVydHlKU09OPjtcbiAgLyoqXG4gICAqIEFsbCBjb21wb25lbnRzIG92ZXJyaWRkZW4gYnkgdGhlIHVzZXIgaW4gUHJvcGVydHlPcHRpb25zXG4gICAqL1xuICBjb21wb25lbnRzPzoge1xuICAgIHNob3c/OiBzdHJpbmc7XG4gICAgZWRpdD86IHN0cmluZztcbiAgICBmaWx0ZXI/OiBzdHJpbmc7XG4gICAgbGlzdD86IHN0cmluZztcbiAgfTtcblxuICAvKipcbiAgICogQ3VzdG9tIHBhcmFtZXRlcnMgcGFzc2VkIGZyb20gdGhlIHtAbGluayBQcm9wZXJ0eU9wdGlvbnMuY3VzdG9tfVxuICAgKi9cbiAgY3VzdG9tOiB7XG4gICAgW2tleTogc3RyaW5nXTogYm9vbGVhbiB8IHN0cmluZyB8IG51bWJlciB8IERhdGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGZpZWxkIHNob3VsZCBiZSBkaXNhYmxlZCBpbiBlZGl0aW9uXG4gICAqL1xuICBpc0Rpc2FibGVkOiBib29sZWFuO1xufVxuIiwiaW1wb3J0IHsgZmxhdHRlbiwgdW5mbGF0dGVuIH0gZnJvbSAnZmxhdCdcblxuaW1wb3J0IFJlY29yZEpTT04gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3JlY29yZC1qc29uLmludGVyZmFjZSdcblxuLyoqXG4gKiBDaGFuZ2VzIFJlY29yZEpTT04gdGhhdCBpdCBjYW4gYmUgc2VuZCBhcyBhIEZvcm1EYXRhIHRvIHRoZSBiYWNrZW5kLlxuICpcbiAqIEBwYXJhbSAgIHtSZWNvcmRKU09OfSAgcmVjb3JkXG4gKiBAcmV0dXJuICB7Rm9ybURhdGF9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlY29yZFRvRm9ybURhdGEocmVjb3JkOiBSZWNvcmRKU09OKTogRm9ybURhdGEge1xuICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpXG5cbiAgLy8gRmlyc3QgbGV0IG1ha2Ugc3VyZSB0aGF0IGFsbCB0aGUgZmllbGRzIGluIHRoZSByZWNvcmQucGFyYW1zIGFyZSBwcm9wZXJseSBmbGF0dGVuLlxuICAvLyBUaGF0IGlzIHdoeSB3ZSB1bmZsYXR0ZW4gYWxsIHByb3BlcnRpZXMgYW5kIGNyZWF0ZSByZWd1bGFyIG9iamVjdCwgd2hlcmUgZmxhdFxuICAvLyBvdmVyd3JpdGUgcHJldmVudHMgZnJvbSBoYXZpbmcgMiBrZXlzIHJlZmVyZW5jaW5nIHRoZSBzYW1lIHByb3BlcnR5LiBBbmRcbiAgLy8gdGhlIHJlc3VsdCBpcyBmbGF0dGVuIGFnYWluLlxuICBjb25zdCBub3JtYWxpemVkUGFyYW1zID0gZmxhdHRlbjxzdHJpbmcsIGFueT4odW5mbGF0dGVuKHJlY29yZC5wYXJhbXMsIHsgb3ZlcndyaXRlOiB0cnVlIH0pKVxuICBPYmplY3QuZW50cmllcyhub3JtYWxpemVkUGFyYW1zKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAvLyBmbGF0dGVuIGRvZXMgbm90IGNoYW5nZSBlbXB0eSBvYmplY3RzIFwie31cIiAtIHNvIGluIG9yZGVyIHRvIHByZXZlbnQgaGF2aW5nIHRoZW0gY2hhbmdlZCB0b1xuICAgIC8vIFwiW29iamVjdCBPYmplY3RdXCIgd2UgaGF2ZSB0byBzZXQgdGhlbSB0byBlbXB0eSBzdHJpbmdzLiBGaWxlIG9iamVjdHMgaGFzIHRvIGdvIHRocm91Z2guXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgKHZhbHVlIGFzIG9iamVjdCkuY29uc3RydWN0b3IgIT09IEZpbGUpIHtcbiAgICAgIGZvcm1EYXRhLnNldChrZXksICcnKVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtRGF0YS5zZXQoa2V5LCB2YWx1ZSBhcyBzdHJpbmcpXG4gICAgfVxuICB9KVxuICByZXR1cm4gZm9ybURhdGFcbn1cbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUsIENvbXBvbmVudENsYXNzIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbmltcG9ydCBQcm9wZXJ0eVR5cGUgZnJvbSAnLi4vcHJvcGVydHktdHlwZSdcbmltcG9ydCBBcGlDbGllbnQgZnJvbSAnLi4vLi4vdXRpbHMvYXBpLWNsaWVudCdcbmltcG9ydCBXcmFwcGVyQm94IGZyb20gJy4uL3VpL3dyYXBwZXItYm94J1xuaW1wb3J0IFN0eWxlZEJ1dHRvbiBmcm9tICcuLi91aS9zdHlsZWQtYnV0dG9uJ1xuaW1wb3J0IHdpdGhOb3RpY2UsIHsgQWRkTm90aWNlUHJvcHMgfSBmcm9tICcuLi8uLi9zdG9yZS93aXRoLW5vdGljZSdcbmltcG9ydCB7IEFjdGlvblByb3BzIH0gZnJvbSAnLi9hY3Rpb24ucHJvcHMnXG5pbXBvcnQgeyBQcm9wZXJ0eVBsYWNlIH0gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Byb3BlcnR5LWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IFJlY29yZEpTT04gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3JlY29yZC1qc29uLmludGVyZmFjZSdcbmltcG9ydCByZWNvcmRUb0Zvcm1EYXRhIGZyb20gJy4vcmVjb3JkLXRvLWZvcm0tZGF0YSdcblxudHlwZSBTdGF0ZSA9IHtcbiAgcmVjb3JkOiBSZWNvcmRKU09OO1xuICBsb2FkaW5nOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBuYW1lIE5ld0FjdGlvblxuICogQGNhdGVnb3J5IEFjdGlvbnNcbiAqIEBkZXNjcmlwdGlvbiBTaG93cyBmb3JtIGZvciBjcmVhdGluZyBhIGdpdmVuIHJlY29yZC5cbiAqIEBjb21wb25lbnRcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIE5ldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxBY3Rpb25Qcm9wcyAmIEFkZE5vdGljZVByb3BzICYgUm91dGVDb21wb25lbnRQcm9wcywgU3RhdGU+IHtcbiAgcHJpdmF0ZSBhcGk6IEFwaUNsaWVudFxuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgY29uc3QgeyByZWNvcmQgfSA9IHByb3BzXG4gICAgdGhpcy5hcGkgPSBuZXcgQXBpQ2xpZW50KClcbiAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcmVjb3JkOiB7XG4gICAgICAgIC4uLnJlY29yZCxcbiAgICAgICAgcGFyYW1zOiAocmVjb3JkICYmIHJlY29yZC5wYXJhbXMpIHx8IHt9LFxuICAgICAgICBlcnJvcnM6IChyZWNvcmQgJiYgcmVjb3JkLmVycm9ycykgfHwge30sXG4gICAgICAgIHBvcHVsYXRlZDogKHJlY29yZCAmJiByZWNvcmQucG9wdWxhdGVkKSB8fCB7fSxcbiAgICAgIH0sXG4gICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICB9XG4gIH1cblxuICBoYW5kbGVDaGFuZ2UocHJvcGVydHlPclJlY29yZDogc3RyaW5nIHwgUmVjb3JkSlNPTiwgdmFsdWU/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyAmJiAocHJvcGVydHlPclJlY29yZCBhcyBSZWNvcmRKU09OKS5wYXJhbXMpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICByZWNvcmQ6IHByb3BlcnR5T3JSZWNvcmQgYXMgUmVjb3JkSlNPTixcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4gKHtcbiAgICAgICAgcmVjb3JkOiB7XG4gICAgICAgICAgLi4uc3RhdGUucmVjb3JkLFxuICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgLi4uc3RhdGUucmVjb3JkLnBhcmFtcyxcbiAgICAgICAgICAgIFtwcm9wZXJ0eU9yUmVjb3JkIGFzIHN0cmluZ106IHZhbHVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KSlcbiAgICB9XG4gIH1cblxuICBoYW5kbGVTdWJtaXQoZXZlbnQpOiBib29sZWFuIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgeyByZXNvdXJjZSwgaGlzdG9yeSwgYWRkTm90aWNlIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyByZWNvcmQgfSA9IHRoaXMuc3RhdGVcblxuICAgIGNvbnN0IGZvcm1EYXRhID0gcmVjb3JkVG9Gb3JtRGF0YShyZWNvcmQpXG5cbiAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSB9KVxuICAgIHRoaXMuYXBpLnJlc291cmNlQWN0aW9uKHtcbiAgICAgIHJlc291cmNlSWQ6IHJlc291cmNlLmlkLFxuICAgICAgYWN0aW9uTmFtZTogJ25ldycsXG4gICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJyB9LFxuICAgIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2UuZGF0YS5ub3RpY2UpIHtcbiAgICAgICAgYWRkTm90aWNlKHJlc3BvbnNlLmRhdGEubm90aWNlKVxuICAgICAgfVxuICAgICAgaWYgKHJlc3BvbnNlLmRhdGEucmVkaXJlY3RVcmwpIHtcbiAgICAgICAgaGlzdG9yeS5wdXNoKHJlc3BvbnNlLmRhdGEucmVkaXJlY3RVcmwpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHN0YXRlID0+ICh7XG4gICAgICAgICAgcmVjb3JkOiB7XG4gICAgICAgICAgICAuLi5zdGF0ZS5yZWNvcmQsXG4gICAgICAgICAgICBlcnJvcnM6IHJlc3BvbnNlLmRhdGEucmVjb3JkLmVycm9ycyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICB9KSlcbiAgICAgIH1cbiAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogZmFsc2UgfSlcbiAgICAgIGFkZE5vdGljZSh7XG4gICAgICAgIG1lc3NhZ2U6ICdUaGVyZSB3YXMgYW4gZXJyb3IgY3JlYXRpbmcgcmVjb3JkLCBDaGVjayBvdXQgY29uc29sZSB0byBzZWUgbW9yZSBpbmZvcm1hdGlvbi4nLFxuICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgfSlcbiAgICB9KVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyByZXNvdXJjZSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSByZXNvdXJjZS5lZGl0UHJvcGVydGllc1xuICAgIGNvbnN0IHsgcmVjb3JkLCBsb2FkaW5nIH0gPSB0aGlzLnN0YXRlXG4gICAgcmV0dXJuIChcbiAgICAgIDxXcmFwcGVyQm94IGJvcmRlcj5cbiAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyl9PlxuICAgICAgICAgIHtwcm9wZXJ0aWVzLm1hcChwcm9wZXJ0eSA9PiAoXG4gICAgICAgICAgICA8UHJvcGVydHlUeXBlXG4gICAgICAgICAgICAgIGtleT17cHJvcGVydHkubmFtZX1cbiAgICAgICAgICAgICAgd2hlcmU9e1Byb3BlcnR5UGxhY2UuZWRpdH1cbiAgICAgICAgICAgICAgcHJvcGVydHk9e3Byb3BlcnR5fVxuICAgICAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgcmVjb3JkPXtyZWNvcmR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkpfVxuICAgICAgICAgIDxTdHlsZWRCdXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgaXMtcHJpbWFyeSR7bG9hZGluZyA/ICcgaXMtbG9hZGluZycgOiAnJ31gfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImljb21vb24tc2F2ZVwiIC8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJidG4tdGV4dFwiPlNhdmU8L3NwYW4+XG4gICAgICAgICAgPC9TdHlsZWRCdXR0b24+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgIDwvV3JhcHBlckJveD5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aE5vdGljZSh3aXRoUm91dGVyKE5ldykpYXMgdW5rbm93biBhcyBDb21wb25lbnRDbGFzczxBY3Rpb25Qcm9wcz5cbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuXG5pbXBvcnQgeyBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuaW1wb3J0IFByb3BlcnR5VHlwZSBmcm9tICcuLi9wcm9wZXJ0eS10eXBlJ1xuaW1wb3J0IFdyYXBwZXJCb3ggZnJvbSAnLi4vdWkvd3JhcHBlci1ib3gnXG5pbXBvcnQgU3R5bGVkQnV0dG9uIGZyb20gJy4uL3VpL3N0eWxlZC1idXR0b24nXG5pbXBvcnQgQXBpQ2xpZW50IGZyb20gJy4uLy4uL3V0aWxzL2FwaS1jbGllbnQnXG5pbXBvcnQgd2l0aE5vdGljZSwgeyBBZGROb3RpY2VQcm9wcyB9IGZyb20gJy4uLy4uL3N0b3JlL3dpdGgtbm90aWNlJ1xuaW1wb3J0IFJlY29yZEpTT04gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3JlY29yZC1qc29uLmludGVyZmFjZSdcbmltcG9ydCB7IEFjdGlvblByb3BzIH0gZnJvbSAnLi9hY3Rpb24ucHJvcHMnXG5pbXBvcnQgeyBQcm9wZXJ0eVBsYWNlIH0gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Byb3BlcnR5LWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IHJlY29yZFRvRm9ybURhdGEgZnJvbSAnLi9yZWNvcmQtdG8tZm9ybS1kYXRhJ1xuXG4vKipcbiAqIEBuYW1lIEVkaXRBY3Rpb25cbiAqIEBjYXRlZ29yeSBBY3Rpb25zXG4gKiBAZGVzY3JpcHRpb24gU2hvd3MgZm9ybSBmb3IgdXBkYXRpbmcgYSBnaXZlbiByZWNvcmQuXG4gKiBAcHJpdmF0ZVxuICogQGNvbXBvbmVudFxuICovXG5jbGFzcyBFZGl0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEFjdGlvblByb3BzICYgUm91dGVDb21wb25lbnRQcm9wcyAmIEFkZE5vdGljZVByb3BzLCBTdGF0ZT4ge1xuICBwcml2YXRlIGFwaTogQXBpQ2xpZW50XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICBjb25zdCB7IHJlY29yZCB9ID0gcHJvcHNcbiAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcmVjb3JkLFxuICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgfVxuICAgIHRoaXMuYXBpID0gbmV3IEFwaUNsaWVudCgpXG4gIH1cblxuICBoYW5kbGVDaGFuZ2UocHJvcGVydHlPclJlY29yZDogUmVjb3JkSlNPTiB8IHN0cmluZywgdmFsdWU/OiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyAmJiAocHJvcGVydHlPclJlY29yZCBhcyBSZWNvcmRKU09OKS5wYXJhbXMpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICByZWNvcmQ6IHByb3BlcnR5T3JSZWNvcmQgYXMgUmVjb3JkSlNPTixcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4gKHtcbiAgICAgICAgcmVjb3JkOiB7XG4gICAgICAgICAgLi4uc3RhdGUucmVjb3JkLFxuICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgLi4uc3RhdGUucmVjb3JkLnBhcmFtcyxcbiAgICAgICAgICAgIFtwcm9wZXJ0eU9yUmVjb3JkIGFzIHN0cmluZ106IHZhbHVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KSlcbiAgICB9XG4gIH1cblxuICBoYW5kbGVTdWJtaXQoZXZlbnQpOiBib29sZWFuIHtcbiAgICBjb25zdCB7IHJlc291cmNlLCBoaXN0b3J5LCBhZGROb3RpY2UgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB7IHJlY29yZCB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgY29uc3QgZm9ybURhdGEgPSByZWNvcmRUb0Zvcm1EYXRhKHJlY29yZClcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiB0cnVlIH0pXG5cbiAgICB0aGlzLmFwaS5yZWNvcmRBY3Rpb24oe1xuICAgICAgcmVzb3VyY2VJZDogcmVzb3VyY2UuaWQsXG4gICAgICBhY3Rpb25OYW1lOiAnZWRpdCcsXG4gICAgICByZWNvcmRJZDogcmVjb3JkLmlkLFxuICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScgfSxcbiAgICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubm90aWNlKSB7XG4gICAgICAgIGFkZE5vdGljZShyZXNwb25zZS5kYXRhLm5vdGljZSlcbiAgICAgIH1cbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLnJlZGlyZWN0VXJsKSB7XG4gICAgICAgIGhpc3RvcnkucHVzaChyZXNwb25zZS5kYXRhLnJlZGlyZWN0VXJsKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSA9PiAoe1xuICAgICAgICAgIHJlY29yZDoge1xuICAgICAgICAgICAgLi4uc3RhdGUucmVjb3JkLFxuICAgICAgICAgICAgZXJyb3JzOiByZXNwb25zZS5kYXRhLnJlY29yZC5lcnJvcnMsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSkpXG4gICAgICB9XG4gICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pXG4gICAgICBhZGROb3RpY2Uoe1xuICAgICAgICBtZXNzYWdlOiAnVGhlcmUgd2FzIGFuIGVycm9yIHVwZGF0aW5nIHJlY29yZCwgQ2hlY2sgb3V0IGNvbnNvbGUgdG8gc2VlIG1vcmUgaW5mb3JtYXRpb24uJyxcbiAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgIH0pXG4gICAgfSlcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHJlc291cmNlIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgcHJvcGVydGllcyA9IHJlc291cmNlLmVkaXRQcm9wZXJ0aWVzXG4gICAgY29uc3QgeyByZWNvcmQsIGxvYWRpbmcgfSA9IHRoaXMuc3RhdGVcblxuICAgIHJldHVybiAoXG4gICAgICA8V3JhcHBlckJveCBib3JkZXI+XG4gICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpfT5cbiAgICAgICAgICB7cHJvcGVydGllcy5tYXAocHJvcGVydHkgPT4gKFxuICAgICAgICAgICAgPFByb3BlcnR5VHlwZVxuICAgICAgICAgICAgICBrZXk9e3Byb3BlcnR5Lm5hbWV9XG4gICAgICAgICAgICAgIHdoZXJlPXtQcm9wZXJ0eVBsYWNlLmVkaXR9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgcHJvcGVydHk9e3Byb3BlcnR5fVxuICAgICAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgICAgICAgIHJlY29yZD17cmVjb3JkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgICA8U3R5bGVkQnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17YGlzLXByaW1hcnkke2xvYWRpbmcgPyAnIGlzLWxvYWRpbmcnIDogJyd9YH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJpY29tb29uLXNhdmVcIiAvPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYnRuLXRleHRcIj5TYXZlPC9zcGFuPlxuICAgICAgICAgIDwvU3R5bGVkQnV0dG9uPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L1dyYXBwZXJCb3g+XG4gICAgKVxuICB9XG59XG5cbi8qKlxuICogQG1lbWJlcm9mIEVkaXRcbiAqL1xudHlwZSBTdGF0ZSA9IHtcbiAgcmVjb3JkOiBSZWNvcmRKU09OO1xuICBsb2FkaW5nOiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoTm90aWNlKHdpdGhSb3V0ZXIoRWRpdCkpXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCBQcm9wZXJ0eVR5cGUgZnJvbSAnLi4vcHJvcGVydHktdHlwZSdcbmltcG9ydCBXcmFwcGVyQm94IGZyb20gJy4uL3VpL3dyYXBwZXItYm94J1xuaW1wb3J0IHsgQWN0aW9uUHJvcHMgfSBmcm9tICcuL2FjdGlvbi5wcm9wcydcbmltcG9ydCB7IFByb3BlcnR5UGxhY2UgfSBmcm9tICcuLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcHJvcGVydHktanNvbi5pbnRlcmZhY2UnXG5cbi8qKlxuICogQG5hbWUgU2hvd0FjdGlvblxuICogQGNhdGVnb3J5IEFjdGlvbnNcbiAqIEBkZXNjcmlwdGlvbiBTaG93cyBhIGdpdmVuIHJlY29yZC5cbiAqIEBjb21wb25lbnRcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IFNob3c6IFJlYWN0LkZDPEFjdGlvblByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHJlc291cmNlLCByZWNvcmQgfSA9IHByb3BzXG4gIGNvbnN0IHByb3BlcnRpZXMgPSByZXNvdXJjZS5zaG93UHJvcGVydGllc1xuXG4gIHJldHVybiAoXG4gICAgPFdyYXBwZXJCb3ggYm9yZGVyPlxuICAgICAge3Byb3BlcnRpZXMubWFwKHByb3BlcnR5ID0+IChcbiAgICAgICAgPFByb3BlcnR5VHlwZVxuICAgICAgICAgIGtleT17cHJvcGVydHkubmFtZX1cbiAgICAgICAgICB3aGVyZT17UHJvcGVydHlQbGFjZS5zaG93fVxuICAgICAgICAgIHByb3BlcnR5PXtwcm9wZXJ0eX1cbiAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgICAgcmVjb3JkPXtyZWNvcmR9XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICA8L1dyYXBwZXJCb3g+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2hvd1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcblxuaW1wb3J0IEFjdGlvbkJ1dHRvbiBmcm9tICcuLi9hY3Rpb24tYnV0dG9uJ1xuaW1wb3J0IFByb3BlcnR5VHlwZSBmcm9tICcuLi8uLi9wcm9wZXJ0eS10eXBlJ1xuaW1wb3J0IERyb3Bkb3duIGZyb20gJy4uLy4uL3VpL2Ryb3Bkb3duJ1xuaW1wb3J0IFBsYWNlaG9sZGVyIGZyb20gJy4uLy4uL3VpL3BsYWNlaG9sZGVyJ1xuaW1wb3J0IFJlc291cmNlSlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVzb3VyY2UtanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgUmVjb3JkSlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVjb3JkLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgUHJvcGVydHlQbGFjZSB9IGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9wcm9wZXJ0eS1qc29uLmludGVyZmFjZSdcblxuY29uc3QgVGQgPSBzdHlsZWQudGRgXG4gICYmJiB7XG4gICAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuZGVmYXVsdFRleHR9O1xuICAgICYgYTpub3QoLmluLWRyb3Bkb3duKSB7XG4gICAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5wcmltYXJ5fTtcbiAgICB9XG4gICAgJi5tYWluIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIH1cbiAgICAmLnNlbGVjdGVkIHtcbiAgICAgIGJvcmRlci1sZWZ0OiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ01pbn0gJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5wcmltYXJ5fSBzb2xpZDtcbiAgICB9XG4gICAgJi5ub3Qtc2VsZWN0ZWQge1xuICAgICAgYm9yZGVyLWxlZnQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nTWlufSBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICB9XG4gIH1cbmBcblxudHlwZSBQcm9wcyA9IHtcbiAgcmVzb3VyY2U6IFJlc291cmNlSlNPTjtcbiAgcmVjb3JkOiBSZWNvcmRKU09OO1xuICBhY3Rpb25QZXJmb3JtZWQ/OiAoYWN0aW9uTmFtZTogc3RyaW5nKSA9PiBhbnk7XG4gIGlzTG9hZGluZz86IGJvb2xlYW47XG4gIG9uU2VsZWN0PzogKHJlY29yZDogUmVjb3JkSlNPTikgPT4gdm9pZDtcbiAgaXNTZWxlY3RlZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlY29yZEluTGlzdCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8UHJvcHM+IHtcbiAgcmVuZGVyKCk6IFJlYWN0LlJlYWN0Q2hpbGQge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlc291cmNlLCByZWNvcmQsXG4gICAgICBhY3Rpb25QZXJmb3JtZWQsIGlzTG9hZGluZyxcbiAgICAgIG9uU2VsZWN0LCBpc1NlbGVjdGVkLFxuICAgIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyByZWNvcmRBY3Rpb25zIH0gPSByZWNvcmRcbiAgICByZXR1cm4gKFxuICAgICAgPHRyPlxuICAgICAgICA8VGQgY2xhc3NOYW1lPXtpc1NlbGVjdGVkID8gJ3NlbGVjdGVkJyA6ICdub3Qtc2VsZWN0ZWQnfT5cbiAgICAgICAgICB7b25TZWxlY3QgJiYgcmVjb3JkLmJ1bGtBY3Rpb25zLmxlbmd0aCA/IChcbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICBvbkNoYW5nZT17KCk6IHZvaWQgPT4gb25TZWxlY3QocmVjb3JkKX1cbiAgICAgICAgICAgICAgY2hlY2tlZD17aXNTZWxlY3RlZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvVGQ+XG4gICAgICAgIHtyZXNvdXJjZS5saXN0UHJvcGVydGllcy5tYXAocHJvcGVydHkgPT4gKFxuICAgICAgICAgIDxUZFxuICAgICAgICAgICAga2V5PXtwcm9wZXJ0eS5uYW1lfVxuICAgICAgICAgICAgZGF0YS1wcm9wZXJ0eS1uYW1lPXtwcm9wZXJ0eS5uYW1lfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtyZXNvdXJjZS50aXRsZVByb3BlcnR5Lm5hbWUgPT09IHByb3BlcnR5Lm5hbWUgPyAnbWFpbicgOiB1bmRlZmluZWR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2lzTG9hZGluZyA/IChcbiAgICAgICAgICAgICAgPFBsYWNlaG9sZGVyIHN0eWxlPXt7IGhlaWdodDogMTQgfX0gLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxQcm9wZXJ0eVR5cGVcbiAgICAgICAgICAgICAgICBrZXk9e3Byb3BlcnR5Lm5hbWV9XG4gICAgICAgICAgICAgICAgd2hlcmU9e1Byb3BlcnR5UGxhY2UubGlzdH1cbiAgICAgICAgICAgICAgICBwcm9wZXJ0eT17cHJvcGVydHl9XG4gICAgICAgICAgICAgICAgcmVzb3VyY2U9e3Jlc291cmNlfVxuICAgICAgICAgICAgICAgIHJlY29yZD17cmVjb3JkfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L1RkPlxuICAgICAgICApKX1cbiAgICAgICAgPFRkIGtleT1cIm9wdGlvbnNcIj5cbiAgICAgICAgICB7cmVjb3JkQWN0aW9ucy5sZW5ndGggPyAoXG4gICAgICAgICAgICA8RHJvcGRvd24gY2xhc3NOYW1lPVwiaXMtcmlnaHQgaXMtaG92ZXJhYmxlXCI+XG4gICAgICAgICAgICAgIHtyZWNvcmRBY3Rpb25zLm1hcChhY3Rpb24gPT4gKFxuICAgICAgICAgICAgICAgIDxBY3Rpb25CdXR0b25cbiAgICAgICAgICAgICAgICAgIGFjdGlvbj17YWN0aW9ufVxuICAgICAgICAgICAgICAgICAga2V5PXthY3Rpb24ubmFtZX1cbiAgICAgICAgICAgICAgICAgIHJlc291cmNlSWQ9e3Jlc291cmNlLmlkfVxuICAgICAgICAgICAgICAgICAgcmVjb3JkSWQ9e3JlY29yZC5pZH1cbiAgICAgICAgICAgICAgICAgIGFjdGlvblBlcmZvcm1lZD17YWN0aW9uUGVyZm9ybWVkfVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaXMtd2hpdGUgaW4tZHJvcGRvd25cIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgICApIDogJyd9XG4gICAgICAgIDwvVGQ+XG4gICAgICA8L3RyPlxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCB7IE5hdkxpbmssIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuXG5pbXBvcnQgeyBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuaW1wb3J0IFByb3BlcnR5SlNPTiBmcm9tICcuLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcHJvcGVydHktanNvbi5pbnRlcmZhY2UnXG5cbmNvbnN0IFN0eWxlZExpbmsgPSBzdHlsZWQoTmF2TGluaykuYXR0cnMoe1xuICBjbGFzc05hbWU6ICdpcy1zb3J0YWJsZSB0ZXh0LXNtYWxsJyxcbn0pYFxuICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5saWdodFRleHR9O1xuXG4gICYuYWN0aXZlIHtcbiAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5wcmltYXJ5fTtcbiAgfVxuXG4gICYgPiBpIHtcbiAgICBtYXJnaW4tbGVmdDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9XG4gIH1cbmBcblxudHlwZSBQcm9wcyA9IHtcbiAgcHJvcGVydHk6IFByb3BlcnR5SlNPTjtcbiAgZGlyZWN0aW9uPzogJ2FzYycgfCAnZGVzYyc7XG4gIHNvcnRCeT86IHN0cmluZztcbn1cblxuY2xhc3MgU29ydExpbmsgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFByb3BzICYgUm91dGVDb21wb25lbnRQcm9wcz4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuaXNBY3RpdmUgPSB0aGlzLmlzQWN0aXZlLmJpbmQodGhpcylcbiAgfVxuXG4gIGlzQWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgc29ydEJ5LCBwcm9wZXJ0eSB9ID0gdGhpcy5wcm9wc1xuICAgIHJldHVybiBzb3J0QnkgPT09IHByb3BlcnR5Lm5hbWVcbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIGxvY2F0aW9uLCBkaXJlY3Rpb24gfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBxdWVyeSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMobG9jYXRpb24uc2VhcmNoKVxuICAgIGNvbnN0IG9wcG9zaXRlRGlyZWN0aW9uID0gKHRoaXMuaXNBY3RpdmUoKSAmJiBkaXJlY3Rpb24gPT09ICdhc2MnKSA/ICdkZXNjJyA6ICdhc2MnXG4gICAgY29uc3Qgc29ydGVkQnlDbGFzcyA9IGBpY29tb29uLWRyb3Bkb3duLSR7ZGlyZWN0aW9uID09PSAnYXNjJyA/ICdvcGVuJyA6ICdjbG9zZSd9YFxuXG4gICAgcXVlcnkuc2V0KCdkaXJlY3Rpb24nLCBvcHBvc2l0ZURpcmVjdGlvbilcbiAgICBxdWVyeS5zZXQoJ3NvcnRCeScsIHByb3BlcnR5Lm5hbWUpXG5cbiAgICByZXR1cm4gKFxuICAgICAgPFN0eWxlZExpbmsgdG89e3sgc2VhcmNoOiBxdWVyeS50b1N0cmluZygpIH19IGlzQWN0aXZlPXt0aGlzLmlzQWN0aXZlfT5cbiAgICAgICAge3Byb3BlcnR5LmxhYmVsfVxuICAgICAgICB7dGhpcy5pc0FjdGl2ZSgpID8gKDxpIGNsYXNzTmFtZT17c29ydGVkQnlDbGFzc30gLz4pIDogJyd9XG4gICAgICA8L1N0eWxlZExpbms+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoU29ydExpbmspXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5jb25zdCBUaCA9IHN0eWxlZC50aGBcbiAgJiYmIHtcbiAgICBmb250LXNpemU6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5mb250cy5taW59O1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMubGlnaHRUZXh0fTtcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgIHBhZGRpbmc6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nfTtcbiAgICBsZXR0ZXItc3BhY2luZzogMC4xZW07XG4gICAgYm9yZGVyOiBub25lO1xuICB9XG5gXG5cbmV4cG9ydCBkZWZhdWx0IFRoXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCBQcm9wZXJ0eUpTT04gZnJvbSAnLi4vLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Byb3BlcnR5LWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IFNvcnRMaW5rIGZyb20gJy4uL3NvcnQtbGluaydcbmltcG9ydCBUaCBmcm9tICcuL3N0eWxlZC90aC5zdHlsZWQnXG5cbnR5cGUgUHJvcHMgPSB7XG4gIHByb3BlcnR5OiBQcm9wZXJ0eUpTT047XG4gIC8qKlxuICAgKiBQcm9wZXJ0eSB3aGljaCBzaG91bGQgYmUgdHJlYXRlZCBhcyBtYWluIHByb3BlcnR5LlxuICAgKi9cbiAgdGl0bGVQcm9wZXJ0eTogUHJvcGVydHlKU09OO1xuICAvKipcbiAgICogY3VycmVudGx5IHNlbGVjdGVkIGRpcmVjdGlvbi4gRWl0aGVyICdhc2MnIG9yICdkZXNjJy5cbiAgICovXG4gIGRpcmVjdGlvbj86ICdhc2MnIHwgJ2Rlc2MnO1xuICAvKipcbiAgICogY3VycmVudGx5IHNlbGVjdGVkIGZpZWxkIGJ5IHdoaWNoIGxpc3QgaXMgc29ydGVkLlxuICAgKi9cbiAgc29ydEJ5Pzogc3RyaW5nO1xufVxuXG5jb25zdCBQcm9wZXJ0eUhlYWRlcjogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcHJvcGVydHksIHRpdGxlUHJvcGVydHkgfSA9IHByb3BzXG5cbiAgY29uc3QgaXNNYWluID0gcHJvcGVydHkubmFtZSA9PT0gdGl0bGVQcm9wZXJ0eS5uYW1lXG5cbiAgcmV0dXJuIChcbiAgICA8VGggY2xhc3NOYW1lPXtpc01haW4gPyAnbWFpbicgOiB1bmRlZmluZWR9PlxuICAgICAge3Byb3BlcnR5LmlzU29ydGFibGUgPyA8U29ydExpbmsgey4uLnByb3BzfSAvPiA6IHByb3BlcnR5LmxhYmVsfVxuICAgIDwvVGg+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvcGVydHlIZWFkZXJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IFByb3BlcnR5SGVhZGVyIGZyb20gJy4vcHJvcGVydHktaGVhZGVyJ1xuaW1wb3J0IFByb3BlcnR5SlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcHJvcGVydHktanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgVGggZnJvbSAnLi9zdHlsZWQvdGguc3R5bGVkJ1xuXG4vKipcbiAqIEBtZW1iZXJvZiBSZWNvcmRzVGFibGVIZWFkZXJcbiAqIEBhbGlhcyBSZWNvcmRzVGFibGVIZWFkZXJcbiAqL1xudHlwZSBQcm9wcyA9IHtcbiAgLyoqXG4gICAqIFByb3BlcnR5IHdoaWNoIHNob3VsZCBiZSB0cmVhdGVkIGFzIGEgVGl0bGUgUHJvcGVydHlcbiAgICovXG4gIHRpdGxlUHJvcGVydHk6IFByb3BlcnR5SlNPTjtcbiAgLyoqXG4gICAqIEFsbCBwcm9wZXJ0aWVzIHdoaWNoIHNob3VsZCBiZSBwcmVzZW50ZWRcbiAgICovXG4gIHByb3BlcnRpZXM6IEFycmF5PFByb3BlcnR5SlNPTj47XG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBwcm9wZXJ0eSB3aGljaCBzaG91bGQgYmUgbWFya2VkIGFzIGN1cnJlbnRseSBzb3J0ZWQgYnlcbiAgICovXG4gIHNvcnRCeT86IHN0cmluZztcbiAgLyoqXG4gICAqIFNvcnQgZGlyZWN0aW9uXG4gICAqL1xuICBkaXJlY3Rpb24/OiAnYXNjJyB8ICdkZXNjJztcbiAgLyoqXG4gICAqIEhhbmRsZXIgZnVuY3Rpb24gaW52b2tlZCB3aGVuIGNoZWNrYm94IGlzIGNsaWNrZWQuIElmIGdpdmVuIGV4dHJhIGNvbHVtblxuICAgKiB3aXRoIGNoZWNrYm94IHdpbGwgYmUgcmVuZGVyZWRcbiAgICovXG4gIG9uU2VsZWN0QWxsPzogKCkgPT4gYW55O1xuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIFwiYnVsa1wiIGNoZWNrYm94IHNob3VsZCBiZSBjaGVja2VkXG4gICAqL1xuICBzZWxlY3RlZEFsbD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogUHJpbnRzIGB0aGVhZGAgc2VjdGlvbiBmb3IgdGFibGUgd2l0aCByZWNvcmRzLlxuICpcbiAqIEBjb21wb25lbnRcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkxpc3Qgd2l0aCAyIHByb3BlcnRpZXM8L2NhcHRpb24+XG4gKiBjb25zdCBwcm9wZXJ0aWVzID0gW3tcbiAqICAgbGFiZWw6ICdGaXJzdCBOYW1lJyxcbiAqICAgbmFtZTogJ2ZpcnN0TmFtZScsXG4gKiAgIGlzU29ydGFibGU6IHRydWUsXG4gKiB9LCB7XG4gKiAgIGxhYmVsOiAnTGFzdCBOYW1lJyxcbiAqICAgbmFtZTogJ2xhc3ROYW1lJyxcbiAqIH1dXG4gKiByZXR1cm4gKFxuICogPFdyYXBwZXJCb3ggYm9yZGVyPlxuICogICA8VGFibGU+XG4gKiAgICA8UmVjb3Jkc1RhYmxlSGVhZGVyXG4gKiAgICAgIHByb3BlcnRpZXM9e3Byb3BlcnRpZXN9XG4gKiAgICAgIHRpdGxlUHJvcGVydHk9e3Byb3BlcnRpZXNbMF19XG4gKiAgICAgIHNvcnRCeT17J2ZpcnN0TmFtZSd9XG4gKiAgICAgIGRpcmVjdGlvbj17J2FzYyd9XG4gKiAgICAvPlxuICogICAgPHRib2R5Pjx0cj5cbiAqICAgICAgPHRkPkpvaG48L3RkPlxuICogICAgICA8dGQ+RG9lPC90ZD5cbiAqICAgICAgPHRkPjxTdHlsZWRCdXR0b24+RG8gc29tZXRoaW5nIHdpdGggSm9objwvU3R5bGVkQnV0dG9uPjwvdGQ+XG4gKiAgICA8L3RyPjwvdGJvZHk+XG4gKiAgIDwvVGFibGU+XG4gKiA8L1dyYXBwZXJCb3g+XG4gKiApXG4gKi9cbmNvbnN0IFJlY29yZHNUYWJsZUhlYWRlcjogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICB0aXRsZVByb3BlcnR5LCBwcm9wZXJ0aWVzLFxuICAgIHNvcnRCeSwgZGlyZWN0aW9uLFxuICAgIG9uU2VsZWN0QWxsLCBzZWxlY3RlZEFsbCB9ID0gcHJvcHNcbiAgcmV0dXJuIChcbiAgICA8dGhlYWQ+XG4gICAgICA8dHIga2V5PVwiaGVhZGVyXCI+XG4gICAgICAgIHtvblNlbGVjdEFsbCA/IChcbiAgICAgICAgICA8VGg+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luTGVmdDogNSB9fVxuICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICBvbkNoYW5nZT17KCk6IHZvaWQgPT4gb25TZWxlY3RBbGwoKX1cbiAgICAgICAgICAgICAgY2hlY2tlZD17c2VsZWN0ZWRBbGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvVGg+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgICB7cHJvcGVydGllcy5tYXAocHJvcGVydHkgPT4gKFxuICAgICAgICAgIDxQcm9wZXJ0eUhlYWRlclxuICAgICAgICAgICAga2V5PXtwcm9wZXJ0eS5uYW1lfVxuICAgICAgICAgICAgdGl0bGVQcm9wZXJ0eT17dGl0bGVQcm9wZXJ0eX1cbiAgICAgICAgICAgIHByb3BlcnR5PXtwcm9wZXJ0eX1cbiAgICAgICAgICAgIHNvcnRCeT17c29ydEJ5fVxuICAgICAgICAgICAgZGlyZWN0aW9uPXtkaXJlY3Rpb259XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICAgIDx0aCBrZXk9XCJhY3Rpb25zXCIgc3R5bGU9e3sgd2lkdGg6IDgwIH19IC8+XG4gICAgICA8L3RyPlxuICAgIDwvdGhlYWQ+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVjb3Jkc1RhYmxlSGVhZGVyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuaW1wb3J0IFZpZXdIZWxwZXJzIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzJ1xuaW1wb3J0IFJlc291cmNlSlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVzb3VyY2UtanNvbi5pbnRlcmZhY2UnXG5cbnR5cGUgUHJvcHMgPSB7XG4gIHJlc291cmNlOiBSZXNvdXJjZUpTT047XG59XG5cbmNvbnN0IE5vUmVjb3JkczogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcmVzb3VyY2UgfSA9IHByb3BzXG4gIGNvbnN0IGNhbkNyZWF0ZSA9IHJlc291cmNlLnJlc291cmNlQWN0aW9ucy5maW5kKGEgPT4gYS5uYW1lID09PSAnbmV3JylcbiAgY29uc3QgaCA9IG5ldyBWaWV3SGVscGVycygpXG4gIGNvbnN0IG5ld0FjdGlvbiA9IGgucmVzb3VyY2VBY3Rpb25VcmwoeyByZXNvdXJjZUlkOiByZXNvdXJjZS5pZCwgYWN0aW9uTmFtZTogJ25ldycgfSlcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudCBoYXMtdGV4dC1jZW50ZXJlZFwiPlxuICAgICAgPGgzPk5vIHJlY29yZHM8L2gzPlxuICAgICAgPHA+XG4gICAgICAgIFRoZXJlIGFyZSBubyByZWNvcmRzIGluIHRoaXMgcmVzb3VyY2UuXG4gICAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgPHNwYW4+Q3JlYXRlIDwvc3Bhbj5cbiAgICAgICAgICAgIDxMaW5rIHRvPXtuZXdBY3Rpb259PmZpcnN0IHJlY29yZDwvTGluaz5cbiAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICApIDogJyd9XG4gICAgICA8L3A+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9SZWNvcmRzXG4iLCJpbXBvcnQgUmVjb3JkSlNPTiBmcm9tICcuLi8uLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVjb3JkLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IEFjdGlvbkpTT04gZnJvbSAnLi4vLi4vLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL2FjdGlvbi1qc29uLmludGVyZmFjZSdcblxuY29uc3QgZ2V0QnVsa0FjdGlvbnNGcm9tUmVjb3JkcyA9IChyZWNvcmRzOiBBcnJheTxSZWNvcmRKU09OPik6IEFycmF5PEFjdGlvbkpTT04+ID0+IHtcbiAgY29uc3QgYWN0aW9ucyA9IE9iamVjdC52YWx1ZXMocmVjb3Jkcy5yZWR1Y2UoKG1lbW8sIHJlY29yZCkgPT4gKHtcbiAgICAuLi5tZW1vLFxuICAgIC4uLnJlY29yZC5idWxrQWN0aW9ucy5yZWR1Y2UoKGFjdGlvbnNNZW1vLCBhY3Rpb24pID0+ICh7XG4gICAgICAuLi5hY3Rpb25zTWVtbyxcbiAgICAgIFthY3Rpb24ubmFtZV06IGFjdGlvbixcbiAgICB9KSwge30gYXMgUmVjb3JkPHN0cmluZywgQWN0aW9uSlNPTj4pLFxuICB9KSwge30gYXMgUmVjb3JkPHN0cmluZywgQWN0aW9uSlNPTj4pKVxuICByZXR1cm4gYWN0aW9uc1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRCdWxrQWN0aW9uc0Zyb21SZWNvcmRzXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5pbXBvcnQgUmVzb3VyY2VKU09OIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9yZXNvdXJjZS1qc29uLmludGVyZmFjZSdcbmltcG9ydCBSZWNvcmRKU09OIGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9yZWNvcmQtanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgTGFiZWwgZnJvbSAnLi4vLi4vdWkvbGFiZWwnXG5pbXBvcnQgQWN0aW9uQnV0dG9uIGZyb20gJy4uL2FjdGlvbi1idXR0b24nXG5pbXBvcnQgZ2V0QnVsa0FjdGlvbnNGcm9tUmVjb3JkcyBmcm9tICcuL3V0aWxzL2dldC1idWxrLWFjdGlvbnMtZnJvbS1yZWNvcmRzJ1xuXG5jb25zdCBTZWxlY3RlZFJlY29yZHNXcmFwcGVyID0gc3R5bGVkLnNlY3Rpb25gXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAtMzBweDtcbiAgcGFkZGluZy1sZWZ0OiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ307XG5gXG5cbnR5cGUgUHJvcHMgPSB7XG4gIHJlc291cmNlOiBSZXNvdXJjZUpTT047XG4gIHNlbGVjdGVkUmVjb3Jkcz86IEFycmF5PFJlY29yZEpTT04+O1xufVxuXG5jb25zdCBJbmxpbmVMYWJlbCA9IHN0eWxlZChMYWJlbClgXG4gICYmJiB7XG4gICAgZGlzcGxheTogaW5saW5lO1xuICAgIGxpbmUtaGVpZ2h0OiAzNnB4O1xuICB9XG5gXG5cbmNvbnN0IFNlbGVjdGVkUmVjb3JkczogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcmVzb3VyY2UsIHNlbGVjdGVkUmVjb3JkcyB9ID0gcHJvcHNcblxuICBpZiAoIXNlbGVjdGVkUmVjb3JkcyB8fCAhc2VsZWN0ZWRSZWNvcmRzLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBjb25zdCBidWxrQWN0aW9ucyA9IGdldEJ1bGtBY3Rpb25zRnJvbVJlY29yZHMoc2VsZWN0ZWRSZWNvcmRzKVxuXG4gIHJldHVybiAoXG4gICAgPFNlbGVjdGVkUmVjb3Jkc1dyYXBwZXI+XG4gICAgICA8SW5saW5lTGFiZWw+XG4gICAgICAgIHtgc2VsZWN0ZWQ6ICR7c2VsZWN0ZWRSZWNvcmRzLmxlbmd0aH1gfVxuICAgICAgPC9JbmxpbmVMYWJlbD5cbiAgICAgIHtidWxrQWN0aW9ucy5tYXAoYWN0aW9uID0+IChcbiAgICAgICAgPEFjdGlvbkJ1dHRvblxuICAgICAgICAgIGFjdGlvbj17YWN0aW9ufVxuICAgICAgICAgIGtleT17YWN0aW9uLm5hbWV9XG4gICAgICAgICAgcmVzb3VyY2VJZD17cmVzb3VyY2UuaWR9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiaXMtdGV4dFwiXG4gICAgICAgICAgcmVjb3JkSWRzPXtzZWxlY3RlZFJlY29yZHMubWFwKHJlY29yZHMgPT4gcmVjb3Jkcy5pZCl9XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICA8L1NlbGVjdGVkUmVjb3Jkc1dyYXBwZXI+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0ZWRSZWNvcmRzXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5pbXBvcnQgUmVjb3JkSW5MaXN0IGZyb20gJy4vcmVjb3JkLWluLWxpc3QnXG5pbXBvcnQgUmVjb3Jkc1RhYmxlSGVhZGVyIGZyb20gJy4vcmVjb3Jkcy10YWJsZS1oZWFkZXInXG5pbXBvcnQgTm9SZWNvcmRzIGZyb20gJy4vbm8tcmVjb3JkcydcblxuaW1wb3J0IFRhYmxlIGZyb20gJy4uLy4uL3VpL3RhYmxlJ1xuaW1wb3J0IFJlc291cmNlSlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVzb3VyY2UtanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgUmVjb3JkSlNPTiBmcm9tICcuLi8uLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVjb3JkLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IFNlbGVjdGVkUmVjb3JkcyBmcm9tICcuL3NlbGVjdGVkLXJlY29yZHMnXG5cbmNvbnN0IFJlY29yZHNUYWJsZVdyYXBwZXIgPSBzdHlsZWQuc2VjdGlvbmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYFxuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgcmVzb3VyY2U6IFJlc291cmNlSlNPTjtcbiAgcmVjb3JkczogQXJyYXk8UmVjb3JkSlNPTj47XG4gIGFjdGlvblBlcmZvcm1lZD86IChhY3Rpb25OYW1lOiBzdHJpbmcpID0+IGFueTtcbiAgc29ydEJ5Pzogc3RyaW5nO1xuICBkaXJlY3Rpb24/OiAnYXNjJyB8ICdkZXNjJztcbiAgaXNMb2FkaW5nPzogYm9vbGVhbjtcbiAgc2VsZWN0ZWRSZWNvcmRzPzogQXJyYXk8UmVjb3JkSlNPTj47XG4gIG9uU2VsZWN0PzogKHJlY29yZDogUmVjb3JkSlNPTikgPT4gYW55O1xuICBvblNlbGVjdEFsbD86ICgpID0+IGFueTtcbn1cblxuY29uc3QgUmVjb3Jkc1RhYmxlOiBSZWFjdC5GQzxQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIHJlc291cmNlLCByZWNvcmRzLFxuICAgIGFjdGlvblBlcmZvcm1lZCwgc29ydEJ5LFxuICAgIGRpcmVjdGlvbiwgaXNMb2FkaW5nLFxuICAgIG9uU2VsZWN0LCBzZWxlY3RlZFJlY29yZHMsXG4gICAgb25TZWxlY3RBbGwsXG4gIH0gPSBwcm9wc1xuICBpZiAoIXJlY29yZHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICg8Tm9SZWNvcmRzIHJlc291cmNlPXtyZXNvdXJjZX0gLz4pXG4gIH1cblxuICBjb25zdCBzZWxlY3RlZEFsbCA9IHNlbGVjdGVkUmVjb3JkcyAmJiAhIXJlY29yZHMuZmluZChyZWNvcmQgPT4gKFxuICAgIHNlbGVjdGVkUmVjb3Jkcy5maW5kKHNlbGVjdGVkID0+IHNlbGVjdGVkLmlkID09PSByZWNvcmQuaWQpXG4gICkpXG5cbiAgcmV0dXJuIChcbiAgICA8UmVjb3Jkc1RhYmxlV3JhcHBlcj5cbiAgICAgIDxTZWxlY3RlZFJlY29yZHNcbiAgICAgICAgcmVzb3VyY2U9e3Jlc291cmNlfVxuICAgICAgICBzZWxlY3RlZFJlY29yZHM9e3NlbGVjdGVkUmVjb3Jkc31cbiAgICAgIC8+XG4gICAgICA8VGFibGU+XG4gICAgICAgIDxSZWNvcmRzVGFibGVIZWFkZXJcbiAgICAgICAgICBwcm9wZXJ0aWVzPXtyZXNvdXJjZS5saXN0UHJvcGVydGllc31cbiAgICAgICAgICB0aXRsZVByb3BlcnR5PXtyZXNvdXJjZS50aXRsZVByb3BlcnR5fVxuICAgICAgICAgIGRpcmVjdGlvbj17ZGlyZWN0aW9ufVxuICAgICAgICAgIHNvcnRCeT17c29ydEJ5fVxuICAgICAgICAgIG9uU2VsZWN0QWxsPXtvblNlbGVjdEFsbH1cbiAgICAgICAgICBzZWxlY3RlZEFsbD17c2VsZWN0ZWRBbGx9XG4gICAgICAgIC8+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICB7cmVjb3Jkcy5tYXAocmVjb3JkID0+IChcbiAgICAgICAgICAgIDxSZWNvcmRJbkxpc3RcbiAgICAgICAgICAgICAgcmVjb3JkPXtyZWNvcmR9XG4gICAgICAgICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgICAgICAga2V5PXtyZWNvcmQuaWR9XG4gICAgICAgICAgICAgIGFjdGlvblBlcmZvcm1lZD17YWN0aW9uUGVyZm9ybWVkfVxuICAgICAgICAgICAgICBpc0xvYWRpbmc9e2lzTG9hZGluZ31cbiAgICAgICAgICAgICAgb25TZWxlY3Q9e29uU2VsZWN0fVxuICAgICAgICAgICAgICBpc1NlbGVjdGVkPXtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFJlY29yZHMgJiYgISFzZWxlY3RlZFJlY29yZHMuZmluZChzZWxlY3RlZCA9PiBzZWxlY3RlZC5pZCA9PT0gcmVjb3JkLmlkKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC9UYWJsZT5cbiAgICA8L1JlY29yZHNUYWJsZVdyYXBwZXI+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVjb3Jkc1RhYmxlXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbmltcG9ydCBBcGlDbGllbnQgZnJvbSAnLi4vLi4vdXRpbHMvYXBpLWNsaWVudCdcbmltcG9ydCBXcmFwcGVyQm94IGZyb20gJy4uL3VpL3dyYXBwZXItYm94J1xuaW1wb3J0IHdpdGhOb3RpY2UsIHsgQWRkTm90aWNlUHJvcHMgfSBmcm9tICcuLi8uLi9zdG9yZS93aXRoLW5vdGljZSdcbmltcG9ydCBSZWNvcmRzVGFibGUgZnJvbSAnLi4vYXBwL3JlY29yZHMtdGFibGUvcmVjb3Jkcy10YWJsZSdcbmltcG9ydCBQYWdpbmF0ZSBmcm9tICcuLi91aS9wYWdpbmF0ZSdcbmltcG9ydCB7IEFjdGlvblByb3BzIH0gZnJvbSAnLi9hY3Rpb24ucHJvcHMnXG5pbXBvcnQgUmVjb3JkSlNPTiBmcm9tICcuLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvcmVjb3JkLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgTGlzdEFjdGlvblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9hY3Rpb25zL2xpc3QtYWN0aW9uJ1xuXG50eXBlIFN0YXRlID0ge1xuICByZWNvcmRzOiBBcnJheTxSZWNvcmRKU09OPjtcbiAgcGFnZTogbnVtYmVyO1xuICBwZXJQYWdlOiBudW1iZXI7XG4gIHRvdGFsOiBudW1iZXI7XG4gIGxvYWRpbmc6IGJvb2xlYW47XG4gIGRpcmVjdGlvbjogJ2FzYycgfCAnZGVzYyc7XG4gIHNvcnRCeT86IHN0cmluZztcbiAgc2VsZWN0ZWRSZWNvcmRzOiBBcnJheTxSZWNvcmRKU09OPjtcbn1cblxudHlwZSBQcm9wcyA9IEFjdGlvblByb3BzICYgUm91dGVDb21wb25lbnRQcm9wcyAmIEFkZE5vdGljZVByb3BzXG5cbi8vIFRPRE86IGFkZCBkaXJlY3Rpb24gZW51bVxuXG4vKipcbiAqIEBuYW1lIE5ld0FjdGlvblxuICogQGNhdGVnb3J5IEFjdGlvbnNcbiAqIEBkZXNjcmlwdGlvbiBTaG93cyBmb3JtIGZvciBjcmVhdGluZyBhIGdpdmVuIHJlY29yZC5cbiAqIEBjb21wb25lbnRcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIExpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5oYW5kbGVBY3Rpb25QZXJmb3JtZWQgPSB0aGlzLmhhbmRsZUFjdGlvblBlcmZvcm1lZC5iaW5kKHRoaXMpXG4gICAgdGhpcy5oYW5kbGVTZWxlY3QgPSB0aGlzLmhhbmRsZVNlbGVjdC5iaW5kKHRoaXMpXG4gICAgdGhpcy5oYW5kbGVTZWxlY3RBbGwgPSB0aGlzLmhhbmRsZVNlbGVjdEFsbC5iaW5kKHRoaXMpXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHJlY29yZHM6IFtdLFxuICAgICAgcGFnZTogMSxcbiAgICAgIHBlclBhZ2U6IDIwLFxuICAgICAgdG90YWw6IDAsXG4gICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgZGlyZWN0aW9uOiAnYXNjJyxcbiAgICAgIHNvcnRCeTogdW5kZWZpbmVkLFxuICAgICAgc2VsZWN0ZWRSZWNvcmRzOiBbXSxcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICB0aGlzLl9mZXRjaERhdGEodGhpcy5wcm9wcylcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXdQcm9wcyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgcmVzb3VyY2UsIGxvY2F0aW9uIH0gPSB0aGlzLnByb3BzXG5cbiAgICBpZiAocmVzb3VyY2UuaWQgIT09IG5ld1Byb3BzLnJlc291cmNlLmlkXG4gICAgICAgfHwgbG9jYXRpb24uc2VhcmNoICE9PSBuZXdQcm9wcy5sb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIHRoaXMuX2ZldGNoRGF0YShuZXdQcm9wcylcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKTogdm9pZCB7XG4gICAgY29uc3QgeyBzZXRUYWcgfSA9IHRoaXMucHJvcHNcbiAgICBpZiAoc2V0VGFnKSB7XG4gICAgICBzZXRUYWcoJycpXG4gICAgfVxuICB9XG5cbiAgX2ZldGNoRGF0YShwcm9wczogUHJvcHMpOiB2b2lkIHtcbiAgICBjb25zdCB7IGxvY2F0aW9uLCByZXNvdXJjZSwgc2V0VGFnLCBhZGROb3RpY2UgfSA9IHByb3BzXG4gICAgY29uc3QgeyByZXNvdXJjZTogb2xkUmVzb3VyY2UgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB7IHNlbGVjdGVkUmVjb3JkcyB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgY29uc3QgYXBpID0gbmV3IEFwaUNsaWVudCgpXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IHRydWUgfSlcbiAgICBjb25zdCBxdWVyeSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMobG9jYXRpb24uc2VhcmNoKVxuICAgIGFwaS5yZXNvdXJjZUFjdGlvbih7XG4gICAgICBhY3Rpb25OYW1lOiAnbGlzdCcsXG4gICAgICByZXNvdXJjZUlkOiByZXNvdXJjZS5pZCxcbiAgICAgIHBhcmFtczogcXVlcnksXG4gICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGNvbnN0IGxpc3RBY3Rpb25SZXNwb25zZSA9IHJlc3BvbnNlLmRhdGEgYXMgTGlzdEFjdGlvblJlc3BvbnNlXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcmVjb3JkczogbGlzdEFjdGlvblJlc3BvbnNlLnJlY29yZHMsXG4gICAgICAgIHBhZ2U6IGxpc3RBY3Rpb25SZXNwb25zZS5tZXRhLnBhZ2UsXG4gICAgICAgIHBlclBhZ2U6IGxpc3RBY3Rpb25SZXNwb25zZS5tZXRhLnBlclBhZ2UsXG4gICAgICAgIHRvdGFsOiBsaXN0QWN0aW9uUmVzcG9uc2UubWV0YS50b3RhbCxcbiAgICAgICAgZGlyZWN0aW9uOiBsaXN0QWN0aW9uUmVzcG9uc2UubWV0YS5kaXJlY3Rpb24sXG4gICAgICAgIHNvcnRCeTogbGlzdEFjdGlvblJlc3BvbnNlLm1ldGEuc29ydEJ5LFxuICAgICAgICBzZWxlY3RlZFJlY29yZHM6IG9sZFJlc291cmNlLmlkID09PSByZXNvdXJjZS5pZCA/IHNlbGVjdGVkUmVjb3JkcyA6IFtdLFxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICBpZiAoc2V0VGFnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzcG9uc2UuZGF0YS5tZXRhLnRvdGFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHNldFRhZygnJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRUYWcocmVzcG9uc2UuZGF0YS5tZXRhLnRvdGFsLnRvU3RyaW5nKCkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICBhZGROb3RpY2Uoe1xuICAgICAgICBtZXNzYWdlOiAnVGhlcmUgd2FzIGFuIGVycm9yIGZldGNoaW5nIHJlY29yZHMsIENoZWNrIG91dCBjb25zb2xlIHRvIHNlZSBtb3JlIGluZm9ybWF0aW9uLicsXG4gICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBoYW5kbGVBY3Rpb25QZXJmb3JtZWQoKTogdm9pZCB7XG4gICAgdGhpcy5fZmV0Y2hEYXRhKHRoaXMucHJvcHMpXG4gIH1cblxuICBoYW5kbGVTZWxlY3QocmVjb3JkOiBSZWNvcmRKU09OKTogdm9pZCB7XG4gICAgY29uc3QgeyBzZWxlY3RlZFJlY29yZHMgfSA9IHRoaXMuc3RhdGVcbiAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRSZWNvcmRzLmZpbmRJbmRleChzZWxlY3RlZCA9PiBzZWxlY3RlZC5pZCA9PT0gcmVjb3JkLmlkKVxuICAgIGlmIChzZWxlY3RlZEluZGV4IDwgMCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkUmVjb3JkczogWy4uLnNlbGVjdGVkUmVjb3JkcywgcmVjb3JkXSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZXdTZWxlY3RlZFJlY29yZHMgPSBbLi4uc2VsZWN0ZWRSZWNvcmRzXVxuICAgICAgbmV3U2VsZWN0ZWRSZWNvcmRzLnNwbGljZShzZWxlY3RlZEluZGV4LCAxKVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkUmVjb3JkczogbmV3U2VsZWN0ZWRSZWNvcmRzIH0pXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlU2VsZWN0QWxsKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgcmVjb3Jkcywgc2VsZWN0ZWRSZWNvcmRzIH0gPSB0aGlzLnN0YXRlXG5cbiAgICBjb25zdCBtaXNzaW5nID0gcmVjb3Jkcy5maWx0ZXIocmVjb3JkID0+IChcbiAgICAgICFzZWxlY3RlZFJlY29yZHMuZmluZChzZWxlY3RlZCA9PiBzZWxlY3RlZC5pZCA9PT0gcmVjb3JkLmlkKVxuICAgICAgJiYgcmVjb3JkLmJ1bGtBY3Rpb25zLmxlbmd0aFxuICAgICkpXG4gICAgaWYgKG1pc3NpbmcubGVuZ3RoKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRSZWNvcmRzOiBbLi4uc2VsZWN0ZWRSZWNvcmRzLCAuLi5taXNzaW5nXSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZXdTZWxlY3RlZFJlY29yZHMgPSBzZWxlY3RlZFJlY29yZHMuZmlsdGVyKHNlbGVjdGVkID0+IChcbiAgICAgICAgIXJlY29yZHMuZmluZChyZWNvcmQgPT4gcmVjb3JkLmlkID09PSBzZWxlY3RlZC5pZClcbiAgICAgICkpXG4gICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRSZWNvcmRzOiBuZXdTZWxlY3RlZFJlY29yZHMgfSlcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHJlc291cmNlIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3Qge1xuICAgICAgcmVjb3JkcywgcGFnZSwgcGVyUGFnZSwgdG90YWwsXG4gICAgICBsb2FkaW5nLCBkaXJlY3Rpb24sIHNvcnRCeSwgc2VsZWN0ZWRSZWNvcmRzLFxuICAgIH0gPSB0aGlzLnN0YXRlXG4gICAgcmV0dXJuIChcbiAgICAgIDxXcmFwcGVyQm94IGJvcmRlcj5cbiAgICAgICAgPFJlY29yZHNUYWJsZVxuICAgICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgICByZWNvcmRzPXtyZWNvcmRzfVxuICAgICAgICAgIGFjdGlvblBlcmZvcm1lZD17dGhpcy5oYW5kbGVBY3Rpb25QZXJmb3JtZWR9XG4gICAgICAgICAgb25TZWxlY3Q9e3RoaXMuaGFuZGxlU2VsZWN0fVxuICAgICAgICAgIG9uU2VsZWN0QWxsPXt0aGlzLmhhbmRsZVNlbGVjdEFsbH1cbiAgICAgICAgICBzZWxlY3RlZFJlY29yZHM9e3NlbGVjdGVkUmVjb3Jkc31cbiAgICAgICAgICBkaXJlY3Rpb249e2RpcmVjdGlvbn1cbiAgICAgICAgICBzb3J0Qnk9e3NvcnRCeX1cbiAgICAgICAgICBpc0xvYWRpbmc9e2xvYWRpbmd9XG4gICAgICAgIC8+XG4gICAgICAgIDxQYWdpbmF0ZVxuICAgICAgICAgIHBhZ2U9e3BhZ2V9XG4gICAgICAgICAgcGVyUGFnZT17cGVyUGFnZX1cbiAgICAgICAgICB0b3RhbD17dG90YWx9XG4gICAgICAgIC8+XG4gICAgICA8L1dyYXBwZXJCb3g+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhOb3RpY2Uod2l0aFJvdXRlcihMaXN0KSlcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBSb3V0ZUNvbXBvbmVudFByb3BzLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuaW1wb3J0IFByb3BlcnR5VHlwZSBmcm9tICcuLi9wcm9wZXJ0eS10eXBlJ1xuaW1wb3J0IFdyYXBwZXJCb3ggZnJvbSAnLi4vdWkvd3JhcHBlci1ib3gnXG5pbXBvcnQgeyBBY3Rpb25Qcm9wcyB9IGZyb20gJy4vYWN0aW9uLnByb3BzJ1xuaW1wb3J0IHsgUHJvcGVydHlQbGFjZSB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9wcm9wZXJ0eS1qc29uLmludGVyZmFjZSdcbmltcG9ydCBUYWJsZSBmcm9tICcuLi91aS90YWJsZSdcbmltcG9ydCB7IEVycm9yTWVzc2FnZUJveCwgU3R5bGVkQnV0dG9uIH0gZnJvbSAnLi4vdWknXG5pbXBvcnQgQXBpQ2xpZW50IGZyb20gJy4uLy4uL3V0aWxzL2FwaS1jbGllbnQnXG5pbXBvcnQgd2l0aE5vdGljZSwgeyBBZGROb3RpY2VQcm9wcyB9IGZyb20gJy4uLy4uL3N0b3JlL3dpdGgtbm90aWNlJ1xuXG4vKipcbiAqIEBuYW1lIFNob3dBY3Rpb25cbiAqIEBjYXRlZ29yeSBBY3Rpb25zXG4gKiBAZGVzY3JpcHRpb24gU2hvd3MgYSBnaXZlbiByZWNvcmQuXG4gKiBAY29tcG9uZW50XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBCdWxrRGVsZXRlOiBSZWFjdC5GQzxBY3Rpb25Qcm9wcyAmIEFkZE5vdGljZVByb3BzICYgUm91dGVDb21wb25lbnRQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZSwgcmVjb3JkcywgYWN0aW9uLCBhZGROb3RpY2UsIGhpc3RvcnkgfSA9IHByb3BzXG5cbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpXG5cbiAgaWYgKCFyZWNvcmRzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxFcnJvck1lc3NhZ2VCb3ggdGl0bGU9XCJObyByZWNvcmRzIHNlbGVjdGVkXCI+XG4gICAgICAgIEluIG9yZGVyIHRvIHJlbW92ZSByZWNvcmRzLCB5b3UgaGF2ZSB0byBwaWNrIHRoZW0gZmlyc3QuXG4gICAgICA8L0Vycm9yTWVzc2FnZUJveD5cbiAgICApXG4gIH1cblxuICBjb25zdCBoYW5kbGVDbGljayA9ICgpOiB2b2lkID0+IHtcbiAgICBjb25zdCBhcGkgPSBuZXcgQXBpQ2xpZW50KClcbiAgICBzZXRMb2FkaW5nKHRydWUpXG4gICAgY29uc3QgcmVjb3JkSWRzID0gcmVjb3Jkcy5tYXAociA9PiByLmlkKVxuICAgIGFwaS5idWxrQWN0aW9uKHtcbiAgICAgIHJlc291cmNlSWQ6IHJlc291cmNlLmlkLFxuICAgICAgYWN0aW9uTmFtZTogYWN0aW9uLm5hbWUsXG4gICAgICByZWNvcmRJZHMsXG4gICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICB9KS50aGVuKCgocmVzcG9uc2UpID0+IHtcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpXG4gICAgICBpZiAocmVzcG9uc2UuZGF0YS5ub3RpY2UpIHtcbiAgICAgICAgYWRkTm90aWNlKHJlc3BvbnNlLmRhdGEubm90aWNlKVxuICAgICAgfVxuICAgICAgaWYgKHJlc3BvbnNlLmRhdGEucmVkaXJlY3RVcmwpIHtcbiAgICAgICAgaGlzdG9yeS5wdXNoKHJlc3BvbnNlLmRhdGEucmVkaXJlY3RVcmwpXG4gICAgICB9XG4gICAgfSkpLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgc2V0TG9hZGluZyhmYWxzZSlcbiAgICAgIGFkZE5vdGljZSh7XG4gICAgICAgIG1lc3NhZ2U6ICdUaGVyZSB3YXMgYW4gZXJyb3IgZGVsZXRpbmcgcmVjb3JkcywgQ2hlY2sgb3V0IGNvbnNvbGUgdG8gc2VlIG1vcmUgaW5mb3JtYXRpb24uJyxcbiAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgIH0pXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxXcmFwcGVyQm94IGJvcmRlcj5cbiAgICAgIDxoMT5Gb2xsb3dpbmcgcmVjb3JkcyB3aWxsIGJlIHJlbW92ZWQ6PC9oMT5cbiAgICAgIDxUYWJsZT5cbiAgICAgICAge3JlY29yZHMubWFwKHJlY29yZCA9PiAoXG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAge3Jlc291cmNlLmxpc3RQcm9wZXJ0aWVzLm1hcChwcm9wZXJ0eSA9PiAoXG4gICAgICAgICAgICAgIDx0ZCBrZXk9e3Byb3BlcnR5Lm5hbWV9IGNsYXNzTmFtZT17cmVzb3VyY2UudGl0bGVQcm9wZXJ0eS5uYW1lID09PSBwcm9wZXJ0eS5uYW1lID8gJ21haW4nIDogdW5kZWZpbmVkfT5cbiAgICAgICAgICAgICAgICA8UHJvcGVydHlUeXBlXG4gICAgICAgICAgICAgICAgICB3aGVyZT17UHJvcGVydHlQbGFjZS5saXN0fVxuICAgICAgICAgICAgICAgICAgcHJvcGVydHk9e3Byb3BlcnR5fVxuICAgICAgICAgICAgICAgICAgcmVzb3VyY2U9e3Jlc291cmNlfVxuICAgICAgICAgICAgICAgICAgcmVjb3JkPXtyZWNvcmR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICkpfVxuICAgICAgPC9UYWJsZT5cbiAgICAgIDxwPlxuICAgICAgICA8U3R5bGVkQnV0dG9uXG4gICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2t9XG4gICAgICAgICAgY2xhc3NOYW1lPXtgaXMtcHJpbWFyeSR7bG9hZGluZyA/ICcgaXMtbG9hZGluZycgOiAnJ31gfVxuICAgICAgICA+XG4gICAgICAgICAge2BDb25maXJtIHRoZSByZW1vdmFsIG9mICR7cmVjb3Jkcy5sZW5ndGh9IHJlY29yZHNgfVxuICAgICAgICA8L1N0eWxlZEJ1dHRvbj5cbiAgICAgIDwvcD5cbiAgICA8L1dyYXBwZXJCb3g+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aE5vdGljZSh3aXRoUm91dGVyKEJ1bGtEZWxldGUpKVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgV3JhcHBlckJveCBmcm9tICcuLi91aS93cmFwcGVyLWJveCdcbmltcG9ydCBFcnJvckJvdW5kYXJ5IGZyb20gJy4vZXJyb3ItYm91bmRhcnknXG5cbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vYWN0aW9ucydcbmltcG9ydCB7IERPQ1MgfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMnXG5pbXBvcnQgeyBBY3Rpb25Qcm9wcyB9IGZyb20gJy4uL2FjdGlvbnMvYWN0aW9uLnByb3BzJ1xuXG5kZWNsYXJlIGNvbnN0IEFkbWluQnJvOiB7XG4gIFVzZXJDb21wb25lbnRzOiBBcnJheTxzdHJpbmc+O1xufVxuXG4vLyBUT0RPOiBSZW1vdmUgdGhlIGFib3ZlIGhhY2sgdG8gc29tZXRoaW5nIG1vcmUgdHlwZSBzYWZlXG5cbnR5cGUgU3RhdGUgPSB7XG4gIGlzQ2xpZW50OiBib29sZWFuO1xufVxuXG4vKipcbiAqIENvbXBvbmVudCB3aGljaCByZW5kZXJzIGFsbCB0aGUgZGVmYXVsdCBhbmQgY3VzdG9tIGFjdGlvbnMgZm9yIGJvdGggdGhlIFJlc291cmNlIGFuZCB0aGUgUmVjb3JkLlxuICpcbiAqIEl0IHBhc3NlcyBhbGwgcHJvcHMgZG93biB0byB0aGUgYWN0dWFsIEFjdGlvbiBjb21wb25lbnQuXG4gKlxuICogRXhhbXBsZSBvZiBjcmVhdGluZyB5b3VyIG93biBhY3Rpb25zOlxuICogYGBgXG4gKiAvLyBBZG1pbkJybyBvcHRpb25zXG4gKiBjb25zdCBBZG1pbkJyb09wdGlvbnMgPSB7XG4gKiAgIHJlc291cmNlczogW1xuICogICAgICByZXNvdXJjZSxcbiAqICAgICAgb3B0aW9uczoge1xuICogICAgICAgIGFjdGlvbnM6IHtcbiAqICAgICAgICAgICBteU5ld0FjdGlvbjoge1xuICogICAgICAgICAgICAgbGFiZWw6ICdhbWF6aW5nIGFjdGlvbicsXG4gKiAgICAgICAgICAgICBpY29uOiAnZmFzIGZhLWV5ZScsXG4gKiAgICAgICAgICAgICBpblZpc2libGU6IChyZXNvdXJjZSwgcmVjb3JkKSA9PiByZWNvcmQucGFyYW0oJ2VtYWlsJykgIT09ICcnLFxuICogICAgICAgICAgICAgYWN0aW9uVHlwZTogJ3JlY29yZCcsXG4gKiAgICAgICAgICAgICBjb21wb25lbnQ6IEFkbWluQnJvLmJ1bmRsZSgnLi9teS1uZXctYWN0aW9uJyksXG4gKiAgICAgICAgICAgICBoYW5kbGVyOiAocmVxdWVzdCwgcmVzcG9uc2UsIGRhdGEpID0+IHtcbiAqICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICAgICAgICAgLi4uXG4gKiAgICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICB9XG4gKiAgICAgICAgfVxuICogICAgICB9XG4gKiAgIF1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIGBgYFxuICogLy8gLi9teS1uZXctYWN0aW9uLmpzeFxuICogaW1wb3J0IFdyYXBwZXJCb3ggZnJvbSAnYWRtaW4tYnJvJ1xuICpcbiAqIGNvbnN0IE15TmV3QWN0aW9uID0gKHByb3BzKSA9PiB7XG4gKiAgIGNvbnN0IHsgcmVzb3VyY2UsIGFjdGlvbiwgcmVjb3JkIH0gPSBwcm9wc1xuICogICAvLyBkbyBzb21ldGhpbmcgd2l0aCB0aGUgcHJvcHMgYW5kIHJlbmRlciBhY3Rpb25cbiAqICAgcmV0dXJuIChcbiAqICAgICA8V3JhcHBlckJveD5Tb21lIEFjdGlvbiBDb250ZW50PC9XcmFwcGVyQm94PlxuICogICApXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAY29tcG9uZW50XG4gKiBAbmFtZSBCYXNlQWN0aW9uQ29tcG9uZW50XG4gKiBAY2F0ZWdvcnkgQmFzZVxuICovXG5jbGFzcyBCYXNlQWN0aW9uQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEFjdGlvblByb3BzLCBTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NsaWVudDogZmFsc2UsXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ2xpZW50OiB0cnVlIH0pXG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHJlc291cmNlLCBhY3Rpb24sIHJlY29yZCwgcmVjb3Jkcywgc2V0VGFnIH0gPSB0aGlzLnByb3BzXG5cbiAgICBjb25zdCB7IGlzQ2xpZW50IH0gPSB0aGlzLnN0YXRlXG4gICAgY29uc3QgZG9jdW1lbnRhdGlvbkxpbmsgPSBbRE9DUywgJ0Jhc2VBY3Rpb24uaHRtbCddLmpvaW4oJy8nKVxuXG4gICAgbGV0IEFjdGlvbiA9IGFjdGlvbnNbYWN0aW9uLm5hbWVdXG4gICAgaWYgKGlzQ2xpZW50ICYmIGFjdGlvbi5jb21wb25lbnQpIHtcbiAgICAgIEFjdGlvbiA9IEFkbWluQnJvLlVzZXJDb21wb25lbnRzW2FjdGlvbi5jb21wb25lbnRdXG4gICAgfVxuICAgIGlmIChBY3Rpb24pIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxFcnJvckJvdW5kYXJ5PlxuICAgICAgICAgIDxBY3Rpb25cbiAgICAgICAgICAgIGFjdGlvbj17YWN0aW9ufVxuICAgICAgICAgICAgcmVzb3VyY2U9e3Jlc291cmNlfVxuICAgICAgICAgICAgcmVjb3JkPXtyZWNvcmR9XG4gICAgICAgICAgICByZWNvcmRzPXtyZWNvcmRzfVxuICAgICAgICAgICAgc2V0VGFnPXtzZXRUYWd9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gQWN0aW9uIHx8IChcbiAgICAgIDxXcmFwcGVyQm94IGJvcmRlcj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJub3RpZmljYXRpb25cIj5cbiAgICAgICAgICBZb3UgaGF2ZSB0byBpbXBsZW1lbnQgYWN0aW9uIGNvbXBvbmVudCBmb3IgeW91ciBBY3Rpb24uXG4gICAgICAgICAgU2VlOlxuICAgICAgICAgIHsnICd9XG4gICAgICAgICAgPGEgaHJlZj17ZG9jdW1lbnRhdGlvbkxpbmt9PnRoZSBkb2N1bWVudGF0aW9uPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvV3JhcHBlckJveD5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmFzZUFjdGlvbkNvbXBvbmVudFxuIiwiaW1wb3J0IHsgUmVjb3JkQWN0aW9uUGFyYW1zLCBCdWxrQWN0aW9uUGFyYW1zLCBSZXNvdXJjZUFjdGlvblBhcmFtcyB9IGZyb20gJy4uLy4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzJ1xuXG50eXBlIEFueUFjdGlvblBhcmFtcyA9IFJlY29yZEFjdGlvblBhcmFtcyAmIFJlc291cmNlQWN0aW9uUGFyYW1zICYgQnVsa0FjdGlvblBhcmFtc1xuXG4vKipcbiAqIEluZGljYXRlcyBpZiByb3V0ZSBhY3Rpb24gc2hvdWxkIGJlIHVwZGF0ZWQsIG1lYW5pbmcgd2hldGhlciBpdCBzaG91bGQgZmV0Y2hcbiAqIG5ldyBkYXRhIGZyb20gdGhlIGJhY2tlbmQuXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7QW55QWN0aW9uUGFyYW1zfSBjdXJyZW50TWF0Y2hQYXJhbXNcbiAqIEBwYXJhbSB7QW55QWN0aW9uUGFyYW1zfSBuZXdNYXRjaFBhcmFtc1xuICogQHJldHVybiAge2Jvb2xlYW59XG4gKi9cbmNvbnN0IHNob3VsZEFjdGlvblJlRmV0Y2hEYXRhID0gKFxuICBjdXJyZW50TWF0Y2hQYXJhbXM6IFBhcnRpYWw8QW55QWN0aW9uUGFyYW1zPixcbiAgbmV3TWF0Y2hQYXJhbXM6IFBhcnRpYWw8QW55QWN0aW9uUGFyYW1zPixcbik6IGJvb2xlYW4gPT4ge1xuICBjb25zdCB7XG4gICAgcmVzb3VyY2VJZCxcbiAgICByZWNvcmRJZCxcbiAgICBhY3Rpb25OYW1lLFxuICB9ID0gY3VycmVudE1hdGNoUGFyYW1zXG4gIGNvbnN0IHtcbiAgICByZXNvdXJjZUlkOiBuZXdSZXNvdXJjZUlkLFxuICAgIHJlY29yZElkOiBuZXdSZWNvcmRJZCxcbiAgICBhY3Rpb25OYW1lOiBuZXdBY3Rpb25OYW1lLFxuICB9ID0gbmV3TWF0Y2hQYXJhbXNcblxuICByZXR1cm4gcmVzb3VyY2VJZCAhPT0gbmV3UmVzb3VyY2VJZFxuICAgIHx8IHJlY29yZElkICE9PSBuZXdSZWNvcmRJZFxuICAgIHx8IGFjdGlvbk5hbWUgIT09IG5ld0FjdGlvbk5hbWVcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2hvdWxkQWN0aW9uUmVGZXRjaERhdGFcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmltcG9ydCB7IFJvdXRlQ29tcG9uZW50UHJvcHMgfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5pbXBvcnQgQnJlYWRjcnVtYnMgZnJvbSAnLi4vYXBwL2JyZWFkY3J1bWJzJ1xuaW1wb3J0IEFjdGlvbkhlYWRlciBmcm9tICcuLi9hcHAvYWN0aW9uLWhlYWRlcidcbmltcG9ydCBXcmFwcGVyQm94IGZyb20gJy4uL3VpL3dyYXBwZXItYm94J1xuaW1wb3J0IExvYWRlciBmcm9tICcuLi91aS9sb2FkZXInXG5pbXBvcnQgTm90aWNlIGZyb20gJy4uL2FwcC9ub3RpY2UnXG5pbXBvcnQgQmFzZUFjdGlvbkNvbXBvbmVudCBmcm9tICcuLi9hcHAvYmFzZS1hY3Rpb24tY29tcG9uZW50J1xuaW1wb3J0IEFwaUNsaWVudCBmcm9tICcuLi8uLi91dGlscy9hcGktY2xpZW50J1xuaW1wb3J0IHsgUmVjb3JkQWN0aW9uUGFyYW1zIH0gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC91dGlscy92aWV3LWhlbHBlcnMnXG5pbXBvcnQgUmVzb3VyY2VKU09OIGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9yZXNvdXJjZS1qc29uLmludGVyZmFjZSdcbmltcG9ydCBSZWNvcmRKU09OIGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9yZWNvcmQtanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgQWN0aW9uSlNPTiBmcm9tICcuLi8uLi8uLi9iYWNrZW5kL2RlY29yYXRvcnMvYWN0aW9uLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgUmVkdXhTdGF0ZSB9IGZyb20gJy4uLy4uL3N0b3JlL3N0b3JlJ1xuaW1wb3J0IHsgTm9SZXNvdXJjZUVycm9yLCBOb0FjdGlvbkVycm9yLCBOb1JlY29yZEVycm9yIH0gZnJvbSAnLi4vdWkvZXJyb3ItbWVzc2FnZSdcbmltcG9ydCB3aXRoTm90aWNlLCB7IEFkZE5vdGljZVByb3BzIH0gZnJvbSAnLi4vLi4vc3RvcmUvd2l0aC1ub3RpY2UnXG5pbXBvcnQgTm90aWNlV3JhcHBlciBmcm9tICcuL3N0eWxlZC9ub3RpY2Utd3JhcHBlci5zdHlsZWQnXG5pbXBvcnQgc2hvdWxkQWN0aW9uUmVGZXRjaERhdGEgZnJvbSAnLi91dGlscy9zaG91bGQtYWN0aW9uLXJlLWZldGNoLWRhdGEnXG5cbmNvbnN0IENvbnRhaW5lclJlY29yZCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5gXG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHJlY29yZDogUmVjb3JkSlNPTiB8IHVuZGVmaW5lZDtcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xufVxuXG50eXBlIFByb3BzRnJvbVN0YXRlID0ge1xuICByZXNvdXJjZXM6IEFycmF5PFJlc291cmNlSlNPTj47XG59XG5cbnR5cGUgUHJvcHMgPSBSb3V0ZUNvbXBvbmVudFByb3BzPFJlY29yZEFjdGlvblBhcmFtcz4gJiBQcm9wc0Zyb21TdGF0ZVxuXG5jbGFzcyBSZWNvcmRBY3Rpb24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMgJiBBZGROb3RpY2VQcm9wcywgU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzICYgQWRkTm90aWNlUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcmVjb3JkOiB1bmRlZmluZWQsXG4gICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG4gICAgY29uc3QgeyBtYXRjaCB9ID0gdGhpcy5wcm9wc1xuICAgIHRoaXMuZmV0Y2hSZWNvcmQobWF0Y2gucGFyYW1zKVxuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5ld1Byb3BzOiBQcm9wcyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgbWF0Y2ggfSA9IHRoaXMucHJvcHNcbiAgICBpZiAoc2hvdWxkQWN0aW9uUmVGZXRjaERhdGEobWF0Y2gucGFyYW1zLCBuZXdQcm9wcy5tYXRjaC5wYXJhbXMpKSB7XG4gICAgICB0aGlzLmZldGNoUmVjb3JkKG5ld1Byb3BzLm1hdGNoLnBhcmFtcylcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZ2V0UmVzb3VyY2VBbmRBY3Rpb24obmFtZSA9IG51bGwpOiB7XG4gICAgcmVzb3VyY2U6IFJlc291cmNlSlNPTiB8IHVuZGVmaW5lZDtcbiAgICBhY3Rpb246IEFjdGlvbkpTT04gfCB1bmRlZmluZWQ7XG4gIH0ge1xuICAgIGNvbnN0IHsgbWF0Y2gsIHJlc291cmNlcyB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHsgcmVzb3VyY2VJZCwgYWN0aW9uTmFtZSB9ID0gbWF0Y2gucGFyYW1zXG4gICAgY29uc3QgeyByZWNvcmQgfSA9IHRoaXMuc3RhdGVcblxuICAgIGNvbnN0IG5hbWVUb0NoZWNrID0gbmFtZSB8fCBhY3Rpb25OYW1lXG5cbiAgICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlcy5maW5kKHIgPT4gci5pZCA9PT0gcmVzb3VyY2VJZClcbiAgICBjb25zdCBhY3Rpb24gPSByZWNvcmQgJiYgcmVjb3JkLnJlY29yZEFjdGlvbnMuZmluZChyID0+IHIubmFtZSA9PT0gbmFtZVRvQ2hlY2spXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc291cmNlOiByZXNvdXJjZSB8fCB1bmRlZmluZWQsXG4gICAgICBhY3Rpb246IGFjdGlvbiB8fCB1bmRlZmluZWQsXG4gICAgfVxuICB9XG5cbiAgZmV0Y2hSZWNvcmQoeyBhY3Rpb25OYW1lLCByZWNvcmRJZCwgcmVzb3VyY2VJZCB9OiBSZWNvcmRBY3Rpb25QYXJhbXMpOiB2b2lkIHtcbiAgICBjb25zdCB7IGFkZE5vdGljZSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IGFwaSA9IG5ldyBBcGlDbGllbnQoKVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgICAgcmVjb3JkOiB1bmRlZmluZWQsXG4gICAgfSlcbiAgICBhcGkucmVjb3JkQWN0aW9uKHtcbiAgICAgIHJlc291cmNlSWQsXG4gICAgICByZWNvcmRJZCxcbiAgICAgIGFjdGlvbk5hbWUsXG4gICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICByZWNvcmQ6IHJlc3BvbnNlLmRhdGEucmVjb3JkLFxuICAgICAgfSlcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGFkZE5vdGljZSh7XG4gICAgICAgIG1lc3NhZ2U6IFtcbiAgICAgICAgICAnVGhlcmUgd2FzIGFuIGVycm9yIGZldGNoaW5nIHRoZSByZWNvcmQsICcsXG4gICAgICAgICAgJ0NoZWNrIG91dCBjb25zb2xlIHRvIHNlZSBtb3JlIGluZm9ybWF0aW9uLicsXG4gICAgICAgIF0uam9pbignXFxuJyksXG4gICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICB9KVxuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9KVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBtYXRjaCB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHsgYWN0aW9uTmFtZSwgcmVjb3JkSWQsIHJlc291cmNlSWQgfSA9IG1hdGNoLnBhcmFtc1xuICAgIGNvbnN0IHsgcmVjb3JkLCBpc0xvYWRpbmcgfSA9IHRoaXMuc3RhdGVcblxuICAgIGNvbnN0IHsgcmVzb3VyY2UsIGFjdGlvbiB9ID0gdGhpcy5nZXRSZXNvdXJjZUFuZEFjdGlvbigpXG5cbiAgICBpZiAoIXJlc291cmNlKSB7XG4gICAgICByZXR1cm4gKDxOb1Jlc291cmNlRXJyb3IgcmVzb3VyY2VJZD17cmVzb3VyY2VJZH0gLz4pXG4gICAgfVxuICAgIGlmICghYWN0aW9uICYmICFpc0xvYWRpbmcpIHtcbiAgICAgIHJldHVybiAoPE5vQWN0aW9uRXJyb3IgcmVzb3VyY2VJZD17cmVzb3VyY2VJZH0gYWN0aW9uTmFtZT17YWN0aW9uTmFtZX0gLz4pXG4gICAgfVxuXG4gICAgaWYgKCFyZWNvcmQgJiYgIWlzTG9hZGluZykge1xuICAgICAgcmV0dXJuICg8Tm9SZWNvcmRFcnJvciByZXNvdXJjZUlkPXtyZXNvdXJjZUlkfSByZWNvcmRJZD17cmVjb3JkSWR9IC8+KVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8Q29udGFpbmVyUmVjb3JkPlxuICAgICAgICA8Tm90aWNlV3JhcHBlcj5cbiAgICAgICAgICA8Tm90aWNlIC8+XG4gICAgICAgIDwvTm90aWNlV3JhcHBlcj5cbiAgICAgICAgPFdyYXBwZXJCb3g+XG4gICAgICAgICAgPEJyZWFkY3J1bWJzXG4gICAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgICAgICBhY3Rpb25OYW1lPXthY3Rpb25OYW1lfVxuICAgICAgICAgICAgcmVjb3JkPXtyZWNvcmR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8QWN0aW9uSGVhZGVyXG4gICAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgICAgICByZWNvcmRJZD17cmVjb3JkSWR9XG4gICAgICAgICAgICBhY3Rpb249e2FjdGlvbn1cbiAgICAgICAgICAgIHJlY29yZD17cmVjb3JkfVxuICAgICAgICAgIC8+XG4gICAgICAgICAge2lzTG9hZGluZ1xuICAgICAgICAgICAgPyA8TG9hZGVyIC8+XG4gICAgICAgICAgICA6IChcbiAgICAgICAgICAgICAgPEJhc2VBY3Rpb25Db21wb25lbnRcbiAgICAgICAgICAgICAgICBhY3Rpb249e2FjdGlvbiBhcyBBY3Rpb25KU09OfVxuICAgICAgICAgICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgICAgICAgICByZWNvcmQ9e3JlY29yZH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIDwvV3JhcHBlckJveD5cbiAgICAgIDwvQ29udGFpbmVyUmVjb3JkPlxuICAgIClcbiAgfVxufVxuXG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogUmVkdXhTdGF0ZSk6IFByb3BzRnJvbVN0YXRlID0+ICh7XG4gIHJlc291cmNlczogc3RhdGUucmVzb3VyY2VzLFxufSlcblxuXG5leHBvcnQgZGVmYXVsdCB3aXRoTm90aWNlKGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShSZWNvcmRBY3Rpb24pKVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSwgTW91c2VFdmVudCwgU3ludGhldGljRXZlbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcblxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbmltcG9ydCBTdHlsZWRCdXR0b24gZnJvbSAnLi4vdWkvc3R5bGVkLWJ1dHRvbidcbmltcG9ydCBQcm9wZXJ0eVR5cGUgZnJvbSAnLi4vcHJvcGVydHktdHlwZSdcbmltcG9ydCBSZXNvdXJjZUpTT04gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Jlc291cmNlLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgUHJvcGVydHlQbGFjZSB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9wcm9wZXJ0eS1qc29uLmludGVyZmFjZSdcbmltcG9ydCBSZWNvcmRKU09OIGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvZGVjb3JhdG9ycy9yZWNvcmQtanNvbi5pbnRlcmZhY2UnXG5pbXBvcnQgTGFiZWwgZnJvbSAnLi4vdWkvbGFiZWwnXG5pbXBvcnQgU3R5bGVkSW5wdXQgZnJvbSAnLi4vdWkvc3R5bGVkLWlucHV0J1xuXG5jb25zdCBGaWx0ZXJXcmFwcGVyID0gc3R5bGVkLnNlY3Rpb25gXG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuZGFya0Jja307XG4gIGZsZXgtc2hyaW5rOiAwO1xuICB3aWR0aDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnNpZGViYXJXaWR0aH07XG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5ib3JkZXJPbkRhcmt9O1xuICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5maWx0ZXJEZWZhdWx0VGV4dH07XG4gIHBhZGRpbmctdG9wOiA2MHB4O1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjVzO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gICYuZmlsdGVyLWhpZGRlbiB7XG4gICAgd2lkdGg6IDA7XG4gICAgdHJhbnNpdGlvbjogd2lkdGggMC41cztcbiAgfVxuXG4gICYmJiAke0xhYmVsfSwgJiYmICR7U3R5bGVkSW5wdXR9IHtcbiAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5maWx0ZXJEZWZhdWx0VGV4dH07XG4gIH1cbmBcblxuY29uc3QgRmlsdGVyTGluayA9IHN0eWxlZC5hYFxuICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5maWx0ZXJEZWZhdWx0VGV4dH07XG4gICYgPiBzcGFuIHtcbiAgICBvcGFjaXR5OiAwLjU7XG4gICAgY29sb3I6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMubGlnaHRUZXh0fTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmxpZ2h0VGV4dH07XG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgIHBhZGRpbmc6IDhweCAxMHB4O1xuICAgIG1hcmdpbi1yaWdodDogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLnNpemVzLnBhZGRpbmd9O1xuICB9XG4gICY6aG92ZXIge1xuICAgIGNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnByaW1hcnl9O1xuICAgICYgc3BhbntcbiAgICAgIGNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnByaW1hcnl9O1xuICAgICAgYm9yZGVyLWNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnByaW1hcnl9O1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gIH1cbmBcblxuY29uc3QgRmlsdGVyQ29udGVudCA9IHN0eWxlZC5zZWN0aW9uYFxuICBwYWRkaW5nOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ0xheW91dH07XG4gIHdpZHRoOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMuc2lkZWJhcldpZHRofTtcbiAgbWluLXdpZHRoOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMuc2lkZWJhcldpZHRofTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgbWluLWhlaWdodDogMTAwJTtcblxuICAmIGEsICYgYnV0dG9uIHtcbiAgICBtYXJnaW46ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nTWlufSAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5gXG5cbnR5cGUgUHJvcHMgPSB7XG4gIHJlc291cmNlOiBSZXNvdXJjZUpTT047XG4gIHRvZ2dsZUZpbHRlcjogKCkgPT4gdm9pZDtcbiAgaXNWaXNpYmxlOiBib29sZWFuO1xufVxuXG50eXBlIFN0YXRlID0ge1xuICBmaWx0ZXI6IGFueTtcbn1cblxudHlwZSBNYXRjaFByb3BzID0ge1xuICByZXNvdXJjZUlkOiBzdHJpbmc7XG59XG5cbnR5cGUgQ29tYmluZWRQcm9wcyA9IFByb3BzICYgUm91dGVDb21wb25lbnRQcm9wczxNYXRjaFByb3BzPlxuXG5jbGFzcyBGaWx0ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8Q29tYmluZWRQcm9wcywgU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IENvbWJpbmVkUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLmhhbmRsZVN1Ym1pdCA9IHRoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcylcbiAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcylcbiAgICB0aGlzLnJlc2V0RmlsdGVyID0gdGhpcy5yZXNldEZpbHRlci5iaW5kKHRoaXMpXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGZpbHRlcjogdGhpcy5wYXJzZVF1ZXJ5KCksXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHM6IENvbWJpbmVkUHJvcHMpOiB2b2lkIHtcbiAgICBjb25zdCB7IG1hdGNoIH0gPSB0aGlzLnByb3BzXG4gICAgaWYgKG5leHRQcm9wcy5tYXRjaC5wYXJhbXMucmVzb3VyY2VJZCAhPT0gbWF0Y2gucGFyYW1zLnJlc291cmNlSWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBmaWx0ZXI6IHt9IH0pXG4gICAgfVxuICB9XG5cbiAgcGFyc2VRdWVyeSgpOiBhbnkge1xuICAgIGNvbnN0IHsgbG9jYXRpb24gfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBmaWx0ZXI6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fVxuICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhsb2NhdGlvbi5zZWFyY2gpXG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBxdWVyeS5lbnRyaWVzKCkpIHtcbiAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IGVudHJ5XG4gICAgICBpZiAoa2V5Lm1hdGNoKCdmaWx0ZXJzLicpKSB7XG4gICAgICAgIGZpbHRlcltrZXkucmVwbGFjZSgnZmlsdGVycy4nLCAnJyldID0gdmFsdWVcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlclxuICB9XG5cbiAgaGFuZGxlU3VibWl0KGV2ZW50OiBTeW50aGV0aWNFdmVudCk6IGZhbHNlIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgeyBmaWx0ZXIgfSA9IHRoaXMuc3RhdGVcbiAgICBjb25zdCB7IGhpc3RvcnkgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBzZWFyY2ggPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpXG4gICAgT2JqZWN0LmtleXMoZmlsdGVyKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChmaWx0ZXJba2V5XSAhPT0gJycpIHtcbiAgICAgICAgc2VhcmNoLnNldChgZmlsdGVycy4ke2tleX1gLCBmaWx0ZXJba2V5XSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlYXJjaC5kZWxldGUoYGZpbHRlcnMuJHtrZXl9YClcbiAgICAgIH1cbiAgICB9KVxuICAgIHNlYXJjaC5zZXQoJ3BhZ2UnLCAnMScpXG4gICAgaGlzdG9yeS5wdXNoKGAke2hpc3RvcnkubG9jYXRpb24ucGF0aG5hbWV9PyR7c2VhcmNoLnRvU3RyaW5nKCl9YClcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJlc2V0RmlsdGVyKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgeyBoaXN0b3J5IH0gPSB0aGlzLnByb3BzXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGZpbHRlcmVkU2VhcmNoID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpXG4gICAgY29uc3Qgc2VhcmNoID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKVxuICAgIGZvciAoY29uc3Qga2V5IG9mIHNlYXJjaC5rZXlzKCkpIHtcbiAgICAgIGlmICgha2V5Lm1hdGNoKCdmaWx0ZXJzLicpKSB7XG4gICAgICAgIGZpbHRlcmVkU2VhcmNoLnNldChrZXksIHNlYXJjaC5nZXQoa2V5KSBhcyBzdHJpbmcpXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHF1ZXJ5ID0gZmlsdGVyZWRTZWFyY2gudG9TdHJpbmcoKSA9PT0gJycgPyBgPyR7ZmlsdGVyZWRTZWFyY2gudG9TdHJpbmcoKX1gIDogJydcbiAgICBoaXN0b3J5LnB1c2goaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSArIHF1ZXJ5KVxuICAgIHRoaXMuc2V0U3RhdGUoeyBmaWx0ZXI6IHt9IH0pXG4gIH1cblxuICBoYW5kbGVDaGFuZ2UocHJvcGVydHlOYW1lOiBzdHJpbmcgfCBSZWNvcmRKU09OLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgaWYgKChwcm9wZXJ0eU5hbWUgYXMgUmVjb3JkSlNPTikucGFyYW1zKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3lvdSBjYW4gbm90IHBhc3MgUmVjb3JkSlNPTiB0byBmaWx0ZXJzJylcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSA9PiAoe1xuICAgICAgZmlsdGVyOiB7XG4gICAgICAgIC4uLnN0YXRlLmZpbHRlcixcbiAgICAgICAgW3Byb3BlcnR5TmFtZSBhcyBzdHJpbmddOiB2YWx1ZSxcbiAgICAgIH0sXG4gICAgfSkpXG4gIH1cblxuICByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7IHJlc291cmNlLCBpc1Zpc2libGUsIHRvZ2dsZUZpbHRlciB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHsgZmlsdGVyIH0gPSB0aGlzLnN0YXRlXG4gICAgY29uc3QgcHJvcGVydGllcyA9IHJlc291cmNlLmZpbHRlclByb3BlcnRpZXNcbiAgICByZXR1cm4gKFxuICAgICAgPEZpbHRlcldyYXBwZXIgY2xhc3NOYW1lPXtpc1Zpc2libGUgPyB1bmRlZmluZWQgOiAnZmlsdGVyLWhpZGRlbid9PlxuICAgICAgICA8RmlsdGVyQ29udGVudD5cbiAgICAgICAgICA8RmlsdGVyTGluayBvbkNsaWNrPXt0b2dnbGVGaWx0ZXJ9PlxuICAgICAgICAgICAgPHNwYW4+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLWFycm93LXJpZ2h0XCIgLz48L3NwYW4+XG4gICAgICAgICAgICBGaWx0ZXJcbiAgICAgICAgICA8L0ZpbHRlckxpbms+XG4gICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyl9PlxuICAgICAgICAgICAge3Byb3BlcnRpZXMubWFwKHByb3BlcnR5ID0+IChcbiAgICAgICAgICAgICAgPFByb3BlcnR5VHlwZVxuICAgICAgICAgICAgICAgIGtleT17cHJvcGVydHkubmFtZX1cbiAgICAgICAgICAgICAgICB3aGVyZT17UHJvcGVydHlQbGFjZS5maWx0ZXJ9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgICAgIHByb3BlcnR5PXtwcm9wZXJ0eX1cbiAgICAgICAgICAgICAgICBmaWx0ZXI9e2ZpbHRlcn1cbiAgICAgICAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDxTdHlsZWRCdXR0b24gY2xhc3NOYW1lPVwiaXMtcHJpbWFyeVwiPlxuICAgICAgICAgICAgICBBcHBseSBDaGFuZ2VzXG4gICAgICAgICAgICA8L1N0eWxlZEJ1dHRvbj5cbiAgICAgICAgICAgIDxTdHlsZWRCdXR0b25cbiAgICAgICAgICAgICAgYXM9XCJhXCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaXMtdGV4dFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMucmVzZXRGaWx0ZXJ9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIENsZWFyIGZpbHRlcnNcbiAgICAgICAgICAgIDwvU3R5bGVkQnV0dG9uPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9GaWx0ZXJDb250ZW50PlxuICAgICAgPC9GaWx0ZXJXcmFwcGVyPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKEZpbHRlcilcbiIsImV4cG9ydCBkZWZhdWx0IChxdWVyeVN0cmluZzogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IHF1ZXJ5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhxdWVyeVN0cmluZylcbiAgZm9yIChjb25zdCBrZXkgb2YgcXVlcnkua2V5cygpKSB7XG4gICAgaWYgKGtleS5tYXRjaCgnZmlsdGVycy4nKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbmltcG9ydCBCcmVhZGNydW1icyBmcm9tICcuLi9hcHAvYnJlYWRjcnVtYnMnXG5pbXBvcnQgQWN0aW9uSGVhZGVyIGZyb20gJy4uL2FwcC9hY3Rpb24taGVhZGVyJ1xuaW1wb3J0IFdyYXBwZXJCb3ggZnJvbSAnLi4vdWkvd3JhcHBlci1ib3gnXG5pbXBvcnQgTm90aWNlIGZyb20gJy4uL2FwcC9ub3RpY2UnXG5pbXBvcnQgQmFzZUFjdGlvbiBmcm9tICcuLi9hcHAvYmFzZS1hY3Rpb24tY29tcG9uZW50J1xuaW1wb3J0IEZpbHRlciBmcm9tICcuLi9hcHAvZmlsdGVyJ1xuaW1wb3J0IHF1ZXJ5SGFzRmlsdGVyIGZyb20gJy4vdXRpbHMvcXVlcnktaGFzLWZpbHRlcidcbmltcG9ydCBSZXNvdXJjZUpTT04gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Jlc291cmNlLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgUGF0aHMsIFJlZHV4U3RhdGUgfSBmcm9tICcuLi8uLi9zdG9yZS9zdG9yZSdcbmltcG9ydCB7IE5vUmVzb3VyY2VFcnJvciwgTm9BY3Rpb25FcnJvciB9IGZyb20gJy4uL3VpL2Vycm9yLW1lc3NhZ2UnXG5pbXBvcnQgTm90aWNlV3JhcHBlciBmcm9tICcuL3N0eWxlZC9ub3RpY2Utd3JhcHBlci5zdHlsZWQnXG5pbXBvcnQgeyBSZXNvdXJjZUFjdGlvblBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzJ1xuXG50eXBlIFByb3BzRnJvbVN0YXRlID0ge1xuICByZXNvdXJjZXM6IEFycmF5PFJlc291cmNlSlNPTj47XG4gIHBhdGhzOiBQYXRocztcbn1cblxudHlwZSBQcm9wcyA9IFByb3BzRnJvbVN0YXRlICYgUm91dGVDb21wb25lbnRQcm9wczxSZXNvdXJjZUFjdGlvblBhcmFtcz5cblxuY29uc3QgUmVzb3VyY2VBY3Rpb246IFJlYWN0LkZDPFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHJlc291cmNlcywgbWF0Y2gsIGxvY2F0aW9uIH0gPSBwcm9wc1xuICBjb25zdCB7IHJlc291cmNlSWQsIGFjdGlvbk5hbWUgfSA9IG1hdGNoLnBhcmFtc1xuXG4gIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VzLmZpbmQociA9PiByLmlkID09PSByZXNvdXJjZUlkKVxuICBpZiAoIXJlc291cmNlKSB7XG4gICAgcmV0dXJuICg8Tm9SZXNvdXJjZUVycm9yIHJlc291cmNlSWQ9e3Jlc291cmNlSWR9IC8+KVxuICB9XG4gIGNvbnN0IGFjdGlvbiA9IHJlc291cmNlLnJlc291cmNlQWN0aW9ucy5maW5kKHIgPT4gci5uYW1lID09PSBhY3Rpb25OYW1lKVxuICBpZiAoIWFjdGlvbikge1xuICAgIHJldHVybiAoPE5vQWN0aW9uRXJyb3IgcmVzb3VyY2VJZD17cmVzb3VyY2VJZH0gYWN0aW9uTmFtZT17YWN0aW9uTmFtZX0gLz4pXG4gIH1cblxuICBjb25zdCBbZmlsdGVyVmlzaWJsZSwgc2V0RmlsZXJWaXNpYmxlXSA9IHVzZVN0YXRlKHF1ZXJ5SGFzRmlsdGVyKGxvY2F0aW9uLnNlYXJjaCkpXG4gIGNvbnN0IFt0YWcsIHNldFRhZ10gPSB1c2VTdGF0ZSgnJylcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8Tm90aWNlV3JhcHBlcj5cbiAgICAgICAgPE5vdGljZSAvPlxuICAgICAgPC9Ob3RpY2VXcmFwcGVyPlxuICAgICAgPFdyYXBwZXJCb3g+XG4gICAgICAgIDxCcmVhZGNydW1icyByZXNvdXJjZT17cmVzb3VyY2V9IGFjdGlvbk5hbWU9e2FjdGlvbk5hbWV9IC8+XG4gICAgICAgIDxBY3Rpb25IZWFkZXJcbiAgICAgICAgICByZXNvdXJjZT17cmVzb3VyY2V9XG4gICAgICAgICAgYWN0aW9uPXthY3Rpb259XG4gICAgICAgICAgdGFnPXt0YWd9XG4gICAgICAgICAgdG9nZ2xlRmlsdGVyPXthY3Rpb24uc2hvd0ZpbHRlciA/ICgpOiB2b2lkID0+IHNldEZpbGVyVmlzaWJsZSghZmlsdGVyVmlzaWJsZSkgOiB1bmRlZmluZWR9XG4gICAgICAgIC8+XG4gICAgICAgIDxCYXNlQWN0aW9uIGFjdGlvbj17YWN0aW9ufSByZXNvdXJjZT17cmVzb3VyY2V9IHNldFRhZz17c2V0VGFnfSAvPlxuICAgICAgPC9XcmFwcGVyQm94PlxuICAgICAge2FjdGlvbi5zaG93RmlsdGVyID8gKFxuICAgICAgICA8RmlsdGVyXG4gICAgICAgICAgcmVzb3VyY2U9e3Jlc291cmNlfVxuICAgICAgICAgIGlzVmlzaWJsZT17ZmlsdGVyVmlzaWJsZX1cbiAgICAgICAgICB0b2dnbGVGaWx0ZXI9eygpOiB2b2lkID0+IHsgc2V0RmlsZXJWaXNpYmxlKCFmaWx0ZXJWaXNpYmxlKSB9fVxuICAgICAgICAvPlxuICAgICAgKSA6ICcnfVxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogUmVkdXhTdGF0ZSk6IFByb3BzRnJvbVN0YXRlID0+ICh7XG4gIHBhdGhzOiBzdGF0ZS5wYXRocyxcbiAgcmVzb3VyY2VzOiBzdGF0ZS5yZXNvdXJjZXMsXG59KVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoUmVzb3VyY2VBY3Rpb24pXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCB7IFJvdXRlQ29tcG9uZW50UHJvcHMgfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5pbXBvcnQgQnJlYWRjcnVtYnMgZnJvbSAnLi4vYXBwL2JyZWFkY3J1bWJzJ1xuaW1wb3J0IEFjdGlvbkhlYWRlciBmcm9tICcuLi9hcHAvYWN0aW9uLWhlYWRlcidcbmltcG9ydCBXcmFwcGVyQm94IGZyb20gJy4uL3VpL3dyYXBwZXItYm94J1xuaW1wb3J0IE5vdGljZSBmcm9tICcuLi9hcHAvbm90aWNlJ1xuaW1wb3J0IEJhc2VBY3Rpb24gZnJvbSAnLi4vYXBwL2Jhc2UtYWN0aW9uLWNvbXBvbmVudCdcbmltcG9ydCBSZXNvdXJjZUpTT04gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3Jlc291cmNlLWpzb24uaW50ZXJmYWNlJ1xuaW1wb3J0IHsgUmVkdXhTdGF0ZSB9IGZyb20gJy4uLy4uL3N0b3JlL3N0b3JlJ1xuaW1wb3J0IEVycm9yTWVzc2FnZUJveCwgeyBOb1Jlc291cmNlRXJyb3IsIE5vQWN0aW9uRXJyb3IgfSBmcm9tICcuLi91aS9lcnJvci1tZXNzYWdlJ1xuaW1wb3J0IE5vdGljZVdyYXBwZXIgZnJvbSAnLi9zdHlsZWQvbm90aWNlLXdyYXBwZXIuc3R5bGVkJ1xuaW1wb3J0IFJlY29yZEpTT04gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL3JlY29yZC1qc29uLmludGVyZmFjZSdcbmltcG9ydCB7IExvYWRlciB9IGZyb20gJy4uL3VpJ1xuaW1wb3J0IHNob3VsZEFjdGlvblJlRmV0Y2hEYXRhIGZyb20gJy4vdXRpbHMvc2hvdWxkLWFjdGlvbi1yZS1mZXRjaC1kYXRhJ1xuaW1wb3J0IHsgQnVsa0FjdGlvblBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQvdXRpbHMvdmlldy1oZWxwZXJzJ1xuaW1wb3J0IEFwaUNsaWVudCBmcm9tICcuLi8uLi91dGlscy9hcGktY2xpZW50J1xuaW1wb3J0IHdpdGhOb3RpY2UsIHsgQWRkTm90aWNlUHJvcHMsIE5vdGljZU1lc3NhZ2UgfSBmcm9tICcuLi8uLi9zdG9yZS93aXRoLW5vdGljZSdcbmltcG9ydCBnZXRCdWxrQWN0aW9uc0Zyb21SZWNvcmRzIGZyb20gJy4uL2FwcC9yZWNvcmRzLXRhYmxlL3V0aWxzL2dldC1idWxrLWFjdGlvbnMtZnJvbS1yZWNvcmRzJ1xuaW1wb3J0IEFjdGlvbkpTT04gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC9kZWNvcmF0b3JzL2FjdGlvbi1qc29uLmludGVyZmFjZSdcblxuY29uc3QgTk9fUkVDT1JEU19FUlJPUjogTm90aWNlTWVzc2FnZSA9IHtcbiAgbWVzc2FnZTogJ1RoZXJlIHdhcyBhbiBlcnJvciBmZXRjaGluZyByZWNvcmRzLCBDaGVjayBvdXQgY29uc29sZSB0byBzZWUgbW9yZSBpbmZvcm1hdGlvbi4nLFxuICB0eXBlOiAnZXJyb3InLFxufVxuXG50eXBlIFByb3BzRnJvbVN0YXRlID0ge1xuICByZXNvdXJjZXM6IEFycmF5PFJlc291cmNlSlNPTj47XG59XG5cbnR5cGUgTWF0Y2hQYXJhbXMgPSBQaWNrPEJ1bGtBY3Rpb25QYXJhbXMsICdhY3Rpb25OYW1lJyB8ICdyZXNvdXJjZUlkJz5cbnR5cGUgUHJvcHMgPSBQcm9wc0Zyb21TdGF0ZSAmIFJvdXRlQ29tcG9uZW50UHJvcHM8TWF0Y2hQYXJhbXM+ICYgQWRkTm90aWNlUHJvcHNcblxudHlwZSBTdGF0ZSA9IHtcbiAgcmVjb3Jkcz86IEFycmF5PFJlY29yZEpTT04+O1xuICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gIHRhZz86IHN0cmluZztcbn1cblxuY2xhc3MgQnVsa0FjdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHJlY29yZHM6IHVuZGVmaW5lZCxcbiAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICAgIHRhZzogdW5kZWZpbmVkLFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xuICAgIGNvbnN0IHsgbWF0Y2ggfSA9IHRoaXMucHJvcHNcbiAgICB0aGlzLmZldGNoUmVjb3JkcyhtYXRjaC5wYXJhbXMpXG4gIH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV3UHJvcHM6IFByb3BzKTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyBtYXRjaCB9ID0gdGhpcy5wcm9wc1xuICAgIGlmIChzaG91bGRBY3Rpb25SZUZldGNoRGF0YShtYXRjaC5wYXJhbXMsIG5ld1Byb3BzLm1hdGNoLnBhcmFtcykpIHtcbiAgICAgIHRoaXMuZmV0Y2hSZWNvcmRzKG5ld1Byb3BzLm1hdGNoLnBhcmFtcylcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgc2V0VGFnKHRhZ05hbWUpOiB2b2lkIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdGFnOiB0YWdOYW1lIH0pXG4gIH1cblxuICBmZXRjaFJlY29yZHMoeyByZXNvdXJjZUlkLCBhY3Rpb25OYW1lIH06IE1hdGNoUGFyYW1zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgeyBhZGROb3RpY2UsIGxvY2F0aW9uIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgcmVjb3JkSWRzU3RyaW5nID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhsb2NhdGlvbi5zZWFyY2gpLmdldCgncmVjb3JkSWRzJylcbiAgICBjb25zdCByZWNvcmRJZHMgPSByZWNvcmRJZHNTdHJpbmcgPyByZWNvcmRJZHNTdHJpbmcuc3BsaXQoJywnKSA6IFtdXG5cbiAgICBjb25zdCBhcGkgPSBuZXcgQXBpQ2xpZW50KClcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICAgIHJlY29yZHM6IHVuZGVmaW5lZCxcbiAgICB9KVxuICAgIHJldHVybiBhcGkuYnVsa0FjdGlvbih7XG4gICAgICByZXNvdXJjZUlkLCByZWNvcmRJZHMsIGFjdGlvbk5hbWUsXG4gICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0xvYWRpbmc6IGZhbHNlLCByZWNvcmRzOiByZXNwb25zZS5kYXRhLnJlY29yZHMgfSlcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGFkZE5vdGljZShOT19SRUNPUkRTX0VSUk9SKVxuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9KVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyByZXNvdXJjZXMsIG1hdGNoIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyByZXNvdXJjZUlkLCBhY3Rpb25OYW1lIH0gPSBtYXRjaC5wYXJhbXNcbiAgICBjb25zdCB7IGlzTG9hZGluZywgdGFnLCByZWNvcmRzIH0gPSB0aGlzLnN0YXRlXG5cbiAgICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlcy5maW5kKHIgPT4gci5pZCA9PT0gcmVzb3VyY2VJZClcblxuICAgIGlmICghcmVzb3VyY2UpIHtcbiAgICAgIHJldHVybiAoPE5vUmVzb3VyY2VFcnJvciByZXNvdXJjZUlkPXtyZXNvdXJjZUlkfSAvPilcbiAgICB9XG5cbiAgICBpZiAoIXJlY29yZHMgJiYgIWlzTG9hZGluZykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEVycm9yTWVzc2FnZUJveCB0aXRsZT1cIk5vIHJlY29yZHNcIj5cbiAgICAgICAgICA8cD5Zb3UgaGF2ZSBub3Qgc2VsZWN0ZWQgYW55IHJlY29yZHM8L3A+XG4gICAgICAgIDwvRXJyb3JNZXNzYWdlQm94PlxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGFjdGlvbiA9IGdldEJ1bGtBY3Rpb25zRnJvbVJlY29yZHMocmVjb3JkcyB8fCBbXSkuZmluZChyID0+IHIubmFtZSA9PT0gYWN0aW9uTmFtZSlcblxuICAgIGlmICghYWN0aW9uICYmICFpc0xvYWRpbmcpIHtcbiAgICAgIHJldHVybiAoPE5vQWN0aW9uRXJyb3IgcmVzb3VyY2VJZD17cmVzb3VyY2VJZH0gYWN0aW9uTmFtZT17YWN0aW9uTmFtZX0gLz4pXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxOb3RpY2VXcmFwcGVyPlxuICAgICAgICAgIDxOb3RpY2UgLz5cbiAgICAgICAgPC9Ob3RpY2VXcmFwcGVyPlxuICAgICAgICA8V3JhcHBlckJveD5cbiAgICAgICAgICA8QnJlYWRjcnVtYnMgcmVzb3VyY2U9e3Jlc291cmNlfSBhY3Rpb25OYW1lPXthY3Rpb25OYW1lfSAvPlxuICAgICAgICAgIDxBY3Rpb25IZWFkZXJcbiAgICAgICAgICAgIHJlc291cmNlPXtyZXNvdXJjZX1cbiAgICAgICAgICAgIGFjdGlvbj17YWN0aW9ufVxuICAgICAgICAgICAgdGFnPXt0YWd9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7aXNMb2FkaW5nXG4gICAgICAgICAgICA/IDxMb2FkZXIgLz5cbiAgICAgICAgICAgIDogKFxuICAgICAgICAgICAgICA8QmFzZUFjdGlvblxuICAgICAgICAgICAgICAgIGFjdGlvbj17YWN0aW9uIGFzIEFjdGlvbkpTT059XG4gICAgICAgICAgICAgICAgcmVzb3VyY2U9e3Jlc291cmNlfVxuICAgICAgICAgICAgICAgIHJlY29yZHM9e3JlY29yZHN9XG4gICAgICAgICAgICAgICAgc2V0VGFnPXt0aGlzLnNldFRhZ31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIDwvV3JhcHBlckJveD5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFJlZHV4U3RhdGUpOiBQcm9wc0Zyb21TdGF0ZSA9PiAoe1xuICByZXNvdXJjZXM6IHN0YXRlLnJlc291cmNlcyxcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhOb3RpY2UoY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKEJ1bGtBY3Rpb24pKVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSwgRnVuY3Rpb25Db21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0IHsgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbmltcG9ydCBFcnJvckJvdW5kYXJ5IGZyb20gJy4uL2FwcC9lcnJvci1ib3VuZGFyeSdcbmltcG9ydCB7IFJlZHV4U3RhdGUgfSBmcm9tICcuLi8uLi9zdG9yZS9zdG9yZSdcbmltcG9ydCB7IEVycm9yTWVzc2FnZUJveCB9IGZyb20gJy4uL3VpJ1xuaW1wb3J0IE5vdGljZSBmcm9tICcuLi9hcHAvbm90aWNlJ1xuaW1wb3J0IE5vdGljZVdyYXBwZXIgZnJvbSAnLi9zdHlsZWQvbm90aWNlLXdyYXBwZXIuc3R5bGVkJ1xuXG5kZWNsYXJlIGNvbnN0IEFkbWluQnJvOiB7XG4gIFVzZXJDb21wb25lbnRzOiBSZWNvcmQ8c3RyaW5nLCBGdW5jdGlvbkNvbXBvbmVudD47XG59XG5cbnR5cGUgU3RhdGUgPSB7XG4gIGlzQ2xpZW50OiBib29sZWFuO1xufVxuXG50eXBlIFByb3BzRnJvbVN0YXRlID0ge1xuICBwYWdlczogUmVkdXhTdGF0ZVsncGFnZXMnXTtcbn1cblxudHlwZSBQcm9wcyA9IFByb3BzRnJvbVN0YXRlICYgUm91dGVDb21wb25lbnRQcm9wczx7XG4gIHBhZ2VOYW1lOiBzdHJpbmc7XG59PlxuXG5jbGFzcyBQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNDbGllbnQ6IGZhbHNlLFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc0NsaWVudDogdHJ1ZSB9KVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwYWdlcywgbWF0Y2ggfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB7IHBhcmFtcyB9ID0gbWF0Y2hcbiAgICBjb25zdCB7IHBhZ2VOYW1lIH0gPSBwYXJhbXNcbiAgICBjb25zdCB7IGlzQ2xpZW50IH0gPSB0aGlzLnN0YXRlXG5cbiAgICBjb25zdCBjdXJyZW50UGFnZSA9IHBhZ2VzLmZpbmQocGFnZSA9PiBwYWdlLm5hbWUgPT09IHBhZ2VOYW1lKVxuXG4gICAgaWYgKCFjdXJyZW50UGFnZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEVycm9yTWVzc2FnZUJveCB0aXRsZT1cIlRoZXJlIGlzIG5vIHBhZ2Ugb2YgZ2l2ZW4gbmFtZVwiPlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgUGFnZTpcbiAgICAgICAgICAgIDxiPntgIFwiJHtwYWdlTmFtZX1cIiBgfTwvYj5cbiAgICAgICAgICAgIGRvZXMgbm90IGV4aXN0LlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC9FcnJvck1lc3NhZ2VCb3g+XG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgQ29tcG9uZW50ID0gQWRtaW5Ccm8uVXNlckNvbXBvbmVudHNbY3VycmVudFBhZ2UuY29tcG9uZW50XVxuXG4gICAgaWYgKCFDb21wb25lbnQgfHwgIWlzQ2xpZW50KSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8RXJyb3JNZXNzYWdlQm94IHRpdGxlPVwiTm8gY29tcG9uZW50IHNwZWNpZmllZFwiPlxuICAgICAgICAgIDxwPllvdSBoYXZlIHRvIHNwZWNpZnkgY29tcG9uZW50IHdoaWNoIHdpbGwgcmVuZGVyIHRoaXMgUGFnZTwvcD5cbiAgICAgICAgPC9FcnJvck1lc3NhZ2VCb3g+XG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxOb3RpY2VXcmFwcGVyPlxuICAgICAgICAgIDxOb3RpY2UgLz5cbiAgICAgICAgPC9Ob3RpY2VXcmFwcGVyPlxuICAgICAgICA8RXJyb3JCb3VuZGFyeT5cbiAgICAgICAgICA8Q29tcG9uZW50IC8+XG4gICAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICAgIDwvPlxuICAgIClcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFJlZHV4U3RhdGUpOiBQcm9wc0Zyb21TdGF0ZSA9PiAoe1xuICBwYWdlczogc3RhdGUucGFnZXMsXG59KVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoUGFnZSlcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFN3aXRjaCwgUm91dGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHN0eWxlZCwgeyBjcmVhdGVHbG9iYWxTdHlsZSB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5pbXBvcnQgVmlld0hlbHBlcnMgZnJvbSAnLi4vLi4vYmFja2VuZC91dGlscy92aWV3LWhlbHBlcnMnXG5pbXBvcnQgU2lkZWJhciBmcm9tICcuL2FwcC9zaWRlYmFyL3NpZGViYXInXG5pbXBvcnQgVG9wQmFyIGZyb20gJy4vYXBwL3RvcC1iYXInXG5cbmltcG9ydCB7XG4gIERhc2hib2FyZCwgUmVzb3VyY2VBY3Rpb24sIFJlY29yZEFjdGlvbiwgUGFnZSwgQnVsa0FjdGlvbixcbn0gZnJvbSAnLi9yb3V0ZXMnXG5cbmNvbnN0IEdsb2JhbFN0eWxlID0gY3JlYXRlR2xvYmFsU3R5bGVgXG4gIGh0bWwsIGJvZHksICNhcHAge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBiYWNrZ3JvdW5kOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLmJja307XG4gICAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5kZWZhdWx0VGV4dH07XG4gIH1cblxuICAuY29udGVudCBoMSwgLmNvbnRlbnQgaDIsIC5jb250ZW50IGgzLCAuY29udGVudCBoNCwgLmNvbnRlbnQgaDUsIC5jb250ZW50IGg2IHtcbiAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5kZWZhdWx0VGV4dH07XG4gIH1cblxuICBhIHtcbiAgICBjb2xvcjogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5wcmltYXJ5fTtcbiAgICAmOmhvdmVyIHtcbiAgICAgIGNvbG9yOiAkeyh7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuY29sb3JzLnByaW1hcnlIb3Zlcn07XG4gICAgfVxuICB9XG5gXG5cbmNvbnN0IEFwcGxpY2F0aW9uV3JhcHBlciA9IHN0eWxlZC5zZWN0aW9uYFxuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgaGVpZ2h0OiAxMDAlO1xuYFxuXG5jb25zdCBDb3JlID0gc3R5bGVkLnNlY3Rpb25gXG4gIGhlaWdodDogMTAwJTtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgd2lkdGg6IDEwMCU7XG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuaW5uZXJCY2t9O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuYFxuXG5jb25zdCBBcHA6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCBoID0gbmV3IFZpZXdIZWxwZXJzKClcblxuICBjb25zdCByZXNvdXJjZUlkID0gJzpyZXNvdXJjZUlkJ1xuICBjb25zdCBhY3Rpb25OYW1lID0gJzphY3Rpb25OYW1lJ1xuICBjb25zdCByZWNvcmRJZCA9ICc6cmVjb3JkSWQnXG4gIGNvbnN0IHBhZ2VOYW1lID0gJzpwYWdlTmFtZSdcblxuICBjb25zdCByZWNvcmRBY3Rpb25VcmwgPSBoLnJlY29yZEFjdGlvblVybCh7IHJlc291cmNlSWQsIHJlY29yZElkLCBhY3Rpb25OYW1lIH0pXG4gIGNvbnN0IHJlc291cmNlQWN0aW9uVXJsID0gaC5yZXNvdXJjZUFjdGlvblVybCh7IHJlc291cmNlSWQsIGFjdGlvbk5hbWUgfSlcbiAgY29uc3QgYnVsa0FjdGlvblVybCA9IGguYnVsa0FjdGlvblVybCh7IHJlc291cmNlSWQsIGFjdGlvbk5hbWUgfSlcbiAgY29uc3QgcGFnZVVybCA9IGgucGFnZVVybChwYWdlTmFtZSlcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxHbG9iYWxTdHlsZSAvPlxuICAgICAgPEFwcGxpY2F0aW9uV3JhcHBlcj5cbiAgICAgICAgPFNpZGViYXIgLz5cbiAgICAgICAgPENvcmU+XG4gICAgICAgICAgPFRvcEJhciAvPlxuICAgICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD17aC5kYXNoYm9hcmRVcmwoKX0gZXhhY3QgY29tcG9uZW50PXtEYXNoYm9hcmR9IC8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD17cmVzb3VyY2VBY3Rpb25Vcmx9IGV4YWN0IGNvbXBvbmVudD17UmVzb3VyY2VBY3Rpb259IC8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD17cmVjb3JkQWN0aW9uVXJsfSBleGFjdCBjb21wb25lbnQ9e1JlY29yZEFjdGlvbn0gLz5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPXtidWxrQWN0aW9uVXJsfSBleGFjdCBjb21wb25lbnQ9e0J1bGtBY3Rpb259IC8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD17cGFnZVVybH0gZXhhY3QgY29tcG9uZW50PXtQYWdlfSAvPlxuICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICA8L0NvcmU+XG4gICAgICA8L0FwcGxpY2F0aW9uV3JhcHBlcj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcFxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCBDb21wb25lbnRDbGFzcyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcblxuaW1wb3J0IExhYmVsIGZyb20gJy4uL3VpL2xhYmVsJ1xuaW1wb3J0IHdpdGhOb3RpY2UsIHsgQWRkTm90aWNlUHJvcHMgfSBmcm9tICcuLi8uLi9zdG9yZS93aXRoLW5vdGljZSdcblxuY29uc3QgVXBsb2FkSW5wdXQgPSBzdHlsZWQuaW5wdXRgXG4gIGZvbnQtc2l6ZTogMTAwcHg7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogMDtcbiAgdG9wOiAwO1xuICBvcGFjaXR5OiAwO1xuICBib3R0b206IDA7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgd2lkdGg6IDEwMCU7XG5gXG5cbmNvbnN0IFZhbGlkYXRpb25JbmZvcm1hdGlvbiA9IHN0eWxlZC5wYFxuICAmJiYge1xuICAgIGZvbnQtc2l6ZTogJHsoeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmZvbnRzLm1pbn07XG4gICAgbGFiZWwge1xuICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgIH1cbiAgfVxuYFxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXI6IGRhc2hlZCAkeyh7IHRoZW1lIH06IHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuYm9yZGVyfSAxcHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgcGFkZGluZzogJHsoeyB0aGVtZSB9OiB7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuc2l6ZXMucGFkZGluZ0xheW91dH07XG4gICY6aG92ZXJ7XG4gICAgYm9yZGVyLWNvbG9yOiAkeyh7IHRoZW1lIH06IHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuYm9yZGVySG92ZXJ9O1xuICB9XG5cbiAgaSB7XG4gICAgY29sb3I6ICR7KHsgdGhlbWUgfTogeyB0aGVtZSB9KTogc3RyaW5nID0+IHRoZW1lLmNvbG9ycy5zdXBlckxpZ2h0QmFja307XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgfVxuICBcbiAgLmlubmVyV3JhcHBlciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG5gXG5cbmNvbnN0IERyb3BNZXNzYWdlID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3JkZXI6IDVweCBzb2xpZCAkeyh7IHRoZW1lIH06IHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMucHJpbWFyeUhvdmVyfTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICBvcGFjaXR5OiAwO1xuICAmID4gaDEge1xuICAgIGNvbG9yOiAkeyh7IHRoZW1lIH06IHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMuZmlsdGVyRGVmYXVsdFRleHR9O1xuICAgIGZvbnQtc2l6ZTogJHsoeyB0aGVtZSB9OiB7IHRoZW1lIH0pOiBzdHJpbmcgPT4gdGhlbWUuZm9udHMuaGVhZGVyfTtcbiAgICBtYXJnaW4tdG9wOiAkeyh7IHRoZW1lIH06IHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5zaXplcy5wYWRkaW5nTGF5b3V0fTtcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC41cztcbiAgfVxuXG4gICYuYWN0aXZlIHtcbiAgICBiYWNrZ3JvdW5kOiAkeyh7IHRoZW1lIH06IHsgdGhlbWUgfSk6IHN0cmluZyA9PiB0aGVtZS5jb2xvcnMucHJpbWFyeX07XG4gICAgb3BhY2l0eTogMTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDFzO1xuICAgICYgPiBoMSB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgyZGVnKSBzY2FsZSgxLjIpO1xuICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuNXM7XG4gICAgfVxuICB9XG5gXG5cbmNvbnN0IHZhbGlkYXRlQ29udGVudFR5cGUgPSAoXG4gIG1pbWVUeXBlczogdW5kZWZpbmVkIHwgQXJyYXk8c3RyaW5nPixcbiAgbWltZVR5cGU6IHN0cmluZyxcbik6IGJvb2xlYW4gPT4ge1xuICBpZiAoIW1pbWVUeXBlcyB8fCAhbWltZVR5cGVzLmxlbmd0aCkgeyByZXR1cm4gdHJ1ZSB9XG4gIHJldHVybiBtaW1lVHlwZXMuaW5jbHVkZXMobWltZVR5cGUpXG59XG5cbmNvbnN0IHZhbGlkYXRlU2l6ZSA9IChcbiAgbWF4U2l6ZTogc3RyaW5nIHwgbnVtYmVyIHwgdW5kZWZpbmVkLFxuICBzaXplOiBzdHJpbmcgfCBudW1iZXIgfCBudWxsLFxuKTogYm9vbGVhbiA9PiB7XG4gIGlmICghbWF4U2l6ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmICghc2l6ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIHJldHVybiArbWF4U2l6ZSA+PSArc2l6ZVxufVxuXG5jb25zdCBpbktiID0gKHNpemU6IHN0cmluZyB8IG51bWJlcik6IHN0cmluZyA9PiB7XG4gIGlmICghc2l6ZSkgeyByZXR1cm4gJycgfVxuICByZXR1cm4gYCR7TWF0aC5yb3VuZCgrc2l6ZSAvIDEwMjQpfSBLQmBcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqIEBtZW1iZXJvZiBEcm9wQXJlYVxuICogQGFsaWFzIE9uVXBsb2FkXG4gKi9cbnR5cGUgT25VcGxvYWQgPSAoZmlsZXM6IEZpbGVMaXN0IHwgbnVsbCkgPT4gdm9pZFxuXG4vKipcbiAqIEBtZW1iZXJvZiBEcm9wQXJlYVxuICogQGFsaWFzIEZpbGVPYmplY3RcbiAqL1xudHlwZSBGaWxlT2JqZWN0ID0ge1xuICAvKipcbiAgICogRmlsZSBzaXplIGluIGJ5dGVzXG4gICAqL1xuICBzaXplOiBudW1iZXI7XG4gIC8qKlxuICAgKiBPcmlnaW5hbCBmaWxlIG5hbWVcbiAgICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIE1pbWUgVHlwZVxuICAgKi9cbiAgdHlwZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFjdHVhbCBmaWxlIGJ1ZmZlci5cbiAgICovXG4gIGZpbGU/OiBCdWZmZXI7XG59O1xuXG4vKipcbiAqIEBtZW1iZXJvZiBEcm9wQXJlYVxuICovXG50eXBlIFByb3BzID0ge1xuICAvKipcbiAgICogV2hlbiBnaXZlbiBVSSB3aWxsIHNob3cgdGhhdCBmaWxlIG9mIHRoaXMgbmFtZSBhbmQgdGhpcyBzaXplIGhhcyBiZWVuIHNldC5cbiAgICovXG4gIGZpbGVPYmplY3Q/OiBGaWxlT2JqZWN0O1xuICAvKipcbiAgICogQ2FsbGJhY2sgcGVyZm9ybWVkIHdoZW4gdGhlIGZpbGUgaXMgZHJvcHBlZC9zZWxlY3RlZFxuICAgKi9cbiAgb25VcGxvYWQ6IE9uVXBsb2FkO1xuICAvKipcbiAgICogTmFtZSBvZiB0aGUgcHJvcGVydHkgLSB1c2VkIGFzIGFuIGlucHV0IGlkLlxuICAgKi9cbiAgcHJvcGVydHlOYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBvcHRpb25zXG4gICAqL1xuICB2YWxpZGF0ZT86IHtcbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIHNpemUgb2YgdGhlIHVwbG9hZGVkIGZpbGUgaW4gYnl0ZXMuIElmIG5vdCBkZWZpbmVkIC0gYWxsIGZpbGVzIGFyZSBhbGxvd2VkLlxuICAgICAqL1xuICAgIG1heFNpemU/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQXZhaWxhYmxlIG1pbWUgdHlwZXMuIFdoZW4gbm90IGRlZmluZWQgLSBhbGwgbWltZSB0eXBlcyBhcmUgYWxsb3dlZC5cbiAgICAgKi9cbiAgICBtaW1lVHlwZXM/OiBBcnJheTxzdHJpbmc+O1xuICB9O1xufVxuXG4vKipcbiAqIERyb3AgQXJlYSB3aGljaCBjYW4gYmUgdXNlZCBmb3IgdXBsb2FkaW5nIGZpbGVzLlxuICpcbiAqIGhvdyB0byB1c2UgaXQgaW4geW91ciBjdXN0b20gY29tcG9uZW50LnRzeDpcbiAqIGBgYFxuICogaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyBEcm9wQXJlYSwgUHJvcGVydHlJbkVkaXQsIEJhc2VQcm9wZXJ0eVByb3BzIH0gZnJvbSAnYWRtaW4tYnJvJ1xuICogaW1wb3J0IHsgdW5mbGF0dGVuIH0gZnJvbSAnZmxhdCdcbiAqXG4gKiBjb25zdCBVcGxvYWRQaG90bzogUmVhY3QuRkM8QmFzZVByb3BlcnR5UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gKiAgIGNvbnN0IHsgcHJvcGVydHksIHJlY29yZCwgb25DaGFuZ2UgfSA9IHByb3BzXG4gKlxuICogICBjb25zdCBmaWxlT2JqZWN0ID0gdW5mbGF0dGVuKHJlY29yZC5wYXJhbXMpW3Byb3BlcnR5Lm5hbWVdXG4gKlxuICogICBjb25zdCBvblVwbG9hZCA9IChmaWxlczogRmlsZUxpc3QpID0+IHtcbiAqICAgICBjb25zdCBuZXdSZWNvcmQgPSB7Li4ucmVjb3JkfVxuICogICAgIGNvbnN0IFtmaWxlXSA9IGZpbGVzXG4gKlxuICogICAgIG9uQ2hhbmdlKHtcbiAqICAgICAgIC4uLm5ld1JlY29yZCxcbiAqICAgICAgIHBhcmFtczoge1xuICogICAgICAgICAuLi5uZXdSZWNvcmQucGFyYW1zLFxuICogICAgICAgICBbYCR7cHJvcGVydHkubmFtZX0uZmlsZWBdOiBmaWxlLFxuICogICAgICAgICBbYCR7cHJvcGVydHkubmFtZX0ubmFtZWBdOiBmaWxlLm5hbWUsXG4gKiAgICAgICAgIFtgJHtwcm9wZXJ0eS5uYW1lfS5zaXplYF06IGZpbGUuc2l6ZSxcbiAqICAgICAgICAgW2Ake3Byb3BlcnR5Lm5hbWV9LnR5cGVgXTogZmlsZS50eXBlLFxuICogICAgICAgfVxuICogICAgIH0pXG4gKiAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICogICB9XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxQcm9wZXJ0eUluRWRpdCBwcm9wZXJ0eT17cHJvcGVydHl9PlxuICogICAgICAgPERyb3BBcmVhXG4gKiAgICAgICAgIGZpbGVPYmplY3Q9e2ZpbGVPYmplY3R9XG4gKiAgICAgICAgIG9uVXBsb2FkPXtvblVwbG9hZH1cbiAqICAgICAgICAgcHJvcGVydHlOYW1lPXtwcm9wZXJ0eS5uYW1lfVxuICogICAgICAgLz5cbiAqICAgICA8L1Byb3BlcnR5SW5FZGl0PlxuICogICApXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAY29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGZpbGVPYmplY3QgPSBudWxsXG4gKiBjb25zdCBtYXhTaXplID0gMTAyNFxuICogY29uc3QgbWltZVR5cGVzID0gWydhcHBsaWNhdGlvbi9wZGYnXVxuICogY29uc3Qgb25VcGxvYWQgPSAoZmlsZXMpID0+IHsgYWxlcnQoZmlsZXNbMF0ubmFtZSkgfVxuICogY29uc3QgcHJvcGVydHkgPSB7bmFtZTogJ2ZpbGVVcGxvYWQnLCBsYWJlbDogJ0ZpbGUgVXBsb2FkJ31cbiAqIHJldHVybiAoXG4gKiA8UHJvcGVydHlJbkVkaXQgcHJvcGVydHk9e3Byb3BlcnR5fT5cbiAqICAgPERyb3BBcmVhXG4gKiAgICAgZmlsZU9iamVjdD17ZmlsZU9iamVjdH1cbiAqICAgICBvblVwbG9hZD17b25VcGxvYWR9XG4gKiAgICAgcHJvcGVydHlOYW1lPXtwcm9wZXJ0eS5uYW1lfVxuICogICAgIHZhbGlkYXRlPSB7IHsgbWF4U2l6ZSwgbWltZVR5cGVzIH0gfVxuICogICAvPlxuICogPC9Qcm9wZXJ0eUluRWRpdD5cbiAqIClcbiAqL1xuY29uc3QgRHJvcEFyZWE6IFJlYWN0LkZDPFByb3BzICYgQWRkTm90aWNlUHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZmlsZU9iamVjdCwgb25VcGxvYWQsIHByb3BlcnR5TmFtZSwgdmFsaWRhdGUgPSB7fSwgYWRkTm90aWNlIH0gPSBwcm9wc1xuXG4gIGNvbnN0IFtpc0RyYWdnaW5nLCBzZXRJc0RyYWdnaW5nXSA9IHVzZVN0YXRlKGZhbHNlKVxuXG4gIGNvbnN0IG9uRHJhZ0VudGVyID0gKCk6IHZvaWQgPT4gc2V0SXNEcmFnZ2luZyh0cnVlKVxuICBjb25zdCBvbkRyYWdMZWF2ZSA9ICgpOiB2b2lkID0+IHNldElzRHJhZ2dpbmcoZmFsc2UpXG4gIGNvbnN0IG9uRHJhZ092ZXIgPSAoKTogdm9pZCA9PiBzZXRJc0RyYWdnaW5nKHRydWUpXG5cbiAgY29uc3Qgb25Ecm9wID0gKGV2ZW50OiBSZWFjdC5EcmFnRXZlbnQgfCBSZWFjdC5TeW50aGV0aWNFdmVudCk6IHZvaWQgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBzZXRJc0RyYWdnaW5nKGZhbHNlKVxuICAgIGNvbnN0IHsgZmlsZXMgfSA9ICgoZXZlbnQgYXMgUmVhY3QuRHJhZ0V2ZW50KS5kYXRhVHJhbnNmZXIgfHwgZXZlbnQudGFyZ2V0KVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGZpbGUgPSBmaWxlcy5pdGVtKGkpXG4gICAgICBpZiAoIWZpbGUpIHsgcmV0dXJuIH1cbiAgICAgIGlmICghdmFsaWRhdGVTaXplKHZhbGlkYXRlLm1heFNpemUsIGZpbGUgJiYgZmlsZS5zaXplKSkge1xuICAgICAgICBhZGROb3RpY2Uoe1xuICAgICAgICAgIG1lc3NhZ2U6IGBGaWxlOiAke2ZpbGUubmFtZX0gc2l6ZSBpcyB0b28gYmlnYCxcbiAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICB9KVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmICghdmFsaWRhdGVDb250ZW50VHlwZSh2YWxpZGF0ZS5taW1lVHlwZXMsIGZpbGUudHlwZSkpIHtcbiAgICAgICAgYWRkTm90aWNlKHtcbiAgICAgICAgICBtZXNzYWdlOiBgRmlsZTogJHtmaWxlLm5hbWV9IGhhcyB1bnN1cHBvcnRlZCB0eXBlOiAke2ZpbGUudHlwZX1gLFxuICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICBvblVwbG9hZChmaWxlcylcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFdyYXBwZXJcbiAgICAgIG9uRHJhZ0VudGVyPXtvbkRyYWdFbnRlcn1cbiAgICAgIG9uRHJhZ092ZXI9e29uRHJhZ092ZXJ9XG4gICAgICBvbkRyYWdMZWF2ZT17b25EcmFnTGVhdmV9XG4gICAgICBvbkRyb3A9e29uRHJvcH1cbiAgICA+XG4gICAgICA8RHJvcE1lc3NhZ2UgY2xhc3NOYW1lPXtpc0RyYWdnaW5nID8gJ2FjdGl2ZScgOiAnaW5hY3RpdmUnfSBvbkRyYWdFbnRlcj17b25EcmFnRW50ZXJ9PlxuICAgICAgICA8aDE+RHJvcCBIZXJlPC9oMT5cbiAgICAgIDwvRHJvcE1lc3NhZ2U+XG4gICAgICA8VXBsb2FkSW5wdXQgdHlwZT1cImZpbGVcIiBpZD17cHJvcGVydHlOYW1lfSBvbkNoYW5nZT17KGV2ZW50KTogdm9pZCA9PiBvbkRyb3AoZXZlbnQpfSAvPlxuICAgICAge2ZpbGVPYmplY3QgPyAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPExhYmVsPkZpbGUgbmFtZTwvTGFiZWw+XG4gICAgICAgICAgPHA+e2ZpbGVPYmplY3QubmFtZX08L3A+XG4gICAgICAgICAgPHA+e2AoJHtNYXRoLnJvdW5kKCtmaWxlT2JqZWN0LnNpemUgLyAxMDI0KX0pIEtCYH08L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSA6IChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8cD48aSBjbGFzc05hbWU9XCJmYSBmYS00eCBmYS11cGxvYWRcIiAvPjwvcD5cbiAgICAgICAgICA8cD5cbiAgICAgICAgICAgIFBpY2sgb3IgRHJvcCBGaWxlIGhlcmUgdG8gdXBsb2FkIGl0LlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8VmFsaWRhdGlvbkluZm9ybWF0aW9uPlxuICAgICAgICAgICAge3ZhbGlkYXRlLm1heFNpemUgPyAoXG4gICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgIDxMYWJlbD5NYXggc2l6ZTo8L0xhYmVsPlxuICAgICAgICAgICAgICAgIHtpbktiKHZhbGlkYXRlLm1heFNpemUpfVxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICApIDogJyd9XG4gICAgICAgICAgICB7dmFsaWRhdGUubWltZVR5cGVzICYmIHZhbGlkYXRlLm1pbWVUeXBlcy5sZW5ndGggPyAoXG4gICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgIDxMYWJlbD5BdmFpbGFibGUgdHlwZXM6PC9MYWJlbD5cbiAgICAgICAgICAgICAgICB7dmFsaWRhdGUubWltZVR5cGVzLmpvaW4oJywgJyl9XG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICkgOiAnJ31cbiAgICAgICAgICA8L1ZhbGlkYXRpb25JbmZvcm1hdGlvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvV3JhcHBlcj5cbiAgKVxufVxuXG4vLyBUT0RPIHJlbW92ZSB0aGlzIGhhY2tcbmV4cG9ydCBkZWZhdWx0IHdpdGhOb3RpY2UoRHJvcEFyZWEpIGFzIHVua25vd24gYXMgQ29tcG9uZW50Q2xhc3M8UHJvcHM+XG4iLCJpbXBvcnQgJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG4vKipcbiAqIEBmaWxlIERlZmF1bHQgQWRtaW5Ccm8gdGhlbWVcbiAqIEBwcml2YXRlXG4gKi9cblxuLy8gc29ydGVkIGFscGhhYmV0aWNhbGx5XG5leHBvcnQgY29uc3QgY29sb3JzID0ge1xuICBiY2s6ICcjZmZmJyxcbiAgZGVmYXVsdFRleHQ6ICcjMTExMTE0JyxcbiAgbGlnaHRUZXh0OiAnIzcwNzI4RicsXG4gIGxpZ2h0QmNrOiAnI0Y4RjhGQScsXG4gIHN1cGVyTGlnaHRCYWNrOiAnI0ZDRkNGQycsXG4gIGJvcmRlcjogJyNlZWVlZWYnLFxuICBib3JkZXJIb3ZlcjogJyNiNWI1YjUnLFxuICBib3JkZXJPbkRhcms6ICcjNEU1Nzc5JyxcbiAgaW5uZXJCY2s6ICcjZjdmN0ZhJyxcbiAgZGFya0JjazogJyMzMDNiNjInLFxuICBzdXBlckRhcmtCY2s6ICcjMTkyMDM1JyxcbiAgaW5wdXRCY2s6ICcjZmZmJyxcbiAgZmlsdGVyRGVmYXVsdFRleHQ6ICcjZmZmJyxcbiAgZmlsdGVyTGlnaHRUZXh0OiAnI2I1YjViNScsXG5cbiAgbG92ZTogJyNlNjI4MmInLFxuICBwcmltYXJ5OiAnIzRBNjlGMicsXG4gIHByaW1hcnlIb3ZlcjogJyM1NDVCOEMnLFxuICBzdWNjZXNzOiAnIzIxQzE5NycsXG4gIHN1Y2Nlc3NCb3JkZXI6ICcjOENEQUQ5JyxcbiAgbGlnaHRTdWNjZXNzOiAnI0RCRjBGMScsXG4gIGVycm9yOiAnI0YwNjE2RicsXG4gIGxpZ2h0RXJyb3I6ICcjRjZFMUU2JyxcbiAgd2FybmluZzogJyNGRjlGODknLFxufVxuXG5leHBvcnQgY29uc3Qgc2l6ZXMgPSB7XG4gIG5hdmJhckhlaWdodDogJzY0cHgnLFxuICBzaWRlYmFyV2lkdGg6ICczMDBweCcsXG4gIHNpZGViYXJNb2JpbGVXaWR0aDogJzk4cHgnLFxuICBwYWRkaW5nTGF5b3V0OiAnMzBweCcsXG4gIHBhZGRpbmc6ICcxNXB4JyxcbiAgcGFkZGluZ01pbjogJzVweCcsXG59XG5cbmV4cG9ydCBjb25zdCBmb250cyA9IHtcbiAgYmFzZTogJzE0cHgnLFxuICBtZWRpdW06ICcxMnB4JyxcbiAgbWluOiAnMTFweCcsXG4gIGhlYWRlcjogJzMycHgnLFxufVxuXG5leHBvcnQgY29uc3QgYnJlYWtwb2ludHMgPSB7XG4gIG1pbk1vYmlsZVdpZHRoOiAnMzIwcHgnLFxuICBtaW5UYWJsZXRXaWR0aDogJzc2OXB4JyxcbiAgbWluRGVza3RvcFdpZHRoOiAnMTAyNHB4JyxcbiAgbWluV2lkZXNjcmVlbldpZHRoOiAnMTIxNnB4JyxcbiAgbWluRnVsbEhEV2lkdGg6ICcxNDA4cHgnLFxufVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5leHBvcnQgY29uc3QgcGF0aHNUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgbG9naW5QYXRoOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHJvb3RQYXRoOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGxvZ291dFBhdGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn0pXG5cbmV4cG9ydCBjb25zdCBzZXNzaW9uVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGVtYWlsOiBQcm9wVHlwZXMuc3RyaW5nLFxufSlcblxuZXhwb3J0IGNvbnN0IGJyYW5kaW5nVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGxvZ286IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY29tcGFueU5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc29mdHdhcmVCcm90aGVyczogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbn0pXG5cbmNvbnN0IHByb3BlcnR5VHlwZVNoYXBlID0ge1xuICBpc0lkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBpc1NvcnRhYmxlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBpc1RpdGxlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBsYWJlbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWQsXG4gIG5hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKS5pc1JlcXVpcmVkLFxuICBwb3NpdGlvbjogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGF2YWlsYWJsZVZhbHVlczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfSkpLFxuICByZWZlcmVuY2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmddKSxcbiAgaXNBcnJheTogUHJvcFR5cGVzLmJvb2xlYW4sXG59XG5cbmV4cG9ydCBjb25zdCBwcm9wZXJ0eVR5cGUgPSBQcm9wVHlwZXMuc2hhcGUocHJvcGVydHlUeXBlU2hhcGUpXG5cbnByb3BlcnR5VHlwZVNoYXBlLnN1YlByb3BlcnRpZXMgPSBQcm9wVHlwZXMuYXJyYXlPZihwcm9wZXJ0eVR5cGUpXG5cblxuZXhwb3J0IGNvbnN0IHZlcnNpb25zVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGFkbWluOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhcHA6IFByb3BUeXBlcy5zdHJpbmcsXG59KVxuXG5leHBvcnQgY29uc3Qgc2ltcGxpZmllZFByb3BlcnR5VHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGlzSWQ6IFByb3BUeXBlcy5ib29sLFxuICBpc1NvcnRhYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNUaXRsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGlzVmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGxhYmVsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZCxcbiAgbmFtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWQsXG4gIHBvc2l0aW9uOiBQcm9wVHlwZXMubnVtYmVyLFxuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhdmFpbGFibGVWYWx1ZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH0pKSxcbiAgcmVmZXJlbmNlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nXSksXG59KVxuXG5leHBvcnQgY29uc3QgYWN0aW9uVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGFjdGlvblR5cGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIF0pLmlzUmVxdWlyZWQsXG4gIGljb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc2hvd0ZpbHRlcjogUHJvcFR5cGVzLmJvb2wsXG59KVxuXG5leHBvcnQgY29uc3QgcmVzb3VyY2VQYXJlbnRUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBpY29uOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59KVxuXG5leHBvcnQgY29uc3QgcmVzb3VyY2VUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgZWRpdFByb3BlcnRpZXM6IFByb3BUeXBlcy5hcnJheU9mKHByb3BlcnR5VHlwZSkuaXNSZXF1aXJlZCxcbiAgZmlsdGVyUHJvcGVydGllczogUHJvcFR5cGVzLmFycmF5T2YocHJvcGVydHlUeXBlKS5pc1JlcXVpcmVkLFxuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGxpc3RQcm9wZXJ0aWVzOiBQcm9wVHlwZXMuYXJyYXlPZihwcm9wZXJ0eVR5cGUpLmlzUmVxdWlyZWQsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcGFyZW50OiByZXNvdXJjZVBhcmVudFR5cGUuaXNSZXF1aXJlZCxcbiAgcmVzb3VyY2VBY3Rpb25zOiBQcm9wVHlwZXMuYXJyYXlPZihhY3Rpb25UeXBlKS5pc1JlcXVpcmVkLFxuICBzaG93UHJvcGVydGllczogUHJvcFR5cGVzLmFycmF5T2YocHJvcGVydHlUeXBlKS5pc1JlcXVpcmVkLFxuICB0aXRsZVByb3BlcnR5OiBwcm9wZXJ0eVR5cGUuaXNSZXF1aXJlZCxcbn0pXG5cbmV4cG9ydCBjb25zdCByZXNvdXJjZVBhcmVudFdpdGhSZXNvdXJjZXNUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBpY29uOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHJlc291cmNlczogUHJvcFR5cGVzLmFycmF5T2YocmVzb3VyY2VUeXBlKS5pc1JlcXVpcmVkLFxufSlcblxuZXhwb3J0IGNvbnN0IHJlY29yZFR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBwYXJhbXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgcG9wdWxhdGVkOiBQcm9wVHlwZXMub2JqZWN0LFxuICBlcnJvcnM6IFByb3BUeXBlcy5vYmplY3QsXG4gIGlkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIHRpdGxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIHJlY29yZEFjdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKGFjdGlvblR5cGUpLmlzUmVxdWlyZWQsXG59KVxuXG5leHBvcnQgY29uc3QgbG9jYXRpb25UeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgcGF0aG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn0pXG5cbmV4cG9ydCBjb25zdCBoaXN0b3J5VHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59KVxuXG5leHBvcnQgY29uc3QgbWF0Y2hUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgcGFyYW1zOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJlc291cmNlSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcmVjb3JkSWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgICBhY3Rpb25OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9KSxcbn0pXG5cbmV4cG9ydCBjb25zdCBjaGlsZHJlblR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgUHJvcFR5cGVzLmVsZW1lbnQsXG4gIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5lbGVtZW50LFxuICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5lbGVtZW50KSxcbiAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIFByb3BUeXBlcy5udW1iZXIsXG4gIF0pKSxcbiAgUHJvcFR5cGVzLnN0cmluZyxcbiAgUHJvcFR5cGVzLm51bWJlcixcbl0pXG5cbmV4cG9ydCBjb25zdCBub3RpY2VUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgbWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcHJvZ3Jlc3M6IFByb3BUeXBlcy5udW1iZXIsXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ3N1Y2Nlc3MnLCAnZXJyb3InXSksXG59KVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5pbXBvcnQgQXBwIGZyb20gJy4vY29tcG9uZW50cy9hcHBsaWNhdGlvbidcbmltcG9ydCBQcm9wZXJ0eVR5cGVzIGZyb20gJy4vY29tcG9uZW50cy9wcm9wZXJ0eS10eXBlJ1xuaW1wb3J0IGNyZWF0ZVN0b3JlIGZyb20gJy4vc3RvcmUvc3RvcmUnXG5pbXBvcnQgVmlld0hlbHBlcnMgZnJvbSAnLi4vYmFja2VuZC91dGlscy92aWV3LWhlbHBlcnMnXG5pbXBvcnQgKiBhcyBDb21wb25lbnRzIGZyb20gJy4vY29tcG9uZW50cy91aSdcbmltcG9ydCAqIGFzIEFwcENvbXBvbmVudHMgZnJvbSAnLi9jb21wb25lbnRzL2FwcCdcbmltcG9ydCBBcGlDbGllbnQgZnJvbSAnLi91dGlscy9hcGktY2xpZW50J1xuaW1wb3J0ICogYXMgc3R5bGUgZnJvbSAnLi9zdHlsZXMvdmFyaWFibGVzJ1xuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi90eXBlcydcbmltcG9ydCB3aXRoTm90aWNlIGZyb20gJy4vc3RvcmUvd2l0aC1ub3RpY2UnXG5cbmNvbnN0IGVudiA9IHtcbiAgTk9ERV9FTlY6IHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8ICdkZXZlbG9wbWVudCcsXG59XG5cbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUod2luZG93LlJFRFVYX1NUQVRFKVxuY29uc3QgdGhlbWUgPSB3aW5kb3cuVEhFTUVcblxuY29uc3QgQXBwbGljYXRpb24gPSAoXG4gIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgIDxUaGVtZVByb3ZpZGVyIHRoZW1lPXt0aGVtZX0+XG4gICAgICA8QnJvd3NlclJvdXRlcj5cbiAgICAgICAgPEFwcCAvPlxuICAgICAgPC9Ccm93c2VyUm91dGVyPlxuICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgPC9Qcm92aWRlcj5cbilcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG53aW5kb3cucmVnZW5lcmF0b3JSdW50aW1lID0gcmVnZW5lcmF0b3JSdW50aW1lXG5leHBvcnQgZGVmYXVsdCB7XG4gIHdpdGhOb3RpY2UsXG4gIEFwcGxpY2F0aW9uLFxuICBWaWV3SGVscGVycyxcbiAgVXNlckNvbXBvbmVudHM6IHt9LFxuICBBcGlDbGllbnQsXG4gIHN0eWxlLFxuICBQcm9wZXJ0eVR5cGVzLFxuICBlbnYsXG4gIC4uLkNvbXBvbmVudHMsXG4gIC4uLkFwcENvbXBvbmVudHMsXG4gIHR5cGVzLFxuICAvLyBUT0RPOiBmb2xsb3dpbmcgaXMgYSBiYWNrd2FyZCBjb21wYXRpYmxlIC0gcmVtb3ZlIHRoaXMgaW4gdmVyc2lvbiAyLjBcbiAgQ29tcG9uZW50czogeyAuLi5Db21wb25lbnRzLCAuLi5BcHBDb21wb25lbnRzIH0sXG59XG4iXSwibmFtZXMiOlsidW5kZWZpbmVkIiwicmVxdWlyZSQkMCIsImdsb2JhbEFueSIsIndpbmRvdyIsImVycm9yIiwibWVzc2FnZSIsIlZpZXdIZWxwZXJzIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwib3B0cyIsImdldFBhdGhzIiwicm9vdFBhdGgiLCJSRURVWF9TVEFURSIsInBhdGhzIiwidXJsQnVpbGRlciIsImpvaW4iLCJsb2dpblVybCIsImxvZ2luUGF0aCIsImxvZ291dFVybCIsImxvZ291dFBhdGgiLCJsaXN0VXJsIiwicmVzb3VyY2VJZCIsImNvbnNvbGUiLCJ3YXJuIiwicmVzb3VyY2VBY3Rpb25VcmwiLCJhY3Rpb25OYW1lIiwiZGFzaGJvYXJkVXJsIiwicGFnZVVybCIsInBhZ2VOYW1lIiwicmVjb3JkQWN0aW9uVXJsIiwicmVjb3JkSWQiLCJidWxrQWN0aW9uVXJsIiwicmVjb3JkSWRzIiwidXJsIiwibGVuZ3RoIiwicXVlcnkiLCJVUkxTZWFyY2hQYXJhbXMiLCJhcHBlbmQiLCJ0b1N0cmluZyIsImFzc2V0UGF0aCIsImFzc2V0IiwiTG9nb0xpbmsiLCJzdHlsZWQiLCJMaW5rIiwidGhlbWUiLCJjb2xvcnMiLCJkZWZhdWx0VGV4dCIsIkxvZ29JbWFnZSIsImltZyIsInNpemVzIiwicGFkZGluZyIsIlNpZGViYXJCcmFuZGluZyIsInByb3BzIiwiYnJhbmRpbmciLCJsb2dvIiwiY29tcGFueU5hbWUiLCJoIiwiUmVhY3QiLCJTaWRlYmFyTGluayIsIk5hdkxpbmsiLCJsaWdodFRleHQiLCJwYWRkaW5nTWluIiwicHJpbWFyeSIsIlNpZGViYXJSZXNvdXJjZSIsInJlc291cmNlIiwiaXNBY3RpdmUiLCJtYXRjaCIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJpZCIsImhyZWYiLCJuYW1lIiwid2l0aFJvdXRlciIsIlNpZGViYXJHcm91cFRpdGxlIiwic3BhbiIsImxpZ2h0QmNrIiwicGFkZGluZ0xheW91dCIsIlJlc291cmNlc0xpc3QiLCJ1bCIsIlNpZGViYXJQYXJlbnQiLCJQdXJlQ29tcG9uZW50IiwicmVuZGVyIiwicGFyZW50IiwiaWNvbiIsInJlc291cmNlcyIsIm1hcCIsIlN0eWxlZEZvb3RlciIsInAiLCJmb250cyIsIm1pbiIsImxvdmUiLCJTaWRlYmFyRm9vdGVyIiwiaGlkZGVuIiwiU2lkZWJhckxhYmVsIiwiaDIiLCJTaWRlYmFyU2VjdGlvbiIsInNlY3Rpb24iLCJzaWRlYmFyV2lkdGgiLCJQYWdlc0xpc3RXcmFwcGVyIiwiZGl2IiwiU2lkZWJhclBhZ2VzIiwicGFnZXMiLCJwYWdlIiwibGFiZWwiLCJ2aXNpYmxlUmVzb3VyY2VzIiwiZmlsdGVyIiwicmVzIiwicmVzb3VyY2VBY3Rpb25zIiwiZmluZCIsImEiLCJyZWR1Y2UiLCJtZW1vIiwicHVzaCIsIk9iamVjdCIsImtleXMiLCJwYXJlbnROYW1lIiwiU3R5bGVkSGFtYnVyZ2VyIiwiSGFtYnVyZ2VyIiwiU2lkZWJhcldyYXBwZXIiLCJhc2lkZSIsImJjayIsImJvcmRlciIsIlNpZGViYXIiLCJzZXRIaWRkZW4iLCJ1c2VTdGF0ZSIsImZsZXhHcm93IiwiZ3JvdXBSZXNvdXJjZXMiLCJzb2Z0d2FyZUJyb3RoZXJzIiwibWFwU3RhdGVUb1Byb3BzIiwic3RhdGUiLCJjb25uZWN0IiwiVXNlckJveCIsImF0dHJzIiwiY2xhc3NOYW1lIiwiRHJvcGRvd24iLCJMb2dnZWRJbkJveCIsInN1cGVyTGlnaHRCYWNrIiwiRHJvcGRvd25MaW5rIiwiTG9nZ2VkSW4iLCJzZXNzaW9uIiwiZW1haWwiLCJMYWJlbCIsIlZlcnNpb25XcmFwcGVyIiwiVmVyc2lvbkJsb2NrIiwiVmVyc2lvbiIsInZlcnNpb25zIiwiYWRtaW4iLCJhcHAiLCJOYXZiYXIiLCJuYXYiLCJuYXZiYXJIZWlnaHQiLCJUb3BCYXIiLCJTdHlsZWRDb2x1bW4iLCJ3aWR0aCIsIm9mZnNldCIsIkNvbHVtbiIsIlN0eWxlZENvbHVtbnMiLCJDb2x1bW5zIiwiV3JhcHBlciIsInN1cGVyRGFya0JjayIsIkRhc2hib2FyZEhlYWRlciIsImNoaWxkcmVuIiwiRHJvcGRvd25UcmlnZ2VyIiwiRHJvcGRvd25NZW51IiwiU3R5bGVkV3JhcHBlckJveCIsIldyYXBwZXJCb3giLCJTcGlubmVyIiwiTG9hZGVyIiwidGV4dEFsaWduIiwic3R5bGVzIiwiY3NzIiwibWVkaXVtIiwicHJpbWFyeUhvdmVyIiwiYmFzZSIsIlN0eWxlZEJ1dHRvbiIsIlN0eWxlZExpbmsiLCJQYWdpbmF0aW9uV3JhcHBlciIsIlBhZ2luYXRlIiwibGlua1RvUGFnZSIsInNlYXJjaCIsInNldCIsInRvdGFsIiwicGVyUGFnZSIsImN1cnJlbnRQYWdlIiwicGFnaW5hdGUiLCJKV1BhZ2luYXRlIiwiaXNGaXJzdFBhZ2UiLCJzdGFydFBhZ2UiLCJpc0xhc3RQYWdlIiwiZW5kUGFnZSIsInByZXZQYWdlIiwibmV4dFBhZ2UiLCJ0b3RhbFBhZ2VzIiwiU3R5bGVkUGxhY2Vob2xkZXIiLCJQbGFjZWhvbGRlciIsIlByb3BlcnR5IiwiUHJvcGVydHlJbkVkaXQiLCJwcm9wZXJ0eSIsImJvcmRlck9uRGFyayIsIlByb3BlcnR5SW5GaWx0ZXIiLCJQcm9wZXJ0eUluU2hvdyIsImRlZmF1bHRQcm9wcyIsIlN0eWxlZFNlY3Rpb24iLCJUYWJsZSIsInRhYmxlIiwiT3ZlcmxheUxpbmsiLCJMZXZlbCIsImNvbG9yIiwiVmFsdWVCbG9jayIsInZhbHVlIiwicG9zaXRpb24iLCJTdHlsZWRJbnB1dCIsImlucHV0IiwiaW5wdXRCY2siLCJib3JkZXJIb3ZlciIsIkVycm9yTWVzc2FnZUJveCIsInRpdGxlIiwidGVzdElkIiwiTm9SZXNvdXJjZUVycm9yIiwiTm9BY3Rpb25FcnJvciIsIk5vUmVjb3JkRXJyb3IiLCJEYXNoYm9hcmRXcmFwcGVyIiwiSW5mb0JveCIsIlNvZnR3YXJlQnJvdGhlcnMiLCJEYXNoYm9hcmQiLCJFcnJvckJvdW5kYXJ5IiwiQ29tcG9uZW50IiwiY29tcG9uZW50RGlkQ2F0Y2giLCJzZXRTdGF0ZSIsImFkZE5vdGljZSIsImRhdGEiLCJ0eXBlIiwiTWF0aCIsInJhbmRvbSIsInN1YnN0ciIsInByb2dyZXNzIiwic2V0Tm90aWNlUHJvZ3Jlc3MiLCJub3RpY2VJZCIsImRyb3BOb3RpY2UiLCJyZXNvdXJjZXNSZWR1Y2VyIiwiYWN0aW9uIiwicGFnZXNSZWR1Y2VyIiwiYnJhbmRpbmdSZWR1Y2VyIiwicGF0aHNSZWR1Y2VyIiwiREVGQVVMVF9QQVRIUyIsImRhc2hib2FyZFJlZHVjZXIiLCJzZXNzaW9uUmVkdWNlciIsInZlcnNpb25zUmVkdWNlciIsIm5vdGljZXNSZWR1Y2VyIiwibm90aWNlcyIsIm5vdGljZSIsInJlZHVjZXIiLCJjb21iaW5lUmVkdWNlcnMiLCJkYXNoYm9hcmQiLCJpbml0aWFsU3RhdGUiLCJjcmVhdGVTdG9yZSIsIlRJTUVfVE9fRElTQVBQRUFSIiwiTm90aWNlV3JhcHBlciIsImxpZ2h0U3VjY2VzcyIsInN1Y2Nlc3MiLCJsaWdodEVycm9yIiwiTm90aWNlRWxlbWVudCIsInRpbWVyIiwiY29tcG9uZW50RGlkTW91bnQiLCJkcm9wIiwibm90aWZ5UHJvZ3Jlc3MiLCJzZXRJbnRlcnZhbCIsInNldFRpbWVvdXQiLCJjbGVhckludGVydmFsIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJOb3RpY2VCb3giLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJkaXNwYXRjaCIsImlzQ2xpZW50IiwiY29tcG9uZW50IiwiQWRtaW5Ccm8iLCJVc2VyQ29tcG9uZW50cyIsIkRlZmF1bHREYXNoYm9hcmQiLCJCcmVhZGNydW1ic0NvbnRhaW5lciIsIkJyZWFkY3J1bWJMaW5rIiwiQnJlYWRjcnVtYnMiLCJyZW5kZXJSZXNvdXJjZSIsInJlY29yZCIsInJlbmRlckFjdGlvbiIsInJlY29yZEFjdGlvbnMiLCJjaGVja1Jlc3BvbnNlIiwicmVzcG9uc2UiLCJvcmlnaW4iLCJyZXF1ZXN0IiwicmVzcG9uc2VVUkwiLCJhbGVydCIsImFzc2lnbiIsIkFwaUNsaWVudCIsImJhc2VVUkwiLCJnZXRCYXNlVXJsIiwiY2xpZW50IiwiYXhpb3MiLCJjcmVhdGUiLCJzZWFyY2hSZWNvcmRzIiwicSIsImVuY29kZVVSSUNvbXBvbmVudCIsImdldCIsInJlY29yZHMiLCJyZXNvdXJjZUFjdGlvbiIsImF4aW9zUGFyYW1zIiwibWV0aG9kIiwicmVjb3JkQWN0aW9uIiwiYnVsa0FjdGlvbiIsInBhcmFtcyIsImdldERhc2hib2FyZCIsImdldFBhZ2UiLCJ3aXRoTm90aWNlIiwiQWN0aW9uQnV0dG9uIiwiaGFuZGxlQ2xpY2siLCJiaW5kIiwiYWN0aW9uVHlwZSIsIkVycm9yIiwiY2FsbEFwaSIsImhpc3RvcnkiLCJhY3Rpb25QZXJmb3JtZWQiLCJhcGkiLCJwcm9taXNlIiwidGhlbiIsInJlZGlyZWN0VXJsIiwiY2F0Y2giLCJldmVudCIsImd1YXJkIiwiY29uZmlybSIsInByZXZlbnREZWZhdWx0IiwiSGVhZGVyV3JhcHBlciIsIlRhZyIsIkJhY2tCdG4iLCJIZWFkZXJUaXRsZSIsImgxIiwiaGVhZGVyIiwiSGVhZGVyQnV0dG9ucyIsIkFjdGlvbkhlYWRlciIsInRvZ2dsZUZpbHRlciIsInRhZyIsImFjdGlvbnMiLCJyYSIsImluY2x1ZGVzIiwiaXNMaXN0IiwiaGVhZGVyQWN0aW9uIiwiY29udmVydFBhcmFtc1RvQXJyYXlJdGVtcyIsInRlbXBOYW1lIiwicmVnZXgiLCJSZWdFeHAiLCJrZXkiLCJvYmoiLCJyZXBsYWNlIiwidW5mbGF0dGVuIiwiZmxhdCIsInVwZGF0ZVBhcmFtc0FycmF5IiwicHJvcGVydHlQYXRoIiwiYXJyYXkiLCJmaWx0ZXJlZFBhcmFtcyIsImVudHJpZXMiLCJmbGF0dGVuIiwibm9ybWFsaXplUGFyYW1zIiwib3ZlcndyaXRlIiwiRWRpdCIsImFkZE5ldyIsIm9uQ2hhbmdlIiwiaXRlbXMiLCJuZXdSZWNvcmQiLCJzdWJQcm9wZXJ0aWVzIiwicmVtb3ZlSXRlbSIsImkiLCJuZXdJdGVtcyIsInNwbGljZSIsInJlbmRlckl0ZW0iLCJpdGVtIiwiSXRlbUNvbXBvbmVudCIsImlzQXJyYXkiLCJtYXJnaW5Ub3AiLCJyZW5kZXJJbnB1dCIsImVycm9ycyIsIkxpc3QiLCJzaG93QWN0aW9uIiwidmFsdWVzIiwidGl0bGVQcm9wZXJ0eSIsIlNob3ciLCJzdWJQcm9wZXJ0eSIsInJlbmRlckl0ZW1zIiwiZGlzcGxheSIsImF2YWlsYWJsZVZhbHVlcyIsInVuaXRsZXNzIiwiU3R5bGlzIiwiaGFzaFN0cmluZyIsInRoaXMiLCJnbG9iYWwiLCJub3ciLCJfcmVhY3QiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInBvbHlmaWxsIiwiUHJvcFR5cGVzIiwicmVxdWlyZSQkMSIsInJlcXVpcmUkJDIiLCJfUHJvcFR5cGVzIiwiX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCIsInJlcXVpcmUkJDMiLCJyZXF1aXJlJCQ0IiwicmVtb3ZlQ2xhc3MiLCJfQ2hpbGRNYXBwaW5nIiwiX3JlYWN0RG9tIiwicmFmIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJUcmFuc2l0aW9uIiwiVHJhbnNpdGlvbkdyb3VwIiwiUGxhY2Vob2xkZXIkMSIsInNlbGVjdFN0eWxlcyIsImNvbnRyb2wiLCJwcm92aWRlZCIsImlzRm9jdXNlZCIsImJvcmRlclJhZGl1cyIsImJhY2tncm91bmQiLCJtZW51IiwiYm9yZGVyQ29sb3IiLCJzaW5nbGVWYWx1ZSIsIm9wdGlvbiIsImlzU2VsZWN0ZWQiLCJmaWx0ZXJTdHlsZXMiLCJmaWx0ZXJEZWZhdWx0VGV4dCIsImZpbHRlckxpZ2h0VGV4dCIsImRhcmtCY2siLCJ6SW5kZXgiLCJoYW5kbGVJbnB1dENoYW5nZSIsImhhbmRsZVNlbGVjdENoYW5nZSIsInRhcmdldCIsInNlbGVjdGVkIiwiYXYiLCJTZWxlY3QiLCJpc0Rpc2FibGVkIiwid2l0aFRoZW1lIiwiRmlsdGVyIiwiZmlsdGVyS2V5IiwiaGFuZGxlQ2hhbmdlIiwiY2hlY2tlZCIsIm1hcFZhbHVlIiwibyIsImRhdGVwaWNrZXJSZWYiLCJjcmVhdGVSZWYiLCJzZXR1cERhdGVQaWNrZXIiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJuZXh0UHJvcHMiLCJuZXh0UmVjb3JkIiwibmV4dFZhbHVlIiwiY3VycmVudCIsIl9mbGF0cGlja3IiLCJqdW1wVG9EYXRlIiwicHJldkVycm9yIiwibmV3RXJyb3IiLCJkZWZhdWx0RGF0ZSIsImZvcm1hdCIsImVuYWJsZVRpbWUiLCJ0aW1lXzI0aHIiLCJpbnN0IiwiZmxhdHBpY2tyIiwiY29uZmlnIiwiZGF0ZXMiLCJ0ZXh0IiwiZGF0ZSIsIkRhdGUiLCJ0b0xvY2FsZVN0cmluZyIsIlBBUkFNX1NFUEFSQVRPUiIsIm5vcm1hbGl6ZUtleXMiLCJmaWx0ZXJzIiwiZGVsaW1pdGVyIiwibm9ybWFsaXplZCIsInBhdGgiLCJwb3B1bGF0ZSIsImluZGV4IiwicmVmZXJlbmNlUmVzb3VyY2UiLCJkZWNvcmF0ZSIsImdldFByb3BlcnR5QnlLZXkiLCJyZWZlcmVuY2UiLCJwb3B1bGF0ZWQiLCJmaW5kT25lIiwiY2FsbGJhY2siLCJpbml0aWFsIiwiaXNWaXNpYmxlIiwiQmFja2VuZEZpbHRlciIsInBpY2tlclJlZiIsImZyb20iLCJ0byIsImZyb21LZXkiLCJ0b0tleSIsIm5leHRGaWx0ZXIiLCJmaWVsZEtleSIsInRvSVNPU3RyaW5nIiwicmVuZGVyRmlsdGVyIiwid2hlcmUiLCJ0b0xvd2VyQ2FzZSIsInRvb2xiYXJPcHRpb25zIiwibGlzdCIsInNjcmlwdCIsImluZGVudCIsImRpcmVjdGlvbiIsInNpemUiLCJmb250IiwiYWxpZ24iLCJ3eXNpd2lnUmVmIiwic2V0dXBXeXNpd2lnIiwib2xkRXJyb3IiLCJjb21wb25lbnREaWRVcGRhdGUiLCJpbm5lckhUTUwiLCJxdWlsbCIsInRoaXNOb2RlIiwidG9vbGJhcnMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicmVtb3ZlIiwiUXVpbGwiLCJtb2R1bGVzIiwidG9vbGJhciIsIm9uIiwiaGVpZ2h0IiwiY29udGVudFJlZiIsIm9yaWdpbmFsIiwic3Vic3RyaW5nIiwiX3V0aWxzIiwiX2Vtb3Rpb24iLCJfZGlhY3JpdGljcyIsIl9jb25zdGFudHMiLCJfaW5kaWNhdG9ycyIsInJlcXVpcmUkJDUiLCJyZXF1aXJlJCQ2IiwicmVxdWlyZSQkNyIsIl9jb250YWluZXJzIiwiX0NvbnRyb2wiLCJfR3JvdXAiLCJfSW5wdXQiLCJfTWVudSIsIl9NdWx0aVZhbHVlIiwiX09wdGlvbiIsIl9QbGFjZWhvbGRlciIsIl9TaW5nbGVWYWx1ZSIsIl9maWx0ZXJzIiwiX2J1aWx0aW5zIiwiX2luZGV4MyIsIl9zdHlsZXMiLCJfaW5kZXgyIiwiX3RoZW1lIiwiX2luZGV4IiwibG9hZE9wdGlvbnMiLCJpbnB1dFZhbHVlIiwic2VsZWN0ZWRPcHRpb24iLCJSZWZlcmVuY2VWYWx1ZSIsInJlZklkIiwiciIsInNwbGl0IiwibGluZSIsInR5cGVzIiwidGV4dGFyZWEiLCJib29sZWFuIiwiZGF0ZXRpbWUiLCJyaWNodGV4dCIsIkJhc2VQcm9wZXJ0eUNvbXBvbmVudCIsImRlZmF1bHRUeXBlIiwiY29tcG9uZW50cyIsIkFycmF5IiwiQXJyYXlUeXBlIiwiTWl4ZWQiLCJNaXhlZFR5cGUiLCJjYW1lbGl6ZVByb3BlcnR5VHlwZSIsImVkaXQiLCJzaG93IiwiRGVmYXVsdFR5cGUiLCJCb29sZWFuIiwiRGF0ZVRpbWUiLCJSaWNoVGV4dCIsIlJlZmVyZW5jZSIsIlRleHRBcmVhIiwiUHJvcGVydHlQbGFjZSIsInJlY29yZFRvRm9ybURhdGEiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwibm9ybWFsaXplZFBhcmFtcyIsImZvckVhY2giLCJGaWxlIiwiTmV3IiwibG9hZGluZyIsInByb3BlcnR5T3JSZWNvcmQiLCJoYW5kbGVTdWJtaXQiLCJoZWFkZXJzIiwicHJvcGVydGllcyIsImVkaXRQcm9wZXJ0aWVzIiwiUHJvcGVydHlUeXBlIiwic2hvd1Byb3BlcnRpZXMiLCJUZCIsInRkIiwiUmVjb3JkSW5MaXN0IiwiaXNMb2FkaW5nIiwib25TZWxlY3QiLCJidWxrQWN0aW9ucyIsImxpc3RQcm9wZXJ0aWVzIiwiU29ydExpbmsiLCJzb3J0QnkiLCJvcHBvc2l0ZURpcmVjdGlvbiIsInNvcnRlZEJ5Q2xhc3MiLCJUaCIsInRoIiwiUHJvcGVydHlIZWFkZXIiLCJpc01haW4iLCJpc1NvcnRhYmxlIiwiUmVjb3Jkc1RhYmxlSGVhZGVyIiwib25TZWxlY3RBbGwiLCJzZWxlY3RlZEFsbCIsIm1hcmdpbkxlZnQiLCJOb1JlY29yZHMiLCJjYW5DcmVhdGUiLCJuZXdBY3Rpb24iLCJnZXRCdWxrQWN0aW9uc0Zyb21SZWNvcmRzIiwiYWN0aW9uc01lbW8iLCJTZWxlY3RlZFJlY29yZHNXcmFwcGVyIiwiSW5saW5lTGFiZWwiLCJTZWxlY3RlZFJlY29yZHMiLCJzZWxlY3RlZFJlY29yZHMiLCJSZWNvcmRzVGFibGVXcmFwcGVyIiwiUmVjb3Jkc1RhYmxlIiwiaGFuZGxlQWN0aW9uUGVyZm9ybWVkIiwiaGFuZGxlU2VsZWN0IiwiaGFuZGxlU2VsZWN0QWxsIiwiX2ZldGNoRGF0YSIsIm5ld1Byb3BzIiwic2V0VGFnIiwib2xkUmVzb3VyY2UiLCJsaXN0QWN0aW9uUmVzcG9uc2UiLCJtZXRhIiwic2VsZWN0ZWRJbmRleCIsImZpbmRJbmRleCIsIm5ld1NlbGVjdGVkUmVjb3JkcyIsIm1pc3NpbmciLCJCdWxrRGVsZXRlIiwic2V0TG9hZGluZyIsIkJhc2VBY3Rpb25Db21wb25lbnQiLCJkb2N1bWVudGF0aW9uTGluayIsIkRPQ1MiLCJBY3Rpb24iLCJzaG91bGRBY3Rpb25SZUZldGNoRGF0YSIsImN1cnJlbnRNYXRjaFBhcmFtcyIsIm5ld01hdGNoUGFyYW1zIiwibmV3UmVzb3VyY2VJZCIsIm5ld1JlY29yZElkIiwibmV3QWN0aW9uTmFtZSIsIkNvbnRhaW5lclJlY29yZCIsIlJlY29yZEFjdGlvbiIsImZldGNoUmVjb3JkIiwiZ2V0UmVzb3VyY2VBbmRBY3Rpb24iLCJuYW1lVG9DaGVjayIsIkZpbHRlcldyYXBwZXIiLCJGaWx0ZXJMaW5rIiwiRmlsdGVyQ29udGVudCIsInJlc2V0RmlsdGVyIiwicGFyc2VRdWVyeSIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJlbnRyeSIsImRlbGV0ZSIsImZpbHRlcmVkU2VhcmNoIiwicHJvcGVydHlOYW1lIiwiZmlsdGVyUHJvcGVydGllcyIsInF1ZXJ5U3RyaW5nIiwiUmVzb3VyY2VBY3Rpb24iLCJmaWx0ZXJWaXNpYmxlIiwic2V0RmlsZXJWaXNpYmxlIiwicXVlcnlIYXNGaWx0ZXIiLCJzaG93RmlsdGVyIiwiQmFzZUFjdGlvbiIsIk5PX1JFQ09SRFNfRVJST1IiLCJCdWxrQWN0aW9uIiwiZmV0Y2hSZWNvcmRzIiwidGFnTmFtZSIsInJlY29yZElkc1N0cmluZyIsIlBhZ2UiLCJHbG9iYWxTdHlsZSIsImNyZWF0ZUdsb2JhbFN0eWxlIiwiQXBwbGljYXRpb25XcmFwcGVyIiwiQ29yZSIsImlubmVyQmNrIiwiQXBwIiwiU3dpdGNoIiwiUm91dGUiLCJVcGxvYWRJbnB1dCIsIlZhbGlkYXRpb25JbmZvcm1hdGlvbiIsIkRyb3BNZXNzYWdlIiwidmFsaWRhdGVDb250ZW50VHlwZSIsIm1pbWVUeXBlcyIsIm1pbWVUeXBlIiwidmFsaWRhdGVTaXplIiwibWF4U2l6ZSIsImluS2IiLCJyb3VuZCIsIkRyb3BBcmVhIiwiZmlsZU9iamVjdCIsIm9uVXBsb2FkIiwidmFsaWRhdGUiLCJpc0RyYWdnaW5nIiwic2V0SXNEcmFnZ2luZyIsIm9uRHJhZ0VudGVyIiwib25EcmFnTGVhdmUiLCJvbkRyYWdPdmVyIiwib25Ecm9wIiwiZmlsZXMiLCJkYXRhVHJhbnNmZXIiLCJmaWxlIiwic3VjY2Vzc0JvcmRlciIsIndhcm5pbmciLCJzaWRlYmFyTW9iaWxlV2lkdGgiLCJicmVha3BvaW50cyIsIm1pbk1vYmlsZVdpZHRoIiwibWluVGFibGV0V2lkdGgiLCJtaW5EZXNrdG9wV2lkdGgiLCJtaW5XaWRlc2NyZWVuV2lkdGgiLCJtaW5GdWxsSERXaWR0aCIsInBhdGhzVHlwZSIsInNoYXBlIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsInNlc3Npb25UeXBlIiwiYnJhbmRpbmdUeXBlIiwiYm9vbCIsInByb3BlcnR5VHlwZVNoYXBlIiwiaXNJZCIsImlzVGl0bGUiLCJvbmVPZlR5cGUiLCJudW1iZXIiLCJhcnJheU9mIiwicHJvcGVydHlUeXBlIiwidmVyc2lvbnNUeXBlIiwic2ltcGxpZmllZFByb3BlcnR5VHlwZSIsInJlc291cmNlUGFyZW50VHlwZSIsInJlc291cmNlVHlwZSIsInJlc291cmNlUGFyZW50V2l0aFJlc291cmNlc1R5cGUiLCJyZWNvcmRUeXBlIiwib2JqZWN0IiwibG9jYXRpb25UeXBlIiwiaGlzdG9yeVR5cGUiLCJmdW5jIiwibWF0Y2hUeXBlIiwiY2hpbGRyZW5UeXBlIiwiZWxlbWVudCIsIm5vdGljZVR5cGUiLCJvbmVPZiIsImVudiIsIk5PREVfRU5WIiwic3RvcmUiLCJUSEVNRSIsIkFwcGxpY2F0aW9uIiwiUHJvdmlkZXIiLCJUaGVtZVByb3ZpZGVyIiwiQnJvd3NlclJvdXRlciIsInJlZ2VuZXJhdG9yUnVudGltZSIsInN0eWxlIiwiUHJvcGVydHlUeXBlcyIsIkNvbXBvbmVudHMiLCJBcHBDb21wb25lbnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQUFBOzs7Ozs7O0NBT0EsSUFBSSxPQUFPLElBQUksVUFBVSxPQUFPLEVBQUU7O0dBR2hDLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7R0FDMUIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQztHQUMvQixJQUFJQSxXQUFTLENBQUM7R0FDZCxJQUFJLE9BQU8sR0FBRyxPQUFPLE1BQU0sS0FBSyxVQUFVLEdBQUcsTUFBTSxHQUFHLEVBQUUsQ0FBQztHQUN6RCxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLFlBQVksQ0FBQztHQUN0RCxJQUFJLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxhQUFhLElBQUksaUJBQWlCLENBQUM7R0FDckUsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsV0FBVyxJQUFJLGVBQWUsQ0FBQzs7R0FFL0QsU0FBUyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFOztLQUVqRCxJQUFJLGNBQWMsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsWUFBWSxTQUFTLEdBQUcsT0FBTyxHQUFHLFNBQVMsQ0FBQztLQUM3RixJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN4RCxJQUFJLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLENBQUM7Ozs7S0FJN0MsU0FBUyxDQUFDLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQyxPQUFPLEVB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QyxDQUFDLEtBQUssRUFBRSxJQUFJLFVBQVUsR0FBRyxNQUFNLEtBQUssRUFBRSxDQUFDLENBQUM7Q0FDN0UsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUNoQixFQUFFLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNoQyxDQUFDOztDQ2xDRCxTQUFTLFVBQVUsRUFBRSxDQUFDLEVBQUU7Q0FDeEIsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0NBQzVCLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHO0NBQ2xMLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDMUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFL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QUcsQ0FBQyxDQUFDO0NBQ2xDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNuQixZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDbEMsWUFBWSxNQUFNOztDQUVsQixVQUFVLEtBQUssR0FBRyxDQUFDO0NBQ25CLFVBQVUsS0FBSyxFQUFFO0NBQ2pCLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7Q0FDdEQsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFD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TUFBTSxLQUFLLEdBQUc7Q0FDZCxRQUFRLElBQUksQ0FBQyxHQUFHLFVBQVUsR0FBRyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDN08sS0FBSzs7Q0FFTCxJQUFJLE9BQU8sQ0FBQyxDQUFDO0NBQ2IsR0FBRzs7Q0FFSCxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7Q0FDbkIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztDQUMxQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztDQUM3QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztDQUN6QyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUN0RCxHQUFHOztDQUVILEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtDQUNwQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNwRSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0NBQ2xGLEdBQUc7O0NBRUgsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7Q0FDM0MsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO0NBQzFDLE1BQU0sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQzVELFFBQVEsS0FBSyxLQUFLLENBQUMsQ0FBQztDQUNwQixRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUM7Q0FDaEIsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQ2hCLFFBQVEsS0FBSyxJ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QUFHLEVBQUUsRUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxNQUFNLENBQUMsRUFBRTs7Q0FFNU4sU0FBUyxlQUFlLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLFlBQVksV0FBVyxDQUFDLEVBQUUsRUFBRSxNQUFNLElBQUksU0FBUyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsRUFBRSxFQUFFOztDQUV6SixTQUFTLDBCQUEwQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsTUFBTSxJQUFJLGNBQWMsQ0FBQywyREFBMkQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLElBQUksS0FBSyxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksT0FBTyxJQUFJLEtBQUssVUFBVSxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFOztDQUVoUCxTQUFTLFNBQVMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLEVBQUUsSUFBSSxPQUFPLFVBQVUsS0FBSyxVQUFVLElBQUksVUFBVSxLQUFLLElBQUksRUFBRSxFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsMERBQTBELEdBQUcsT0FBTyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVB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TSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLEVBQUUsRUFBRTs7Q0FFeGQsU0FBUyxRQUFRLEdBQUcsRUFBRSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxVQUFVLE1BQU0sRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsSUFBSSxNQUFNLEVBQUUsRUFBRSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsT0FBTyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFOztDQUU3VCxTQUFTLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLEVBQUUsUUFBUSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDLEVBQUU7O0NBRXZMLElBQUksUUFBUSxHQUFHLFNBQVMsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLEVB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LEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxNQUFNLENBQUMsRUFBRTs7Q0FFblQsU0FBUyxRQUFRLEdBQUcsRUFBRSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxVQUFVLE1BQU0sRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsSUFBSSxNQUFNLEVBQUUsRUFBRSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsT0FBTyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFOztDQUU3VCxTQUFTLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLEVBQUUsUUFBUSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFFBQVEs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QUU7O0NBRXhkLFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxJQUFJLE9BQU8sTUFBTSxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUUsRUFBRSxPQUFPLEdBQUcsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxHQUFHLFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sR0FBRyxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxHQUFHLENBQUMsV0FBVyxLQUFLLE1BQU0sSUFBSSxHQUFHLEtBQUssTUFBTSxDQUFDLFNBQVMsR0FBRyxRQUFRLEdBQUcsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFOztDQUUvVixTQUFTLFFBQVEsR0FBRyxFQUFFLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLFVBQVUsTUFBTSxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksR0FBRyxJQUFJLE1BQU0sRUFBRSxFQUFFLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUU7O0NBRTdULFNBQVMsYUFBYSxD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QUFDLE1BQU0sRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxNQUFNLENBQUMscUJBQXFCLEtBQUssVUFBVSxFQUFFLEVBQUUsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsRUFBRSxFQUFFLE9BQU8sTUFBTSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsRUFBRSxFQUFFLGVBQWUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxFQUFFOztDQUVqZSxTQUFTLGVBQWUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsRUFB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QUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sR0FBRyxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLEdBQUcsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUksR0FBRyxDQUFDLFdBQVcsS0FBSyxNQUFNLElBQUksR0FBRyxLQUFLLE1BQU0sQ0FBQyxTQUFTLEdBQUcsUUFBUSxHQUFHLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTs7Q0FFL1YsU0FBUyxRQUFRLEdBQUcsRUFBRSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxVQUFVLE1BQU0sRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsSUFBSSxNQUFNLEVBQUUsRUFBRSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsT0FBTyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFOztDQUU3VCxTQUFTLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLE1BQU0sR0FBRyw2QkFBNkIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLElBQUksZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sTUFBTSxDQUFDLEVBQUU7O0NBRTVlLFNBQVMsNkJBQTZCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLElBQUksTUFBTSxJQUFJLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxNQUFNLENBQUMsRUFB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ZSxDQUFDLENBQUMsRUFBRSxFQUFFLGVBQWUsR0FBRyxNQUFNLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEdBQUcsU0FBUyxlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTs7Q0FFN00sU0FBUyxTQUFTLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxFQUFFLElBQUksT0FBTyxVQUFVLEtBQUssVUFBVSxJQUFJLFVBQVUsS0FBSyxJQUFJLEVBQUUsRUFBRSxNQUFNLElBQUksU0FBUyxDQUFDLG9EQUFvRCxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLFNBQVMsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxVQUFVLEVBQUUsZUFBZSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFOztDQUVqWSxTQUFTLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsZUFBZSxHQUFHLE1BQU0sQ0FBQyxjQUFjLElBQUksU0FBUyxlQUFlLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxlQUFlLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7O0NBRTFLLFNBQVMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUUsRUFBRSxNQUFNLElBQUksY0FB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LEdBQUcsRUFBRSxDQUFDLEVBQUU7O0NBRS9GLFNBQVMsdUJBQXVCLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLE9BQU8sR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxFQUFFLEtBQUssSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLEVBQUUsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsd0JBQXdCLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLEVBQUUsRUFBRTs7Q0FFeGQsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUksT0FBTyxNQUFNLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRSxFQUFFLE9BQU8sR0FBRyxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEdBQUcsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFF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QUFDLENBQUMsQ0FBQyxFQUFFOztDQUU3TSxTQUFTLFNBQVMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLEVBQUUsSUFBSSxPQUFPLFVBQVUsS0FBSyxVQUFVLElBQUksVUFBVSxLQUFLLElBQUksRUFBRSxFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsb0RBQW9ELENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLFVBQVUsRUFBRSxlQUFlLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUU7O0NBRWpZLFNBQVMsZUFBZSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxlQUFlLEdBQUcsTUFBTSxDQUFDLGNBQWMsSUFBSSxTQUFTLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTs7Q0FFMUssU0FBUyxRQUFRLEdBQUcsRUFBRSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxVQUFVLE1BQU0sRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsSUFBSSxNQUFNLEVBQUUsRUFBRSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FB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LEdBQUcsR0FBRyxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7O0NBRS9GLFNBQVMsUUFBUSxHQUFHLEVBQUUsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksVUFBVSxNQUFNLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxHQUFHLElBQUksTUFBTSxFQUFFLEVBQUUsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLE9BQU8sTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRTs7Q0FFN1QsU0FBUyxhQUFhLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsS0FBSyxVQUFVLEVBQUUsRUFBRSxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxD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QUFJLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxPQUFPLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsRUFBRSxLQUFLLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxFQUFFLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxjQUFjLElBQUksTUFBTSxDQUFDLHdCQUF3QixHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxFQUFFLEVBQUU7O0NBRXhkLFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxJQUFJLE9BQU8sTUFBTSxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUUsRUFBRSxPQUFPLEdBQUcsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxHQUFHLFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sR0FBRyxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxHQUFHLENBQUMsV0FBVyxLQUFLLE1BQU0s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dEQsU0FBUyxzQkFBc0IsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFOztDQUUvRixTQUFTLFFBQVEsR0FBRyxFQUFFLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLFVBQVUsTUFBTSxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksR0FBRyxJQUFJLE1BQU0sRUFBRSxFQUFFLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUU7O0NBRTdULElBQUksR0FBRyxHQUFHLFNBQVMsR0FBRyxDQUFDLElBQUksRUFBRTtHQUMzQixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVTtPQUM1QixVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUs7T0FDdkIsT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPO09BQzVCLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0dBQy9CLE9BQU87S0FDTCxLQUFLLEVBQUUsYUFBYTtLQUNwQixLQUFLLEVBQUUsVUFBVSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVM7S0FDdkQsVUFBVSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEdBQUcsQ0FBQztLQUNo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RyxJQUFJLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxPQUFPLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsRUFBRSxLQUFLLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxFQUFFLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxjQUFjLElBQUksTUFBTSxDQUFDLHdCQUF3QixHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxFQUFFLEVBQUU7O0NBRXhkLFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxJQUFJLE9BQU8sTUFBTSxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUUsRUFBRSxPQUFPLEdBQUcsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxHQUFHLFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sR0FBRyxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxHQUFHLENBQUMsV0FBVyxLQUFLLE1B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LENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxFQUFFLEVBQUU7O0NBRXhkLFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxJQUFJLE9BQU8sTUFBTSxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUUsRUFBRSxPQUFPLEdBQUcsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxHQUFHLFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sR0FBRyxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxHQUFHLENBQUMsV0FBVyxLQUFLLE1BQU0sSUFBSSxHQUFHLEtBQUssTUFBTSxDQUFDLFNBQVMsR0FBRyxRQUFRLEdBQUcsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFOztDQUUvVixTQUFTLFFBQVEsR0FBRyxFQUFFLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLFVBQVUsTUFBTSxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksR0FBRyxJQUFJLE1BQU0sRUFBRSxFQUFFLElBQUks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QUUsRUFBRSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUUsT0FBTyxHQUFHLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLEVBQUUsS0FBSyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsRUFBRSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsY0FBYyxJQUFJLE1BQU0sQ0FBQyx3QkFBd0IsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxNQUFNLENBQUMsRUFBRSxFQUFFOztDQUV4ZCxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxPQUFPLE1BQU0sQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFLEVBQUUsT0FBTyxHQUFHLFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sR0FBRyxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLEdBQUcsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUksR0FBRyxDQUFDLFdBQVcsS0FBSyxNQUFNLElBQUksR0FBRyxLQUFLLE1BQU0sQ0FBQyxTQUFTLEdBQUcsUUFBUSxHQUFHLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTs7Q0FFL1YsU0FBUyxRQUFRLEdBQUcsRUFBRSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxVQUFVLE1BQU0sRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsSUFBSSxNQUFNLEVBQUUsRUFBRSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsT0FBTyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFOztDQUU3VCxTQUFTLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLE1BQU0sR0FBRyw2QkFBNkIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLElBQUksZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sTUFBTSxDQUFDLEVBQUU7O0NBRTVlLFNBQVMsNkJBQTZCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLElBQUksTUFBTSxJQUFJLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxNQUFNLENBQUMsRUFBRTs7Q0FFblQsU0FBUyxlQUFlLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLFlBQVksV0FBVyxDQUFDLEVBQUUsRUFBRSxNQUFNLElBQUksU0FBUyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsRUFBRSxFQUFFOztDQUV6SixTQUFTLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsSUFBSSxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksT0FBTyxJQUFJLFVBQVUsRUFBRSxVQUFVLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUMsRUFBRSxFQUFFOztDQUU3VCxTQUFTLFlBQVksQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxFQUFFLElBQUksVUFBVSxFQUFFLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLFdBQVcsQ0FBQyxFQUFFOztDQUV2TixTQUFTLDBCQUEwQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLElBQUksS0FBSyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sSUFBSSxLQUFLLFVBQVUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTs7Q0FFakwsU0FBUyxlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsZUFBZSxHQUFHLE1BQU0sQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLGNBQWMsR0FBRyxTQUFTLGVBQWUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFOztDQUU3TSxTQUFTLFNBQVMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLEVBQUUsSUFBSSxPQUFPLFVBQVUsS0FBSyxVQUFVLElBQUksVUFBVSxLQUFLLElBQUksRUFBRSxFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsb0RBQW9ELENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLFVBQVUsRUFBRSxlQUFlLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUU7O0NBRWpZLFNBQVMsZUFBZSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxlQUFlLEdBQUcsTUFBTSxDQUFDLGNBQWMsSUFBSSxTQUFTLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTs7Q0FFMUssU0FBUyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLE1BQU0sSUFBSSxjQUFjLENBQUMsMkRBQTJELENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRTs7Q0FFdEssU0FBUyxl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
