"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _polished = require("polished");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Icon = _styledComponents.default.svg.withConfig({
  displayName: "check-box__Icon",
  componentId: "v1kuj3-0"
})(["fill:none;stroke:white;stroke-width:2px;"]);

const CheckboxContainer = _styledComponents.default.span.withConfig({
  displayName: "check-box__CheckboxContainer",
  componentId: "v1kuj3-1"
})(["display:inline-block;vertical-align:middle;"]); // Hide checkbox visually but remain accessible to screen readers.
// Source: https://polished.js.org/docs/#hidevisually


const HiddenCheckbox = _styledComponents.default.input.attrs({
  type: 'checkbox'
}).withConfig({
  displayName: "check-box__HiddenCheckbox",
  componentId: "v1kuj3-2"
})(["border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px;"]);

const StyledCheckbox = _styledComponents.default.span.withConfig({
  displayName: "check-box__StyledCheckbox",
  componentId: "v1kuj3-3"
})(["display:inline-block;width:16px;border:1px solid ", ";height:16px;background:", ";transition:all 150ms;", ":focus + &{box-shadow:0 0 0 2px ", ";}", ":hover + &{border-color:", ";}", "{visibility:", ";}"], ({
  theme
}) => theme.colors.border, ({
  checked,
  theme
}) => checked ? theme.colors.primary : theme.colors.white, HiddenCheckbox, ({
  theme
}) => (0, _polished.lighten)(0.1, theme.colors.primary), HiddenCheckbox, ({
  theme
}) => theme.colors.borderHover, Icon, props => props.checked ? 'visible' : 'hidden');

const Checkbox = props => {
  const {
    className,
    checked,
    onChange,
    ...restProps
  } = props;
  return _react.default.createElement(CheckboxContainer, {
    className: className
  }, _react.default.createElement(HiddenCheckbox, _extends({
    checked: checked,
    onChange: onChange
  }, restProps)), _react.default.createElement(StyledCheckbox, {
    checked: checked,
    onClick: onChange
  }, _react.default.createElement(Icon, {
    viewBox: "0 0 24 24"
  }, _react.default.createElement("polyline", {
    points: "20 6 9 17 4 12"
  }))));
};

var _default = Checkbox;
exports.default = _default;