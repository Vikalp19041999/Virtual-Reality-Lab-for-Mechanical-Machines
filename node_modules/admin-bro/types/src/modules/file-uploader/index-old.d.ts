/**
 * @module file-uploader
 */
import PropertyOptions from '../../backend/decorators/property-options.interface';
import { Before, After } from '../../backend/actions/action.interface';
import { MappedFields } from './map-fields-helpers';
/**
 * @memberof module~file-uploader
 * @alias FileUploaderOptions
 */
export declare type FileUploaderOptions = {
    /**
     * Specify where data from the uploaded file should be stored. It maps data taken from the
     * [File](https://developer.mozilla.org/en-US/docs/Web/API/File) to database fields.
     *
     * For example when you define mapped fields like this:
     *
     * ```
     * mappedFields: {
     *   name: 'filename',
     *   type: 'mimeType',
     *   size: 'size',
     *   path: 'path',
     * }
     * ```
     *
     * it means that name of the fill will be stored into `name` propertym type of the file to
     * the `mimeType` property and so on.
     */
    mappedFields?: MappedFields;
    /**
     * Name of a virtual property which will appear as a drop area. Default to `file`.
     */
    propertyName?: string;
    /**
     * Folder where stored files should be uploaded. Default to `public/${propertyName}`
     */
    uploadDir?: string;
};
export declare type FileUploaderResult = {
    property: {
        [key: string]: PropertyOptions;
    };
    actionHooks: {
        edit: {
            before: Before;
            after: After;
        };
        new: {
            before: Before;
            after: After;
        };
        delete: {
            after: After;
        };
    };
};
/**
 * Adds the ability to upload files in admin-bro
 *
 * returns {FileUploaderResult}
 */
declare const fileUploader: (options?: FileUploaderOptions) => FileUploaderResult;
export default fileUploader;
